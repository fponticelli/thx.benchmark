<haxe>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/java/_std/Array.hx">
		<ofNative params="X" set="method" line="41" static="1">
			<f a="native">
				<c path="java.NativeArray"><c path="ofNative.X"/></c>
				<c path="Array"><c path="ofNative.X"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\treturn new Array<X>(_native);\n\t"]]></e></m></meta>
		</ofNative>
		<alloc params="Y" set="method" line="49" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="Array"><c path="alloc.Y"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\treturn new Array<Y>((Y[]) ((java.lang.Object)new java.lang.Object[size]));\n\t"]]></e></m></meta>
		</alloc>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<__a><c path="java.NativeArray"><c path="Array.T"/></c></__a>
		<concat public="1" set="method" line="60">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<concatNative set="method" line="71"><f a="a">
	<c path="java.NativeArray"><c path="Array.T"/></c>
	<x path="Void"/>
</f></concatNative>
		<join public="1" set="method" line="90">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method" line="109">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method" line="125">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method" line="141">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method" line="157">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method" line="173">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method" line="195">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<quicksort set="method" line="202"><f a="lo:hi:f">
	<x path="Int"/>
	<x path="Int"/>
	<f a=":">
		<c path="Array.T"/>
		<c path="Array.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></quicksort>
		<splice public="1" set="method" line="223">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<spliceVoid set="method" line="251"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></spliceVoid>
		<toString public="1" set="method" line="274">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method" line="293">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method" line="312">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method" line="346">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method" line="365">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="381">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method" line="396">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="405">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method" line="410">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method" line="417">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<__get set="method" line="425"><f a="idx">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__get>
		<__set set="method" line="434"><f a="idx:v">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__set>
		<__unsafe_get get="inline" set="null" line="454"><f a="idx">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__unsafe_get>
		<__unsafe_set get="inline" set="null" line="459"><f a="idx:val">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__unsafe_set>
		<new public="1" set="method" line="54">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta>
			<m n=":classCode"><e>"\n\tpublic Array(T[] _native)\n\t{\n\t\tthis.__a = _native;\n\t\tthis.length = _native.length;\n\t}\n"</e></m>
			<m n=":final"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="_Array.ArrayIterator" params="T" file="/usr/local/lib/haxe/std/java/_std/Array.hx" private="1" module="Array">
		<arr><c path="Array"><c path="_Array.ArrayIterator.T"/></c></arr>
		<len><x path="Int"/></len>
		<i><x path="Int"/></i>
		<hasNext public="1" get="inline" set="null" line="479"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="480"><f a=""><c path="_Array.ArrayIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="472"><f a="a">
	<c path="Array"><c path="_Array.ArrayIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/local/lib/haxe/std/java/_std/Date.hx">
		<now public="1" set="method" line="92" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" line="99" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="106" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<date><c path="java.util.Date"/></date>
		<getTime public="1" get="inline" set="null" line="37">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of the date. It might
		only have a per-second precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" get="inline" set="null" line="42">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" get="inline" set="null" line="47">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" get="inline" set="null" line="52">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" get="inline" set="null" line="57">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" get="inline" set="null" line="67">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" get="inline" set="null" line="72">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range) where `0` is Sunday.</haxe_doc>
		</getDay>
		<toString public="1" set="method" line="77">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="30">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta>
			<m n=":SuppressWarnings"><e>"deprecation"</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="DateTools" params="" file="/usr/local/lib/haxe/std/DateTools.hx">
		<DAY_SHORT_NAMES expr="[&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]" line="36" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]</e></m></meta>
		</DAY_SHORT_NAMES>
		<DAY_NAMES expr="[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]" line="37" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</e></m></meta>
		</DAY_NAMES>
		<MONTH_SHORT_NAMES expr="[&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]" line="38" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</e></m></meta>
		</MONTH_SHORT_NAMES>
		<MONTH_NAMES expr="[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]" line="39" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</e></m></meta>
		</MONTH_NAMES>
		<__format_get set="method" line="41" static="1">
			<f a="d:e">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__format_get>
		<__format set="method" line="104" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="143" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.

		```haxe
		var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
		// 2016-07-08_14:44:05

		var t = DateTools.format(Date.now(), "%r");
		// 02:44:05 PM

		var t = DateTools.format(Date.now(), "%T");
		// 14:44:05

		var t = DateTools.format(Date.now(), "%F");
		// 2016-07-08
		```</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="159" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]" line="163" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="170" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="184" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="191" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="198" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="205" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="212" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="228" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="/usr/local/lib/haxe/std/java/_std/EReg.hx">
		<convert set="method" line="52" static="1"><f a="r">
	<c path="String"/>
	<c path="String"/>
</f></convert>
		<pattern><c path="String"/></pattern>
		<matcher><c path="java.util.regex.Matcher"/></matcher>
		<cur><c path="String"/></cur>
		<isGlobal><x path="Bool"/></isGlobal>
		<match public="1" set="method" line="80">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="86">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="94">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="99">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="104">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="109">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="115">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<start get="inline" set="null" line="139"><f a="group">
	<x path="Int"/>
	<x path="Int"/>
</f></start>
		<len get="inline" set="null" line="144"><f a="group">
	<x path="Int"/>
	<x path="Int"/>
</f></len>
		<replace public="1" set="method" line="149">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="156">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="31">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="/usr/local/lib/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="54">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="63">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="46">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/usr/local/lib/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="44" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="56" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="70" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new List by applying function `f` to all elements of `it`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="84" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<flatten public="1" params="A" set="method" line="97" static="1">
			<f a="it">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<c path="List"><c path="flatten.A"/></c>
			</f>
			<haxe_doc>Concatenate a list of lists.

		The order of elements is preserved.</haxe_doc>
		</flatten>
		<flatMap public="1" params="A:B" set="method" line="112" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="List"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc>A composition of map and flatten.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</flatMap>
		<has public="1" params="A" set="method" line="124" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="141" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="160" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="172" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="185" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a List containing those elements of `it` for which `f` returned
		true.

		If `it` is empty, the result is the empty List even if `f` is null.

		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="205" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="217" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="232" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="243" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="263" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<concat public="1" params="T" set="method" line="276" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new List containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
	</class>
	<class path="List" params="T" file="/usr/local/lib/haxe/std/List.hx">
		<h><c path="_List.ListNode"><c path="List.T"/></c></h>
		<q><c path="_List.ListNode"><c path="List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="52">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="67">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="89">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="99">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="113">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="160">
			<f a=""><c path="_List.ListIterator"><c path="List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="170">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="191">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="210">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="226">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="43">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
	</class>
	<class path="_List.ListNode" params="T" file="/usr/local/lib/haxe/std/List.hx" private="1" module="List">
		<create public="1" params="T" get="inline" set="null" line="259" static="1">
			<f a="item:next">
				<c path="create.T"/>
				<c path="_List.ListNode"><c path="create.T"/></c>
				<c path="_List.ListNode"><c path="create.T"/></c>
			</f>
			<meta><m n=":extern"/></meta>
		</create>
		<item public="1"><c path="_List.ListNode.T"/></item>
		<next public="1"><c path="_List.ListNode"><c path="_List.ListNode.T"/></c></next>
		<new public="1" set="method" line="255"><f a="item:next">
	<c path="_List.ListNode.T"/>
	<c path="_List.ListNode"><c path="_List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="_List.ListIterator" params="T" file="/usr/local/lib/haxe/std/List.hx" private="1" module="List">
		<head><c path="_List.ListNode"><c path="_List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="272"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="276"><f a=""><c path="_List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="268"><f a="head">
	<c path="_List.ListNode"><c path="_List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="Map" params="K:V" file="/usr/local/lib/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><t path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</t></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/Map.hx" private="1" module="Map">
	<_new public="1" set="method" static="1">
		<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
		<meta>
			<m n=":extern"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="73" static="1">
		<f a="this:key:value">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="90" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<t path="Null"><c path="Map.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="97" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="105" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="112" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="121" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<toString public="1" get="inline" set="null" line="130" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<arrayWrite public="1" get="inline" set="null" line="134" static="1">
		<f a="this:k:v">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<c path="Map.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="139" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</t>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="143" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</t>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="147" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</t>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="151" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</t>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="155" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="159" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="163" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="_Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/Map.hx" private="1" module="Map">
		<_new public="1" set="method" static="1">
			<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
			<meta>
				<m n=":extern"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="73" static="1">
			<f a="this:key:value">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="90" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<t path="Null"><c path="Map.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="97" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="105" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="112" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="121" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<toString public="1" get="inline" set="null" line="130" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<arrayWrite public="1" get="inline" set="null" line="134" static="1">
			<f a="this:k:v">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<c path="Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="139" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</t>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="143" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</t>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="147" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</t>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="151" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</t>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="155" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="159" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="163" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="IMap" params="K:V" file="/usr/local/lib/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/java/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with `NaN` on Windows,
		see <https://bugs.php.net/bug.php?id=42143>]]></haxe_doc>
		</NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<fround public="1" get="inline" set="null" line="45" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<ffloor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":native"><e>"java.lang.Math"</e></m>
		</meta>
	</class>
	<class path="Reflect" params="" file="/usr/local/lib/haxe/std/java/_std/Reflect.hx">
		<hasField public="1" set="method" line="30" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="39" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" set="method" line="48" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="57" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="68" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" line="79" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="85" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="98" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="103" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="109" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>java.internal.Closure</e></m></meta>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="122" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="127" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="131" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="136" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="145" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/java/_std/Std.hx">
		<is public="1" set="method" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="56" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="60" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="134" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tif (x == null) return null;\n\n\t\tint ret = 0;\n\t\tint base = 10;\n\t\tint i = 0;\n\t\tint len = x.length();\n\n\t\tif (x.startsWith(\"0\") && len > 2)\n\t\t{\n\t\t\tchar c = x.charAt(1);\n\t\t\tif (c == 'x' || c == 'X')\n\t\t\t{\n\t\t\t\ti = 2;\n\t\t\t\tbase = 16;\n\t\t\t}\n\t\t}\n\n\t\tboolean foundAny = i != 0;\n\t\tboolean isNeg = false;\n\t\tfor (; i < len; i++)\n\t\t{\n\t\t\tchar c = x.charAt(i);\n\t\t\tif (!foundAny)\n\t\t\t{\n\t\t\t\tswitch(c)\n\t\t\t\t{\n\t\t\t\t\tcase '-':\n\t\t\t\t\t\tisNeg = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tcase '+':\n\t\t\t\t\tcase '\\n':\n\t\t\t\t\tcase '\\t':\n\t\t\t\t\tcase '\\r':\n\t\t\t\t\tcase ' ':\n\t\t\t\t\t\tif (isNeg) return null;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (c >= '0' && c <= '9')\n\t\t\t{\n\t\t\t\tif (!foundAny && c == '0')\n\t\t\t\t{\n\t\t\t\t\tfoundAny = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tret *= base; foundAny = true;\n\n\t\t\t\tret += ((int) (c - '0'));\n\t\t\t} else if (base == 16) {\n\t\t\t\tif (c >= 'a' && c <= 'f') {\n\t\t\t\t\tret *= base; foundAny = true;\n\t\t\t\t\tret += ((int) (c - 'a')) + 10;\n\t\t\t\t} else if (c >= 'A' && c <= 'F') {\n\t\t\t\t\tret *= base; foundAny = true;\n\t\t\t\t\tret += ((int) (c - 'A')) + 10;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (foundAny)\n\t\t\treturn isNeg ? -ret : ret;\n\t\telse\n\t\t\treturn null;\n\t"]]></e></m></meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="138" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<instance public="1" params="T:S" get="inline" set="null" line="186" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as `String`, `Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<random public="1" set="method" line="190" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accept or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be `null` and others that
	can't.

	@see https://haxe.org/manual/types-nullability.html</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="java.lang.CharSequence" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/CharSequence.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.CharSequence"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"CharSequence"</e>
	</m>
</meta></class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/java/_std/String.hx" extern="1">
		<implements path="java.lang.CharSequence"/>
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<compareTo set="method"><f a="anotherString">
	<c path="String"/>
	<x path="Int"/>
</f></compareTo>
		<codePointAt set="method"><f a="idx">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointAt>
		<getBytes set="method">
			<f a="encoding">
				<c path="String"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<overloads><getBytes set="method"><f a=""><t path="haxe.io.BytesData"/></f></getBytes></overloads>
		</getBytes>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
			<overloads>
				<new public="1" set="method"><f a="b:offset:length:charsetName">
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="b:offset:length">
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.
	
	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="StringBuf" params="" file="/usr/local/lib/haxe/std/java/_std/StringBuf.hx">
		<b><c path="java.lang.StringBuilder"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="34"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" set="method" line="38">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addSub public="1" set="method" line="49">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<addChar public="1" set="method" line="54">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<toString public="1" set="method" line="58">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method" line="30">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="37" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<postProcessUrlEncode set="method" line="69" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></postProcessUrlEncode>
		<urlDecode public="1" set="method" line="107" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="153" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="172" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<startsWith public="1" get="inline" set="null" line="183" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" get="inline" set="null" line="211" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="245" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="262" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="287" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" get="inline" set="null" line="309" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="331" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="353" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="374" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s`. If `by` is also the empty String `""`, `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="396" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="438" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<isEof public="1" get="inline" set="null" line="465" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isEof>
		<quoteUnixArg public="1" set="method" line="488" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code, &quot;,&quot;.code, &quot;;&quot;.code]" line="506" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="521" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<_charAt get="inline" set="null" line="584" static="1">
			<f a="str:idx">
				<c path="String"/>
				<x path="Int"/>
				<x path="java.Char16"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</_charAt>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="Sys" params="" file="/usr/local/lib/haxe/std/java/_std/Sys.hx">
		<_args static="1"><c path="java.NativeArray"><c path="String"/></c></_args>
		<_env static="1"><c path="haxe.ds.StringMap"><c path="String"/></c></_env>
		<_sysName static="1"><c path="String"/></_sysName>
		<print public="1" get="inline" set="null" line="32" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output.</haxe_doc>
		</print>
		<println public="1" get="inline" set="null" line="37" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output, followed by a newline.</haxe_doc>
		</println>
		<args public="1" set="method" line="42" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed by the commandline.</haxe_doc>
		</args>
		<getEnv public="1" set="method" line="49" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" line="54" static="1">
			<f a="s:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the value of the given environment variable.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" line="60" static="1">
			<f a=""><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></f>
			<haxe_doc>Returns the whole environement variables.</haxe_doc>
		</environment>
		<sleep public="1" set="method" line="73" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspend the current execution for the given time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" line="81" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Change the current time locale, which will affect `DateTools.format` date formating.
		Returns true if the locale was successfully changed</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" line="86" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Get the current working directory (usually the one in which the program was started)</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" line="91" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the current working directory.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" line="97" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the name of the system you are running on. For instance :
			"Windows", "Linux", "BSD" and "Mac" depending on your desktop OS.</haxe_doc>
		</systemName>
		<command public="1" set="method" line="113" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Run the given command. The command output will be printed on the same output as the current process.
		The current process will block until the command terminates and it will return the command result (0 if there was no error).

		Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.

		 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Read the `sys.io.Process` api for a more complete way to start background processes.</haxe_doc>
		</command>
		<exit public="1" set="method" line="140" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exit the current process with the given error code.</haxe_doc>
		</exit>
		<time public="1" set="method" line="145" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" set="method" line="150" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value (in seconds) but only account for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<executablePath public="1" set="method" line="155" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"><e>"Use programPath instead"</e></m></meta>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<programPath public="1" set="method" line="160" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<getChar public="1" set="method" line="167" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read a single input character from the standard input (without blocking) and returns it. Setting `echo` to true will also display it on the output.</haxe_doc>
		</getChar>
		<stdin public="1" set="method" line="173" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the process standard input, from which you can read what user enters. Usually it will block until the user send a full input line. See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" line="179" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the process standard output on which you can write.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" line="184" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the process standard error on which you can write.</haxe_doc>
		</stderr>
		<haxe_doc>This class gives you access to many base functionalities of system platforms. Looks in `sys` sub packages for more system APIs.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="ValueType" params="" file="/usr/local/lib/haxe/std/java/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="java.NativeArray" params="T" file="/usr/local/lib/haxe/std/java/NativeArray.hx" extern="1">
		<make public="1" params="T" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><c path="make.T"/></x>
				<c path="java.NativeArray"><c path="make.T"/></c>
			</f>
			<haxe_doc>Creates a new array with the specified elements.

		Usage:
		```haxe
		var elements = NativeArray.make(1,2,3,4,5,6);
		```</haxe_doc>
		</make>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the array</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocates a new array with size `len`</haxe_doc>
		</new>
		<haxe_doc>Represents a java fixed-size Array (`T[]`)</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<enum path="java.internal.EmptyObject" params="" file="/usr/local/lib/haxe/std/java/internal/Runtime.hx" module="java.internal.Runtime">
		<EMPTY/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.EmptyObject"</e></m>
		</meta>
	</enum>
	<class path="Type" params="" file="/usr/local/lib/haxe/std/java/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="41" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="49" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="57" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="67" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="84" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="95" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="123" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e><![CDATA["\n\t\tif (\"Bool\".equals(name)) return boolean.class;\n\t\tClass r = resolveClass(name);\n\t\tif (r != null && (r.getSuperclass() == java.lang.Enum.class || haxe.lang.Enum.class.isAssignableFrom(r)))\n\t\t\treturn r;\n\t\treturn null;\n\t"]]></e></m>
			</meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="241" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e><![CDATA["\n\t\t\tint len = args.length;\n\t\t\tjava.lang.Class[] cls = new java.lang.Class[len];\n\t\t\tjava.lang.Object[] objs = new java.lang.Object[len];\n\n\t\t\tjava.lang.reflect.Constructor[] ms = cl.getConstructors();\n\t\t\tint msl = ms.length;\n\t\t\tint realMsl = 0;\n\t\t\tfor(int i =0; i < msl; i++)\n\t\t\t{\n\t\t\t\tif (!ms[i].isVarArgs() && ms[i].getParameterTypes().length != len)\n\t\t\t\t{\n\t\t\t\t\tms[i] = null;\n\t\t\t\t} else {\n\t\t\t\t\tms[realMsl] = ms[i];\n\t\t\t\t\tif (realMsl != i)\n\t\t\t\t\t\tms[i] = null;\n\t\t\t\t\trealMsl++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tboolean hasNumber = false;\n\n\t\t\tfor (int i = 0; i < len; i++)\n\t\t\t{\n\t\t\t\tObject o = args.__get(i);\n\t\t\t\tobjs[i]= o;\n\t\t\t\tcls[i] = o.getClass();\n\t\t\t\tboolean isNum = false;\n\n\t\t\t\tif (o instanceof java.lang.Number)\n\t\t\t\t{\n\t\t\t\t\tcls[i] = java.lang.Number.class;\n\t\t\t\t\tisNum = hasNumber = true;\n\t\t\t\t}\n\n\t\t\t\tmsl = realMsl;\n\t\t\t\trealMsl = 0;\n\n\t\t\t\tfor (int j = 0; j < msl; j++)\n\t\t\t\t{\n\t\t\t\t\tjava.lang.Class[] allcls = ms[j].getParameterTypes();\n\t\t\t\t\tif (i < allcls.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! ((isNum && allcls[i].isPrimitive()) || allcls[i].isAssignableFrom(cls[i])) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tms[j] = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tms[realMsl] = ms[j];\n\t\t\t\t\t\t\tif (realMsl != j)\n\t\t\t\t\t\t\t\tms[j] = null;\n\t\t\t\t\t\t\trealMsl++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjava.lang.reflect.Constructor found = ms[0];\n\n\t\t\tif (hasNumber)\n\t\t\t{\n\t\t\t\tjava.lang.Class[] allcls = found.getParameterTypes();\n\n\t\t\t\tfor (int i = 0; i < len; i++)\n\t\t\t\t{\n\t\t\t\t\tjava.lang.Object o = objs[i];\n\t\t\t\t\tif (o instanceof java.lang.Number)\n\t\t\t\t\t{\n\t\t\t\t\t\tjava.lang.Class curCls = null;\n\t\t\t\t\t\tif (i < allcls.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurCls = allcls[i];\n\t\t\t\t\t\t\tif (!curCls.isAssignableFrom(o.getClass()))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tString name = curCls.getName();\n\t\t\t\t\t\t\t\tif (name.equals(\"double\") || name.equals(\"java.lang.Double\"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).doubleValue();\n\t\t\t\t\t\t\t\t} else if (name.equals(\"int\") || name.equals(\"java.lang.Integer\"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).intValue();\n\t\t\t\t\t\t\t\t} else if (name.equals(\"float\") || name.equals(\"java.lang.Float\"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).floatValue();\n\t\t\t\t\t\t\t\t} else if (name.equals(\"byte\") || name.equals(\"java.lang.Byte\"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).byteValue();\n\t\t\t\t\t\t\t\t} else if (name.equals(\"short\") || name.equals(\"java.lang.Short\"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).shortValue();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} //else varargs not handled TODO\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\ttry {\n\t\t\tfound.setAccessible(true);\n\t\t\treturn (T) found.newInstance(objs);\n\t\t}\n\t\tcatch (java.lang.reflect.InvocationTargetException e)\n\t\t{\n\t\t\tthrow haxe.lang.HaxeException.wrap(e.getCause());\n\t\t}\n\n\t\tcatch (Throwable t)\n\t\t{\n\t\t\tthrow haxe.lang.HaxeException.wrap(t);\n\t\t}\n\t"]]></e></m>
			</meta>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<__createEmptyInstance_EMPTY_TYPES expr="java.NativeArray.make(java.Lib.toNativeEnum(java.internal.Runtime.EmptyObject))" line="247" static="1">
			<c path="java.NativeArray"><c path="java.lang.Class"><e path="java.internal.EmptyObject"/></c></c>
			<meta>
				<m n=":value"><e>java.NativeArray.make(java.Lib.toNativeEnum(java.internal.Runtime.EmptyObject))</e></m>
				<m n=":protected"/>
				<m n=":readOnly"/>
			</meta>
		</__createEmptyInstance_EMPTY_TYPES>
		<__createEmptyInstance_EMPTY_ARGS expr="java.NativeArray.make(java.internal.Runtime.EmptyObject.EMPTY)" line="248" static="1">
			<c path="java.NativeArray"><e path="java.internal.EmptyObject"/></c>
			<meta>
				<m n=":value"><e>java.NativeArray.make(java.internal.Runtime.EmptyObject.EMPTY)</e></m>
				<m n=":protected"/>
				<m n=":readOnly"/>
			</meta>
		</__createEmptyInstance_EMPTY_ARGS>
		<createEmptyInstance public="1" params="T" set="method" line="250" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="271" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\tif (params == null || params.length == 0)\n\t\t{\n\t\t\tjava.lang.Object ret = haxe.lang.Runtime.slowGetField(e, constr, true);\n\t\t\tif (ret instanceof haxe.lang.Function)\n\t\t\t\tthrow haxe.lang.HaxeException.wrap(\"Constructor \" + constr + \" needs parameters\");\n\t\t\treturn (T) ret;\n\t\t} else {\n\t\t\treturn (T) haxe.lang.Runtime.slowCallField(e, constr, params);\n\t\t}\n\t"</e></m></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="276" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="306" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tif (c == java.lang.String.class)\n\t\t{\n\t\t\treturn haxe.lang.StringRefl.fields;\n\t\t}\n\n\t\tArray<String> ret = new Array<String>();\n\t\tfor (java.lang.reflect.Field f : c.getFields())\n\t\t{\n\t\t\tjava.lang.String fname = f.getName();\n\t\t\tif (!java.lang.reflect.Modifier.isStatic(f.getModifiers()) && !fname.startsWith(\"__hx_\"))\n\t\t\t\tret.push(fname);\n\t\t}\n\n\t\tfor (java.lang.reflect.Method m : c.getMethods())\n\t\t{\n\t\t\tif (m.getDeclaringClass() == java.lang.Object.class)\n\t\t\t\tcontinue;\n\t\t\tjava.lang.String mname = m.getName();\n\t\t\tif (!java.lang.reflect.Modifier.isStatic(m.getModifiers()) && !mname.startsWith(\"__hx_\"))\n\t\t\t\tret.push(mname);\n\t\t}\n\n\t\treturn ret;\n\t"]]></e></m></meta>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="336" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tArray<String> ret = new Array<String>();\n\t\tif (c == java.lang.String.class)\n\t\t{\n\t\t\tret.push(\"fromCharCode\");\n\t\t\treturn ret;\n\t\t}\n\n\t\tfor (java.lang.reflect.Field f : c.getDeclaredFields())\n\t\t{\n\t\t\tjava.lang.String fname = f.getName();\n\t\t\tif (java.lang.reflect.Modifier.isStatic(f.getModifiers()) && !fname.startsWith(\"__hx_\"))\n\t\t\tret.push(fname);\n\t\t}\n\n\t\tfor (java.lang.reflect.Method m : c.getDeclaredMethods())\n\t\t{\n\t\t\tif (m.getDeclaringClass() == java.lang.Object.class)\n\t\t\t\tcontinue;\n\t\t\tjava.lang.String mname = m.getName();\n\t\t\tif (java.lang.reflect.Modifier.isStatic(m.getModifiers()) && !mname.startsWith(\"__hx_\"))\n\t\t\t\tret.push(mname);\n\t\t}\n\n\t\treturn ret;\n\t"]]></e></m></meta>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="340" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="380" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e>"\n\t\tif (v == null) return ValueType.TNull;\n\n\t\tif (v instanceof haxe.lang.IHxObject) {\n\t\t\thaxe.lang.IHxObject vobj = (haxe.lang.IHxObject) v;\n\t\t\tjava.lang.Class cl = vobj.getClass();\n\t\t\tif (v instanceof haxe.lang.DynamicObject)\n\t\t\t\treturn ValueType.TObject;\n\t\t\telse\n\t\t\t\treturn ValueType.TClass(cl);\n\t\t} else if (v instanceof java.lang.Number) {\n\t\t\tjava.lang.Number n = (java.lang.Number) v;\n\t\t\tif (n.intValue() == n.doubleValue())\n\t\t\t\treturn ValueType.TInt;\n\t\t\telse\n\t\t\t\treturn ValueType.TFloat;\n\t\t} else if (v instanceof haxe.lang.Function) {\n\t\t\treturn ValueType.TFunction;\n\t\t} else if (v instanceof java.lang.Enum || v instanceof haxe.lang.Enum) {\n\t\t\treturn ValueType.TEnum(v.getClass());\n\t\t} else if (v instanceof java.lang.Boolean) {\n\t\t\treturn ValueType.TBool;\n\t\t} else if (v instanceof java.lang.Class) {\n\t\t\treturn ValueType.TObject;\n\t\t} else {\n\t\t\treturn ValueType.TClass(v.getClass());\n\t\t}\n\t"</e></m>
			</meta>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="391" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e>"\n\t\t\tif (a instanceof haxe.lang.Enum)\n\t\t\t\treturn a.equals(b);\n\t\t\telse\n\t\t\t\treturn haxe.lang.Runtime.eq(a, b);\n\t"</e></m>
			</meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="402" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e>"\n\t\tif (e instanceof java.lang.Enum)\n\t\t\treturn ((java.lang.Enum) e).name();\n\t\telse\n\t\t\treturn ((haxe.lang.Enum) e).getTag();\n\t"</e></m>
			</meta>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="410" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e>"\n\t\treturn ( e instanceof java.lang.Enum ) ? new haxe.root.Array() : ((haxe.lang.Enum) e).getParams();\n\t"</e></m>
			</meta>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" line="421" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e>"\n\t\tif (e instanceof java.lang.Enum)\n\t\t\treturn ((java.lang.Enum) e).ordinal();\n\t\telse\n\t\t\treturn ((haxe.lang.Enum) e).index;\n\t"</e></m>
			</meta>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="426" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="haxe.StackItem" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="77" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="156" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="224" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="233" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="260" static="1"><f a="s">
	<unknown/>
	<unknown/>
</f></makeStack>
		<haxe_doc>Get informations about the call stack.</haxe_doc>
	</class>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which
		* is public and
		* unifies with the type used for type parameter `T`.

	If a type parameter A is assigned to a type parameter B which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<class path="haxe.IMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<t path="Null"><c path="haxe.IMap.V"/></t>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
	</class>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="50" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="63" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="96" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="108" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `enum` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="143" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="157" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="169" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `EnumValue` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
 	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
	<preIncrement get="inline" set="null" line="31" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="34" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="43" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add get="inline" set="null" line="49" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="52" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="57" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="60" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="63" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<toFloat get="inline" set="null" line="216" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<ucompare public="1" set="method" line="222" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="233" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
		<preIncrement get="inline" set="null" line="31" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="34" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="43" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add get="inline" set="null" line="49" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="52" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="60" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="63" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<toFloat get="inline" set="null" line="216" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<ucompare public="1" set="method" line="222" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="233" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/java/_std/haxe/Int64.hx" private="1" module="haxe.Int64"><x path="java.Int64"/></typedef>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/java/_std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/java/_std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<make public="1" get="inline" set="null" line="33" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":has_untyped"/></meta>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<_new get="inline" set="null" line="36" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<val get="accessor" set="accessor" static="1">
		<t path="haxe._Int64.__Int64"/>
		<meta><m n=":impl"/></meta>
	</val>
	<get_val get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<t path="haxe._Int64.__Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_val>
	<set_val get="inline" set="null" line="41" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<t path="haxe._Int64.__Int64"/>
			<t path="haxe._Int64.__Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_val>
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<get_high public="1" get="inline" set="null" line="44" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<get_low public="1" get="inline" set="null" line="47" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_low>
	<copy public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<ofInt public="1" get="inline" set="null" line="52" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<is public="1" get="inline" set="null" line="55" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</is>
	<toInt public="1" get="inline" set="null" line="58" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<getHigh public="1" get="inline" set="null" line="64" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="67" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="70" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="73" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="76" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="83" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="89" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<divMod public="1" get="inline" set="null" line="92" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<toString get="inline" set="null" line="95" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<parseString public="1" set="method" line="98" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" set="method" line="103" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<neg public="1" set="method" line="107" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="110" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="113" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="116" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="119" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="122" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="125" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="128" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="131" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="134" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="137" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="140" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="143" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="146" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="149" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="152" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="155" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="158" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="161" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="164" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="167" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="170" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="173" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="176" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="179" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="182" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="185" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="188" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="191" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="194" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="197" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="200" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="203" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="206" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="209" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</complement>
	<and public="1" get="inline" set="null" line="212" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="215" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="218" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="224" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="227" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<meta>
		<m n=":final"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/java/_std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<make public="1" get="inline" set="null" line="33" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<_new get="inline" set="null" line="36" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<val get="accessor" set="accessor" static="1">
			<t path="haxe._Int64.__Int64"/>
			<meta><m n=":impl"/></meta>
		</val>
		<get_val get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_val>
		<set_val get="inline" set="null" line="41" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_val>
		<high public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</high>
		<get_high public="1" get="inline" set="null" line="44" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_high>
		<low public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</low>
		<get_low public="1" get="inline" set="null" line="47" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_low>
		<copy public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<ofInt public="1" get="inline" set="null" line="52" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<is public="1" get="inline" set="null" line="55" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</is>
		<toInt public="1" get="inline" set="null" line="58" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<getHigh public="1" get="inline" set="null" line="64" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="67" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="70" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="73" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="76" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="83" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="89" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<divMod public="1" get="inline" set="null" line="92" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<toString get="inline" set="null" line="95" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<parseString public="1" set="method" line="98" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" set="method" line="103" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<neg public="1" set="method" line="107" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="110" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="113" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="116" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="119" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="122" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="125" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="128" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="131" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="134" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="137" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="140" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="143" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="146" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="149" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="155" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="158" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="161" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="164" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="167" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="170" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="173" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="176" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="179" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="182" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="185" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="188" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="191" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="194" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="197" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="200" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="203" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="206" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="209" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</complement>
		<and public="1" get="inline" set="null" line="212" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="215" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="218" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="224" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="227" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<meta>
			<m n=":final"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.Int64Helper" params="" file="/usr/local/lib/haxe/std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="35" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="75" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="/usr/local/lib/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="47" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/local/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<t path="Null"><c path="Array"><d/></c></t>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Timer" params="" file="/usr/local/lib/haxe/std/haxe/Timer.hx">
		<delay public="1" set="method" line="136" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its run() method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is null, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="156" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		Timer.stamp() before and after the invocation of `f`.

		The difference is passed as argument to Log.trace(), with "s" appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is null, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" get="inline" set="null" line="169" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<timer><c path="java.util.Timer"/></timer>
		<task><c path="java.util.TimerTask"/></task>
		<stop public="1" set="method" line="88">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:
			var timer = new haxe.Timer(1000); // 1000ms delay
			timer.run = function() { ... }

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="60">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the Timer class with a given
	interval, set its run() method to a custom function to be invoked and
	eventually call stop() to stop the Timer.

	Note that a running Timer may or may not prevent the program to exit
	automatically when main() returns.

	It is also possible to extend this class and override its run() method in
	the child class.</haxe_doc>
	</class>
	<class path="java.lang.Runnable" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Runnable.class" extern="1" interface="1">
		<run public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Runnable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Runnable"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.TimerTask" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/TimerTask.class" extern="1">
		<implements path="java.lang.Runnable"/>
		<scheduledExecutionTime public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</scheduledExecutionTime>
		<cancel public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</cancel>
		<run public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.TimerTask"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"TimerTask"</e>
			</m>
		</meta>
	</class>
	<class path="haxe._Timer.TimerTask" params="" file="/usr/local/lib/haxe/std/haxe/Timer.hx" private="1" module="haxe.Timer">
		<extends path="java.util.TimerTask"/>
		<timer><c path="haxe.Timer"/></timer>
		<run public="1" set="method" line="199" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<new public="1" set="method" line="194"><f a="timer">
	<c path="haxe.Timer"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="haxe.Utf8" params="" file="/usr/local/lib/haxe/std/haxe/Utf8.hx">
		<iter public="1" set="method" line="56" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="64" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="72" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="79" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="86" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="94" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="101" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="108" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<__b><c path="String"/></__b>
		<addChar public="1" get="inline" set="null" line="42">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="49">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
	can use this crossplatform API to perform operations on such strings.</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="/usr/local/lib/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="462" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="490" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofString>
		<ofData public="1" set="method" line="551" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<fastGet public="1" get="inline" set="null" line="569" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="41">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="59"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method" line="79"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="114"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method" line="133"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="161">
			<f a="other">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</compare>
		<getDouble public="1" set="method" line="213">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="232">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="252">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE double precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="275">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE single precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="294">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="305">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="317">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="334">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="341">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="355">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="360"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<readString public="1" get="inline" set="null" line="419">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="423"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="444"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="458"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/usr/local/lib/haxe/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<encode public="1" set="method" line="32" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="45" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<haxe_doc>Allows to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/usr/local/lib/haxe/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/BalancedTree.hx">
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="82">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="99">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="115">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="126">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<setLoop set="method" line="132"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="145"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<iteratorLoop set="method" line="153"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<keysLoop set="method" line="161"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="169"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="176"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="182"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="187"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="201"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="205"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="234">
			<f a=""><x path="Int"/></f>
			<meta><m n=":extern"/></meta>
		</get_height>
		<toString public="1" set="method" line="236"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="223">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
	</class>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="33" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="42"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="52"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
	<_new public="1" get="inline" set="null" line="35" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new HashMap.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="42" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.set`</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="50" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.get`</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="57" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.exists`</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="64" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.remove`</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="72" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.keys`</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="79" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.iterator`</haxe_doc>
	</iterator>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<_new public="1" get="inline" set="null" line="35" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new HashMap.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="42" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="50" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="57" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="64" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="72" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="79" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="87"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/usr/local/lib/haxe/std/java/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.7" line="36" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.7</e></m></meta>
		</HASH_UPPER>
		<assert get="inline" set="null" line="408" static="1"><f a="x">
	<x path="Bool"/>
	<x path="Void"/>
</f></assert>
		<defaultK get="inline" set="null" line="415" static="1"><f a=""><x path="Int"/></f></defaultK>
		<arrayCopy get="inline" set="null" line="417" static="1"><f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
	<d/>
	<x path="Int"/>
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></arrayCopy>
		<getInc get="inline" set="null" line="420" static="1"><f a="k:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getInc>
		<hash get="inline" set="null" line="423" static="1"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></hash>
		<flagIsEmpty get="inline" set="null" line="426" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Bool"/>
</f></flagIsEmpty>
		<flagIsDel get="inline" set="null" line="429" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Bool"/>
</f></flagIsDel>
		<isEither get="inline" set="null" line="432" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Bool"/>
</f></isEither>
		<setIsDelFalse get="inline" set="null" line="435" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsDelFalse>
		<setIsEmptyFalse get="inline" set="null" line="438" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsEmptyFalse>
		<setIsBothFalse get="inline" set="null" line="441" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsBothFalse>
		<setIsDelTrue get="inline" set="null" line="444" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsDelTrue>
		<roundUp get="inline" set="null" line="447" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></roundUp>
		<flagsSize get="inline" set="null" line="458" static="1"><f a="m">
	<x path="Int"/>
	<x path="Int"/>
</f></flagsSize>
		<flags><c path="java.NativeArray"><x path="Int"/></c></flags>
		<_keys><c path="java.NativeArray"><x path="Int"/></c></_keys>
		<vals><c path="java.NativeArray"><c path="haxe.ds.IntMap.T"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><x path="Int"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="55">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup set="method" line="118">
			<f a="key">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":final"/></meta>
		</lookup>
		<get public="1" set="method" line="140">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="160"><f a="key:def">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
	<c path="haxe.ds.IntMap.T"/>
</f></getDefault>
		<exists public="1" set="method" line="180">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="200">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<resize set="method" line="228">
			<f a="newNBuckets">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":final"/></meta>
		</resize>
		<keys public="1" set="method" line="334">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="365">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="393">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<new public="1" set="method" line="50">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/usr/local/lib/haxe/std/java/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.77" line="28" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0.77</e></m>
				<m n=":extern"/>
			</meta>
		</HASH_UPPER>
		<FLAG_EMPTY get="inline" set="null" expr="0" line="29" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_EMPTY>
		<FLAG_DEL get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>1</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_DEL>
		<roundUp get="inline" set="null" line="432" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</roundUp>
		<getInc get="inline" set="null" line="443" static="1">
			<f a="k:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</getInc>
		<isEither get="inline" set="null" line="446" static="1">
			<f a="v">
				<t path="haxe.ds._ObjectMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEither>
		<isEmpty get="inline" set="null" line="449" static="1">
			<f a="v">
				<t path="haxe.ds._ObjectMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEmpty>
		<isDel get="inline" set="null" line="452" static="1">
			<f a="v">
				<t path="haxe.ds._ObjectMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isDel>
		<hash get="inline" set="null" line="456" static="1">
			<f a="s">
				<d/>
				<t path="haxe.ds._ObjectMap.HashType"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</hash>
		<arrayCopy get="inline" set="null" line="484" static="1">
			<f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
				<d/>
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</arrayCopy>
		<assert get="inline" set="null" line="487" static="1">
			<f a="x">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</assert>
		<hashes>
			<c path="java.NativeArray"><t path="haxe.ds._ObjectMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<_keys><c path="java.NativeArray"><c path="haxe.ds.ObjectMap.K"/></c></_keys>
		<vals><c path="java.NativeArray"><c path="haxe.ds.ObjectMap.V"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><c path="haxe.ds.ObjectMap.K"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="64">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup set="method" line="136">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":final"/>
			</meta>
		</lookup>
		<resize set="method" line="167">
			<f a="newNBuckets">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":final"/>
				<m n=":private"/>
			</meta>
		</resize>
		<get public="1" set="method" line="270">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="290"><f a="key:def">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
	<c path="haxe.ds.ObjectMap.V"/>
</f></getDefault>
		<exists public="1" set="method" line="310">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="330">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="358">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="389">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="417">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<new public="1" set="method" line="59">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.ds._ObjectMap.HashType" params="" file="/usr/local/lib/haxe/std/java/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap"><x path="Int"/></typedef>
	<enum path="haxe.ds.Option" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
	</enum>
	<class path="haxe.ds.StringMap" params="T" file="/usr/local/lib/haxe/std/java/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.77" line="28" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0.77</e></m>
				<m n=":extern"/>
			</meta>
		</HASH_UPPER>
		<FLAG_EMPTY get="inline" set="null" expr="0" line="29" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_EMPTY>
		<FLAG_DEL get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>1</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_DEL>
		<roundUp get="inline" set="null" line="432" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</roundUp>
		<getInc get="inline" set="null" line="443" static="1">
			<f a="k:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</getInc>
		<isEither get="inline" set="null" line="446" static="1">
			<f a="v">
				<t path="haxe.ds._StringMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEither>
		<isEmpty get="inline" set="null" line="449" static="1">
			<f a="v">
				<t path="haxe.ds._StringMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEmpty>
		<isDel get="inline" set="null" line="452" static="1">
			<f a="v">
				<t path="haxe.ds._StringMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isDel>
		<hash get="inline" set="null" line="456" static="1">
			<f a="s">
				<c path="String"/>
				<t path="haxe.ds._StringMap.HashType"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</hash>
		<arrayCopy get="inline" set="null" line="484" static="1">
			<f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
				<d/>
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</arrayCopy>
		<assert get="inline" set="null" line="487" static="1">
			<f a="x">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</assert>
		<hashes>
			<c path="java.NativeArray"><t path="haxe.ds._StringMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<_keys><c path="java.NativeArray"><c path="String"/></c></_keys>
		<vals><c path="java.NativeArray"><c path="haxe.ds.StringMap.T"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><c path="String"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="64">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup set="method" line="136">
			<f a="key">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":final"/></meta>
		</lookup>
		<resize set="method" line="167">
			<f a="newNBuckets">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":final"/>
				<m n=":private"/>
			</meta>
		</resize>
		<get public="1" set="method" line="270">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="290"><f a="key:def">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
	<c path="haxe.ds.StringMap.T"/>
</f></getDefault>
		<exists public="1" set="method" line="310">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="330">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="358">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="389">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="417">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<new public="1" set="method" line="59">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.ds._StringMap.HashType" params="" file="/usr/local/lib/haxe/std/java/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap"><x path="Int"/></typedef>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="java.NativeArray"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<_new public="1" get="inline" set="null" line="60" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="89" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="105" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="120" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<blit public="1" params="T" get="inline" set="null" line="141" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" get="inline" set="null" line="181" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="206" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="216" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="231" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
	<copy public="1" params="T" get="inline" set="null" line="260" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
			<x path="haxe.ds.Vector"><c path="copy.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
	</copy>
	<join public="1" params="T" get="inline" set="null" line="279" static="1">
		<f a="this:sep">
			<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
	</join>
	<map public="1" params="S" get="inline" set="null" line="303" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a="">
				<c path="haxe.ds.Vector.T"/>
				<c path="map.S"/>
			</f>
			<x path="haxe.ds.Vector"><c path="map.S"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
	</map>
	<sort public="1" params="T" get="inline" set="null" line="327" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
			<f a=":">
				<c path="sort.T"/>
				<c path="sort.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
	</sort>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
		<_new public="1" get="inline" set="null" line="60" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="89" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="105" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="120" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<blit public="1" params="T" get="inline" set="null" line="141" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" get="inline" set="null" line="181" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="206" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="216" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="231" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
		<copy public="1" params="T" get="inline" set="null" line="260" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
				<x path="haxe.ds.Vector"><c path="copy.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<join public="1" params="T" get="inline" set="null" line="279" static="1">
			<f a="this:sep">
				<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<map public="1" params="S" get="inline" set="null" line="303" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a="">
					<c path="haxe.ds.Vector.T"/>
					<c path="map.S"/>
				</f>
				<x path="haxe.ds.Vector"><c path="map.S"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<sort public="1" params="T" get="inline" set="null" line="327" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/usr/local/lib/haxe/std/java/_std/haxe/ds/WeakMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.77" line="30" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0.77</e></m>
				<m n=":extern"/>
			</meta>
		</HASH_UPPER>
		<FLAG_EMPTY get="inline" set="null" expr="0" line="31" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_EMPTY>
		<FLAG_DEL get="inline" set="null" expr="1" line="32" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>1</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_DEL>
		<roundUp get="inline" set="null" line="470" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</roundUp>
		<getInc get="inline" set="null" line="481" static="1">
			<f a="k:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</getInc>
		<isEither get="inline" set="null" line="484" static="1">
			<f a="v">
				<t path="haxe.ds._WeakMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEither>
		<isEmpty get="inline" set="null" line="487" static="1">
			<f a="v">
				<t path="haxe.ds._WeakMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEmpty>
		<isDel get="inline" set="null" line="490" static="1">
			<f a="v">
				<t path="haxe.ds._WeakMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isDel>
		<hash get="inline" set="null" line="494" static="1">
			<f a="s">
				<d/>
				<t path="haxe.ds._WeakMap.HashType"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</hash>
		<arrayCopy get="inline" set="null" line="522" static="1">
			<f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
				<d/>
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</arrayCopy>
		<assert get="inline" set="null" line="525" static="1">
			<f a="x">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</assert>
		<hashes>
			<c path="java.NativeArray"><t path="haxe.ds._WeakMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<entries><c path="java.NativeArray"><c path="haxe.ds._WeakMap.Entry">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></c></entries>
		<queue><c path="java.lang.ref.ReferenceQueue"><c path="haxe.ds.WeakMap.K"/></c></queue>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedEntry><c path="haxe.ds._WeakMap.Entry">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></cachedEntry>
		<cachedIndex><x path="Int"/></cachedIndex>
		<cleanupRefs set="method" line="70">
			<f a=""><x path="Void"/></f>
			<meta><m n=":analyzer"><e>ignore</e></m></meta>
		</cleanupRefs>
		<set public="1" set="method" line="105">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup set="method" line="176">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Int"/>
			</f>
			<meta><m n=":final"/></meta>
		</lookup>
		<resize set="method" line="207">
			<f a="newNBuckets">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":final"/>
				<m n=":private"/>
			</meta>
		</resize>
		<get public="1" set="method" line="292">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<t path="Null"><c path="haxe.ds.WeakMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="314"><f a="key:def">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
	<c path="haxe.ds.WeakMap.V"/>
</f></getDefault>
		<exists public="1" set="method" line="336">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="358">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="389">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="426">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="455">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<new public="1" set="method" line="63">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="java.lang.ref.Reference" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ref/Reference.class" extern="1">
		<enqueue public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</enqueue>
		<isEnqueued public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEnqueued>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<get public="1" set="method">
			<f a=""><c path="java.lang.ref.Reference.T"/></f>
			<meta><m n=":overload"/></meta>
		</get>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.Reference"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"Reference"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ref.WeakReference" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ref/WeakReference.class" extern="1">
		<extends path="java.lang.ref.Reference"><c path="java.lang.ref.WeakReference.T"/></extends>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.ref.WeakReference.T"/>
				<c path="java.lang.ref.ReferenceQueue"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="java.lang.ref.WeakReference.T"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.WeakReference"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"WeakReference"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.ds._WeakMap.Entry" params="K:V" file="/usr/local/lib/haxe/std/java/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<extends path="java.lang.ref.WeakReference"><c path="haxe.ds._WeakMap.Entry.K"/></extends>
		<value public="1"><c path="haxe.ds._WeakMap.Entry.V"/></value>
		<hash public="1" set="null"><x path="Int"/></hash>
		<keyEquals public="1" get="inline" set="null" line="544">
			<f a="k">
				<c path="haxe.ds._WeakMap.Entry.K"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":final"/>
			</meta>
		</keyEquals>
		<new public="1" set="method" line="537"><f a="key:value:hash:queue">
	<c path="haxe.ds._WeakMap.Entry.K"/>
	<c path="haxe.ds._WeakMap.Entry.V"/>
	<x path="Int"/>
	<c path="java.lang.ref.ReferenceQueue"><c path="haxe.ds._WeakMap.Entry.K"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.ds._WeakMap.HashType" params="" file="/usr/local/lib/haxe/std/java/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap"><x path="Int"/></typedef>
	<abstract path="haxe.extern.Rest" params="T" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe.extern._Rest.Rest_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"><meta><m n=":final"/></meta></class>
	<class path="haxe.io.BytesBuffer" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesBuffer.hx">
		<b><c path="java.io.ByteArrayOutputStream"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="64"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" get="inline" set="null" line="76"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="94"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" get="inline" set="null" line="118"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" set="method" line="128"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" set="method" line="139"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" get="inline" set="null" line="144"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" get="inline" set="null" line="152"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" get="inline" set="null" line="160"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="191">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="java.NativeArray"><x path="java.Int8"/></c></typedef>
	<class path="haxe.io.Input" params="" file="/usr/local/lib/haxe/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<helper><c path="java.nio.ByteBuffer"/></helper>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="95"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="108">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="134">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="147">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="164">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="177">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="199">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="208">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="217">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="229">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="243">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="254">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="269">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="303">
			<f a="len">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
	</class>
	<class path="haxe.io.BytesInput" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="63"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="71"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="79"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="90" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</readByte>
		<readBytes public="1" set="method" line="111" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="38"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Eof" params="" file="/usr/local/lib/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="/usr/local/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="/usr/local/lib/haxe/std/haxe/io/FPHelper.hx">
		<LN2 get="inline" set="null" expr="0.6931471805599453" line="58" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.6931471805599453</e></m></meta>
		</LN2>
		<i32ToFloat public="1" set="method" line="62" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="109" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="153" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="219" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
	</class>
	<class path="haxe.io.Output" params="" file="/usr/local/lib/haxe/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<helper><c path="java.nio.ByteBuffer"/></helper>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="93">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="96"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="106">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="122">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="135">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="144">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="158">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="169">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="179">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="205">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="223">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="244">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="253">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="278">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Constant" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v">
			<c path="String"/>
			<haxe_doc>Represents an integer literal.</haxe_doc>
		</CInt>
		<CFloat a="f">
			<c path="String"/>
			<haxe_doc>Represents a float literal.</haxe_doc>
		</CFloat>
		<CString a="s">
			<c path="String"/>
			<haxe_doc>Represents a string literal.</haxe_doc>
		</CString>
		<CIdent a="s">
			<c path="String"/>
			<haxe_doc>Represents an indentifier.</haxe_doc>
		</CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a regular expression literal.

		Example: `~/haxe/i`
		 * The first argument _haxe_ is a string with regular expression pattern.
		 * The second argument _i_ is a string with regular expression flags.

		@see https://haxe.org/manual/std-regex.html</haxe_doc>
		</CRegexp>
		<haxe_doc>Represents a constant.
	@see https://haxe.org/manual/expression-constants.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=`
		`-=`
		`/=`
		`*=`
		`<<=`
		`>>=`
		`>>>=`
		`|=`
		`&=`
		`^=`
		`%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<haxe_doc>A binary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<haxe_doc>A unary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<e path="haxe.macro.ComplexType"/>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ExprDef" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c">
			<e path="haxe.macro.Constant"/>
			<haxe_doc>A constant.</haxe_doc>
		</EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
			<haxe_doc>Field access on `e.field`.</haxe_doc>
		</EField>
		<EParenthesis a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</EParenthesis>
		<EObjectDecl a="fields">
			<c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</EObjectDecl>
		<EArrayDecl a="values">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A call `e(params)`.</haxe_doc>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A constructor call `new t(params)`.</haxe_doc>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</EUnop>
		<EVars a="vars">
			<c path="Array"><t path="haxe.macro.Var"/></c>
			<haxe_doc>Variable declarations.</haxe_doc>
		</EVars>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</EFunction>
		<EBlock a="exprs">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A block of expressions `{exprs}`.</haxe_doc>
		</EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</EFor>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(e1 in e2)` expression.</haxe_doc>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
			<haxe_doc>Represents a `switch` expression with related cases and an optional.
		`default` case if edef != null.</haxe_doc>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</ETry>
		<EReturn a="?e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</EReturn>
		<EBreak><haxe_doc>A `break` expression.</haxe_doc></EBreak>
		<EContinue><haxe_doc>A `continue` expression.</haxe_doc></EContinue>
		<EUntyped a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An `untyped e` source code.</haxe_doc>
		</EUntyped>
		<EThrow a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</ECast>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplay>
		<EDisplayNew a="t">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(econd) ? eif : eelse` expression.</haxe_doc>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>A `(e:t)` expression.</haxe_doc>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `@m e` expression.</haxe_doc>
		</EMeta>
		<haxe_doc>Represents the kind of a node in the AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Represents the type path.</haxe_doc>
		</TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a function type.
		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFunction>
		<TAnonymous a="fields">
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc>Represents an anonymous structure type.
		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TParent a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc><![CDATA[Represents parentheses around a type, e.g. the `(Int -> Void)` part in
		`(Int -> Void) -> String`.]]></haxe_doc>
		</TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc><![CDATA[Represents typedef extensions `> Iterable<T>`.
		The array `p` holds the type paths to the given types.
		@see https://haxe.org/manual/type-system-extensions.html]]></haxe_doc>
		</TExtend>
		<TOptional a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an optional type.</haxe_doc>
		</TOptional>
		<haxe_doc>Represents a type syntax in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has name = Module, sub = Type, if available.</haxe_doc>
			</sub>
			<params>
				<t path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc></haxe_doc>
		</TPType>
		<TPExpr a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc></haxe_doc>
		</TPExpr>
		<haxe_doc><![CDATA[Represents a concrete type parameter in the AST.

	Haxe allows expressions in concrete type parameters, e.g.
	`new YourType<["hello", "world"]>`. In that case the value is `TPExpr` while
	in the normal case it's `TPType`.]]></haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<t path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<t path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Access" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic><haxe_doc>Public access modifier, grants access from anywhere.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APublic>
		<APrivate><haxe_doc>Private access modifier, grants access to class and its sub-classes
		only.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APrivate>
		<AStatic><haxe_doc>Static access modifier.</haxe_doc></AStatic>
		<AOverride><haxe_doc>Override access modifier.
		@see https://haxe.org/manual/class-field-override.html</haxe_doc></AOverride>
		<ADynamic><haxe_doc>Dynamic (re-)bindable access modifier.
		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></ADynamic>
		<AInline><haxe_doc>Inline access modifier. Allows expressions to be directly inserted in
		place of calls to them.
		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></AInline>
		<AMacro><haxe_doc>Macros access modifier. Allows expression macro functions. These are
		normal functions which are executed as soon as they are typed.</haxe_doc></AMacro>
		<haxe_doc>Represents an access modifier.
	@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a variable field type.</haxe_doc>
		</FVar>
		<FFun a="f">
			<t path="haxe.macro.Function"/>
			<haxe_doc>Represents a function field type.</haxe_doc>
		</FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a property with getter and setter field type.</haxe_doc>
		</FProp>
		<haxe_doc>Represents the field type in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The paramater type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum><haxe_doc>Represents an enum kind.</haxe_doc></TDEnum>
		<TDStructure><haxe_doc>Represents a structure kind.</haxe_doc></TDStructure>
		<TDClass a="?superClass:?interfaces:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
			<haxe_doc>Represents a class kind.</haxe_doc>
		</TDClass>
		<TDAlias a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an alias/typedef kind.</haxe_doc>
		</TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc>Represents an abstract kind.</haxe_doc>
		</TDAbstract>
		<haxe_doc>Represents a type definition kind.</haxe_doc>
	</enum>
	<class path="haxe.macro.Error" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<message public="1">
			<c path="String"/>
			<haxe_doc>The error message.</haxe_doc>
		</message>
		<pos public="1">
			<t path="haxe.macro.Position"/>
			<haxe_doc>The position of the error.</haxe_doc>
		</pos>
		<toString set="method" line="898">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the string representation of the error.</haxe_doc>
		</toString>
		<new public="1" set="method" line="890">
			<f a="m:p">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal><haxe_doc>Represents a default import `import c`.</haxe_doc></INormal>
		<IAsName a="alias">
			<c path="String"/>
			<haxe_doc>Represents the alias import `import c as alias`.</haxe_doc>
		</IAsName>
		<IAll><haxe_doc>Represents the wildcard import `import *`.</haxe_doc></IAll>
		<haxe_doc>Represents the import mode.
	@see https://haxe.org/manual/type-system-import.html</haxe_doc>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<class path="haxe.macro.ExprTools" params="" file="/usr/local/lib/haxe/std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="44" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression `e` to a human-readable String representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="71" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		If `e` has no sub-expressions, this operation has no effect.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}
		```</haxe_doc>
		</iter>
		<map public="1" set="method" line="158" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		If `e` has no sub-expressions, this operation returns `e` unchanged.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}
		```haxe</haxe_doc>
		</map>
		<getValue public="1" set="method" line="233" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:

		 - `Int`, `Float` and `String` literals
		 - identifiers `true`, `false` and `null`
		 - structure declarations if all their fields are values
		 - array declarations if all their elements are values
		 - unary operators `-`, `!` and `~` if the operand is a value
		 - binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="293" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="296" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="/usr/local/lib/haxe/std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="305" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="312" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Printer" params="" file="/usr/local/lib/haxe/std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="42"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="50"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="78"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="82"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="86"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="90"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="99"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="104"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="111"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="125"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="129"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="139"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="149"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="154"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="160"><f a="func">
	<t path="haxe.macro.Function"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="166"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printExpr public="1" set="method" line="172"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="234"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="238"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="243"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="248">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ printPackage : true }</e></m></meta>
		</printTypeDefinition>
		<printFieldWithDelimiter set="method" line="307"><f a="f">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printFieldWithDelimiter>
		<opt params="T" set="method" line="318">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ prefix : "" }</e></m></meta>
		</opt>
		<new public="1" set="method" line="37">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tabString : "\t" }</e></m></meta>
		</new>
		<haxe_doc>This class provides some utility methods to convert elements from the
	macro context to a human-readable String representation.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Ref" params="T" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Type" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t>
			<haxe_doc>Represents a monomorph.

		@see https://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see https://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<t path="Null"><e path="haxe.macro.Type"/></t>
			<haxe_doc>Represents Dynamic.

		@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see https://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed><haxe_doc>A closed structure is considered complete. That is, no further fields
		can be added to it.</haxe_doc></AClosed>
		<AOpened><haxe_doc>An open structure allows having additional fields added to it, which is
		used during type inference. It is closed upon unification.</haxe_doc></AOpened>
		<AConst><haxe_doc>A const structure is one that appears directly in syntax. It cannot be
		assigned to a smaller structure type (that is, it does not allow
		structural sub-typing).</haxe_doc></AConst>
		<AExtend a="tl">
			<t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t>
			<haxe_doc>Represents a structure which extends one or multiple structures defined
		in `tl`.

		@see https://haxe.org/manual/type-system-extensions.html</haxe_doc>
		</AExtend>
		<AClassStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A structure that represents the static fields of a class.</haxe_doc>
		</AClassStatics>
		<AEnumStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>A structure that represents the constructors of an enum.</haxe_doc>
		</AEnumStatics>
		<AAbstractStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>A structure that represents the static fields of an abstract.</haxe_doc>
		</AAbstractStatics>
		<haxe_doc>Represents the kind of the anonymous structure type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<expr set="method">
				<f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ClassKind" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal><haxe_doc>A normal class.</haxe_doc></KNormal>
		<KTypeParameter a="constraints">
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A type parameter class with a set of constraints.</haxe_doc>
		</KTypeParameter>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A structurally extended class.

		@deprecated</haxe_doc>
		</KExtension>
		<KExpr a="expr">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A special kind of class to encode expressions into type parameters.</haxe_doc>
		</KExpr>
		<KGeneric><haxe_doc>A `@:generic` base class.</haxe_doc></KGeneric>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A concrete `@:generic` instance, referencing the original class and the
		applied type parameters.</haxe_doc>
		</KGenericInstance>
		<KMacroType><haxe_doc>A special class for `haxe.macro.MacroType`.

		@deprecated</haxe_doc></KMacroType>
		<KAbstractImpl a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An implementation class of an abstract, i.e. where all its run-time code
		is.</haxe_doc>
		</KAbstractImpl>
		<KGenericBuild><haxe_doc>A `@:genericBuild` class</haxe_doc></KGenericBuild>
		<haxe_doc>Represents the kind of a class.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.BaseType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<x path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</x>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolve>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
				<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.3]]></e></m></meta>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
			<haxe_doc>A variable of property, depending on the `read` and `write` values.</haxe_doc>
		</FVar>
		<FMethod a="k">
			<e path="haxe.macro.MethodKind"/>
			<haxe_doc>A method</haxe_doc>
		</FMethod>
		<haxe_doc>Represents a field kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal><haxe_doc>Normal access (`default`).</haxe_doc></AccNormal>
		<AccNo><haxe_doc>Private access (`null`).</haxe_doc></AccNo>
		<AccNever><haxe_doc>No access (`never`).</haxe_doc></AccNever>
		<AccResolve><haxe_doc>Unused.</haxe_doc></AccResolve>
		<AccCall><haxe_doc>Access through accessor function (`get`, `set`, `dynamic`).</haxe_doc></AccCall>
		<AccInline><haxe_doc>Inline access (`inline`).</haxe_doc></AccInline>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Failed access due to a `@:require` metadata.</haxe_doc>
		</AccRequire>
		<haxe_doc>Represents the variable accessor.</haxe_doc>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal><haxe_doc>A normal method.</haxe_doc></MethNormal>
		<MethInline><haxe_doc>An inline method.

		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></MethInline>
		<MethDynamic><haxe_doc>A dynamic, rebindable method.

		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></MethDynamic>
		<MethMacro><haxe_doc>A macro method.</haxe_doc></MethMacro>
		<haxe_doc>Represents the method kind.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i">
			<x path="Int"/>
			<haxe_doc>An `Int` literal.</haxe_doc>
		</TInt>
		<TFloat a="s">
			<c path="String"/>
			<haxe_doc>A `Float` literal, represented as String to avoid precision loss.</haxe_doc>
		</TFloat>
		<TString a="s">
			<c path="String"/>
			<haxe_doc>A `String` literal.</haxe_doc>
		</TString>
		<TBool a="b">
			<x path="Bool"/>
			<haxe_doc>A `Bool` literal.</haxe_doc>
		</TBool>
		<TNull><haxe_doc>The constant `null`.</haxe_doc></TNull>
		<TThis><haxe_doc>The constant `this`.</haxe_doc></TThis>
		<TSuper><haxe_doc>The constant `super`.</haxe_doc></TSuper>
		<haxe_doc>Represents typed constant.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<t path="Null"><t path="haxe.macro.MetaAccess"/></t>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ModuleType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A class.</haxe_doc>
		</TClassDecl>
		<TEnumDecl a="e">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>An enum.</haxe_doc>
		</TEnumDecl>
		<TTypeDecl a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<haxe_doc>A typedef.</haxe_doc>
		</TTypeDecl>
		<TAbstract a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An abstract.</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a module type. These are the types that can be declared in a Haxe
	module and which are passed to the generators (except `TTypeDecl`).</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on a class instance `c` with type parameters
		`params`.</haxe_doc>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Static access of a field `cf` on a class `c`.</haxe_doc>
		</FStatic>
		<FAnon a="cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on an anonymous structure.</haxe_doc>
		</FAnon>
		<FDynamic a="s">
			<c path="String"/>
			<haxe_doc>Dynamic field access of a field named `s`.</haxe_doc>
		</FDynamic>
		<FClosure a="c:cf">
			<t path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Closure field access of field `cf` on a class instance `c` with type
		parameters `params`.</haxe_doc>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
			<haxe_doc>Field access to an enum constructor `ef` of enum `e`.</haxe_doc>
		</FEnum>
		<haxe_doc>Represents the kind of field access in the typed AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c">
			<e path="haxe.macro.TConstant"/>
			<haxe_doc>A constant.</haxe_doc>
		</TConst>
		<TLocal a="v">
			<t path="haxe.macro.TVar"/>
			<haxe_doc>Reference to a local variable `v`.</haxe_doc>
		</TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
			<haxe_doc>Field access on `e` according to `fa`.</haxe_doc>
		</TField>
		<TTypeExpr a="m">
			<e path="haxe.macro.ModuleType"/>
			<haxe_doc>Reference to a module type `m`.</haxe_doc>
		</TTypeExpr>
		<TParenthesis a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</TParenthesis>
		<TObjectDecl a="fields">
			<c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</TObjectDecl>
		<TArrayDecl a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A call `e(el)`.</haxe_doc>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc><![CDATA[A constructor call `new c<params>(el)`.]]></haxe_doc>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</TUnop>
		<TFunction a="tfunc">
			<t path="haxe.macro.TFunc"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>A variable declaration `var v` or `var v = expr`.</haxe_doc>
		</TVar>
		<TBlock a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A block declaration `{el}`.</haxe_doc>
		</TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>Represents a `switch` expression with related cases and an optional
		`default` case if edef != null.</haxe_doc>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</TTry>
		<TReturn a="e">
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</TReturn>
		<TBreak><haxe_doc>A `break` expression.</haxe_doc></TBreak>
		<TContinue><haxe_doc>A `continue` expression.</haxe_doc></TContinue>
		<TThrow a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><e path="haxe.macro.ModuleType"/></t>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `@m e1` expression.</haxe_doc>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
			<haxe_doc>Access to an enum parameter (generated by the pattern matcher).</haxe_doc>
		</TEnumParameter>
		<haxe_doc>Represents kind of a node in the typed AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypedExpr" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="haxe.macro.TypeTools" params="" file="/usr/local/lib/haxe/std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="41" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="43" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="98" static="1">
			<f a="type">
				<t path="Null"><e path="haxe.macro.Type"/></t>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypePath set="method" line="145" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="367" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
			</f>
			<meta><m n=":value"><e>{ isStatic : false }</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
	</class>
	<class path="java.Boot" params="" file="/usr/local/lib/haxe/std/java/Boot.hx" extern="1"><meta><m n=":dox"><e>hide</e></m></meta></class>
	<class path="java.Lib" params="" file="/usr/local/lib/haxe/std/java/Lib.hx">
		<nativeArray public="1" params="T" get="inline" set="null" line="38" static="1">
			<f a="arr:equalLengthRequired">
				<c path="Array"><c path="nativeArray.T"/></c>
				<x path="Bool"/>
				<c path="java.NativeArray"><c path="nativeArray.T"/></c>
			</f>
			<haxe_doc>Returns a native array from the supplied Array. This native array is unsafe to be written on,
		as it may or may not be linked to the actual Array implementation.

		If `equalLengthRequired` is true, the result might be a copy of an array with the correct size.</haxe_doc>
		</nativeArray>
		<nativeType public="1" params="T" get="inline" set="null" line="53" static="1">
			<f a="obj">
				<c path="nativeType.T"/>
				<c path="java.lang.Class"><c path="nativeType.T"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":deprecated"><e>"The function `nativeType` is deprecated and will be removed in later versions. Please use `getNativeType` instead"</e></m>
			</meta>
			<haxe_doc>Gets the native `java.lang.Class` from the supplied object. Will throw an exception in case of null being passed.
		[deprecated] - use `getNativeType` instead</haxe_doc>
		</nativeType>
		<getNativeType public="1" params="T" get="inline" set="null" line="62" static="1">
			<f a="obj">
				<c path="getNativeType.T"/>
				<c path="java.lang.Class"><c path="getNativeType.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Gets the native `java.lang.Class` from the supplied object. Will throw an exception in case of null being passed.
		[deprecated] - use `getNativeType` instead</haxe_doc>
		</getNativeType>
		<fromNativeType public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="t">
				<c path="java.lang.Class"><c path="fromNativeType.T"/></c>
				<x path="Class"><c path="fromNativeType.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a Class<> equivalent to the native java.lang.Class type.]]></haxe_doc>
		</fromNativeType>
		<toNativeType public="1" params="T" get="inline" set="null" line="78" static="1">
			<f a="cl">
				<x path="Class"><c path="toNativeType.T"/></x>
				<c path="java.lang.Class"><c path="toNativeType.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a java.lang.Class equivalent to the Haxe Class<> type.]]></haxe_doc>
		</toNativeType>
		<toNativeEnum public="1" params="T" get="inline" set="null" line="86" static="1">
			<f a="cl">
				<x path="Enum"><c path="toNativeEnum.T"/></x>
				<c path="java.lang.Class"><c path="toNativeEnum.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a java.lang.Class equivalent to the Haxe Enum<> type.]]></haxe_doc>
		</toNativeEnum>
		<array public="1" params="T" set="method" line="96" static="1">
			<f a="native">
				<c path="java.NativeArray"><c path="array.T"/></c>
				<c path="Array"><c path="array.T"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":generic"/>
			</meta>
			<haxe_doc>Returns a Haxe Array of a native Array.
		Unless `copy` is true, it won't copy the contents of the native array,
		so unless any operation triggers an array resize, all changes made to the Haxe array will affect the native array argument.</haxe_doc>
		</array>
		<doArray params="T" get="inline" set="null" line="101" static="1">
			<f a="native">
				<c path="java.NativeArray"><c path="doArray.T"/></c>
				<c path="Array"><c path="doArray.T"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</doArray>
		<array_Int public="1" set="method" line="111" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></array_Int>
		<array_Float public="1" set="method" line="116" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></array_Float>
		<array_Bool public="1" set="method" line="121" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<c path="Array"><x path="Bool"/></c>
</f></array_Bool>
		<array_java_Int8 public="1" set="method" line="126" static="1"><f a="native">
	<c path="java.NativeArray"><x path="java.Int8"/></c>
	<c path="Array"><x path="java.Int8"/></c>
</f></array_java_Int8>
		<array_java_Int16 public="1" set="method" line="131" static="1"><f a="native">
	<c path="java.NativeArray"><x path="java.Int16"/></c>
	<c path="Array"><x path="java.Int16"/></c>
</f></array_java_Int16>
		<array_java_Char16 public="1" set="method" line="136" static="1"><f a="native">
	<c path="java.NativeArray"><x path="java.Char16"/></c>
	<c path="Array"><x path="java.Char16"/></c>
</f></array_java_Char16>
		<array_Single public="1" set="method" line="141" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Single"/></c>
	<c path="Array"><x path="Single"/></c>
</f></array_Single>
		<array_haxe_Int64 public="1" set="method" line="146" static="1"><f a="native">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="Array"><x path="haxe.Int64"/></c>
</f></array_haxe_Int64>
		<arrayAlloc public="1" params="T" set="method" line="154" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="Array"><c path="arrayAlloc.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Allocates a new Haxe Array with a predetermined size</haxe_doc>
		</arrayAlloc>
		<lock public="1" params="T" get="inline" set="null" line="167" static="1">
			<f a="obj:block">
				<d/>
				<c path="lock.T"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Ensures that one thread does not enter a critical section of code while another thread
		is in the critical section. If another thread attempts to enter a locked code, it
		will wait, block, until the object is released.
		This is the equivalent to "synchronized" in java code.

		This method only exists at compile-time, so it can't be called via reflection.</haxe_doc>
		</lock>
		<haxe_doc>Platform-specific Java Library. Provides some platform-specific functions for the Java target,
	such as conversion from Haxe types to native types and vice-versa.</haxe_doc>
		<meta><m n=":native"><e>"haxe.java.Lib"</e></m></meta>
	</class>
	<abstract path="java.Int8" params="" file="/usr/local/lib/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="java.Int8"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="java.Int16" params="" file="/usr/local/lib/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="java.Int16"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="java.Char16" params="" file="/usr/local/lib/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="java.Char16"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="java.Int64" params="" file="/usr/local/lib/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from>
			<icast><x path="Float"/></icast>
			<icast><x path="Int"/></icast>
		</from>
		<this><x path="java.Int64"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="java._StdTypes.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/java/StdTypes.hx" private="1" module="java.StdTypes" extern="1">
	<addI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addI>
	<add public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</add>
	<mulI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulI>
	<mul public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mul>
	<modI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modI>
	<mod public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</mod>
	<subI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subI>
	<sub public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</sub>
	<divI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divI>
	<div public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</div>
	<orI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</orI>
	<or public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<xorI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xorI>
	<xor public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<andI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</andI>
	<and public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<shlI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shlI>
	<shl public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shl>
	<shrI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shrI>
	<shr public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shr>
	<ushrI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</ushrI>
	<ushr public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</ushr>
	<gt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<lt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<lte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<bneg public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</bneg>
	<neg public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>-A</e></m>
		</meta>
	</neg>
	<preIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="java._StdTypes.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/java/StdTypes.hx" private="1" module="java.StdTypes" extern="1">
		<addI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addI>
		<add public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</add>
		<mulI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulI>
		<mul public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mul>
		<modI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modI>
		<mod public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</mod>
		<subI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subI>
		<sub public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</sub>
		<divI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divI>
		<div public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</div>
		<orI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</orI>
		<or public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<xorI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xorI>
		<xor public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<andI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</andI>
		<and public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<shlI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shlI>
		<shl public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shl>
		<shrI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shrI>
		<shr public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shr>
		<ushrI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</ushrI>
		<ushr public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</ushr>
		<gt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<lt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<lte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<bneg public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</bneg>
		<neg public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>-A</e></m>
			</meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<meta><m n=":final"/></meta>
	</class>
	<class path="java.lang.ThreadLocal" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ThreadLocal.class" extern="1">
		<remove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</remove>
		<set public="1" set="method">
			<f a="param1">
				<c path="java.lang.ThreadLocal.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set>
		<get public="1" set="method">
			<f a=""><c path="java.lang.ThreadLocal.T"/></f>
			<meta><m n=":overload"/></meta>
		</get>
		<initialValue set="method">
			<f a=""><c path="java.lang.ThreadLocal.T"/></f>
			<meta><m n=":overload"/></meta>
		</initialValue>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ThreadLocal"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ThreadLocal"</e>
			</m>
		</meta>
	</class>
	<class path="java.internal.Exceptions" params="" file="/usr/local/lib/haxe/std/java/internal/Exceptions.hx">
		<exception expr="new java.lang.ThreadLocal&lt;java.lang.Throwable&gt;()" line="29" static="1">
			<c path="java.lang.ThreadLocal"><c path="java.lang.Throwable"/></c>
			<meta><m n=":value"><e><![CDATA[new java.lang.ThreadLocal<java.lang.Throwable>()]]></e></m></meta>
		</exception>
		<setException set="method" line="31" static="1">
			<f a="exc">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</setException>
		<currentException public="1" set="method" line="36" static="1"><f a=""><c path="java.lang.Throwable"/></f></currentException>
		<meta><m n=":native"><e>"haxe.lang.Exceptions"</e></m></meta>
	</class>
	<class path="java.io.Serializable" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/Serializable.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.io.Serializable"</e></m>
	<m n=":javaCanonical">
		<e>"java.io"</e>
		<e>"Serializable"</e>
	</m>
</meta></class>
	<class path="java.lang.Throwable" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Throwable.class" extern="1">
		<implements path="java.io.Serializable"/>
		<getSuppressed public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Throwable"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getSuppressed>
		<addSuppressed public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</addSuppressed>
		<setStackTrace public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setStackTrace>
		<getStackTrace public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c></f>
			<meta><m n=":overload"/></meta>
		</getStackTrace>
		<fillInStackTrace public="1" set="method">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</fillInStackTrace>
		<printStackTrace public="1" set="method">
			<f a="param1">
				<c path="java.io.PrintWriter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<printStackTrace public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</printStackTrace>
				<printStackTrace public="1" set="method">
					<f a="param1">
						<c path="java.io.PrintStream"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</printStackTrace>
			</overloads>
		</printStackTrace>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<initCause public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<c path="java.lang.Throwable"/>
			</f>
			<meta><m n=":overload"/></meta>
		</initCause>
		<getCause public="1" set="method">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</getCause>
		<getLocalizedMessage public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalizedMessage>
		<getMessage public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getMessage>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Throwable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Throwable"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Exception" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Exception.class" extern="1">
		<extends path="java.lang.Throwable"/>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Exception"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Exception"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.RuntimeException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/RuntimeException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.RuntimeException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"RuntimeException"</e>
			</m>
		</meta>
	</class>
	<class path="java.internal._Exceptions.HaxeException" params="" file="/usr/local/lib/haxe/std/java/internal/Exceptions.hx" private="1" module="java.internal.Exceptions">
		<extends path="java.lang.RuntimeException"/>
		<wrap public="1" set="method" line="86" static="1"><f a="obj">
	<d/>
	<c path="java.lang.RuntimeException"/>
</f></wrap>
		<obj><d/></obj>
		<getObject public="1" set="method" line="60"><f a=""><d/></f></getObject>
		<fillInStackTrace public="1" set="method" line="66" override="1">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</fillInStackTrace>
		<toString public="1" set="method" line="72" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<getMessage public="1" set="method" line="77" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getMessage>
		<new public="1" set="method" line="47"><f a="obj:msg:cause">
	<d/>
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":classCode"><e>"public static final long serialVersionUID = 5956463319488556322L;"</e></m>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.HaxeException"</e></m>
		</meta>
	</class>
	<class path="java.internal._FieldLookup.FieldLookup" params="" file="/usr/local/lib/haxe/std/java/internal/FieldLookup.hx" private="1" module="java.internal.FieldLookup">
		<hash public="1" set="method" line="34" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\treturn s.hashCode();\n\t"</e></m></meta>
		</hash>
		<findHash public="1" set="method" line="39" static="1">
			<f a="hash:hashs:length">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</findHash>
		<removeString set="method" line="61" static="1"><f a="a:length:pos">
	<c path="java.NativeArray"><c path="String"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeString>
		<removeFloat set="method" line="66" static="1"><f a="a:length:pos">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeFloat>
		<removeDynamic set="method" line="71" static="1"><f a="a:length:pos">
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeDynamic>
		<__insert params="T" get="inline" set="null" line="77" static="1">
			<f a="a:length:pos:x">
				<c path="java.NativeArray"><c path="__insert.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="__insert.T"/>
				<c path="java.NativeArray"><c path="__insert.T"/></c>
			</f>
			<meta><m n=":extern"/></meta>
		</__insert>
		<insertString set="method" line="121" static="1"><f a="a:length:pos:x">
	<c path="java.NativeArray"><c path="String"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.NativeArray"><c path="String"/></c>
</f></insertString>
		<insertFloat set="method" line="122" static="1"><f a="a:length:pos:x">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="java.NativeArray"><x path="Float"/></c>
</f></insertFloat>
		<insertDynamic set="method" line="123" static="1"><f a="a:length:pos:x">
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<c path="java.NativeArray"><d/></c>
</f></insertDynamic>
		<meta>
			<m n=":native"><e>"haxe.lang.FieldLookup"</e></m>
			<m n=":keep"/>
			<m n=":static"/>
		</meta>
	</class>
	<class path="java.internal.Function" params="" file="/usr/local/lib/haxe/std/java/internal/Function.hx">
		<new set="method" line="34"><f a="arity:type">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* These classes are automatically generated by the compiler. They are only
 * here so there is an option for e.g. defining them as externs if you are compiling
 * in modules (untested)
 *
 * @author waneck</haxe_doc>
		<meta>
			<m n=":abstract"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Function"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="java.internal._Function.VarArgsBase" params="" file="/usr/local/lib/haxe/std/java/internal/Function.hx" private="1" module="java.internal.Function">
		<extends path="java.internal.Function"/>
		<__hx_invokeDynamic public="1" set="method" line="42"><f a="dynArgs">
	<c path="Array"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<meta>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.VarArgsBase"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="java.internal.VarArgsFunction" params="" file="/usr/local/lib/haxe/std/java/internal/Function.hx" module="java.internal.Function">
		<extends path="java.internal._Function.VarArgsBase"/>
		<fun><f a="">
	<c path="Array"><d/></c>
	<d/>
</f></fun>
		<__hx_invokeDynamic public="1" set="method" line="58" override="1"><f a="dynArgs">
	<c path="Array"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<new public="1" set="method" line="52"><f a="fun">
	<f a="">
		<c path="Array"><d/></c>
		<d/>
	</f>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.VarArgsFunction"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="java.internal.Closure" params="" file="/usr/local/lib/haxe/std/java/internal/Function.hx" module="java.internal.Function">
		<extends path="java.internal._Function.VarArgsBase"/>
		<obj><d/></obj>
		<field><c path="String"/></field>
		<__hx_invokeDynamic public="1" set="method" line="76" override="1"><f a="dynArgs">
	<c path="Array"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<equals public="1" set="method" line="81"><f a="obj">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" line="90">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hashCode>
		<new public="1" set="method" line="69"><f a="obj:field">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Closure"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<typedef path="java.internal._HxObject.StdType" params="" file="/usr/local/lib/haxe/std/java/internal/HxObject.hx" private="1" module="java.internal.HxObject"><c path="Type"/></typedef>
	<class path="java.internal.IHxObject" params="" file="/usr/local/lib/haxe/std/java/internal/HxObject.hx" module="java.internal.HxObject" interface="1"><meta>
	<m n=":native"><e>"haxe.lang.IHxObject"</e></m>
	<m n=":keep"/>
</meta></class>
	<class path="java.internal._HxObject.HxObject" params="" file="/usr/local/lib/haxe/std/java/internal/HxObject.hx" private="1" module="java.internal.HxObject">
		<implements path="java.internal.IHxObject"/>
		<meta>
			<m n=":native"><e>"haxe.lang.HxObject"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="java.internal.DynamicObject" params="" file="/usr/local/lib/haxe/std/java/internal/HxObject.hx" module="java.internal.HxObject">
		<extends path="java.internal._HxObject.HxObject"/>
		<toString public="1" set="method" line="44">
			<f a=""><c path="String"/></f>
			<meta><m n=":skipReflection"/></meta>
		</toString>
		<meta>
			<m n=":native"><e>"haxe.lang.DynamicObject"</e></m>
			<m n=":keep"/>
		</meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="java.internal.HxEnum" params="" file="/usr/local/lib/haxe/std/java/internal/HxObject.hx" module="java.internal.HxObject">
		<index set="null">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</index>
		<getTag public="1" set="method" line="78"><f a=""><c path="String"/></f></getTag>
		<getParams public="1" set="method" line="83"><f a=""><c path="Array"><a/></c></f></getParams>
		<toString public="1" set="method" line="88"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="73">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.Enum"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="java.internal._HxObject.ParamEnum" params="" file="/usr/local/lib/haxe/std/java/internal/HxObject.hx" private="1" module="java.internal.HxObject">
		<extends path="java.internal.HxEnum"/>
		<params set="null">
			<x path="haxe.ds.Vector"><d/></x>
			<meta><m n=":readOnly"/></meta>
		</params>
		<getParams public="1" set="method" line="105" override="1"><f a=""><c path="Array"><a/></c></f></getParams>
		<toString public="1" set="method" line="110" override="1"><f a=""><c path="String"/></f></toString>
		<equals public="1" set="method" line="128"><f a="obj">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" line="149">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hashCode>
		<new public="1" set="method" line="99">
			<f a="index:params">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.ParamEnum"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="java.internal.IEquatable" params="" file="/usr/local/lib/haxe/std/java/internal/IEquatable.hx" interface="1">
		<equals public="1" set="method"><f a="to">
	<d/>
	<x path="Bool"/>
</f></equals>
		<meta>
			<m n=":native"><e>"haxe.lang.IEquatable"</e></m>
			<m n=":keep"/>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="java.internal.Runtime" params="" file="/usr/local/lib/haxe/std/java/internal/Runtime.hx">
		<undefined public="1" expr="{ }" line="61" static="1">
			<d/>
			<meta><m n=":value"><e>{ }</e></m></meta>
		</undefined>
		<closure public="1" set="method" line="66" static="1">
			<f a="obj:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\treturn new haxe.lang.Closure(obj, field);\n\t"</e></m></meta>
		</closure>
		<eq public="1" set="method" line="93" static="1">
			<f a="v1:v2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\t\tif (v1 == v2)\n\t\t\t\treturn true;\n\t\t\tif (v1 == null || v2 == null)\n\t\t\t\treturn false;\n\n\t\t\tif (v1 instanceof java.lang.Number)\n\t\t\t{\n\t\t\t\tif (!(v2 instanceof java.lang.Number))\n\t\t\t\t\treturn false;\n\n\t\t\t\tjava.lang.Number v1c = (java.lang.Number) v1;\n\t\t\t\tjava.lang.Number v2c = (java.lang.Number) v2;\n\t\t\t\tif (v1 instanceof java.lang.Long || v2 instanceof java.lang.Long)\n\t\t\t\t\treturn v1c.longValue() == v2c.longValue();\n\t\t\t\treturn v1c.doubleValue() == v2c.doubleValue();\n\t\t\t} else if (v1 instanceof java.lang.String || v1 instanceof haxe.lang.IEquatable) { //TODO see what happens with Boolean cases\n\t\t\t\treturn v1.equals(v2);\n\t\t\t}\n\n\t\t\treturn false;\n\t"</e></m></meta>
		</eq>
		<refEq public="1" set="method" line="109" static="1">
			<f a="v1:v2">
				<a/>
				<a/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tif (v1 == v2)\n\t\t\treturn true;\n\n\t\tif (v1 instanceof java.lang.String || v1 instanceof haxe.lang.IEquatable)\n\t\t{\n\t\t\treturn v1 != null && v1.equals(v2);\n\t\t} else {\n\t\t\treturn v1 == v2;\n\t\t}\n\t"]]></e></m></meta>
		</refEq>
		<valEq public="1" set="method" line="117" static="1">
			<f a="v1:v2">
				<a/>
				<a/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\treturn v1 == v2 || (v1 != null && v1.equals(v2));\n\t"]]></e></m></meta>
		</valEq>
		<toDouble public="1" set="method" line="125" static="1">
			<f a="obj">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\treturn (obj == null) ? 0.0 : ((java.lang.Number) obj).doubleValue();\n\t"</e></m></meta>
		</toDouble>
		<toBool public="1" set="method" line="133" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\treturn (obj == null) ? false : ((java.lang.Boolean) obj).booleanValue();\n\t"</e></m></meta>
		</toBool>
		<toInt public="1" set="method" line="141" static="1">
			<f a="obj">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\treturn (obj == null) ? 0 : ((java.lang.Number) obj).intValue();\n\t"</e></m></meta>
		</toInt>
		<toLong public="1" set="method" line="146" static="1"><f a="obj">
	<d/>
	<x path="haxe.Int64"/>
</f></toLong>
		<isDouble public="1" set="method" line="159" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tif (obj != null && obj instanceof java.lang.Number)\n\t\t{\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t"]]></e></m></meta>
		</isDouble>
		<isInt public="1" set="method" line="164" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isInt public="1" set="method" line="174">
	<f a="num">
		<c path="java.lang.Number"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isInt></overloads>
		</isInt>
		<slowHasField public="1" set="method" line="211" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tjava.lang.Class cl = null;\n\t\tif (o instanceof java.lang.Class)\n\t\t{\n\t\t\tif (o == java.lang.String.class)\n\t\t\t\treturn field.equals(\"fromCharCode\");\n\n\t\t\tcl = (java.lang.Class) o;\n\t\t} else if (o instanceof java.lang.String) {\n\t\t\treturn haxe.lang.StringRefl.handleGetField( (java.lang.String) o, field, false) != null;\n\t\t} else {\n\t\t\tcl = o.getClass();\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tjava.lang.reflect.Field f = cl.getField(field);\n\t\t\treturn true;\n\t\t}\n\t\tcatch(Throwable t)\n\t\t{\n\t\t\tjava.lang.reflect.Method[] ms = cl.getMethods();\n\t\t\tfor (int i = 0; i < ms.length; i++)\n\t\t\t{\n\t\t\t\tif (ms[i].getName().equals(field))\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t"]]></e></m></meta>
		</slowHasField>
		<compare public="1" set="method" line="242" static="1">
			<f a="v1:v2">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tif (v1 == v2)\n\t\t\t\treturn 0;\n\t\t\tif (v1 == null) return -1;\n\t\t\tif (v2 == null) return 1;\n\n\t\t\tif (v1 instanceof java.lang.Number || v2 instanceof java.lang.Number)\n\t\t\t{\n\t\t\t\tjava.lang.Number v1c = (java.lang.Number) v1;\n\t\t\t\tjava.lang.Number v2c = (java.lang.Number) v2;\n\n\t\t\t\tif (v1 instanceof java.lang.Long || v2 instanceof java.lang.Long)\n\t\t\t\t{\n\t\t\t\t\tlong l1 = (v1 == null) ? 0L : v1c.longValue();\n\t\t\t\t\tlong l2 = (v2 == null) ? 0L : v2c.longValue();\n          return (l1 < l2) ? -1 : (l1 > l2) ? 1 : 0;\n\t\t\t\t} else {\n\t\t\t\t\tdouble d1 = (v1 == null) ? 0.0 : v1c.doubleValue();\n\t\t\t\t\tdouble d2 = (v2 == null) ? 0.0 : v2c.doubleValue();\n\n          return (d1 < d2) ? -1 : (d1 > d2) ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//if it's not a number it must be a String\n\t\t\treturn ((java.lang.String) v1).compareTo((java.lang.String) v2);\n\t"]]></e></m></meta>
		</compare>
		<plus public="1" set="method" line="264" static="1">
			<f a="v1:v2">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\t\tif (v1 instanceof java.lang.String || v2 instanceof java.lang.String)\n\t\t\t\treturn toString(v1) + toString(v2);\n\n\t\t\tif (v1 instanceof java.lang.Number || v2 instanceof java.lang.Number)\n\t\t\t{\n\t\t\t\tjava.lang.Number v1c = (java.lang.Number) v1;\n\t\t\t\tjava.lang.Number v2c = (java.lang.Number) v2;\n\n\t\t\t\tdouble d1 = (v1 == null) ? 0.0 : v1c.doubleValue();\n\t\t\t\tdouble d2 = (v2 == null) ? 0.0 : v2c.doubleValue();\n\n\t\t\t\treturn d1 + d2;\n\t\t\t}\n\n\t\t\tthrow new java.lang.IllegalArgumentException(\"Cannot dynamically add \" + v1 + \" and \" + v2);\n\t"</e></m></meta>
		</plus>
		<slowGetField public="1" set="method" line="320" static="1">
			<f a="obj:field:throwErrors">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\n\tif (obj == null)\n\t\tif (throwErrors)\n\t\t\tthrow new java.lang.NullPointerException(\"Cannot access field '\" + field + \"' of null.\");\n\t\telse\n\t\t\treturn null;\n\n\tjava.lang.Class cl = null;\n\ttry\n\t{\n\t\tif (obj instanceof java.lang.Class)\n\t\t{\n\t\t\tif (obj == java.lang.String.class && field.equals(\"fromCharCode\"))\n\t\t\t\treturn new haxe.lang.Closure(haxe.lang.StringExt.class, field);\n\n\t\t\tcl = (java.lang.Class) obj;\n\t\t\tobj = null;\n\t\t} else if (obj instanceof java.lang.String) {\n\t\t\treturn haxe.lang.StringRefl.handleGetField((java.lang.String) obj, field, throwErrors);\n\t\t} else {\n\t\t\tcl = obj.getClass();\n\t\t}\n\n\t\tjava.lang.reflect.Field f = cl.getField(field);\n\t\tf.setAccessible(true);\n\t\treturn f.get(obj);\n\t} catch (Throwable t)\n\t{\n\t\ttry\n\t\t{\n\t\t\tjava.lang.reflect.Method[] ms = cl.getMethods();\n\t\t\tfor (int i = 0; i < ms.length; i++)\n\t\t\t{\n\t\t\t\tif (ms[i].getName().equals(field))\n\t\t\t\t{\n\t\t\t\t\treturn new haxe.lang.Closure(obj != null ? obj : cl, field);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t2)\n\t\t{\n\n\t\t}\n\n\t\tif (throwErrors)\n\t\t\tthrow HaxeException.wrap(t);\n\n\t\treturn null;\n\t}\n\n\t"]]></e></m></meta>
		</slowGetField>
		<slowSetField public="1" set="method" line="355" static="1">
			<f a="obj:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\tjava.lang.Class cl = null;\n\t\tif (obj instanceof java.lang.Class)\n\t\t{\n\t\t\tcl = (java.lang.Class) obj;\n\t\t\tobj = null;\n\t\t} else {\n\t\t\tcl = obj.getClass();\n\t\t}\n\n\t\ttry {\n\t\t\tjava.lang.reflect.Field f = cl.getField(field);\n\t\t\tf.setAccessible(true);\n\n\t\t\t//FIXME we must evaluate if field to be set receives either int or double\n\t\t\tif (isInt(value))\n\t\t\t{\n\t\t\t\tf.setInt(obj, toInt(value));\n\t\t\t} else if (isDouble(value)) {\n\t\t\t\tf.setDouble(obj, toDouble(value));\n\t\t\t} else {\n\t\t\t\tf.set(obj, value);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t\tcatch (Throwable t)\n\t\t{\n\t\t\tthrow HaxeException.wrap(t);\n\t\t}\n\t"</e></m></meta>
		</slowSetField>
		<slowCallField public="1" set="method" line="501" static="1">
			<f a="obj:field:args">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tjava.lang.Class cl = null;\n\t\tif (obj instanceof java.lang.Class)\n\t\t{\n\t\t\tif (obj == java.lang.String.class && field.equals(\"fromCharCode\"))\n\t\t\t\treturn haxe.lang.StringExt.fromCharCode(toInt(args.__get(0)));\n\n\t\t\tcl = (java.lang.Class) obj;\n\t\t\tobj = null;\n\t\t} else if (obj instanceof java.lang.String) {\n\t\t\treturn haxe.lang.StringRefl.handleCallField((java.lang.String) obj, field, args);\n\t\t} else {\n\t\t\tcl = obj.getClass();\n\t\t}\n\n\t\tif (args == null) args = new Array();\n\n\t\tint len = args.length;\n\t\tjava.lang.Class[] cls = new java.lang.Class[len];\n\t\tjava.lang.Object[] objs = new java.lang.Object[len];\n\n\t\tjava.lang.reflect.Method[] ms = cl.getMethods();\n\t\tint msl = ms.length;\n\t\tint realMsl = 0;\n\t\tfor(int i =0; i < msl; i++)\n\t\t{\n\t\t\tif (!ms[i].getName().equals(field) || (!ms[i].isVarArgs() && ms[i].getParameterTypes().length != len))\n\t\t\t{\n\t\t\t\tms[i] = null;\n\t\t\t} else {\n\t\t\t\tms[realMsl] = ms[i];\n\t\t\t\tif (realMsl != i)\n\t\t\t\t\tms[i] = null;\n\t\t\t\trealMsl++;\n\t\t\t}\n\t\t}\n\n\t\tboolean hasNumber = false;\n\n\t\tfor (int i = 0; i < len; i++)\n\t\t{\n\t\t\tObject o = args.__get(i);\n\t\t\tif (o == null)\n\t\t\t{\n\t\t\t\tcontinue; //can be anything\n\t\t\t}\n\t\t\tobjs[i]= o;\n\t\t\tcls[i] = o.getClass();\n\t\t\tboolean isNum = false;\n\n\t\t\tif (o instanceof java.lang.Number)\n\t\t\t{\n\t\t\t\tcls[i] = java.lang.Number.class;\n\t\t\t\tisNum = hasNumber = true;\n\t\t\t} else if (o instanceof java.lang.Boolean) {\n\t\t\t\tcls[i] = java.lang.Boolean.class;\n\t\t\t\tisNum = true;\n\t\t\t}\n\n\t\t\tmsl = realMsl;\n\t\t\trealMsl = 0;\n\n\t\t\tfor (int j = 0; j < msl; j++)\n\t\t\t{\n\t\t\t\tjava.lang.Class[] allcls = ms[j].getParameterTypes();\n\t\t\t\tif (i < allcls.length)\n\t\t\t\t{\n\t\t\t\t\tif (!  ((isNum && allcls[i].isPrimitive()) || allcls[i].isAssignableFrom(cls[i])) )\n\t\t\t\t\t{\n\t\t\t\t\t\tms[j] = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tms[realMsl] = ms[j];\n\t\t\t\t\t\tif (realMsl != j)\n\t\t\t\t\t\t\tms[j] = null;\n\t\t\t\t\t\trealMsl++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tjava.lang.reflect.Method found;\n\t\tif (ms.length == 0 || (found = ms[0]) == null)\n\t\t\tthrow haxe.lang.HaxeException.wrap(\"No compatible method found for: \" + field);\n\n\t\tif (hasNumber)\n\t\t{\n\t\t\tjava.lang.Class[] allcls = found.getParameterTypes();\n\n\t\t\tfor (int i = 0; i < len; i++)\n\t\t\t{\n\t\t\t\tjava.lang.Object o = objs[i];\n\t\t\t\tif (o instanceof java.lang.Number)\n\t\t\t\t{\n\t\t\t\t\tjava.lang.Class curCls = null;\n\t\t\t\t\tif (i < allcls.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurCls = allcls[i];\n\t\t\t\t\t\tif (!curCls.isAssignableFrom(o.getClass()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tString name = curCls.getName();\n\t\t\t\t\t\t\tif (name.equals(\"double\") || name.equals(\"java.lang.Double\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).doubleValue();\n\t\t\t\t\t\t\t} else if (name.equals(\"int\") || name.equals(\"java.lang.Integer\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).intValue();\n\t\t\t\t\t\t\t} else if (name.equals(\"float\") || name.equals(\"java.lang.Float\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).floatValue();\n\t\t\t\t\t\t\t} else if (name.equals(\"byte\") || name.equals(\"java.lang.Byte\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).byteValue();\n\t\t\t\t\t\t\t} else if (name.equals(\"short\") || name.equals(\"java.lang.Short\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).shortValue();\n\t\t\t\t\t\t\t} else if (name.equals(\"long\") || name.equals(\"java.lang.Long\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).longValue();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} //else varargs not handled TODO\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tfound.setAccessible(true);\n\t\t\treturn found.invoke(obj, objs);\n\t\t}\n\n\t\tcatch (java.lang.reflect.InvocationTargetException e)\n\t\t{\n\t\t\tthrow haxe.lang.HaxeException.wrap(e.getCause());\n\t\t}\n\n\t\tcatch (Throwable t)\n\t\t{\n\t\t\tthrow haxe.lang.HaxeException.wrap(t);\n\t\t}\n\t"]]></e></m></meta>
		</slowCallField>
		<callField public="1" set="method" line="514" static="1">
			<f a="obj:field:args">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\tif (obj instanceof haxe.lang.IHxObject)\n\t\t{\n\t\t\treturn ((haxe.lang.IHxObject) obj).__hx_invokeField(field, args);\n\t\t}\n\n\t\treturn slowCallField(obj, field, args);\n\t"</e></m></meta>
		</callField>
		<getField public="1" set="method" line="527" static="1">
			<f a="obj:field:throwErrors">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\n\t\tif (obj instanceof haxe.lang.IHxObject)\n\t\t\treturn ((haxe.lang.IHxObject) obj).__hx_getField(field, throwErrors, false, false);\n\n\t\treturn slowGetField(obj, field, throwErrors);\n\n\t"</e></m></meta>
		</getField>
		<getField_f public="1" set="method" line="540" static="1">
			<f a="obj:field:throwErrors">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\n\t\tif (obj instanceof haxe.lang.IHxObject)\n\t\t\treturn ((haxe.lang.IHxObject) obj).__hx_getField_f(field, throwErrors, false);\n\n\t\treturn toDouble(slowGetField(obj, field, throwErrors));\n\n\t"</e></m></meta>
		</getField_f>
		<setField public="1" set="method" line="553" static="1">
			<f a="obj:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\n\t\tif (obj instanceof haxe.lang.IHxObject)\n\t\t\treturn ((haxe.lang.IHxObject) obj).__hx_setField(field, value, false);\n\n\t\treturn slowSetField(obj, field, value);\n\n\t"</e></m></meta>
		</setField>
		<setField_f public="1" set="method" line="566" static="1">
			<f a="obj:field:value">
				<d/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\n\t\tif (obj instanceof haxe.lang.IHxObject)\n\t\t\treturn ((haxe.lang.IHxObject) obj).__hx_setField_f(field, value, false);\n\n\t\treturn toDouble(slowSetField(obj, field, value));\n\n\t"</e></m></meta>
		</setField_f>
		<toString public="1" set="method" line="571" static="1">
			<f a="obj">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</toString>
		<isFinite public="1" set="method" line="581" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></isFinite>
		<haxe_doc>This class is meant for internal compiler use only. It provides the Haxe runtime
 compatibility to the host language. Do not access it directly.</haxe_doc>
		<meta>
			<m n=":native"><e>"haxe.lang.Runtime"</e></m>
			<m n=":nativeGen"/>
			<m n=":classCode"><e><![CDATA["\n\tpublic static java.lang.Object getField(haxe.lang.IHxObject obj, java.lang.String field, boolean throwErrors)\n\t{\n\t\tif (obj == null && !throwErrors) return null;\n\t\treturn obj.__hx_getField(field, throwErrors, false, false);\n\t}\n\n\tpublic static double getField_f(haxe.lang.IHxObject obj, java.lang.String field, boolean throwErrors)\n\t{\n\t\tif (obj == null && !throwErrors) return 0.0;\n\t\treturn obj.__hx_getField_f(field, throwErrors, false);\n\t}\n\n\tpublic static java.lang.Object setField(haxe.lang.IHxObject obj, java.lang.String field, java.lang.Object value)\n\t{\n\t\treturn obj.__hx_setField(field, value, false);\n\t}\n\n\tpublic static double setField_f(haxe.lang.IHxObject obj, java.lang.String field, double value)\n\t{\n\t\treturn obj.__hx_setField_f(field, value, false);\n\t}\n\n\tpublic static java.lang.Object callField(haxe.lang.IHxObject obj, java.lang.String field, Array<?> args)\n\t{\n\t\treturn obj.__hx_invokeField(field, args);\n\t}\n"]]></e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<typedef path="java.internal._StringExt.NativeString" params="" file="/usr/local/lib/haxe/std/java/internal/StringExt.hx" private="1" module="java.internal.StringExt"><c path="String"/></typedef>
	<class path="java.internal._StringExt.StringExt" params="" file="/usr/local/lib/haxe/std/java/internal/StringExt.hx" private="1" module="java.internal.StringExt">
		<charAt public="1" set="method" line="36" static="1">
			<f a="me:index">
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tif ( index >= me.length() || index < 0 )\n\t\t\t\treturn \"\";\n\t\t\telse\n\t\t\t\treturn java.lang.Character.toString(me.charAt(index));\n\t"]]></e></m></meta>
		</charAt>
		<charCodeAt public="1" set="method" line="47" static="1">
			<f a="me:index">
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tif ( index >= me.length() || index < 0 )\n\t\t\t\treturn null;\n\t\t\telse\n\t\t\t\treturn (int) me.charAt(index);\n\t"]]></e></m></meta>
		</charCodeAt>
		<indexOf public="1" set="method" line="58" static="1">
			<f a="me:str:?startIndex">
				<t path="java.internal._StringExt.NativeString"/>
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tint sIndex = (startIndex != null ) ? (haxe.lang.Runtime.toInt(startIndex)) : 0;\n\t\t\tif (sIndex >= me.length() || sIndex < 0)\n\t\t\t\treturn -1;\n\t\t\treturn me.indexOf(str, sIndex);\n\t"]]></e></m></meta>
		</indexOf>
		<lastIndexOf public="1" set="method" line="71" static="1">
			<f a="me:str:?startIndex">
				<t path="java.internal._StringExt.NativeString"/>
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tint sIndex = (startIndex != null ) ? (haxe.lang.Runtime.toInt(startIndex)) : (me.length() - 1);\n\t\t\tif (sIndex > me.length() || sIndex < 0)\n\t\t\t\tsIndex = me.length() - 1;\n\t\t\telse if (sIndex < 0)\n\t\t\t\treturn -1;\n\t\t\treturn me.lastIndexOf(str, sIndex);\n\t"]]></e></m></meta>
		</lastIndexOf>
		<split public="1" set="method" line="103" static="1">
			<f a="me:delimiter">
				<t path="java.internal._StringExt.NativeString"/>
				<t path="java.internal._StringExt.NativeString"/>
				<c path="Array"><t path="java.internal._StringExt.NativeString"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tArray<java.lang.String> ret = new Array<java.lang.String>();\n\n\t\t\tint slen = delimiter.length();\n\t\t\tif (slen == 0)\n\t\t\t{\n\t\t\t\tint len = me.length();\n\t\t\t\tfor (int i = 0; i < len; i++)\n\t\t\t\t{\n\t\t\t\t\tret.push(me.substring(i, i + 1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tint start = 0;\n\t\t\t\tint pos = me.indexOf(delimiter, start);\n\n\t\t\t\twhile (pos >= 0)\n\t\t\t\t{\n\t\t\t\t\tret.push(me.substring(start, pos));\n\n\t\t\t\t\tstart = pos + slen;\n\t\t\t\t\tpos = me.indexOf(delimiter, start);\n\t\t\t\t}\n\n\t\t\t\tret.push(me.substring(start));\n\t\t\t}\n\t\t\treturn ret;\n\t"]]></e></m></meta>
		</split>
		<substr public="1" set="method" line="136" static="1">
			<f a="me:pos:?len">
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tint meLen = me.length();\n\t\t\tint targetLen = meLen;\n\t\t\tif (len != null)\n\t\t\t{\n\t\t\t\ttargetLen = haxe.lang.Runtime.toInt(len);\n\t\t\t\tif (targetLen == 0)\n\t\t\t\t\treturn \"\";\n\t\t\t\tif( pos != 0 && targetLen < 0 ){\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( pos < 0 ){\n\t\t\t\tpos = meLen + pos;\n\t\t\t\tif( pos < 0 ) pos = 0;\n\t\t\t} else if( targetLen < 0 ){\n\t\t\t\ttargetLen = meLen + targetLen - pos;\n\t\t\t}\n\n\t\t\tif( pos + targetLen > meLen ){\n\t\t\t\ttargetLen = meLen - pos;\n\t\t\t}\n\n\t\t\tif ( pos < 0 || targetLen <= 0 ) return \"\";\n\n\t\t\treturn me.substring(pos, pos + targetLen);\n\t"]]></e></m></meta>
		</substr>
		<substring public="1" set="method" line="167" static="1">
			<f a="me:startIndex:?endIndex">
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tint endIdx;\n\t\tint len = me.length();\n\t\tif ( endIndex == null) {\n\t\t\tendIdx = len;\n\t\t} else if ( (endIdx = haxe.lang.Runtime.toInt(endIndex)) < 0 ) {\n\t\t\tendIdx = 0;\n\t\t} else if ( endIdx > len ) {\n\t\t\tendIdx = len;\n\t\t}\n\n\t\tif ( startIndex < 0 ) {\n\t\t\tstartIndex = 0;\n\t\t} else if ( startIndex > len ) {\n\t\t\tstartIndex = len;\n\t\t}\n\n\t\tif ( startIndex > endIdx ) {\n\t\t\tint tmp = startIndex;\n\t\t\tstartIndex = endIdx;\n\t\t\tendIdx = tmp;\n\t\t}\n\n\t\treturn me.substring(startIndex, endIdx);\n\n\t"]]></e></m></meta>
		</substring>
		<toString public="1" set="method" line="172" static="1"><f a="me">
	<t path="java.internal._StringExt.NativeString"/>
	<t path="java.internal._StringExt.NativeString"/>
</f></toString>
		<toLowerCase public="1" set="method" line="180" static="1">
			<f a="me">
				<t path="java.internal._StringExt.NativeString"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\t\treturn me.toLowerCase();\n\t"</e></m></meta>
		</toLowerCase>
		<toUpperCase public="1" set="method" line="188" static="1">
			<f a="me">
				<t path="java.internal._StringExt.NativeString"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\t\treturn me.toUpperCase();\n\t"</e></m></meta>
		</toUpperCase>
		<toNativeString public="1" set="method" line="193" static="1"><f a="me">
	<t path="java.internal._StringExt.NativeString"/>
	<t path="java.internal._StringExt.NativeString"/>
</f></toNativeString>
		<fromCharCode public="1" set="method" line="201" static="1">
			<f a="code">
				<x path="Int"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\treturn java.lang.Character.toString( (char) code );\n\t"</e></m></meta>
		</fromCharCode>
		<meta>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.StringExt"</e></m>
		</meta>
	</class>
	<class path="java.internal._StringExt.StringRefl" params="" file="/usr/local/lib/haxe/std/java/internal/StringExt.hx" private="1" module="java.internal.StringExt">
		<fields public="1" expr="[&quot;length&quot;, &quot;toUpperCase&quot;, &quot;toLowerCase&quot;, &quot;charAt&quot;, &quot;charCodeAt&quot;, &quot;indexOf&quot;, &quot;lastIndexOf&quot;, &quot;split&quot;, &quot;substr&quot;, &quot;substring&quot;]" line="209" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["length", "toUpperCase", "toLowerCase", "charAt", "charCodeAt", "indexOf", "lastIndexOf", "split", "substr", "substring"]</e></m></meta>
		</fields>
		<handleGetField public="1" set="method" line="211" static="1"><f a="str:f:throwErrors">
	<t path="java.internal._StringExt.NativeString"/>
	<t path="java.internal._StringExt.NativeString"/>
	<x path="Bool"/>
	<d/>
</f></handleGetField>
		<handleCallField public="1" set="method" line="226" static="1"><f a="str:f:args">
	<t path="java.internal._StringExt.NativeString"/>
	<t path="java.internal._StringExt.NativeString"/>
	<c path="Array"><d/></c>
	<d/>
</f></handleCallField>
		<meta>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.StringRefl"</e></m>
		</meta>
	</class>
	<class path="java.internal._StringExt.JavaString" params="" file="/usr/local/lib/haxe/std/java/internal/StringExt.hx" private="1" module="java.internal.StringExt" extern="1">
		<_charAt public="1" set="method"><f a="idx">
	<x path="Int"/>
	<x path="java.Char16"/>
</f></_charAt>
		<codePointAt public="1" set="method"><f a="idx">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointAt>
		<codePointBefore public="1" set="method"><f a="idx">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointBefore>
		<codePointCount public="1" set="method"><f a="begin:end">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></codePointCount>
		<offsetByCodePoints public="1" set="method"><f a="index:codePointOffset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></offsetByCodePoints>
		<getChars public="1" set="method"><f a="srcBegin:srcEnd:dst:dstBegin">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="java.Char16"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></getChars>
		<startsWith public="1" set="method"><f a="prefix">
	<c path="String"/>
	<x path="Bool"/>
</f></startsWith>
		<endsWith public="1" set="method"><f a="suffix">
	<c path="String"/>
	<x path="Bool"/>
</f></endsWith>
		<_indexOf public="1" set="method"><f a="str:fromIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_indexOf>
		<_lastIndexOf public="1" set="method"><f a="str:fromIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_lastIndexOf>
		<_substring public="1" set="method"><f a="begin:end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></_substring>
		<replace public="1" set="method"><f a="old:nw">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></replace>
		<_split public="1" set="method"><f a="regex">
	<c path="String"/>
	<c path="java.NativeArray"><c path="String"/></c>
</f></_split>
		<trim public="1" set="method"><f a=""><c path="String"/></f></trim>
		<meta>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.NativeString"</e></m>
		</meta>
	</class>
	<class path="java.lang.AutoCloseable" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/AutoCloseable.class" extern="1" interface="1">
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.AutoCloseable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"AutoCloseable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Closeable" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/Closeable.class" extern="1" interface="1">
		<extends path="java.lang.AutoCloseable"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Closeable"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Closeable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Flushable" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/Flushable.class" extern="1" interface="1">
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</flush>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Flushable"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Flushable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.OutputStream" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/OutputStream.class" extern="1">
		<implements path="java.io.Closeable"/>
		<implements path="java.io.Flushable"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</flush>
		<write public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.OutputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"OutputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.ByteArrayOutputStream" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/ByteArrayOutputStream.class" extern="1">
		<extends path="java.io.OutputStream"/>
		<close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<toString public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
			<overloads>
				<toString public="1" set="method">
					<f a=""><c path="String"/></f>
					<meta><m n=":overload"/></meta>
				</toString>
				<toString public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
					</meta>
				</toString>
			</overloads>
		</toString>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<toByteArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
		</toByteArray>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</reset>
		<writeTo public="1" set="method">
			<f a="param1">
				<c path="java.io.OutputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeTo>
		<write public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><write public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</write></overloads>
		</write>
		<buf><c path="java.NativeArray"><t path="java.types.Int8"/></c></buf>
		<count><x path="Int"/></count>
		<new public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.ByteArrayOutputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"ByteArrayOutputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Console" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/Console.class" extern="1">
		<implements path="java.io.Flushable"/>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</flush>
		<readPassword public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Char16"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><readPassword public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</readPassword></overloads>
		</readPassword>
		<readLine public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><readLine public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</readLine></overloads>
		</readLine>
		<printf public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.Console"/>
			</f>
			<meta><m n=":overload"/></meta>
		</printf>
		<format public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.Console"/>
			</f>
			<meta><m n=":overload"/></meta>
		</format>
		<reader public="1" set="method">
			<f a=""><c path="java.io.Reader"/></f>
			<meta><m n=":overload"/></meta>
		</reader>
		<writer public="1" set="method">
			<f a=""><c path="java.io.PrintWriter"/></f>
			<meta><m n=":overload"/></meta>
		</writer>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Console"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Console"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Readable" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Readable.class" extern="1" interface="1">
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.CharBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Readable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Readable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Reader" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/Reader.class" extern="1">
		<implements path="java.lang.Readable"/>
		<implements path="java.io.Closeable"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</reset>
		<mark public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</mark>
		<markSupported public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</markSupported>
		<ready public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</ready>
		<skip public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</skip>
		<read public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.nio.CharBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a=""><x path="Int"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
			</overloads>
		</read>
		<lock><d/></lock>
		<new set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Reader"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Reader"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Console_LineReader" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/Console$LineReader.class" module="java.io.Console" extern="1">
		<extends path="java.io.Reader"/>
		<read public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<ready public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</ready>
		<close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</close>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Console$LineReader"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Console.LineReader"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.IOException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/IOException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.IOException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"IOException"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.EOFException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/EOFException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.EOFException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"EOFException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Comparable" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Comparable.class" extern="1" interface="1">
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.lang.Comparable.T"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compareTo>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Comparable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Comparable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.File" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/File.class" extern="1">
		<implements path="java.lang.Comparable"><c path="java.io.File"/></implements>
		<implements path="java.io.Serializable"/>
		<createTempFile public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="java.io.File"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><createTempFile public="1" set="method">
	<f a="param1:param2:param3">
		<c path="String"/>
		<c path="String"/>
		<c path="java.io.File"/>
		<c path="java.io.File"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</createTempFile></overloads>
		</createTempFile>
		<listRoots public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="java.io.File"/></c></f>
			<meta><m n=":overload"/></meta>
		</listRoots>
		<separatorChar public="1" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</separatorChar>
		<separator public="1" static="1">
			<c path="String"/>
			<meta><m n=":final"/></meta>
		</separator>
		<pathSeparatorChar public="1" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</pathSeparatorChar>
		<pathSeparator public="1" static="1">
			<c path="String"/>
			<meta><m n=":final"/></meta>
		</pathSeparator>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.io.File"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<toPath public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</toPath>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getUsableSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getUsableSpace>
		<getFreeSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getFreeSpace>
		<getTotalSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getTotalSpace>
		<canExecute public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</canExecute>
		<setExecutable public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setExecutable public="1" set="method">
	<f a="param1:param2">
		<x path="Bool"/>
		<x path="Bool"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</setExecutable></overloads>
		</setExecutable>
		<setReadable public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setReadable public="1" set="method">
	<f a="param1:param2">
		<x path="Bool"/>
		<x path="Bool"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</setReadable></overloads>
		</setReadable>
		<setWritable public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setWritable public="1" set="method">
	<f a="param1:param2">
		<x path="Bool"/>
		<x path="Bool"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</setWritable></overloads>
		</setWritable>
		<setReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</setReadOnly>
		<setLastModified public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLastModified>
		<renameTo public="1" set="method">
			<f a="param1">
				<c path="java.io.File"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</renameTo>
		<mkdirs public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</mkdirs>
		<mkdir public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</mkdir>
		<listFiles public="1" set="method">
			<f a="param1">
				<c path="java.io.FileFilter"/>
				<c path="java.NativeArray"><c path="java.io.File"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<listFiles public="1" set="method">
					<f a=""><c path="java.NativeArray"><c path="java.io.File"/></c></f>
					<meta><m n=":overload"/></meta>
				</listFiles>
				<listFiles public="1" set="method">
					<f a="param1">
						<c path="java.io.FilenameFilter"/>
						<c path="java.NativeArray"><c path="java.io.File"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</listFiles>
			</overloads>
		</listFiles>
		<list public="1" set="method">
			<f a="param1">
				<c path="java.io.FilenameFilter"/>
				<c path="java.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><list public="1" set="method">
	<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
	<meta><m n=":overload"/></meta>
</list></overloads>
		</list>
		<deleteOnExit public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</deleteOnExit>
		<delete public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</delete>
		<createNewFile public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</createNewFile>
		<length public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</length>
		<lastModified public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</lastModified>
		<isHidden public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isHidden>
		<isFile public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isFile>
		<isDirectory public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirectory>
		<exists public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</exists>
		<canWrite public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</canWrite>
		<canRead public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</canRead>
		<toURI public="1" set="method">
			<f a=""><c path="java.net.URI"/></f>
			<meta><m n=":overload"/></meta>
		</toURI>
		<toURL public="1" set="method">
			<f a=""><c path="java.net.URL"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
				<m n=":deprecated"/>
			</meta>
		</toURL>
		<getCanonicalFile public="1" set="method">
			<f a=""><c path="java.io.File"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getCanonicalFile>
		<getCanonicalPath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getCanonicalPath>
		<getAbsoluteFile public="1" set="method">
			<f a=""><c path="java.io.File"/></f>
			<meta><m n=":overload"/></meta>
		</getAbsoluteFile>
		<getAbsolutePath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getAbsolutePath>
		<isAbsolute public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAbsolute>
		<getPath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getPath>
		<getParentFile public="1" set="method">
			<f a=""><c path="java.io.File"/></f>
			<meta><m n=":overload"/></meta>
		</getParentFile>
		<getParent public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getParent>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.net.URI"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.io.File"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.File"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"File"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.File_TempDirectory" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/File$TempDirectory.class" module="java.io.File" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.io.File$TempDirectory"</e></m>
	<m n=":javaCanonical">
		<e>"java.io"</e>
		<e>"File.TempDirectory"</e>
	</m>
</meta></class>
	<class path="java.io.FileDescriptor" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/FileDescriptor.class" extern="1">
		<_in public="1" static="1">
			<c path="java.io.FileDescriptor"/>
			<meta>
				<m n=":native"><e>"in"</e></m>
				<m n=":final"/>
			</meta>
		</_in>
		<out public="1" static="1">
			<c path="java.io.FileDescriptor"/>
			<meta><m n=":final"/></meta>
		</out>
		<err public="1" static="1">
			<c path="java.io.FileDescriptor"/>
			<meta><m n=":final"/></meta>
		</err>
		<sync public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.SyncFailedException"</e></m>
			</meta>
		</sync>
		<valid public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</valid>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.FileDescriptor"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"FileDescriptor"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.FileFilter" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/FileFilter.class" extern="1" interface="1">
		<accept public="1" set="method">
			<f a="param1">
				<c path="java.io.File"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</accept>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.FileFilter"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"FileFilter"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.FileNotFoundException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/FileNotFoundException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.FileNotFoundException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"FileNotFoundException"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.FilenameFilter" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/FilenameFilter.class" extern="1" interface="1">
		<accept public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.File"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</accept>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.FilenameFilter"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"FilenameFilter"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.FilterOutputStream" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/FilterOutputStream.class" extern="1">
		<extends path="java.io.OutputStream"/>
		<close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<flush public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</flush>
		<write public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<out><c path="java.io.OutputStream"/></out>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.io.OutputStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.FilterOutputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"FilterOutputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.InputStream" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/InputStream.class" extern="1">
		<implements path="java.io.Closeable"/>
		<markSupported public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</markSupported>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</reset>
		<mark public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</mark>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<available public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</available>
		<skip public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</skip>
		<read public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a=""><x path="Int"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
			</overloads>
		</read>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.InputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"InputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.NativeInput" params="" file="/usr/local/lib/haxe/std/java/io/NativeInput.hx">
		<extends path="haxe.io.Input"/>
		<stream><c path="java.io.InputStream"/></stream>
		<readByte public="1" set="method" line="38" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="53" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="74" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="33"><f a="stream">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"haxe.java.io.NativeInput"</e></m></meta>
	</class>
	<class path="java.io.NativeOutput" params="" file="/usr/local/lib/haxe/std/java/io/NativeOutput.hx">
		<extends path="haxe.io.Output"/>
		<stream><c path="java.io.OutputStream"/></stream>
		<writeByte public="1" set="method" line="38" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<close public="1" set="method" line="54" override="1"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method" line="66" override="1"><f a=""><x path="Void"/></f></flush>
		<new public="1" set="method" line="33"><f a="stream">
	<c path="java.io.OutputStream"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"haxe.java.io.NativeOutput"</e></m></meta>
	</class>
	<class path="java.io.ObjectStreamException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/ObjectStreamException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.ObjectStreamException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"ObjectStreamException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Appendable" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Appendable.class" extern="1" interface="1">
		<append public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="java.lang.Appendable"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.lang.CharSequence"/>
						<c path="java.lang.Appendable"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.Appendable"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</append>
			</overloads>
		</append>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Appendable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Appendable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.PrintStream" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/PrintStream.class" extern="1">
		<extends path="java.io.FilterOutputStream"/>
		<implements path="java.lang.Appendable"/>
		<implements path="java.io.Closeable"/>
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.io.PrintStream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.io.PrintStream"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.io.PrintStream"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<format public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.PrintStream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><format public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="java.io.PrintStream"/>
	</f>
	<meta><m n=":overload"/></meta>
</format></overloads>
		</format>
		<printf public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.PrintStream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><printf public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="java.io.PrintStream"/>
	</f>
	<meta><m n=":overload"/></meta>
</printf></overloads>
		</printf>
		<println public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<println public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
			</overloads>
		</println>
		<print public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<print public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
			</overloads>
		</print>
		<write public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><write public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</write></overloads>
		</write>
		<clearError set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clearError>
		<setError set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</setError>
		<checkError public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</checkError>
		<close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</close>
		<flush public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</flush>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.File"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
				<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.io.OutputStream"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.io.OutputStream"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.io.OutputStream"/>
						<x path="Bool"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.io.File"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.PrintStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"PrintStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Writer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/Writer.class" extern="1">
		<implements path="java.lang.Appendable"/>
		<implements path="java.io.Closeable"/>
		<implements path="java.io.Flushable"/>
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.io.Writer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.io.Writer"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.io.Writer"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</append>
			</overloads>
		</append>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</flush>
		<write public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<lock><d/></lock>
		<new set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Writer"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Writer"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.PrintWriter" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/PrintWriter.class" extern="1">
		<extends path="java.io.Writer"/>
		<append public="1" set="method" override="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.io.PrintWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.io.PrintWriter"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.io.PrintWriter"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<format public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.PrintWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><format public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="java.io.PrintWriter"/>
	</f>
	<meta><m n=":overload"/></meta>
</format></overloads>
		</format>
		<printf public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.PrintWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><printf public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="java.io.PrintWriter"/>
	</f>
	<meta><m n=":overload"/></meta>
</printf></overloads>
		</printf>
		<println public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<println public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
			</overloads>
		</println>
		<print public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<print public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
			</overloads>
		</print>
		<write public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</write>
			</overloads>
		</write>
		<clearError set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clearError>
		<setError set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</setError>
		<checkError public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</checkError>
		<close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</close>
		<flush public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</flush>
		<out><c path="java.io.Writer"/></out>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.File"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
				<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.io.Writer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.io.Writer"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.io.OutputStream"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.io.OutputStream"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.io.File"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.PrintWriter"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"PrintWriter"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.SyncFailedException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/SyncFailedException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.SyncFailedException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"SyncFailedException"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.UnsupportedEncodingException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/io/UnsupportedEncodingException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.UnsupportedEncodingException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"UnsupportedEncodingException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.AbstractStringBuilder" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/AbstractStringBuilder.class" extern="1">
		<implements path="java.lang.Appendable"/>
		<implements path="java.lang.CharSequence"/>
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<d/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.lang.StringBuffer"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<reverse public="1" set="method">
			<f a=""><c path="java.lang.AbstractStringBuilder"/></f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<lastIndexOf public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><lastIndexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</lastIndexOf></overloads>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><indexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</indexOf></overloads>
		</indexOf>
		<insert public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Float"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<insert public="1" set="method">
					<f a="param1:param2:param3:param4">
						<x path="Int"/>
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<d/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="String"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2:param3:param4">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Bool"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Char16"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="haxe.Int64"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Single"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
			</overloads>
		</insert>
		<substring public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><substring public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</substring></overloads>
		</substring>
		<subSequence public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.CharSequence"/>
			</f>
			<meta><m n=":overload"/></meta>
		</subSequence>
		<replace public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</replace>
		<deleteCharAt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</deleteCharAt>
		<appendCodePoint public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendCodePoint>
		<delete public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</delete>
		<setCharAt public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setCharAt>
		<getChars public="1" set="method">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getChars>
		<offsetByCodePoints public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</offsetByCodePoints>
		<codePointCount public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointCount>
		<codePointBefore public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointBefore>
		<codePointAt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointAt>
		<charAt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</charAt>
		<setLength public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLength>
		<trimToSize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</trimToSize>
		<ensureCapacity public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ensureCapacity>
		<capacity public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</capacity>
		<length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</length>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.AbstractStringBuilder"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"AbstractStringBuilder"</e>
			</m>
		</meta>
	</class>
	<abstract path="java.lang.Boolean" params="" file="/usr/local/lib/haxe/std/java/lang/Boolean.hx">
		<from>
			<icast><c path="java.lang.BooleanClass"/></icast>
			<icast field="fromBool"><x path="Bool"/></icast>
		</from>
		<this><c path="java.lang.BooleanClass"/></this>
		<to>
			<icast><c path="java.lang.BooleanClass"/></icast>
			<icast field="toBool"><x path="Bool"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="java.lang._Boolean.Boolean_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Boolean.hx" private="1" module="java.lang.Boolean">
	<toBool public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.BooleanClass"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toBool>
	<fromBool public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<x path="Bool"/>
			<x path="java.lang.Boolean"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromBool>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Boolean.Boolean_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Boolean.hx" private="1" module="java.lang.Boolean">
		<toBool public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.BooleanClass"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toBool>
		<fromBool public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="java.lang.Boolean"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromBool>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.Number" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Number.class" extern="1">
		<implements path="java.io.Serializable"/>
		<shortValue public="1" set="method">
			<f a=""><t path="java.types.Int16"/></f>
			<meta><m n=":overload"/></meta>
		</shortValue>
		<byteValue public="1" set="method">
			<f a=""><t path="java.types.Int8"/></f>
			<meta><m n=":overload"/></meta>
		</byteValue>
		<doubleValue public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</doubleValue>
		<floatValue public="1" set="method">
			<f a=""><x path="Single"/></f>
			<meta><m n=":overload"/></meta>
		</floatValue>
		<longValue public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</longValue>
		<intValue public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</intValue>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Number"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Number"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.BooleanClass" params="" file="/usr/local/lib/haxe/std/java/lang/Boolean.hx" module="java.lang.Boolean" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Boolean"/></implements>
		<FALSE public="1" static="1">
			<x path="java.lang.Boolean"/>
			<meta><m n=":final"/></meta>
		</FALSE>
		<TRUE public="1" static="1">
			<x path="java.lang.Boolean"/>
			<meta><m n=":final"/></meta>
		</TRUE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Boolean"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<getBoolean public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getBoolean>
		<parseBoolean public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</parseBoolean>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<x path="java.lang.Boolean"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><valueOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="java.lang.Boolean"/>
	</f>
	<meta><m n=":overload"/></meta>
</valueOf></overloads>
		</valueOf>
		<booleanValue public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</booleanValue>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Boolean"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="bool">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="string">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Boolean"</e></m></meta>
	</class>
	<abstract path="java.lang.Byte" params="" file="/usr/local/lib/haxe/std/java/lang/Byte.hx">
		<from>
			<icast><c path="java.lang.ByteClass"/></icast>
			<icast field="fromByte"><t path="java.types.Int8"/></icast>
		</from>
		<this><c path="java.lang.ByteClass"/></this>
		<to>
			<icast><c path="java.lang.ByteClass"/></icast>
			<icast field="toByte"><x path="java.Int8"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Byte.Byte_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Byte.hx" private="1" module="java.lang.Byte">
	<toByte public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.ByteClass"/>
			<t path="java.types.Int8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toByte>
	<fromByte public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<t path="java.types.Int8"/>
			<x path="java.lang.Byte"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromByte>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Byte.Byte_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Byte.hx" private="1" module="java.lang.Byte">
		<toByte public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.ByteClass"/>
				<t path="java.types.Int8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toByte>
		<fromByte public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<t path="java.types.Int8"/>
				<x path="java.lang.Byte"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromByte>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.ByteClass" params="" file="/usr/local/lib/haxe/std/java/lang/Byte.hx" module="java.lang.Byte" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Byte"/></implements>
		<MAX_VALUE public="1" set="null" static="1">
			<t path="java.types.Int8"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_VALUE public="1" set="null" static="1">
			<t path="java.types.Int8"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Byte"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Int8"/>
				<t path="java.types.Int8"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Byte"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<parseByte public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<t path="java.types.Int8"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseByte public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<t path="java.types.Int8"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseByte></overloads>
		</parseByte>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int8"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int8"/>
				<x path="java.lang.Byte"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="java.lang.Byte"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Byte"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Byte"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Byte"</e></m></meta>
	</class>
	<class path="java.lang.Byte_ByteCache" params="" file="/usr/local/lib/haxe/std/java/lang/Byte.hx" module="java.lang.Byte" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Byte$ByteCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Byte.ByteCache"</e>
	</m>
</meta></class>
	<abstract path="java.lang.Character" params="" file="/usr/local/lib/haxe/std/java/lang/Character.hx">
		<from>
			<icast><c path="java.lang.CharacterClass"/></icast>
			<icast field="fromCharacter"><t path="java.types.Char16"/></icast>
		</from>
		<this><c path="java.lang.CharacterClass"/></this>
		<to>
			<icast><c path="java.lang.CharacterClass"/></icast>
			<icast field="toCharacter"><x path="java.Char16"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Character.Character_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Character.hx" private="1" module="java.lang.Character">
	<toCharacter public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.CharacterClass"/>
			<t path="java.types.Char16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toCharacter>
	<fromCharacter public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<t path="java.types.Char16"/>
			<x path="java.lang.Character"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromCharacter>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Character.Character_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Character.hx" private="1" module="java.lang.Character">
		<toCharacter public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.CharacterClass"/>
				<t path="java.types.Char16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toCharacter>
		<fromCharacter public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<t path="java.types.Char16"/>
				<x path="java.lang.Character"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromCharacter>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.CharacterClass" params="" file="/usr/local/lib/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1">
		<implements path="java.lang.Comparable"><x path="java.lang.Character"/></implements>
		<COMBINING_SPACING_MARK public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</COMBINING_SPACING_MARK>
		<CONNECTOR_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</CONNECTOR_PUNCTUATION>
		<CONTROL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</CONTROL>
		<CURRENCY_SYMBOL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</CURRENCY_SYMBOL>
		<DASH_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DASH_PUNCTUATION>
		<DECIMAL_DIGIT_NUMBER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DECIMAL_DIGIT_NUMBER>
		<DIRECTIONALITY_ARABIC_NUMBER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_ARABIC_NUMBER>
		<DIRECTIONALITY_BOUNDARY_NEUTRAL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_BOUNDARY_NEUTRAL>
		<DIRECTIONALITY_COMMON_NUMBER_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_COMMON_NUMBER_SEPARATOR>
		<DIRECTIONALITY_EUROPEAN_NUMBER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_EUROPEAN_NUMBER>
		<DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR>
		<DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR>
		<DIRECTIONALITY_LEFT_TO_RIGHT public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_LEFT_TO_RIGHT>
		<DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING>
		<DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE>
		<DIRECTIONALITY_NONSPACING_MARK public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_NONSPACING_MARK>
		<DIRECTIONALITY_OTHER_NEUTRALS public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_OTHER_NEUTRALS>
		<DIRECTIONALITY_PARAGRAPH_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_PARAGRAPH_SEPARATOR>
		<DIRECTIONALITY_POP_DIRECTIONAL_FORMAT public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_POP_DIRECTIONAL_FORMAT>
		<DIRECTIONALITY_RIGHT_TO_LEFT public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_RIGHT_TO_LEFT>
		<DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC>
		<DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING>
		<DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE>
		<DIRECTIONALITY_SEGMENT_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_SEGMENT_SEPARATOR>
		<DIRECTIONALITY_UNDEFINED public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_UNDEFINED>
		<DIRECTIONALITY_WHITESPACE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_WHITESPACE>
		<ENCLOSING_MARK public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</ENCLOSING_MARK>
		<END_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</END_PUNCTUATION>
		<FINAL_QUOTE_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</FINAL_QUOTE_PUNCTUATION>
		<FORMAT public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</FORMAT>
		<INITIAL_QUOTE_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</INITIAL_QUOTE_PUNCTUATION>
		<LETTER_NUMBER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</LETTER_NUMBER>
		<LINE_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</LINE_SEPARATOR>
		<LOWERCASE_LETTER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</LOWERCASE_LETTER>
		<MATH_SYMBOL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MATH_SYMBOL>
		<MAX_CODE_POINT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_CODE_POINT>
		<MAX_HIGH_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MAX_HIGH_SURROGATE>
		<MAX_LOW_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MAX_LOW_SURROGATE>
		<MAX_RADIX public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_RADIX>
		<MAX_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MAX_SURROGATE>
		<MAX_VALUE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_CODE_POINT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_CODE_POINT>
		<MIN_HIGH_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MIN_HIGH_SURROGATE>
		<MIN_LOW_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MIN_LOW_SURROGATE>
		<MIN_RADIX public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_RADIX>
		<MIN_SUPPLEMENTARY_CODE_POINT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_SUPPLEMENTARY_CODE_POINT>
		<MIN_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MIN_SURROGATE>
		<MIN_VALUE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<MODIFIER_LETTER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MODIFIER_LETTER>
		<MODIFIER_SYMBOL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MODIFIER_SYMBOL>
		<NON_SPACING_MARK public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</NON_SPACING_MARK>
		<OTHER_LETTER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</OTHER_LETTER>
		<OTHER_NUMBER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</OTHER_NUMBER>
		<OTHER_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</OTHER_PUNCTUATION>
		<OTHER_SYMBOL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</OTHER_SYMBOL>
		<PARAGRAPH_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</PARAGRAPH_SEPARATOR>
		<PRIVATE_USE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</PRIVATE_USE>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<SPACE_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</SPACE_SEPARATOR>
		<START_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</START_PUNCTUATION>
		<SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</SURROGATE>
		<TITLECASE_LETTER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</TITLECASE_LETTER>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Character"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<UNASSIGNED public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</UNASSIGNED>
		<UPPERCASE_LETTER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</UPPERCASE_LETTER>
		<charCount public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</charCount>
		<codePointAt public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<codePointAt public="1" set="method">
					<f a="param1:param2">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointAt>
				<codePointAt public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointAt>
			</overloads>
		</codePointAt>
		<codePointBefore public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<codePointBefore public="1" set="method">
					<f a="param1:param2">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointBefore>
				<codePointBefore public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointBefore>
			</overloads>
		</codePointBefore>
		<codePointCount public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><codePointCount public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</codePointCount></overloads>
		</codePointCount>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<digit public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><digit public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</digit></overloads>
		</digit>
		<forDigit public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</forDigit>
		<getDirectionality public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDirectionality public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<t path="java.types.Char16"/>
	</f>
	<meta><m n=":overload"/></meta>
</getDirectionality></overloads>
		</getDirectionality>
		<getName public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getNumericValue public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getNumericValue public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</getNumericValue></overloads>
		</getNumericValue>
		<getType public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getType public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</getType></overloads>
		</getType>
		<highSurrogate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</highSurrogate>
		<isAlphabetic public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAlphabetic>
		<isBmpCodePoint public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isBmpCodePoint>
		<isDefined public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isDefined public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isDefined></overloads>
		</isDefined>
		<isDigit public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isDigit public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isDigit></overloads>
		</isDigit>
		<isHighSurrogate public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isHighSurrogate>
		<isISOControl public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isISOControl public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isISOControl></overloads>
		</isISOControl>
		<isIdentifierIgnorable public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isIdentifierIgnorable public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isIdentifierIgnorable></overloads>
		</isIdentifierIgnorable>
		<isIdeographic public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isIdeographic>
		<isJavaIdentifierPart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isJavaIdentifierPart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isJavaIdentifierPart></overloads>
		</isJavaIdentifierPart>
		<isJavaIdentifierStart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isJavaIdentifierStart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isJavaIdentifierStart></overloads>
		</isJavaIdentifierStart>
		<isJavaLetter public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</isJavaLetter>
		<isJavaLetterOrDigit public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</isJavaLetterOrDigit>
		<isLetter public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isLetter public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isLetter></overloads>
		</isLetter>
		<isLetterOrDigit public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isLetterOrDigit public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isLetterOrDigit></overloads>
		</isLetterOrDigit>
		<isLowSurrogate public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isLowSurrogate>
		<isLowerCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isLowerCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isLowerCase></overloads>
		</isLowerCase>
		<isMirrored public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isMirrored public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isMirrored></overloads>
		</isMirrored>
		<isSpace public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</isSpace>
		<isSpaceChar public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isSpaceChar public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isSpaceChar></overloads>
		</isSpaceChar>
		<isSupplementaryCodePoint public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isSupplementaryCodePoint>
		<isSurrogate public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isSurrogate>
		<isSurrogatePair public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isSurrogatePair>
		<isTitleCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isTitleCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isTitleCase></overloads>
		</isTitleCase>
		<isUnicodeIdentifierPart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isUnicodeIdentifierPart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isUnicodeIdentifierPart></overloads>
		</isUnicodeIdentifierPart>
		<isUnicodeIdentifierStart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isUnicodeIdentifierStart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isUnicodeIdentifierStart></overloads>
		</isUnicodeIdentifierStart>
		<isUpperCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isUpperCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isUpperCase></overloads>
		</isUpperCase>
		<isValidCodePoint public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isValidCodePoint>
		<isWhitespace public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isWhitespace public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isWhitespace></overloads>
		</isWhitespace>
		<lowSurrogate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</lowSurrogate>
		<offsetByCodePoints public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><offsetByCodePoints public="1" set="method">
	<f a="param1:param2:param3:param4:param5">
		<c path="java.NativeArray"><t path="java.types.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</offsetByCodePoints></overloads>
		</offsetByCodePoints>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<toChars public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toChars public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</toChars></overloads>
		</toChars>
		<toCodePoint public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toCodePoint>
		<toLowerCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toLowerCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</toLowerCase></overloads>
		</toLowerCase>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<toTitleCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toTitleCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</toTitleCase></overloads>
		</toTitleCase>
		<toUpperCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toUpperCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</toUpperCase></overloads>
		</toUpperCase>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="java.lang.Character"/>
			</f>
			<meta><m n=":overload"/></meta>
		</valueOf>
		<charValue public="1" set="method">
			<f a=""><t path="java.types.Char16"/></f>
			<meta><m n=":overload"/></meta>
		</charValue>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Character"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta><m n=":native"><e>"java.lang.Character"</e></m></meta>
	</class>
	<class path="java.lang.Character_CharacterCache" params="" file="/usr/local/lib/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Character$CharacterCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Character.CharacterCache"</e>
	</m>
</meta></class>
	<class path="java.lang.Character_Subset" params="" file="/usr/local/lib/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1">
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</toString>
		<meta>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Character$Subset"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Character.Subset"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Character_UnicodeBlock" params="" file="/usr/local/lib/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1">
		<extends path="java.lang.Character_Subset"/>
		<AEGEAN_NUMBERS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</AEGEAN_NUMBERS>
		<ALCHEMICAL_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ALCHEMICAL_SYMBOLS>
		<ALPHABETIC_PRESENTATION_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ALPHABETIC_PRESENTATION_FORMS>
		<ANCIENT_GREEK_MUSICAL_NOTATION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ANCIENT_GREEK_MUSICAL_NOTATION>
		<ANCIENT_GREEK_NUMBERS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ANCIENT_GREEK_NUMBERS>
		<ANCIENT_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ANCIENT_SYMBOLS>
		<ARABIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARABIC>
		<ARABIC_PRESENTATION_FORMS_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARABIC_PRESENTATION_FORMS_A>
		<ARABIC_PRESENTATION_FORMS_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARABIC_PRESENTATION_FORMS_B>
		<ARABIC_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARABIC_SUPPLEMENT>
		<ARMENIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARMENIAN>
		<ARROWS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARROWS>
		<AVESTAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</AVESTAN>
		<BALINESE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BALINESE>
		<BAMUM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BAMUM>
		<BAMUM_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BAMUM_SUPPLEMENT>
		<BASIC_LATIN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BASIC_LATIN>
		<BATAK public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BATAK>
		<BENGALI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BENGALI>
		<BLOCK_ELEMENTS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BLOCK_ELEMENTS>
		<BOPOMOFO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BOPOMOFO>
		<BOPOMOFO_EXTENDED public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BOPOMOFO_EXTENDED>
		<BOX_DRAWING public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BOX_DRAWING>
		<BRAHMI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BRAHMI>
		<BRAILLE_PATTERNS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BRAILLE_PATTERNS>
		<BUGINESE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BUGINESE>
		<BUHID public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BUHID>
		<BYZANTINE_MUSICAL_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BYZANTINE_MUSICAL_SYMBOLS>
		<CARIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CARIAN>
		<CHAM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CHAM>
		<CHEROKEE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CHEROKEE>
		<CJK_COMPATIBILITY public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_COMPATIBILITY>
		<CJK_COMPATIBILITY_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_COMPATIBILITY_FORMS>
		<CJK_COMPATIBILITY_IDEOGRAPHS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_COMPATIBILITY_IDEOGRAPHS>
		<CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT>
		<CJK_RADICALS_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_RADICALS_SUPPLEMENT>
		<CJK_STROKES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_STROKES>
		<CJK_SYMBOLS_AND_PUNCTUATION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_SYMBOLS_AND_PUNCTUATION>
		<CJK_UNIFIED_IDEOGRAPHS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_UNIFIED_IDEOGRAPHS>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D>
		<COMBINING_DIACRITICAL_MARKS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COMBINING_DIACRITICAL_MARKS>
		<COMBINING_DIACRITICAL_MARKS_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COMBINING_DIACRITICAL_MARKS_SUPPLEMENT>
		<COMBINING_HALF_MARKS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COMBINING_HALF_MARKS>
		<COMBINING_MARKS_FOR_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COMBINING_MARKS_FOR_SYMBOLS>
		<COMMON_INDIC_NUMBER_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COMMON_INDIC_NUMBER_FORMS>
		<CONTROL_PICTURES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CONTROL_PICTURES>
		<COPTIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COPTIC>
		<COUNTING_ROD_NUMERALS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COUNTING_ROD_NUMERALS>
		<CUNEIFORM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CUNEIFORM>
		<CUNEIFORM_NUMBERS_AND_PUNCTUATION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CUNEIFORM_NUMBERS_AND_PUNCTUATION>
		<CURRENCY_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CURRENCY_SYMBOLS>
		<CYPRIOT_SYLLABARY public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CYPRIOT_SYLLABARY>
		<CYRILLIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CYRILLIC>
		<CYRILLIC_EXTENDED_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CYRILLIC_EXTENDED_A>
		<CYRILLIC_EXTENDED_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CYRILLIC_EXTENDED_B>
		<CYRILLIC_SUPPLEMENTARY public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CYRILLIC_SUPPLEMENTARY>
		<DESERET public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</DESERET>
		<DEVANAGARI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</DEVANAGARI>
		<DEVANAGARI_EXTENDED public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</DEVANAGARI_EXTENDED>
		<DINGBATS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</DINGBATS>
		<DOMINO_TILES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</DOMINO_TILES>
		<EGYPTIAN_HIEROGLYPHS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</EGYPTIAN_HIEROGLYPHS>
		<EMOTICONS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</EMOTICONS>
		<ENCLOSED_ALPHANUMERICS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ENCLOSED_ALPHANUMERICS>
		<ENCLOSED_ALPHANUMERIC_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ENCLOSED_ALPHANUMERIC_SUPPLEMENT>
		<ENCLOSED_CJK_LETTERS_AND_MONTHS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ENCLOSED_CJK_LETTERS_AND_MONTHS>
		<ENCLOSED_IDEOGRAPHIC_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ENCLOSED_IDEOGRAPHIC_SUPPLEMENT>
		<ETHIOPIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ETHIOPIC>
		<ETHIOPIC_EXTENDED public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ETHIOPIC_EXTENDED>
		<ETHIOPIC_EXTENDED_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ETHIOPIC_EXTENDED_A>
		<ETHIOPIC_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ETHIOPIC_SUPPLEMENT>
		<GENERAL_PUNCTUATION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GENERAL_PUNCTUATION>
		<GEOMETRIC_SHAPES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GEOMETRIC_SHAPES>
		<GEORGIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GEORGIAN>
		<GEORGIAN_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GEORGIAN_SUPPLEMENT>
		<GLAGOLITIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GLAGOLITIC>
		<GOTHIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GOTHIC>
		<GREEK public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GREEK>
		<GREEK_EXTENDED public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GREEK_EXTENDED>
		<GUJARATI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GUJARATI>
		<GURMUKHI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GURMUKHI>
		<HALFWIDTH_AND_FULLWIDTH_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HALFWIDTH_AND_FULLWIDTH_FORMS>
		<HANGUL_COMPATIBILITY_JAMO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANGUL_COMPATIBILITY_JAMO>
		<HANGUL_JAMO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANGUL_JAMO>
		<HANGUL_JAMO_EXTENDED_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANGUL_JAMO_EXTENDED_A>
		<HANGUL_JAMO_EXTENDED_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANGUL_JAMO_EXTENDED_B>
		<HANGUL_SYLLABLES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANGUL_SYLLABLES>
		<HANUNOO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANUNOO>
		<HEBREW public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HEBREW>
		<HIGH_PRIVATE_USE_SURROGATES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HIGH_PRIVATE_USE_SURROGATES>
		<HIGH_SURROGATES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HIGH_SURROGATES>
		<HIRAGANA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HIRAGANA>
		<IDEOGRAPHIC_DESCRIPTION_CHARACTERS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</IDEOGRAPHIC_DESCRIPTION_CHARACTERS>
		<IMPERIAL_ARAMAIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</IMPERIAL_ARAMAIC>
		<INSCRIPTIONAL_PAHLAVI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</INSCRIPTIONAL_PAHLAVI>
		<INSCRIPTIONAL_PARTHIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</INSCRIPTIONAL_PARTHIAN>
		<IPA_EXTENSIONS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</IPA_EXTENSIONS>
		<JAVANESE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</JAVANESE>
		<KAITHI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KAITHI>
		<KANA_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KANA_SUPPLEMENT>
		<KANBUN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KANBUN>
		<KANGXI_RADICALS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KANGXI_RADICALS>
		<KANNADA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KANNADA>
		<KATAKANA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KATAKANA>
		<KATAKANA_PHONETIC_EXTENSIONS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KATAKANA_PHONETIC_EXTENSIONS>
		<KAYAH_LI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KAYAH_LI>
		<KHAROSHTHI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KHAROSHTHI>
		<KHMER public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KHMER>
		<KHMER_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KHMER_SYMBOLS>
		<LAO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LAO>
		<LATIN_1_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_1_SUPPLEMENT>
		<LATIN_EXTENDED_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_EXTENDED_A>
		<LATIN_EXTENDED_ADDITIONAL public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_EXTENDED_ADDITIONAL>
		<LATIN_EXTENDED_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_EXTENDED_B>
		<LATIN_EXTENDED_C public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_EXTENDED_C>
		<LATIN_EXTENDED_D public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_EXTENDED_D>
		<LEPCHA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LEPCHA>
		<LETTERLIKE_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LETTERLIKE_SYMBOLS>
		<LIMBU public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LIMBU>
		<LINEAR_B_IDEOGRAMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LINEAR_B_IDEOGRAMS>
		<LINEAR_B_SYLLABARY public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LINEAR_B_SYLLABARY>
		<LISU public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LISU>
		<LOW_SURROGATES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LOW_SURROGATES>
		<LYCIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LYCIAN>
		<LYDIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LYDIAN>
		<MAHJONG_TILES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MAHJONG_TILES>
		<MALAYALAM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MALAYALAM>
		<MANDAIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MANDAIC>
		<MATHEMATICAL_ALPHANUMERIC_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MATHEMATICAL_ALPHANUMERIC_SYMBOLS>
		<MATHEMATICAL_OPERATORS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MATHEMATICAL_OPERATORS>
		<MEETEI_MAYEK public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MEETEI_MAYEK>
		<MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A>
		<MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B>
		<MISCELLANEOUS_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_SYMBOLS>
		<MISCELLANEOUS_SYMBOLS_AND_ARROWS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_SYMBOLS_AND_ARROWS>
		<MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS>
		<MISCELLANEOUS_TECHNICAL public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_TECHNICAL>
		<MODIFIER_TONE_LETTERS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MODIFIER_TONE_LETTERS>
		<MONGOLIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MONGOLIAN>
		<MUSICAL_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MUSICAL_SYMBOLS>
		<MYANMAR public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MYANMAR>
		<MYANMAR_EXTENDED_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MYANMAR_EXTENDED_A>
		<NEW_TAI_LUE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</NEW_TAI_LUE>
		<NKO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</NKO>
		<NUMBER_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</NUMBER_FORMS>
		<OGHAM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OGHAM>
		<OLD_ITALIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OLD_ITALIC>
		<OLD_PERSIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OLD_PERSIAN>
		<OLD_SOUTH_ARABIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OLD_SOUTH_ARABIAN>
		<OLD_TURKIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OLD_TURKIC>
		<OL_CHIKI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OL_CHIKI>
		<OPTICAL_CHARACTER_RECOGNITION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OPTICAL_CHARACTER_RECOGNITION>
		<ORIYA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ORIYA>
		<OSMANYA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OSMANYA>
		<PHAGS_PA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PHAGS_PA>
		<PHAISTOS_DISC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PHAISTOS_DISC>
		<PHOENICIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PHOENICIAN>
		<PHONETIC_EXTENSIONS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PHONETIC_EXTENSIONS>
		<PHONETIC_EXTENSIONS_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PHONETIC_EXTENSIONS_SUPPLEMENT>
		<PLAYING_CARDS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PLAYING_CARDS>
		<PRIVATE_USE_AREA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PRIVATE_USE_AREA>
		<REJANG public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</REJANG>
		<RUMI_NUMERAL_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</RUMI_NUMERAL_SYMBOLS>
		<RUNIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</RUNIC>
		<SAMARITAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SAMARITAN>
		<SAURASHTRA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SAURASHTRA>
		<SHAVIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SHAVIAN>
		<SINHALA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SINHALA>
		<SMALL_FORM_VARIANTS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SMALL_FORM_VARIANTS>
		<SPACING_MODIFIER_LETTERS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SPACING_MODIFIER_LETTERS>
		<SPECIALS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SPECIALS>
		<SUNDANESE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUNDANESE>
		<SUPERSCRIPTS_AND_SUBSCRIPTS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPERSCRIPTS_AND_SUBSCRIPTS>
		<SUPPLEMENTAL_ARROWS_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTAL_ARROWS_A>
		<SUPPLEMENTAL_ARROWS_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTAL_ARROWS_B>
		<SUPPLEMENTAL_MATHEMATICAL_OPERATORS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTAL_MATHEMATICAL_OPERATORS>
		<SUPPLEMENTAL_PUNCTUATION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTAL_PUNCTUATION>
		<SUPPLEMENTARY_PRIVATE_USE_AREA_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTARY_PRIVATE_USE_AREA_A>
		<SUPPLEMENTARY_PRIVATE_USE_AREA_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTARY_PRIVATE_USE_AREA_B>
		<SURROGATES_AREA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</SURROGATES_AREA>
		<SYLOTI_NAGRI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SYLOTI_NAGRI>
		<SYRIAC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SYRIAC>
		<TAGALOG public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAGALOG>
		<TAGBANWA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAGBANWA>
		<TAGS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAGS>
		<TAI_LE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAI_LE>
		<TAI_THAM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAI_THAM>
		<TAI_VIET public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAI_VIET>
		<TAI_XUAN_JING_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAI_XUAN_JING_SYMBOLS>
		<TAMIL public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAMIL>
		<TELUGU public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TELUGU>
		<THAANA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</THAANA>
		<THAI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</THAI>
		<TIBETAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TIBETAN>
		<TIFINAGH public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TIFINAGH>
		<TRANSPORT_AND_MAP_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TRANSPORT_AND_MAP_SYMBOLS>
		<UGARITIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</UGARITIC>
		<UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS>
		<UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED>
		<VAI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</VAI>
		<VARIATION_SELECTORS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</VARIATION_SELECTORS>
		<VARIATION_SELECTORS_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</VARIATION_SELECTORS_SUPPLEMENT>
		<VEDIC_EXTENSIONS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</VEDIC_EXTENSIONS>
		<VERTICAL_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</VERTICAL_FORMS>
		<YIJING_HEXAGRAM_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</YIJING_HEXAGRAM_SYMBOLS>
		<YI_RADICALS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</YI_RADICALS>
		<YI_SYLLABLES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</YI_SYLLABLES>
		<forName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Character_UnicodeBlock"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</forName>
		<of public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="java.lang.Character_UnicodeBlock"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><of public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.lang.Character_UnicodeBlock"/>
	</f>
	<meta><m n=":overload"/></meta>
</of></overloads>
		</of>
		<meta>
			<m n=":final"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Character$UnicodeBlock"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Character.UnicodeBlock"</e>
			</m>
		</meta>
	</class>
	<enum path="java.lang.Character_UnicodeScript" params="" file="/usr/local/lib/haxe/std/java/lang/Character.hx" module="java.lang.Character">
		<COMMON/>
		<LATIN/>
		<GREEK/>
		<CYRILLIC/>
		<ARMENIAN/>
		<HEBREW/>
		<ARABIC/>
		<SYRIAC/>
		<THAANA/>
		<DEVANAGARI/>
		<BENGALI/>
		<GURMUKHI/>
		<GUJARATI/>
		<ORIYA/>
		<TAMIL/>
		<TELUGU/>
		<KANNADA/>
		<MALAYALAM/>
		<SINHALA/>
		<THAI/>
		<LAO/>
		<TIBETAN/>
		<MYANMAR/>
		<GEORGIAN/>
		<HANGUL/>
		<ETHIOPIC/>
		<CHEROKEE/>
		<CANADIAN_ABORIGINAL/>
		<OGHAM/>
		<RUNIC/>
		<KHMER/>
		<MONGOLIAN/>
		<HIRAGANA/>
		<KATAKANA/>
		<BOPOMOFO/>
		<HAN/>
		<YI/>
		<OLD_ITALIC/>
		<GOTHIC/>
		<DESERET/>
		<INHERITED/>
		<TAGALOG/>
		<HANUNOO/>
		<BUHID/>
		<TAGBANWA/>
		<LIMBU/>
		<TAI_LE/>
		<LINEAR_B/>
		<UGARITIC/>
		<SHAVIAN/>
		<OSMANYA/>
		<CYPRIOT/>
		<BRAILLE/>
		<BUGINESE/>
		<COPTIC/>
		<NEW_TAI_LUE/>
		<GLAGOLITIC/>
		<TIFINAGH/>
		<SYLOTI_NAGRI/>
		<OLD_PERSIAN/>
		<KHAROSHTHI/>
		<BALINESE/>
		<CUNEIFORM/>
		<PHOENICIAN/>
		<PHAGS_PA/>
		<NKO/>
		<SUNDANESE/>
		<BATAK/>
		<LEPCHA/>
		<OL_CHIKI/>
		<VAI/>
		<SAURASHTRA/>
		<KAYAH_LI/>
		<REJANG/>
		<LYCIAN/>
		<CARIAN/>
		<LYDIAN/>
		<CHAM/>
		<TAI_THAM/>
		<TAI_VIET/>
		<AVESTAN/>
		<EGYPTIAN_HIEROGLYPHS/>
		<SAMARITAN/>
		<MANDAIC/>
		<LISU/>
		<BAMUM/>
		<JAVANESE/>
		<MEETEI_MAYEK/>
		<IMPERIAL_ARAMAIC/>
		<OLD_SOUTH_ARABIAN/>
		<INSCRIPTIONAL_PARTHIAN/>
		<INSCRIPTIONAL_PAHLAVI/>
		<OLD_TURKIC/>
		<BRAHMI/>
		<KAITHI/>
		<UNKNOWN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Character.UnicodeScript"</e>
			</m>
			<m n=":native"><e>"java.lang.Character$UnicodeScript"</e></m>
		</meta>
	</enum>
	<class path="java.lang.reflect.AnnotatedElement" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/reflect/AnnotatedElement.class" extern="1" interface="1">
		<getDeclaredAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAnnotations>
		<getAnnotation public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
				<c path="getAnnotation.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<isAnnotationPresent public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAnnotationPresent>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.AnnotatedElement"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"AnnotatedElement"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Type" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/reflect/Type.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.reflect.Type"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang.reflect"</e>
		<e>"Type"</e>
	</m>
</meta></class>
	<class path="java.lang.reflect.GenericDeclaration" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/reflect/GenericDeclaration.class" extern="1" interface="1">
		<getTypeParameters public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getTypeParameters>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.GenericDeclaration"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"GenericDeclaration"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Class" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Class.class" extern="1">
		<implements path="java.lang.reflect.AnnotatedElement"/>
		<implements path="java.lang.reflect.Type"/>
		<implements path="java.lang.reflect.GenericDeclaration"/>
		<implements path="java.io.Serializable"/>
		<forName public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="String"/>
				<x path="Bool"/>
				<c path="java.lang.ClassLoader"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
			</meta>
			<overloads><forName public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="java.lang.Class"><d/></c>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
	</meta>
</forName></overloads>
		</forName>
		<getDeclaredAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAnnotations>
		<isAnnotationPresent public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAnnotationPresent>
		<getAnnotation public="1" params="A" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.A"/></c>
				<c path="getAnnotation.A"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<asSubclass public="1" params="U" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="asSubclass.U"/></c>
				<c path="java.lang.Class"><c path="asSubclass.U"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</asSubclass>
		<_cast public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.lang.Class.T"/>
			</f>
			<meta>
				<m n=":native"><e>"cast"</e></m>
				<m n=":overload"/>
			</meta>
		</_cast>
		<getEnumConstants public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</getEnumConstants>
		<isEnum public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEnum>
		<desiredAssertionStatus public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</desiredAssertionStatus>
		<getProtectionDomain public="1" set="method">
			<f a=""><c path="java.security.ProtectionDomain"/></f>
			<meta><m n=":overload"/></meta>
		</getProtectionDomain>
		<getResource public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResource>
		<getResourceAsStream public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResourceAsStream>
		<getDeclaredConstructor public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<c path="java.lang.reflect.Constructor"><c path="java.lang.Class.T"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchMethodException"</e></m>
			</meta>
		</getDeclaredConstructor>
		<getDeclaredMethod public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<c path="java.lang.reflect.Method"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchMethodException"</e></m>
			</meta>
		</getDeclaredMethod>
		<getDeclaredField public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.reflect.Field"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchFieldException"</e></m>
			</meta>
		</getDeclaredField>
		<getDeclaredConstructors public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Constructor"><d/></c></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getDeclaredConstructors>
		<getDeclaredMethods public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getDeclaredMethods>
		<getDeclaredFields public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Field"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getDeclaredFields>
		<getDeclaredClasses public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getDeclaredClasses>
		<getConstructor public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<c path="java.lang.reflect.Constructor"><c path="java.lang.Class.T"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchMethodException"</e></m>
			</meta>
		</getConstructor>
		<getMethod public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<c path="java.lang.reflect.Method"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchMethodException"</e></m>
			</meta>
		</getMethod>
		<getField public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.reflect.Field"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchFieldException"</e></m>
			</meta>
		</getField>
		<getConstructors public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Constructor"><d/></c></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getConstructors>
		<getMethods public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getMethods>
		<getFields public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Field"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getFields>
		<getClasses public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getClasses>
		<isMemberClass public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMemberClass>
		<isLocalClass public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isLocalClass>
		<isAnonymousClass public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAnonymousClass>
		<getCanonicalName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getCanonicalName>
		<getSimpleName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSimpleName>
		<getEnclosingClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getEnclosingClass>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaringClass>
		<getEnclosingConstructor public="1" set="method">
			<f a=""><c path="java.lang.reflect.Constructor"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getEnclosingConstructor>
		<getEnclosingMethod public="1" set="method">
			<f a=""><c path="java.lang.reflect.Method"/></f>
			<meta><m n=":overload"/></meta>
		</getEnclosingMethod>
		<getSigners public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getSigners>
		<getModifiers public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getModifiers>
		<getComponentType public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getComponentType>
		<getGenericInterfaces public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getGenericInterfaces>
		<getInterfaces public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getInterfaces>
		<getPackage public="1" set="method">
			<f a=""><c path="java.lang.Package"/></f>
			<meta><m n=":overload"/></meta>
		</getPackage>
		<getGenericSuperclass public="1" set="method">
			<f a=""><c path="java.lang.reflect.Type"/></f>
			<meta><m n=":overload"/></meta>
		</getGenericSuperclass>
		<getSuperclass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getSuperclass>
		<getTypeParameters public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><c path="java.lang.Class"><c path="java.lang.Class.T"/></c></c></c></f>
			<meta><m n=":overload"/></meta>
		</getTypeParameters>
		<getClassLoader public="1" set="method">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta><m n=":overload"/></meta>
		</getClassLoader>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<isSynthetic public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSynthetic>
		<isAnnotation public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAnnotation>
		<isPrimitive public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isPrimitive>
		<isArray public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isArray>
		<isInterface public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isInterface>
		<isAssignableFrom public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAssignableFrom>
		<isInstance public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isInstance>
		<newInstance public="1" set="method">
			<f a=""><c path="java.lang.Class.T"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.InstantiationException"</e></m>
			</meta>
		</newInstance>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Class"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Class"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Class_EnclosingMethodInfo" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Class$EnclosingMethodInfo.class" module="java.lang.Class" extern="1"><meta>
	<m n=":final"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Class$EnclosingMethodInfo"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Class.EnclosingMethodInfo"</e>
	</m>
</meta></class>
	<class path="java.lang.Class_MethodArray" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Class$MethodArray.class" module="java.lang.Class" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Class$MethodArray"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Class.MethodArray"</e>
	</m>
</meta></class>
	<class path="java.lang.Error" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Error.class" extern="1">
		<extends path="java.lang.Throwable"/>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Error"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Error"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.LinkageError" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/LinkageError.class" extern="1">
		<extends path="java.lang.Error"/>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.LinkageError"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"LinkageError"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ClassFormatError" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ClassFormatError.class" extern="1">
		<extends path="java.lang.LinkageError"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ClassFormatError"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ClassFormatError"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ClassLoader" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ClassLoader.class" extern="1">
		<getSystemClassLoader public="1" set="method" static="1">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta><m n=":overload"/></meta>
		</getSystemClassLoader>
		<getSystemResourceAsStream public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getSystemResourceAsStream>
		<getSystemResources public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Enumeration"><c path="java.net.URL"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getSystemResources>
		<getSystemResource public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getSystemResource>
		<registerAsParallelCapable set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</registerAsParallelCapable>
		<clearAssertionStatus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clearAssertionStatus>
		<setClassAssertionStatus public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setClassAssertionStatus>
		<setPackageAssertionStatus public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setPackageAssertionStatus>
		<setDefaultAssertionStatus public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDefaultAssertionStatus>
		<findLibrary set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</findLibrary>
		<getPackages set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Package"/></c></f>
			<meta><m n=":overload"/></meta>
		</getPackages>
		<getPackage set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Package"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPackage>
		<definePackage set="method">
			<f a="param1:param2:param3:param4:param5:param6:param7:param8">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.net.URL"/>
				<c path="java.lang.Package"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</definePackage>
		<getParent public="1" set="method">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getParent>
		<getResourceAsStream public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResourceAsStream>
		<findResources set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Enumeration"><c path="java.net.URL"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</findResources>
		<findResource set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta><m n=":overload"/></meta>
		</findResource>
		<getResources public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Enumeration"><c path="java.net.URL"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getResources>
		<getResource public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResource>
		<setSigners set="method">
			<f a="param1:param2">
				<c path="java.lang.Class"><d/></c>
				<c path="java.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setSigners>
		<findLoadedClass set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</findLoadedClass>
		<findSystemClass set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
				<m n=":final"/>
			</meta>
		</findSystemClass>
		<resolveClass set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</resolveClass>
		<defineClass set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="java.nio.ByteBuffer"/>
				<c path="java.security.ProtectionDomain"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassFormatError"</e></m>
				<m n=":final"/>
			</meta>
			<overloads>
				<defineClass set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.Class"><d/></c>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.ClassFormatError"</e></m>
						<m n=":deprecated"/>
						<m n=":final"/>
					</meta>
				</defineClass>
				<defineClass set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.Class"><d/></c>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.ClassFormatError"</e></m>
						<m n=":final"/>
					</meta>
				</defineClass>
				<defineClass set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="String"/>
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.security.ProtectionDomain"/>
						<c path="java.lang.Class"><d/></c>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.ClassFormatError"</e></m>
						<m n=":final"/>
					</meta>
				</defineClass>
			</overloads>
		</defineClass>
		<findClass set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
			</meta>
		</findClass>
		<getClassLoadingLock set="method">
			<f a="param1">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</getClassLoadingLock>
		<loadClass set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
			</meta>
			<overloads><loadClass public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="java.lang.Class"><d/></c>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
	</meta>
</loadClass></overloads>
		</loadClass>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a="param1">
		<c path="java.lang.ClassLoader"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ClassLoader"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ClassLoader"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ClassLoader_ParallelLoaders" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ClassLoader$ParallelLoaders.class" module="java.lang.ClassLoader" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ClassLoader$ParallelLoaders"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"ClassLoader.ParallelLoaders"</e>
	</m>
</meta></class>
	<class path="java.lang.ClassLoader_NativeLibrary" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ClassLoader$NativeLibrary.class" module="java.lang.ClassLoader" extern="1">
		<finalize set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</finalize>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Class"><d/></c>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ClassLoader$NativeLibrary"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ClassLoader.NativeLibrary"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ReflectiveOperationException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ReflectiveOperationException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ReflectiveOperationException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ReflectiveOperationException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ClassNotFoundException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ClassNotFoundException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<getCause public="1" set="method" override="1">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</getCause>
		<getException public="1" set="method">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</getException>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ClassNotFoundException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ClassNotFoundException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.CloneNotSupportedException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/CloneNotSupportedException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.CloneNotSupportedException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"CloneNotSupportedException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Cloneable" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Cloneable.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Cloneable"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Cloneable"</e>
	</m>
</meta></class>
	<abstract path="java.lang.Double" params="" file="/usr/local/lib/haxe/std/java/lang/Double.hx">
		<from>
			<icast><c path="java.lang.DoubleClass"/></icast>
			<icast field="fromFloat"><x path="Float"/></icast>
		</from>
		<this><c path="java.lang.DoubleClass"/></this>
		<to>
			<icast><c path="java.lang.DoubleClass"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Double.Double_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Double.hx" private="1" module="java.lang.Double">
	<toFloat public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.DoubleClass"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toFloat>
	<fromFloat public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<x path="Float"/>
			<x path="java.lang.Double"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromFloat>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Double.Double_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Double.hx" private="1" module="java.lang.Double">
		<toFloat public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.DoubleClass"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toFloat>
		<fromFloat public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<x path="Float"/>
				<x path="java.lang.Double"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromFloat>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.DoubleClass" params="" file="/usr/local/lib/haxe/std/java/lang/Double.hx" module="java.lang.Double" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Double"/></implements>
		<MAX_EXPONENT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_EXPONENT>
		<MAX_VALUE public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_EXPONENT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_EXPONENT>
		<MIN_NORMAL public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</MIN_NORMAL>
		<MIN_VALUE public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</NEGATIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</NaN>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</POSITIVE_INFINITY>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Double"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<doubleToLongBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</doubleToLongBits>
		<doubleToRawLongBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</doubleToRawLongBits>
		<_isInfinite public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isInfinite"</e></m>
				<m n=":overload"/>
			</meta>
		</_isInfinite>
		<_isNaN public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isNaN"</e></m>
				<m n=":overload"/>
			</meta>
		</_isNaN>
		<longBitsToDouble public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</longBitsToDouble>
		<parseDouble public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</parseDouble>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Double"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><valueOf public="1" set="method">
	<f a="param1">
		<x path="Float"/>
		<x path="java.lang.Double"/>
	</f>
	<meta><m n=":overload"/></meta>
</valueOf></overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Double"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<isInfinite public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isInfinite>
		<isNaN public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isNaN>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Double"</e></m></meta>
	</class>
	<class path="java.lang.Enum" params="E" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Enum.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.lang.Enum.E"/></implements>
		<valueOf public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="java.lang.Class"><c path="valueOf.T"/></c>
				<c path="String"/>
				<c path="valueOf.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.lang.Enum.E"/>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</compareTo></overloads>
		</compareTo>
		<finalize set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</finalize>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><c path="java.lang.Enum.E"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getDeclaringClass>
		<clone set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.CloneNotSupportedException"</e></m>
				<m n=":final"/>
			</meta>
		</clone>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</equals>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<ordinal public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</ordinal>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</name>
		<new set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Enum"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Enum"</e>
			</m>
		</meta>
	</class>
	<abstract path="java.lang.Float" params="" file="/usr/local/lib/haxe/std/java/lang/Float.hx">
		<from>
			<icast><c path="java.lang.FloatClass"/></icast>
			<icast field="fromFloat"><x path="Single"/></icast>
		</from>
		<this><c path="java.lang.FloatClass"/></this>
		<to>
			<icast><c path="java.lang.FloatClass"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Float.Float_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Float.hx" private="1" module="java.lang.Float">
	<toFloat public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.FloatClass"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toFloat>
	<fromFloat public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<x path="Single"/>
			<x path="java.lang.Float"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromFloat>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Float.Float_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Float.hx" private="1" module="java.lang.Float">
		<toFloat public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.FloatClass"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toFloat>
		<fromFloat public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<x path="Single"/>
				<x path="java.lang.Float"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromFloat>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.FloatClass" params="" file="/usr/local/lib/haxe/std/java/lang/Float.hx" module="java.lang.Float" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Float"/></implements>
		<MAX_EXPONENT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_EXPONENT>
		<MAX_VALUE public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_EXPONENT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_EXPONENT>
		<MIN_NORMAL public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</MIN_NORMAL>
		<MIN_VALUE public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</NEGATIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</NaN>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</POSITIVE_INFINITY>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="Float"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Single"/>
				<x path="Single"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<floatToIntBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</floatToIntBits>
		<floatToRawIntBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</floatToRawIntBits>
		<intBitsToFloat public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
		</intBitsToFloat>
		<_isInfinite public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isInfinite"</e></m>
				<m n=":overload"/>
			</meta>
		</_isInfinite>
		<_isNaN public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isNaN"</e></m>
				<m n=":overload"/>
			</meta>
		</_isNaN>
		<parseFloat public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Single"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</parseFloat>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Float"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><valueOf public="1" set="method">
	<f a="param1">
		<x path="Single"/>
		<x path="java.lang.Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</valueOf></overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<isInfinite public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isInfinite>
		<isNaN public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isNaN>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Float"</e></m></meta>
	</class>
	<class path="java.lang.IllegalAccessException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/IllegalAccessException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.IllegalAccessException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"IllegalAccessException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.IllegalArgumentException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/IllegalArgumentException.class" extern="1">
		<extends path="java.lang.RuntimeException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.IllegalArgumentException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"IllegalArgumentException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.InstantiationException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/InstantiationException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.InstantiationException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"InstantiationException"</e>
			</m>
		</meta>
	</class>
	<abstract path="java.lang.Integer" params="" file="/usr/local/lib/haxe/std/java/lang/Integer.hx">
		<from>
			<icast><c path="java.lang.IntegerClass"/></icast>
			<icast field="fromInt"><x path="Int"/></icast>
		</from>
		<this><c path="java.lang.IntegerClass"/></this>
		<to>
			<icast><c path="java.lang.IntegerClass"/></icast>
			<icast field="toInt"><x path="Int"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Integer.Integer_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Integer.hx" private="1" module="java.lang.Integer">
	<toInt public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.IntegerClass"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toInt>
	<fromInt public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<x path="Int"/>
			<x path="java.lang.Integer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromInt>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Integer.Integer_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Integer.hx" private="1" module="java.lang.Integer">
		<toInt public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.IntegerClass"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toInt>
		<fromInt public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<x path="Int"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromInt>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.IntegerClass" params="" file="/usr/local/lib/haxe/std/java/lang/Integer.hx" module="java.lang.Integer" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Integer"/></implements>
		<MAX_VALUE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_VALUE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Integer"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<bitCount public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</bitCount>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<getInteger public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getInteger public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getInteger>
				<getInteger public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="java.lang.Integer"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getInteger>
			</overloads>
		</getInteger>
		<highestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</highestOneBit>
		<lowestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</lowestOneBit>
		<numberOfLeadingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfLeadingZeros>
		<numberOfTrailingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfTrailingZeros>
		<parseInt public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseInt public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseInt></overloads>
		</parseInt>
		<reverse public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<rotateLeft public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateLeft>
		<rotateRight public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateRight>
		<signum public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</signum>
		<toBinaryString public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toBinaryString>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<toOctalString public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toOctalString>
		<_toString public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><toString public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":native"><e>"toString"</e></m>
		<m n=":overload"/>
	</meta>
</toString></overloads>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Integer"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Integer"</e></m></meta>
	</class>
	<class path="java.lang.Integer_IntegerCache" params="" file="/usr/local/lib/haxe/std/java/lang/Integer.hx" module="java.lang.Integer" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Integer$IntegerCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Integer.IntegerCache"</e>
	</m>
</meta></class>
	<class path="java.lang.InterruptedException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/InterruptedException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.InterruptedException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"InterruptedException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Iterable" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Iterable.class" extern="1" interface="1">
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.lang.Iterable.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Iterable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Iterable"</e>
			</m>
		</meta>
	</class>
	<abstract path="java.lang.Long" params="" file="/usr/local/lib/haxe/std/java/lang/Long.hx">
		<from>
			<icast><c path="java.lang.LongClass"/></icast>
			<icast field="fromLong"><x path="haxe.Int64"/></icast>
		</from>
		<this><c path="java.lang.LongClass"/></this>
		<to>
			<icast><c path="java.lang.LongClass"/></icast>
			<icast field="toLong"><x path="haxe.Int64"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Long.Long_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Long.hx" private="1" module="java.lang.Long">
	<toLong public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.LongClass"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toLong>
	<fromLong public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<x path="haxe.Int64"/>
			<x path="java.lang.Long"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromLong>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Long.Long_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Long.hx" private="1" module="java.lang.Long">
		<toLong public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.LongClass"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toLong>
		<fromLong public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<x path="haxe.Int64"/>
				<x path="java.lang.Long"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromLong>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.LongClass" params="" file="/usr/local/lib/haxe/std/java/lang/Long.hx" module="java.lang.Long" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Long"/></implements>
		<MAX_VALUE public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_VALUE public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Long"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<bitCount public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</bitCount>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Long"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<getLong public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="java.lang.Long"/>
				<x path="java.lang.Long"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getLong public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="haxe.Int64"/>
						<x path="java.lang.Long"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getLong>
				<getLong public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Long"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getLong>
			</overloads>
		</getLong>
		<highestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</highestOneBit>
		<lowestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</lowestOneBit>
		<numberOfLeadingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfLeadingZeros>
		<numberOfTrailingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfTrailingZeros>
		<parseLong public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseLong public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<x path="Int"/>
		<x path="haxe.Int64"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseLong></overloads>
		</parseLong>
		<reverse public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<rotateLeft public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateLeft>
		<rotateRight public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateRight>
		<signum public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</signum>
		<toBinaryString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toBinaryString>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<toOctalString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toOctalString>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><toString public="1" set="method">
	<f a="param1:param2">
		<x path="haxe.Int64"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":native"><e>"toString"</e></m>
		<m n=":overload"/>
	</meta>
</toString></overloads>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="java.lang.Long"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Long"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="java.lang.Long"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<x path="java.lang.Long"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<x path="haxe.Int64"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Long"</e></m></meta>
	</class>
	<class path="java.lang.Long_LongCache" params="" file="/usr/local/lib/haxe/std/java/lang/Long.hx" module="java.lang.Long" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Long$LongCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Long.LongCache"</e>
	</m>
</meta></class>
	<class path="java.lang.Math" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Math.class" extern="1">
		<scalb public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Single"/>
				<x path="Int"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><scalb public="1" set="method">
	<f a="param1:param2">
		<x path="Float"/>
		<x path="Int"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</scalb></overloads>
		</scalb>
		<nextUp public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><nextUp public="1" set="method">
	<f a="param1">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</nextUp></overloads>
		</nextUp>
		<nextAfter public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Single"/>
				<x path="Float"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><nextAfter public="1" set="method">
	<f a="param1:param2">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</nextAfter></overloads>
		</nextAfter>
		<getExponent public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getExponent public="1" set="method">
	<f a="param1">
		<x path="Single"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</getExponent></overloads>
		</getExponent>
		<copySign public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Single"/>
				<x path="Single"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><copySign public="1" set="method">
	<f a="param1:param2">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</copySign></overloads>
		</copySign>
		<log1p public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</log1p>
		<expm1 public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</expm1>
		<hypot public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</hypot>
		<tanh public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</tanh>
		<cosh public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</cosh>
		<sinh public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</sinh>
		<signum public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><signum public="1" set="method">
	<f a="param1">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</signum></overloads>
		</signum>
		<ulp public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ulp public="1" set="method">
	<f a="param1">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</ulp></overloads>
		</ulp>
		<min public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<min public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</min>
				<min public="1" set="method">
					<f a="param1:param2">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</min>
				<min public="1" set="method">
					<f a="param1:param2">
						<x path="Single"/>
						<x path="Single"/>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</min>
			</overloads>
		</min>
		<max public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<max public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</max>
				<max public="1" set="method">
					<f a="param1:param2">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</max>
				<max public="1" set="method">
					<f a="param1:param2">
						<x path="Single"/>
						<x path="Single"/>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</max>
			</overloads>
		</max>
		<abs public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<abs public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</abs>
				<abs public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</abs>
				<abs public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</abs>
			</overloads>
		</abs>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</random>
		<round public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><round public="1" set="method">
	<f a="param1">
		<x path="Single"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</round></overloads>
		</round>
		<pow public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</pow>
		<atan2 public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</atan2>
		<rint public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rint>
		<floor public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ceil>
		<IEEEremainder public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IEEEremainder>
		<cbrt public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</cbrt>
		<sqrt public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</sqrt>
		<log10 public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</log10>
		<log public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</log>
		<exp public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</exp>
		<toDegrees public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toDegrees>
		<toRadians public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toRadians>
		<atan public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</atan>
		<acos public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</acos>
		<asin public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</asin>
		<tan public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</tan>
		<cos public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</cos>
		<sin public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</sin>
		<E public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</E>
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</PI>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Math"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Math"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.NoSuchFieldException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/NoSuchFieldException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.NoSuchFieldException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"NoSuchFieldException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.NoSuchMethodException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/NoSuchMethodException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.NoSuchMethodException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"NoSuchMethodException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.NumberFormatException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/NumberFormatException.class" extern="1">
		<extends path="java.lang.IllegalArgumentException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.NumberFormatException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"NumberFormatException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Object" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Object.class" extern="1">
		<finalize set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Throwable"</e></m>
			</meta>
		</finalize>
		<wait public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads>
				<wait public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
						<m n=":final"/>
					</meta>
				</wait>
				<wait public="1" set="method">
					<f a="param1:param2">
						<x path="haxe.Int64"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
						<m n=":final"/>
					</meta>
				</wait>
			</overloads>
		</wait>
		<notifyAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</notifyAll>
		<notify public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</notify>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<clone set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.CloneNotSupportedException"</e></m>
			</meta>
		</clone>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<getClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getClass>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Object"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Object"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Package" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Package.class" extern="1">
		<implements path="java.lang.reflect.AnnotatedElement"/>
		<getPackages public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Package"/></c></f>
			<meta><m n=":overload"/></meta>
		</getPackages>
		<getPackage public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Package"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPackage>
		<getDeclaredAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAnnotations>
		<isAnnotationPresent public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAnnotationPresent>
		<getAnnotation public="1" params="A" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.A"/></c>
				<c path="getAnnotation.A"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<isCompatibleWith public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</isCompatibleWith>
		<isSealed public="1" set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isSealed public="1" set="method">
	<f a=""><x path="Bool"/></f>
	<meta><m n=":overload"/></meta>
</isSealed></overloads>
		</isSealed>
		<getImplementationVendor public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getImplementationVendor>
		<getImplementationVersion public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getImplementationVersion>
		<getImplementationTitle public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getImplementationTitle>
		<getSpecificationVendor public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSpecificationVendor>
		<getSpecificationVersion public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSpecificationVersion>
		<getSpecificationTitle public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSpecificationTitle>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Package"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Package"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Process" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Process.class" extern="1">
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</destroy>
		<exitValue public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</exitValue>
		<waitFor public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
		</waitFor>
		<getErrorStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta><m n=":overload"/></meta>
		</getErrorStream>
		<getInputStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta><m n=":overload"/></meta>
		</getInputStream>
		<getOutputStream public="1" set="method">
			<f a=""><c path="java.io.OutputStream"/></f>
			<meta><m n=":overload"/></meta>
		</getOutputStream>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Process"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Process"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ProcessBuilder.class" extern="1">
		<start public="1" set="method">
			<f a=""><c path="java.lang.Process"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</start>
		<redirectErrorStream public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<c path="java.lang.ProcessBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><redirectErrorStream public="1" set="method">
	<f a=""><x path="Bool"/></f>
	<meta><m n=":overload"/></meta>
</redirectErrorStream></overloads>
		</redirectErrorStream>
		<inheritIO public="1" set="method">
			<f a=""><c path="java.lang.ProcessBuilder"/></f>
			<meta><m n=":overload"/></meta>
		</inheritIO>
		<redirectError public="1" set="method">
			<f a=""><c path="java.lang.ProcessBuilder_Redirect"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<redirectError public="1" set="method">
					<f a="param1">
						<c path="java.lang.ProcessBuilder_Redirect"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectError>
				<redirectError public="1" set="method">
					<f a="param1">
						<c path="java.io.File"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectError>
			</overloads>
		</redirectError>
		<redirectOutput public="1" set="method">
			<f a=""><c path="java.lang.ProcessBuilder_Redirect"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<redirectOutput public="1" set="method">
					<f a="param1">
						<c path="java.lang.ProcessBuilder_Redirect"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectOutput>
				<redirectOutput public="1" set="method">
					<f a="param1">
						<c path="java.io.File"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectOutput>
			</overloads>
		</redirectOutput>
		<redirectInput public="1" set="method">
			<f a=""><c path="java.lang.ProcessBuilder_Redirect"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<redirectInput public="1" set="method">
					<f a="param1">
						<c path="java.lang.ProcessBuilder_Redirect"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectInput>
				<redirectInput public="1" set="method">
					<f a="param1">
						<c path="java.io.File"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectInput>
			</overloads>
		</redirectInput>
		<directory public="1" set="method">
			<f a="param1">
				<c path="java.io.File"/>
				<c path="java.lang.ProcessBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><directory public="1" set="method">
	<f a=""><c path="java.io.File"/></f>
	<meta><m n=":overload"/></meta>
</directory></overloads>
		</directory>
		<environment public="1" set="method">
			<f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="String"/>
</c></f>
			<meta><m n=":overload"/></meta>
		</environment>
		<command public="1" set="method">
			<f a=""><c path="java.util.List"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<command public="1" set="method">
					<f a="param1">
						<c path="java.util.List"><c path="String"/></c>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</command>
				<command public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="String"/></c>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</command>
			</overloads>
		</command>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="java.util.List"><c path="String"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ProcessBuilder"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ProcessBuilder"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_NullInputStream" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ProcessBuilder$NullInputStream.class" module="java.lang.ProcessBuilder" extern="1">
		<extends path="java.io.InputStream"/>
		<available public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</available>
		<read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</read>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ProcessBuilder$NullInputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ProcessBuilder.NullInputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_NullOutputStream" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ProcessBuilder$NullOutputStream.class" module="java.lang.ProcessBuilder" extern="1">
		<extends path="java.io.OutputStream"/>
		<write public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</write>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ProcessBuilder$NullOutputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ProcessBuilder.NullOutputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_Redirect" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ProcessBuilder$Redirect.class" module="java.lang.ProcessBuilder" extern="1">
		<appendTo public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.File"/>
				<c path="java.lang.ProcessBuilder_Redirect"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendTo>
		<to public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.File"/>
				<c path="java.lang.ProcessBuilder_Redirect"/>
			</f>
			<meta><m n=":overload"/></meta>
		</to>
		<from public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.File"/>
				<c path="java.lang.ProcessBuilder_Redirect"/>
			</f>
			<meta><m n=":overload"/></meta>
		</from>
		<PIPE public="1" static="1">
			<c path="java.lang.ProcessBuilder_Redirect"/>
			<meta><m n=":final"/></meta>
		</PIPE>
		<INHERIT public="1" static="1">
			<c path="java.lang.ProcessBuilder_Redirect"/>
			<meta><m n=":final"/></meta>
		</INHERIT>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<file public="1" set="method">
			<f a=""><c path="java.io.File"/></f>
			<meta><m n=":overload"/></meta>
		</file>
		<type public="1" set="method">
			<f a=""><e path="java.lang.ProcessBuilder_Redirect_Type"/></f>
			<meta><m n=":overload"/></meta>
		</type>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ProcessBuilder$Redirect"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ProcessBuilder.Redirect"</e>
			</m>
		</meta>
	</class>
	<enum path="java.lang.ProcessBuilder_Redirect_Type" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ProcessBuilder$Redirect$Type.class" module="java.lang.ProcessBuilder">
		<APPEND/>
		<WRITE/>
		<READ/>
		<INHERIT/>
		<PIPE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ProcessBuilder.Redirect.Type"</e>
			</m>
			<m n=":native"><e>"java.lang.ProcessBuilder$Redirect$Type"</e></m>
		</meta>
	</enum>
	<class path="java.lang.ProcessBuilder_1" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ProcessBuilder$1.class" module="java.lang.ProcessBuilder" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ProcessBuilder$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"ProcessBuilder.1"</e>
	</m>
</meta></class>
	<class path="java.lang.SecurityException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/SecurityException.class" extern="1">
		<extends path="java.lang.RuntimeException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.SecurityException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"SecurityException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.SecurityManager" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/SecurityManager.class" extern="1">
		<getThreadGroup public="1" set="method">
			<f a=""><c path="java.lang.ThreadGroup"/></f>
			<meta><m n=":overload"/></meta>
		</getThreadGroup>
		<checkSecurityAccess public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkSecurityAccess>
		<checkMemberAccess public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Class"><d/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkMemberAccess>
		<checkSetFactory public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkSetFactory>
		<checkPackageDefinition public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkPackageDefinition>
		<checkPackageAccess public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkPackageAccess>
		<checkAwtEventQueueAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkAwtEventQueueAccess>
		<checkSystemClipboardAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkSystemClipboardAccess>
		<checkPrintJobAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkPrintJobAccess>
		<checkTopLevelWindow public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkTopLevelWindow>
		<checkPropertyAccess public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkPropertyAccess>
		<checkPropertiesAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkPropertiesAccess>
		<checkMulticast public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.InetAddress"/>
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
			<overloads><checkMulticast public="1" set="method">
	<f a="param1">
		<c path="java.net.InetAddress"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</checkMulticast></overloads>
		</checkMulticast>
		<checkAccept public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkAccept>
		<checkListen public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkListen>
		<checkConnect public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><checkConnect public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</checkConnect></overloads>
		</checkConnect>
		<checkDelete public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkDelete>
		<checkWrite public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><checkWrite public="1" set="method">
	<f a="param1">
		<c path="java.io.FileDescriptor"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</checkWrite></overloads>
		</checkWrite>
		<checkRead public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<checkRead public="1" set="method">
					<f a="param1">
						<c path="java.io.FileDescriptor"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</checkRead>
				<checkRead public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</checkRead>
			</overloads>
		</checkRead>
		<checkLink public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkLink>
		<checkExec public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkExec>
		<checkExit public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkExit>
		<checkAccess public="1" set="method">
			<f a="param1">
				<c path="java.lang.ThreadGroup"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><checkAccess public="1" set="method">
	<f a="param1">
		<c path="java.lang.Thread"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</checkAccess></overloads>
		</checkAccess>
		<checkCreateClassLoader public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkCreateClassLoader>
		<checkPermission public="1" set="method">
			<f a="param1:param2">
				<c path="java.security.Permission"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><checkPermission public="1" set="method">
	<f a="param1">
		<c path="java.security.Permission"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</checkPermission></overloads>
		</checkPermission>
		<getSecurityContext public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</getSecurityContext>
		<inClassLoader set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</inClassLoader>
		<inClass set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</inClass>
		<classLoaderDepth set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</classLoaderDepth>
		<classDepth set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</classDepth>
		<currentLoadedClass set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</currentLoadedClass>
		<currentClassLoader set="method">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</currentClassLoader>
		<getClassContext set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getClassContext>
		<getInCheck public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getInCheck>
		<inCheck>
			<x path="Bool"/>
			<meta><m n=":deprecated"/></meta>
		</inCheck>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.SecurityManager"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"SecurityManager"</e>
			</m>
		</meta>
	</class>
	<abstract path="java.lang.Short" params="" file="/usr/local/lib/haxe/std/java/lang/Short.hx">
		<from>
			<icast><c path="java.lang.ShortClass"/></icast>
			<icast field="fromShort"><t path="java.types.Int16"/></icast>
		</from>
		<this><c path="java.lang.ShortClass"/></this>
		<to>
			<icast><c path="java.lang.ShortClass"/></icast>
			<icast field="toShort"><x path="java.Int16"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Short.Short_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Short.hx" private="1" module="java.lang.Short">
	<toShort public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.ShortClass"/>
			<t path="java.types.Int16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toShort>
	<fromShort public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<t path="java.types.Int16"/>
			<x path="java.lang.Short"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromShort>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Short.Short_Impl_" params="" file="/usr/local/lib/haxe/std/java/lang/Short.hx" private="1" module="java.lang.Short">
		<toShort public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.ShortClass"/>
				<t path="java.types.Int16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toShort>
		<fromShort public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<t path="java.types.Int16"/>
				<x path="java.lang.Short"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromShort>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.ShortClass" params="" file="/usr/local/lib/haxe/std/java/lang/Short.hx" module="java.lang.Short" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Short"/></implements>
		<MAX_VALUE public="1" set="null" static="1">
			<t path="java.types.Int16"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_VALUE public="1" set="null" static="1">
			<t path="java.types.Int16"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Short"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Int16"/>
				<t path="java.types.Int16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Short"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<parseShort public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<t path="java.types.Int16"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseShort public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<t path="java.types.Int16"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseShort></overloads>
		</parseShort>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int16"/>
				<t path="java.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int16"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="java.lang.Short"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Short"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1">
						<t path="java.types.Int16"/>
						<x path="java.lang.Short"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Short"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<t path="java.types.Int16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Short"</e></m></meta>
	</class>
	<class path="java.lang.Short_ShortCache" params="" file="/usr/local/lib/haxe/std/java/lang/Short.hx" module="java.lang.Short" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Short$ShortCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Short.ShortCache"</e>
	</m>
</meta></class>
	<class path="java.lang.StackTraceElement" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/StackTraceElement.class" extern="1">
		<implements path="java.io.Serializable"/>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isNativeMethod public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isNativeMethod>
		<getMethodName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getMethodName>
		<getClassName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getClassName>
		<getLineNumber public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getLineNumber>
		<getFileName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getFileName>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.StackTraceElement"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"StackTraceElement"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.StringBuffer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/StringBuffer.class" extern="1">
		<extends path="java.lang.AbstractStringBuilder"/>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.CharSequence"/>
		<append public="1" set="method" override="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.lang.StringBuffer"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<d/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<delete public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</delete>
		<appendCodePoint public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendCodePoint>
		<deleteCharAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</deleteCharAt>
		<replace public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</replace>
		<insert public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Float"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Single"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="haxe.Int64"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Char16"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Bool"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2:param3:param4">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="String"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<d/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
			</overloads>
		</insert>
		<reverse public="1" set="method" override="1">
			<f a=""><c path="java.lang.StringBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<toString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<lastIndexOf public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><lastIndexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</lastIndexOf></overloads>
		</lastIndexOf>
		<indexOf public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><indexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</indexOf></overloads>
		</indexOf>
		<substring public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><substring public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</substring></overloads>
		</substring>
		<subSequence public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.CharSequence"/>
			</f>
			<meta><m n=":overload"/></meta>
		</subSequence>
		<setCharAt public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setCharAt>
		<getChars public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getChars>
		<offsetByCodePoints public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</offsetByCodePoints>
		<codePointCount public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointCount>
		<codePointBefore public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointBefore>
		<codePointAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointAt>
		<charAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</charAt>
		<setLength public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLength>
		<trimToSize public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</trimToSize>
		<ensureCapacity public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ensureCapacity>
		<capacity public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</capacity>
		<length public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</length>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.StringBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"StringBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.StringBuilder" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/StringBuilder.class" extern="1">
		<extends path="java.lang.AbstractStringBuilder"/>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.CharSequence"/>
		<append public="1" set="method" override="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.lang.StringBuffer"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<d/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<length public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</length>
		<capacity public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</capacity>
		<ensureCapacity public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ensureCapacity>
		<trimToSize public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</trimToSize>
		<setLength public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLength>
		<charAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</charAt>
		<codePointAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointAt>
		<codePointBefore public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointBefore>
		<codePointCount public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointCount>
		<offsetByCodePoints public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</offsetByCodePoints>
		<getChars public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getChars>
		<setCharAt public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setCharAt>
		<delete public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</delete>
		<appendCodePoint public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendCodePoint>
		<deleteCharAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</deleteCharAt>
		<replace public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</replace>
		<substring public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><substring public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</substring></overloads>
		</substring>
		<subSequence public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.CharSequence"/>
			</f>
			<meta><m n=":overload"/></meta>
		</subSequence>
		<insert public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Float"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Single"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="haxe.Int64"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Char16"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Bool"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2:param3:param4">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="String"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<d/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
			</overloads>
		</insert>
		<reverse public="1" set="method" override="1">
			<f a=""><c path="java.lang.StringBuilder"/></f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<toString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<lastIndexOf public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><lastIndexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</lastIndexOf></overloads>
		</lastIndexOf>
		<indexOf public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><indexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</indexOf></overloads>
		</indexOf>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.StringBuilder"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"StringBuilder"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.System" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/System.class" extern="1">
		<mapLibraryName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</mapLibraryName>
		<loadLibrary public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</loadLibrary>
		<load public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</load>
		<runFinalizersOnExit public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</runFinalizersOnExit>
		<runFinalization public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</runFinalization>
		<gc public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</gc>
		<exit public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</exit>
		<getenv public="1" set="method" static="1">
			<f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="String"/>
</c></f>
			<meta><m n=":overload"/></meta>
			<overloads><getenv public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</getenv></overloads>
		</getenv>
		<clearProperty public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</clearProperty>
		<setProperty public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setProperty>
		<getProperty public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getProperty public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</getProperty></overloads>
		</getProperty>
		<setProperties public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.Properties"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setProperties>
		<lineSeparator public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</lineSeparator>
		<getProperties public="1" set="method" static="1">
			<f a=""><c path="java.util.Properties"/></f>
			<meta><m n=":overload"/></meta>
		</getProperties>
		<identityHashCode public="1" set="method" static="1">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</identityHashCode>
		<arraycopy public="1" set="method" static="1">
			<f a="param1:param2:param3:param4:param5">
				<d/>
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</arraycopy>
		<nanoTime public="1" set="method" static="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</nanoTime>
		<currentTimeMillis public="1" set="method" static="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</currentTimeMillis>
		<getSecurityManager public="1" set="method" static="1">
			<f a=""><c path="java.lang.SecurityManager"/></f>
			<meta><m n=":overload"/></meta>
		</getSecurityManager>
		<setSecurityManager public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.SecurityManager"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setSecurityManager>
		<inheritedChannel public="1" set="method" static="1">
			<f a=""><c path="java.nio.channels.Channel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</inheritedChannel>
		<console public="1" set="method" static="1">
			<f a=""><c path="java.io.Console"/></f>
			<meta><m n=":overload"/></meta>
		</console>
		<setErr public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.PrintStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setErr>
		<setOut public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.PrintStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setOut>
		<setIn public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setIn>
		<_in public="1" static="1">
			<c path="java.io.InputStream"/>
			<meta>
				<m n=":native"><e>"in"</e></m>
				<m n=":final"/>
			</meta>
		</_in>
		<out public="1" static="1">
			<c path="java.io.PrintStream"/>
			<meta><m n=":final"/></meta>
		</out>
		<err public="1" static="1">
			<c path="java.io.PrintStream"/>
			<meta><m n=":final"/></meta>
		</err>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.System"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"System"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Thread" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Thread.class" extern="1">
		<implements path="java.lang.Runnable"/>
		<getDefaultUncaughtExceptionHandler public="1" set="method" static="1">
			<f a=""><c path="java.lang.Thread_UncaughtExceptionHandler"/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultUncaughtExceptionHandler>
		<setDefaultUncaughtExceptionHandler public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.Thread_UncaughtExceptionHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDefaultUncaughtExceptionHandler>
		<getAllStackTraces public="1" set="method" static="1">
			<f a=""><c path="java.util.Map">
	<c path="java.lang.Thread"/>
	<c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c>
</c></f>
			<meta><m n=":overload"/></meta>
		</getAllStackTraces>
		<holdsLock public="1" set="method" static="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</holdsLock>
		<dumpStack public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</dumpStack>
		<enumerate public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.Thread"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</enumerate>
		<activeCount public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</activeCount>
		<interrupted public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</interrupted>
		<sleep public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><sleep public="1" set="method">
	<f a="param1">
		<x path="haxe.Int64"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
	</meta>
</sleep></overloads>
		</sleep>
		<yield public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</yield>
		<currentThread public="1" set="method" static="1">
			<f a=""><c path="java.lang.Thread"/></f>
			<meta><m n=":overload"/></meta>
		</currentThread>
		<MIN_PRIORITY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_PRIORITY>
		<NORM_PRIORITY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</NORM_PRIORITY>
		<MAX_PRIORITY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_PRIORITY>
		<setUncaughtExceptionHandler public="1" set="method">
			<f a="param1">
				<c path="java.lang.Thread_UncaughtExceptionHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setUncaughtExceptionHandler>
		<getUncaughtExceptionHandler public="1" set="method">
			<f a=""><c path="java.lang.Thread_UncaughtExceptionHandler"/></f>
			<meta><m n=":overload"/></meta>
		</getUncaughtExceptionHandler>
		<getState public="1" set="method">
			<f a=""><e path="java.lang.Thread_State"/></f>
			<meta><m n=":overload"/></meta>
		</getState>
		<getId public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getId>
		<getStackTrace public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c></f>
			<meta><m n=":overload"/></meta>
		</getStackTrace>
		<setContextClassLoader public="1" set="method">
			<f a="param1">
				<c path="java.lang.ClassLoader"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setContextClassLoader>
		<getContextClassLoader public="1" set="method">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta><m n=":overload"/></meta>
		</getContextClassLoader>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<checkAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</checkAccess>
		<isDaemon public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isDaemon>
		<setDaemon public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setDaemon>
		<join public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads>
				<join public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
						<m n=":final"/>
					</meta>
				</join>
				<join public="1" set="method">
					<f a="param1:param2">
						<x path="haxe.Int64"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
						<m n=":final"/>
					</meta>
				</join>
			</overloads>
		</join>
		<countStackFrames public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</countStackFrames>
		<getThreadGroup public="1" set="method">
			<f a=""><c path="java.lang.ThreadGroup"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getThreadGroup>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getName>
		<setName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setName>
		<getPriority public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getPriority>
		<setPriority public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setPriority>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</resume>
		<suspend public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</suspend>
		<isAlive public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isAlive>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</destroy>
		<isInterrupted public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isInterrupted>
		<interrupt public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</interrupt>
		<stop public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
			<overloads><stop public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":deprecated"/>
		<m n=":final"/>
	</meta>
</stop></overloads>
		</stop>
		<run public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<start public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</start>
		<clone set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.CloneNotSupportedException"</e></m>
			</meta>
		</clone>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.lang.ThreadGroup"/>
				<c path="java.lang.Runnable"/>
				<c path="String"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Runnable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.lang.ThreadGroup"/>
						<c path="java.lang.Runnable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.lang.ThreadGroup"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.lang.Runnable"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.ThreadGroup"/>
						<c path="java.lang.Runnable"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Thread"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Thread"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Thread_Caches" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Thread$Caches.class" module="java.lang.Thread" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Thread$Caches"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Thread.Caches"</e>
	</m>
</meta></class>
	<enum path="java.lang.Thread_State" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Thread$State.class" module="java.lang.Thread">
		<TERMINATED/>
		<TIMED_WAITING/>
		<WAITING/>
		<BLOCKED/>
		<RUNNABLE/>
		<NEW/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Thread.State"</e>
			</m>
			<m n=":native"><e>"java.lang.Thread$State"</e></m>
		</meta>
	</enum>
	<class path="java.lang.Thread_UncaughtExceptionHandler" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Thread$UncaughtExceptionHandler.class" module="java.lang.Thread" extern="1" interface="1">
		<uncaughtException public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Thread"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</uncaughtException>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Thread$UncaughtExceptionHandler"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Thread.UncaughtExceptionHandler"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Thread_WeakClassKey" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Thread$WeakClassKey.class" module="java.lang.Thread" extern="1">
		<extends path="java.lang.ref.WeakReference"><c path="java.lang.Class"><d/></c></extends>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Thread$WeakClassKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Thread.WeakClassKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ThreadGroup" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ThreadGroup.class" extern="1">
		<implements path="java.lang.Thread_UncaughtExceptionHandler"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<allowThreadSuspension public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</allowThreadSuspension>
		<uncaughtException public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Thread"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</uncaughtException>
		<list public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</list>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</destroy>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</resume>
		<suspend public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</suspend>
		<interrupt public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</interrupt>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</stop>
		<enumerate public="1" set="method">
			<f a="param1:param2">
				<c path="java.NativeArray"><c path="java.lang.ThreadGroup"/></c>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<enumerate public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="java.lang.Thread"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</enumerate>
				<enumerate public="1" set="method">
					<f a="param1:param2">
						<c path="java.NativeArray"><c path="java.lang.Thread"/></c>
						<x path="Bool"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</enumerate>
				<enumerate public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="java.lang.ThreadGroup"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</enumerate>
			</overloads>
		</enumerate>
		<activeGroupCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</activeGroupCount>
		<activeCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</activeCount>
		<checkAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</checkAccess>
		<parentOf public="1" set="method">
			<f a="param1">
				<c path="java.lang.ThreadGroup"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</parentOf>
		<setMaxPriority public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setMaxPriority>
		<setDaemon public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setDaemon>
		<isDestroyed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDestroyed>
		<isDaemon public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isDaemon>
		<getMaxPriority public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getMaxPriority>
		<getParent public="1" set="method">
			<f a=""><c path="java.lang.ThreadGroup"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getParent>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getName>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.ThreadGroup"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ThreadGroup"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ThreadGroup"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ThreadLocal_ThreadLocalMap" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ThreadLocal$ThreadLocalMap.class" module="java.lang.ThreadLocal" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ThreadLocal$ThreadLocalMap"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"ThreadLocal.ThreadLocalMap"</e>
	</m>
</meta></class>
	<class path="java.lang.ThreadLocal_ThreadLocalMap_Entry" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ThreadLocal$ThreadLocalMap$Entry.class" module="java.lang.ThreadLocal" extern="1">
		<extends path="java.lang.ref.WeakReference"><c path="java.lang.ThreadLocal"><d/></c></extends>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ThreadLocal$ThreadLocalMap$Entry"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ThreadLocal.ThreadLocalMap.Entry"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ThreadLocal_1" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ThreadLocal$1.class" module="java.lang.ThreadLocal" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ThreadLocal$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"ThreadLocal.1"</e>
	</m>
</meta></class>
	<class path="java.lang.Throwable_SentinelHolder" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Throwable$SentinelHolder.class" module="java.lang.Throwable" extern="1">
		<STACK_TRACE_ELEMENT_SENTINEL public="1" static="1">
			<c path="java.lang.StackTraceElement"/>
			<meta><m n=":final"/></meta>
		</STACK_TRACE_ELEMENT_SENTINEL>
		<STACK_TRACE_SENTINEL public="1" static="1">
			<c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c>
			<meta><m n=":final"/></meta>
		</STACK_TRACE_SENTINEL>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Throwable$SentinelHolder"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Throwable.SentinelHolder"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Throwable_PrintStreamOrWriter" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Throwable$PrintStreamOrWriter.class" module="java.lang.Throwable" extern="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Throwable$PrintStreamOrWriter"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Throwable.PrintStreamOrWriter"</e>
	</m>
</meta></class>
	<class path="java.lang.Throwable_WrappedPrintStream" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Throwable$WrappedPrintStream.class" module="java.lang.Throwable" extern="1">
		<extends path="java.lang.Throwable_PrintStreamOrWriter"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Throwable$WrappedPrintStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Throwable.WrappedPrintStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Throwable_WrappedPrintWriter" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Throwable$WrappedPrintWriter.class" module="java.lang.Throwable" extern="1">
		<extends path="java.lang.Throwable_PrintStreamOrWriter"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Throwable$WrappedPrintWriter"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Throwable.WrappedPrintWriter"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Throwable_1" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/Throwable$1.class" module="java.lang.Throwable" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Throwable$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Throwable.1"</e>
	</m>
</meta></class>
	<class path="java.lang.annotation.Annotation" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/annotation/Annotation.class" extern="1" interface="1">
		<annotationType public="1" set="method">
			<f a=""><c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</annotationType>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.annotation.Annotation"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.annotation"</e>
				<e>"Annotation"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ref.Reference_Lock" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ref/Reference$Lock.class" module="java.lang.ref.Reference" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ref.Reference$Lock"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang.ref"</e>
		<e>"Reference.Lock"</e>
	</m>
</meta></class>
	<class path="java.lang.ref.Reference_ReferenceHandler" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ref/Reference$ReferenceHandler.class" module="java.lang.ref.Reference" extern="1">
		<extends path="java.lang.Thread"/>
		<run public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.Reference$ReferenceHandler"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"Reference.ReferenceHandler"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ref.Reference_1" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ref/Reference$1.class" module="java.lang.ref.Reference" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ref.Reference$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang.ref"</e>
		<e>"Reference.1"</e>
	</m>
</meta></class>
	<class path="java.lang.ref.ReferenceQueue" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue.class" extern="1">
		<remove public="1" set="method">
			<f a=""><c path="java.lang.ref.Reference"><c path="java.lang.ref.ReferenceQueue.T"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><remove public="1" set="method">
	<f a="param1">
		<x path="haxe.Int64"/>
		<c path="java.lang.ref.Reference"><c path="java.lang.ref.ReferenceQueue.T"/></c>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
		<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
	</meta>
</remove></overloads>
		</remove>
		<poll public="1" set="method">
			<f a=""><c path="java.lang.ref.Reference"><c path="java.lang.ref.ReferenceQueue.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</poll>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.ReferenceQueue"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"ReferenceQueue"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ref.ReferenceQueue_Null" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue$Null.class" module="java.lang.ref.ReferenceQueue" extern="1">
		<extends path="java.lang.ref.ReferenceQueue"><d/></extends>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.ReferenceQueue$Null"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"ReferenceQueue.Null"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ref.ReferenceQueue_Lock" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue$Lock.class" module="java.lang.ref.ReferenceQueue" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ref.ReferenceQueue$Lock"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang.ref"</e>
		<e>"ReferenceQueue.Lock"</e>
	</m>
</meta></class>
	<class path="java.lang.ref.ReferenceQueue_1" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue$1.class" module="java.lang.ref.ReferenceQueue" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ref.ReferenceQueue$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang.ref"</e>
		<e>"ReferenceQueue.1"</e>
	</m>
</meta></class>
	<class path="java.lang.ref.SoftReference" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/ref/SoftReference.class" extern="1">
		<extends path="java.lang.ref.Reference"><c path="java.lang.ref.SoftReference.T"/></extends>
		<get public="1" set="method" override="1">
			<f a=""><c path="java.lang.ref.SoftReference.T"/></f>
			<meta><m n=":overload"/></meta>
		</get>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.ref.SoftReference.T"/>
				<c path="java.lang.ref.ReferenceQueue"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="java.lang.ref.SoftReference.T"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.SoftReference"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"SoftReference"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.AccessibleObject" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/reflect/AccessibleObject.class" extern="1">
		<implements path="java.lang.reflect.AnnotatedElement"/>
		<setAccessible public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><c path="java.lang.reflect.AccessibleObject"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</setAccessible>
		<_setAccessible public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><c path="java.lang.reflect.AccessibleObject"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":native"><e>"setAccessible"</e></m>
				<m n=":deprecated"><e>"This static field `_setAccessible` is deprecated and will be removed in later versions. Please use `setAccessible` instead"</e></m>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</_setAccessible>
		<getDeclaredAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAnnotations>
		<isAnnotationPresent public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAnnotationPresent>
		<getAnnotation public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
				<c path="getAnnotation.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<isAccessible public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAccessible>
		<setAccessible public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</setAccessible>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.AccessibleObject"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"AccessibleObject"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Member" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/reflect/Member.class" extern="1" interface="1">
		<isSynthetic public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSynthetic>
		<getModifiers public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getModifiers>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaringClass>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.Member"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"Member"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Constructor" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/reflect/Constructor.class" extern="1">
		<extends path="java.lang.reflect.AccessibleObject"/>
		<implements path="java.lang.reflect.Member"/>
		<implements path="java.lang.reflect.GenericDeclaration"/>
		<getParameterAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getParameterAnnotations>
		<getDeclaredAnnotations public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotation public="1" params="T" set="method" override="1">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
				<c path="getAnnotation.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<isSynthetic public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSynthetic>
		<isVarArgs public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isVarArgs>
		<newInstance public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><d/></c>
				<c path="java.lang.reflect.Constructor.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.reflect.InvocationTargetException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.InstantiationException"</e></m>
			</meta>
		</newInstance>
		<toGenericString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toGenericString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getGenericExceptionTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getGenericExceptionTypes>
		<getExceptionTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getExceptionTypes>
		<getGenericParameterTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getGenericParameterTypes>
		<getParameterTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getParameterTypes>
		<getTypeParameters public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><c path="java.lang.reflect.Constructor"><c path="java.lang.reflect.Constructor.T"/></c></c></c></f>
			<meta><m n=":overload"/></meta>
		</getTypeParameters>
		<getModifiers public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getModifiers>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><c path="java.lang.reflect.Constructor.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaringClass>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.Constructor"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"Constructor"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Field" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/reflect/Field.class" extern="1">
		<extends path="java.lang.reflect.AccessibleObject"/>
		<implements path="java.lang.reflect.Member"/>
		<getDeclaredAnnotations public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotation public="1" params="T" set="method" override="1">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
				<c path="getAnnotation.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<setDouble public="1" set="method">
			<f a="param1:param2">
				<d/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setDouble>
		<setFloat public="1" set="method">
			<f a="param1:param2">
				<d/>
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setFloat>
		<setLong public="1" set="method">
			<f a="param1:param2">
				<d/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setLong>
		<setInt public="1" set="method">
			<f a="param1:param2">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setInt>
		<setShort public="1" set="method">
			<f a="param1:param2">
				<d/>
				<t path="java.types.Int16"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setShort>
		<setChar public="1" set="method">
			<f a="param1:param2">
				<d/>
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setChar>
		<setByte public="1" set="method">
			<f a="param1:param2">
				<d/>
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setByte>
		<setBoolean public="1" set="method">
			<f a="param1:param2">
				<d/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setBoolean>
		<set public="1" set="method">
			<f a="param1:param2">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</set>
		<getDouble public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getDouble>
		<getFloat public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Single"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getFloat>
		<getLong public="1" set="method">
			<f a="param1">
				<d/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getLong>
		<getInt public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getInt>
		<getShort public="1" set="method">
			<f a="param1">
				<d/>
				<t path="java.types.Int16"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getShort>
		<getChar public="1" set="method">
			<f a="param1">
				<d/>
				<t path="java.types.Char16"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getChar>
		<getByte public="1" set="method">
			<f a="param1">
				<d/>
				<t path="java.types.Int8"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getByte>
		<getBoolean public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getBoolean>
		<get public="1" set="method">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</get>
		<toGenericString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toGenericString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getGenericType public="1" set="method">
			<f a=""><c path="java.lang.reflect.Type"/></f>
			<meta><m n=":overload"/></meta>
		</getGenericType>
		<getType public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getType>
		<isSynthetic public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSynthetic>
		<isEnumConstant public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEnumConstant>
		<getModifiers public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getModifiers>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaringClass>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.Field"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"Field"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.InvocationTargetException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/reflect/InvocationTargetException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<getCause public="1" set="method" override="1">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</getCause>
		<getTargetException public="1" set="method">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</getTargetException>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Throwable"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.InvocationTargetException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"InvocationTargetException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Member_Statics" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/reflect/Member.class" module="java.lang.reflect.Member" extern="1">
		<PUBLIC public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</PUBLIC>
		<DECLARED public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DECLARED>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.Member"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"Member"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Method" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/reflect/Method.class" extern="1">
		<extends path="java.lang.reflect.AccessibleObject"/>
		<implements path="java.lang.reflect.GenericDeclaration"/>
		<implements path="java.lang.reflect.Member"/>
		<getParameterAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getParameterAnnotations>
		<getDefaultValue public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultValue>
		<getDeclaredAnnotations public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotation public="1" params="T" set="method" override="1">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
				<c path="getAnnotation.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<isSynthetic public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSynthetic>
		<isVarArgs public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isVarArgs>
		<isBridge public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isBridge>
		<invoke public="1" set="method">
			<f a="param1:param2">
				<d/>
				<c path="java.NativeArray"><d/></c>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.reflect.InvocationTargetException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
			</meta>
		</invoke>
		<toGenericString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toGenericString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getGenericExceptionTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getGenericExceptionTypes>
		<getExceptionTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getExceptionTypes>
		<getGenericParameterTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getGenericParameterTypes>
		<getParameterTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getParameterTypes>
		<getGenericReturnType public="1" set="method">
			<f a=""><c path="java.lang.reflect.Type"/></f>
			<meta><m n=":overload"/></meta>
		</getGenericReturnType>
		<getReturnType public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getReturnType>
		<getTypeParameters public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><c path="java.lang.reflect.Method"/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getTypeParameters>
		<getModifiers public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getModifiers>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaringClass>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.Method"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"Method"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.TypeVariable" params="D" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/lang/reflect/TypeVariable.class" extern="1" interface="1">
		<extends path="java.lang.reflect.Type"/>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getGenericDeclaration public="1" set="method">
			<f a=""><c path="java.lang.reflect.TypeVariable.D"/></f>
			<meta><m n=":overload"/></meta>
		</getGenericDeclaration>
		<getBounds public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getBounds>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.TypeVariable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"TypeVariable"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.ContentHandler" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/ContentHandler.class" extern="1">
		<getContent public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.URLConnection"/>
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><getContent public="1" set="method">
	<f a="param1">
		<c path="java.net.URLConnection"/>
		<d/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</getContent></overloads>
		</getContent>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.ContentHandler"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"ContentHandler"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.ContentHandlerFactory" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/ContentHandlerFactory.class" extern="1" interface="1">
		<createContentHandler public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.ContentHandler"/>
			</f>
			<meta><m n=":overload"/></meta>
		</createContentHandler>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.ContentHandlerFactory"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"ContentHandlerFactory"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.FileNameMap" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/FileNameMap.class" extern="1" interface="1">
		<getContentTypeFor public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getContentTypeFor>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.FileNameMap"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"FileNameMap"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.InetAddress" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/InetAddress.class" extern="1">
		<implements path="java.io.Serializable"/>
		<getLocalHost public="1" set="method" static="1">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
			</meta>
		</getLocalHost>
		<getByAddress public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<c path="java.net.InetAddress"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
			</meta>
			<overloads><getByAddress public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<c path="java.net.InetAddress"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
	</meta>
</getByAddress></overloads>
		</getByAddress>
		<getLoopbackAddress public="1" set="method" static="1">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getLoopbackAddress>
		<getAllByName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
			</meta>
		</getAllByName>
		<getByName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.InetAddress"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
			</meta>
		</getByName>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<getHostAddress public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getHostAddress>
		<getAddress public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAddress>
		<getCanonicalHostName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getCanonicalHostName>
		<getHostName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getHostName>
		<isReachable public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.net.NetworkInterface"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><isReachable public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</isReachable></overloads>
		</isReachable>
		<isMCOrgLocal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMCOrgLocal>
		<isMCSiteLocal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMCSiteLocal>
		<isMCLinkLocal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMCLinkLocal>
		<isMCNodeLocal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMCNodeLocal>
		<isMCGlobal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMCGlobal>
		<isSiteLocalAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSiteLocalAddress>
		<isLinkLocalAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isLinkLocalAddress>
		<isLoopbackAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isLoopbackAddress>
		<isAnyLocalAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAnyLocalAddress>
		<isMulticastAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMulticastAddress>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.InetAddress"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"InetAddress"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.InetAddress_CacheEntry" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/InetAddress$CacheEntry.class" module="java.net.InetAddress" extern="1"><meta>
	<m n=":final"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.net.InetAddress$CacheEntry"</e></m>
	<m n=":javaCanonical">
		<e>"java.net"</e>
		<e>"InetAddress.CacheEntry"</e>
	</m>
</meta></class>
	<class path="java.net.InetAddress_Cache" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/InetAddress$Cache.class" module="java.net.InetAddress" extern="1">
		<get public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.InetAddress_CacheEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<put public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
				<c path="java.net.InetAddress_Cache"/>
			</f>
			<meta><m n=":overload"/></meta>
		</put>
		<new public="1" set="method">
			<f a="param1">
				<e path="java.net.InetAddress_Cache_Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.InetAddress$Cache"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"InetAddress.Cache"</e>
			</m>
		</meta>
	</class>
	<enum path="java.net.InetAddress_Cache_Type" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/InetAddress$Cache$Type.class" module="java.net.InetAddress">
		<Negative/>
		<Positive/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"InetAddress.Cache.Type"</e>
			</m>
			<m n=":native"><e>"java.net.InetAddress$Cache$Type"</e></m>
		</meta>
	</enum>
	<class path="java.net.InterfaceAddress" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/InterfaceAddress.class" extern="1">
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getNetworkPrefixLength public="1" set="method">
			<f a=""><t path="java.types.Int16"/></f>
			<meta><m n=":overload"/></meta>
		</getNetworkPrefixLength>
		<getBroadcast public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getBroadcast>
		<getAddress public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getAddress>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.InterfaceAddress"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"InterfaceAddress"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.MalformedURLException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/MalformedURLException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.MalformedURLException"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"MalformedURLException"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.NetworkInterface" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/NetworkInterface.class" extern="1">
		<getNetworkInterfaces public="1" set="method" static="1">
			<f a=""><c path="java.util.Enumeration"><c path="java.net.NetworkInterface"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getNetworkInterfaces>
		<getByInetAddress public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.InetAddress"/>
				<c path="java.net.NetworkInterface"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getByInetAddress>
		<getByIndex public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.net.NetworkInterface"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getByIndex>
		<getByName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.NetworkInterface"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getByName>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<isVirtual public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isVirtual>
		<getMTU public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getMTU>
		<getHardwareAddress public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getHardwareAddress>
		<supportsMulticast public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</supportsMulticast>
		<isPointToPoint public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</isPointToPoint>
		<isLoopback public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</isLoopback>
		<isUp public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</isUp>
		<getDisplayName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getDisplayName>
		<getIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getIndex>
		<getParent public="1" set="method">
			<f a=""><c path="java.net.NetworkInterface"/></f>
			<meta><m n=":overload"/></meta>
		</getParent>
		<getSubInterfaces public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="java.net.NetworkInterface"/></c></f>
			<meta><m n=":overload"/></meta>
		</getSubInterfaces>
		<getInterfaceAddresses public="1" set="method">
			<f a=""><c path="java.util.List"><c path="java.net.InterfaceAddress"/></c></f>
			<meta><m n=":overload"/></meta>
		</getInterfaceAddresses>
		<getInetAddresses public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="java.net.InetAddress"/></c></f>
			<meta><m n=":overload"/></meta>
		</getInetAddresses>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.NetworkInterface"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"NetworkInterface"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.Proxy" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/Proxy.class" extern="1">
		<NO_PROXY public="1" static="1">
			<c path="java.net.Proxy"/>
			<meta><m n=":final"/></meta>
		</NO_PROXY>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</equals>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<address public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta><m n=":overload"/></meta>
		</address>
		<type public="1" set="method">
			<f a=""><e path="java.net.Proxy_Type"/></f>
			<meta><m n=":overload"/></meta>
		</type>
		<new public="1" set="method">
			<f a="param1:param2">
				<e path="java.net.Proxy_Type"/>
				<c path="java.net.SocketAddress"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.Proxy"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"Proxy"</e>
			</m>
		</meta>
	</class>
	<enum path="java.net.Proxy_Type" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/Proxy$Type.class" module="java.net.Proxy">
		<SOCKS/>
		<HTTP/>
		<DIRECT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"Proxy.Type"</e>
			</m>
			<m n=":native"><e>"java.net.Proxy$Type"</e></m>
		</meta>
	</enum>
	<class path="java.net.SocketAddress" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/SocketAddress.class" extern="1">
		<implements path="java.io.Serializable"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.SocketAddress"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"SocketAddress"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.SocketException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/SocketException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.SocketException"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"SocketException"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URI" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/URI.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.net.URI"/></implements>
		<create public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URI"/>
			</f>
			<meta><m n=":overload"/></meta>
		</create>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.net.URI"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<toASCIIString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toASCIIString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getFragment public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getFragment>
		<getRawFragment public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawFragment>
		<getQuery public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getQuery>
		<getRawQuery public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawQuery>
		<getPath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getPath>
		<getRawPath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawPath>
		<getPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getPort>
		<getHost public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getHost>
		<getUserInfo public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getUserInfo>
		<getRawUserInfo public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawUserInfo>
		<getAuthority public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getAuthority>
		<getRawAuthority public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawAuthority>
		<getSchemeSpecificPart public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSchemeSpecificPart>
		<getRawSchemeSpecificPart public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawSchemeSpecificPart>
		<isOpaque public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpaque>
		<isAbsolute public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAbsolute>
		<getScheme public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getScheme>
		<toURL public="1" set="method">
			<f a=""><c path="java.net.URL"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
			</meta>
		</toURL>
		<relativize public="1" set="method">
			<f a="param1">
				<c path="java.net.URI"/>
				<c path="java.net.URI"/>
			</f>
			<meta><m n=":overload"/></meta>
		</relativize>
		<resolve public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URI"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><resolve public="1" set="method">
	<f a="param1">
		<c path="java.net.URI"/>
		<c path="java.net.URI"/>
	</f>
	<meta><m n=":overload"/></meta>
</resolve></overloads>
		</resolve>
		<normalize public="1" set="method">
			<f a=""><c path="java.net.URI"/></f>
			<meta><m n=":overload"/></meta>
		</normalize>
		<parseServerAuthority public="1" set="method">
			<f a=""><c path="java.net.URI"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
			</meta>
		</parseServerAuthority>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4:param5:param6:param7">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URI"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URI"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URI_Parser" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/URI$Parser.class" module="java.net.URI" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.net.URI$Parser"</e></m>
	<m n=":javaCanonical">
		<e>"java.net"</e>
		<e>"URI.Parser"</e>
	</m>
</meta></class>
	<class path="java.net.URISyntaxException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/URISyntaxException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<getMessage public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getMessage>
		<getIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getIndex>
		<getReason public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getReason>
		<getInput public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getInput>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2:param3">
		<c path="String"/>
		<c path="String"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URISyntaxException"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URISyntaxException"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URL" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/URL.class" extern="1">
		<implements path="java.io.Serializable"/>
		<setURLStreamHandlerFactory public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.URLStreamHandlerFactory"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setURLStreamHandlerFactory>
		<getContent public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><getContent public="1" set="method">
	<f a=""><d/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
		<m n=":final"/>
	</meta>
</getContent></overloads>
		</getContent>
		<openStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</openStream>
		<openConnection public="1" set="method">
			<f a="param1">
				<c path="java.net.Proxy"/>
				<c path="java.net.URLConnection"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><openConnection public="1" set="method">
	<f a=""><c path="java.net.URLConnection"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</openConnection></overloads>
		</openConnection>
		<toURI public="1" set="method">
			<f a=""><c path="java.net.URI"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
			</meta>
		</toURI>
		<toExternalForm public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toExternalForm>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<sameFile public="1" set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</sameFile>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getRef public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRef>
		<getFile public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getFile>
		<getHost public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getHost>
		<getProtocol public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getProtocol>
		<getDefaultPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultPort>
		<getPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getPort>
		<getAuthority public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getAuthority>
		<getUserInfo public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getUserInfo>
		<getPath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getPath>
		<getQuery public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getQuery>
		<set set="method">
			<f a="param1:param2:param3:param4:param5:param6:param7:param8">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><set set="method">
	<f a="param1:param2:param3:param4:param5">
		<c path="String"/>
		<c path="String"/>
		<x path="Int"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</set></overloads>
		</set>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.net.URL"/>
				<c path="String"/>
				<c path="java.net.URLStreamHandler"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<c path="java.net.URLStreamHandler"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.net.URL"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URL"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URL"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URLConnection" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/URLConnection.class" extern="1">
		<guessContentTypeFromStream public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</guessContentTypeFromStream>
		<guessContentTypeFromName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</guessContentTypeFromName>
		<setContentHandlerFactory public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.ContentHandlerFactory"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setContentHandlerFactory>
		<getDefaultRequestProperty public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getDefaultRequestProperty>
		<setDefaultRequestProperty public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</setDefaultRequestProperty>
		<getDefaultAllowUserInteraction public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultAllowUserInteraction>
		<setDefaultAllowUserInteraction public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDefaultAllowUserInteraction>
		<setFileNameMap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.FileNameMap"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setFileNameMap>
		<getFileNameMap public="1" set="method" static="1">
			<f a=""><c path="java.net.FileNameMap"/></f>
			<meta><m n=":overload"/></meta>
		</getFileNameMap>
		<getRequestProperties public="1" set="method">
			<f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="java.util.List"><c path="String"/></c>
</c></f>
			<meta><m n=":overload"/></meta>
		</getRequestProperties>
		<getRequestProperty public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getRequestProperty>
		<addRequestProperty public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</addRequestProperty>
		<setRequestProperty public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setRequestProperty>
		<setDefaultUseCaches public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDefaultUseCaches>
		<getDefaultUseCaches public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultUseCaches>
		<getIfModifiedSince public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getIfModifiedSince>
		<setIfModifiedSince public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setIfModifiedSince>
		<getUseCaches public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getUseCaches>
		<setUseCaches public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setUseCaches>
		<getAllowUserInteraction public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getAllowUserInteraction>
		<setAllowUserInteraction public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setAllowUserInteraction>
		<getDoOutput public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getDoOutput>
		<setDoOutput public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDoOutput>
		<getDoInput public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getDoInput>
		<setDoInput public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDoInput>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<getOutputStream public="1" set="method">
			<f a=""><c path="java.io.OutputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getOutputStream>
		<getInputStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getInputStream>
		<getPermission public="1" set="method">
			<f a=""><c path="java.security.Permission"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getPermission>
		<getContent public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><getContent public="1" set="method">
	<f a=""><d/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</getContent></overloads>
		</getContent>
		<getHeaderField public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getHeaderField public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</getHeaderField></overloads>
		</getHeaderField>
		<getHeaderFieldKey public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getHeaderFieldKey>
		<getHeaderFieldDate public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getHeaderFieldDate>
		<getHeaderFieldLong public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getHeaderFieldLong>
		<getHeaderFieldInt public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getHeaderFieldInt>
		<getHeaderFields public="1" set="method">
			<f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="java.util.List"><c path="String"/></c>
</c></f>
			<meta><m n=":overload"/></meta>
		</getHeaderFields>
		<getLastModified public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getLastModified>
		<getDate public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getDate>
		<getExpiration public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getExpiration>
		<getContentEncoding public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getContentEncoding>
		<getContentType public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getContentType>
		<getContentLengthLong public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getContentLengthLong>
		<getContentLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getContentLength>
		<getURL public="1" set="method">
			<f a=""><c path="java.net.URL"/></f>
			<meta><m n=":overload"/></meta>
		</getURL>
		<getReadTimeout public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getReadTimeout>
		<setReadTimeout public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setReadTimeout>
		<getConnectTimeout public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getConnectTimeout>
		<setConnectTimeout public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setConnectTimeout>
		<connect public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</connect>
		<url><c path="java.net.URL"/></url>
		<doInput><x path="Bool"/></doInput>
		<doOutput><x path="Bool"/></doOutput>
		<allowUserInteraction><x path="Bool"/></allowUserInteraction>
		<useCaches><x path="Bool"/></useCaches>
		<ifModifiedSince><x path="haxe.Int64"/></ifModifiedSince>
		<connected><x path="Bool"/></connected>
		<new set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URLConnection"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URLConnection"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URLEncoder" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/URLEncoder.class" extern="1">
		<encode public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
			</meta>
			<overloads><encode public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":deprecated"/>
	</meta>
</encode></overloads>
		</encode>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URLEncoder"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URLEncoder"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URLStreamHandler" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/URLStreamHandler.class" extern="1">
		<setURL set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<c path="java.net.URL"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
			<overloads><setURL set="method">
	<f a="param1:param2:param3:param4:param5:param6:param7:param8:param9">
		<c path="java.net.URL"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Int"/>
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</setURL></overloads>
		</setURL>
		<toExternalForm set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toExternalForm>
		<hostsEqual set="method">
			<f a="param1:param2">
				<c path="java.net.URL"/>
				<c path="java.net.URL"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</hostsEqual>
		<getHostAddress set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<c path="java.net.InetAddress"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getHostAddress>
		<sameFile set="method">
			<f a="param1:param2">
				<c path="java.net.URL"/>
				<c path="java.net.URL"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</sameFile>
		<hashCode set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals set="method">
			<f a="param1:param2">
				<c path="java.net.URL"/>
				<c path="java.net.URL"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getDefaultPort set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultPort>
		<parseURL set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.net.URL"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</parseURL>
		<openConnection set="method">
			<f a="param1:param2">
				<c path="java.net.URL"/>
				<c path="java.net.Proxy"/>
				<c path="java.net.URLConnection"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><openConnection set="method">
	<f a="param1">
		<c path="java.net.URL"/>
		<c path="java.net.URLConnection"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</openConnection></overloads>
		</openConnection>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URLStreamHandler"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URLStreamHandler"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URLStreamHandlerFactory" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/URLStreamHandlerFactory.class" extern="1" interface="1">
		<createURLStreamHandler public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URLStreamHandler"/>
			</f>
			<meta><m n=":overload"/></meta>
		</createURLStreamHandler>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URLStreamHandlerFactory"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URLStreamHandlerFactory"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.UnknownHostException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/net/UnknownHostException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.UnknownHostException"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"UnknownHostException"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.Buffer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/Buffer.class" extern="1">
		<isDirect public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<arrayOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</arrayOffset>
		<array public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</array>
		<hasArray public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasArray>
		<isReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isReadOnly>
		<hasRemaining public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasRemaining>
		<remaining public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</remaining>
		<rewind public="1" set="method">
			<f a=""><c path="java.nio.Buffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</rewind>
		<flip public="1" set="method">
			<f a=""><c path="java.nio.Buffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</flip>
		<clear public="1" set="method">
			<f a=""><c path="java.nio.Buffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</clear>
		<reset public="1" set="method">
			<f a=""><c path="java.nio.Buffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</reset>
		<mark public="1" set="method">
			<f a=""><c path="java.nio.Buffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</mark>
		<limit public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.Buffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads><limit public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</limit></overloads>
		</limit>
		<position public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.Buffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads><position public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</position></overloads>
		</position>
		<capacity public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</capacity>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.Buffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"Buffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.ByteBuffer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/ByteBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.ByteBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<allocateDirect public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocateDirect>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.ByteBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<asDoubleBuffer public="1" set="method">
			<f a=""><c path="java.nio.DoubleBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asDoubleBuffer>
		<putDouble public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Float"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putDouble public="1" set="method">
	<f a="param1">
		<x path="Float"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putDouble></overloads>
		</putDouble>
		<getDouble public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDouble public="1" set="method">
	<f a=""><x path="Float"/></f>
	<meta><m n=":overload"/></meta>
</getDouble></overloads>
		</getDouble>
		<asFloatBuffer public="1" set="method">
			<f a=""><c path="java.nio.FloatBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asFloatBuffer>
		<putFloat public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Single"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putFloat public="1" set="method">
	<f a="param1">
		<x path="Single"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putFloat></overloads>
		</putFloat>
		<getFloat public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getFloat public="1" set="method">
	<f a=""><x path="Single"/></f>
	<meta><m n=":overload"/></meta>
</getFloat></overloads>
		</getFloat>
		<asLongBuffer public="1" set="method">
			<f a=""><c path="java.nio.LongBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asLongBuffer>
		<putLong public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putLong public="1" set="method">
	<f a="param1">
		<x path="haxe.Int64"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putLong></overloads>
		</putLong>
		<getLong public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getLong public="1" set="method">
	<f a=""><x path="haxe.Int64"/></f>
	<meta><m n=":overload"/></meta>
</getLong></overloads>
		</getLong>
		<asIntBuffer public="1" set="method">
			<f a=""><c path="java.nio.IntBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asIntBuffer>
		<putInt public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putInt public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putInt></overloads>
		</putInt>
		<getInt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getInt public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</getInt></overloads>
		</getInt>
		<asShortBuffer public="1" set="method">
			<f a=""><c path="java.nio.ShortBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asShortBuffer>
		<putShort public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Int16"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putShort public="1" set="method">
	<f a="param1">
		<t path="java.types.Int16"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putShort></overloads>
		</putShort>
		<getShort public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getShort public="1" set="method">
	<f a=""><t path="java.types.Int16"/></f>
	<meta><m n=":overload"/></meta>
</getShort></overloads>
		</getShort>
		<asCharBuffer public="1" set="method">
			<f a=""><c path="java.nio.CharBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asCharBuffer>
		<putChar public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Char16"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putChar public="1" set="method">
	<f a="param1">
		<t path="java.types.Char16"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putChar></overloads>
		</putChar>
		<getChar public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getChar public="1" set="method">
	<f a=""><t path="java.types.Char16"/></f>
	<meta><m n=":overload"/></meta>
</getChar></overloads>
		</getChar>
		<order public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteOrder"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads><order public="1" set="method">
	<f a=""><c path="java.nio.ByteOrder"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</order></overloads>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.ByteBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<t path="java.types.Int8"/>
						<c path="java.nio.ByteBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Int8"/>
						<c path="java.nio.ByteBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<c path="java.nio.ByteBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.ByteBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><t path="java.types.Int8"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<t path="java.types.Int8"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.ByteBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.ByteBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.ByteBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.ByteBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.ByteBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"ByteBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.ByteOrder" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/ByteOrder.class" extern="1">
		<nativeOrder public="1" set="method" static="1">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</nativeOrder>
		<BIG_ENDIAN public="1" static="1">
			<c path="java.nio.ByteOrder"/>
			<meta><m n=":final"/></meta>
		</BIG_ENDIAN>
		<LITTLE_ENDIAN public="1" static="1">
			<c path="java.nio.ByteOrder"/>
			<meta><m n=":final"/></meta>
		</LITTLE_ENDIAN>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.ByteOrder"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"ByteOrder"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.CharBuffer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/CharBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Readable"/>
		<implements path="java.lang.CharSequence"/>
		<implements path="java.lang.Appendable"/>
		<implements path="java.lang.Comparable"><c path="java.nio.CharBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<wrap public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</wrap>
				<wrap public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</wrap>
				<wrap public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</wrap>
			</overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<subSequence public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</subSequence>
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.CharBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><t path="java.types.Char16"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<charAt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</charAt>
		<length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</length>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.CharBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Char16"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.CharBuffer"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><t path="java.types.Char16"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<t path="java.types.Char16"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.CharBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.CharBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.CharBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.CharBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.CharBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"CharBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.DoubleBuffer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/DoubleBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.DoubleBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="Float"/></c>
				<c path="java.nio.DoubleBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.DoubleBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.DoubleBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.DoubleBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><x path="Float"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.DoubleBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Float"/></c>
				<c path="java.nio.DoubleBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<c path="java.nio.DoubleBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Float"/>
						<c path="java.nio.DoubleBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.DoubleBuffer"/>
						<c path="java.nio.DoubleBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Float"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.DoubleBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Float"/></c>
				<c path="java.nio.DoubleBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><x path="Float"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Float"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.DoubleBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.DoubleBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.DoubleBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.DoubleBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.DoubleBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"DoubleBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.FloatBuffer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/FloatBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.FloatBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="Single"/></c>
				<c path="java.nio.FloatBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><x path="Single"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.FloatBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.FloatBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.FloatBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><x path="Single"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.FloatBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Single"/></c>
				<c path="java.nio.FloatBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<c path="java.nio.FloatBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Single"/>
						<c path="java.nio.FloatBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.FloatBuffer"/>
						<c path="java.nio.FloatBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Single"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.FloatBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Single"/></c>
				<c path="java.nio.FloatBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><x path="Single"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Single"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.FloatBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.FloatBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.FloatBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.FloatBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.FloatBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"FloatBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.IntBuffer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/IntBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.IntBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="Int"/></c>
				<c path="java.nio.IntBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.IntBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.IntBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.IntBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><x path="Int"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.IntBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Int"/></c>
				<c path="java.nio.IntBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.nio.IntBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.IntBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.IntBuffer"/>
						<c path="java.nio.IntBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.IntBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Int"/></c>
				<c path="java.nio.IntBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><x path="Int"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.IntBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.IntBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.IntBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.IntBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.IntBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"IntBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.LongBuffer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/LongBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.LongBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<c path="java.nio.LongBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><x path="haxe.Int64"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.LongBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.LongBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.LongBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><x path="haxe.Int64"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.LongBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<c path="java.nio.LongBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<c path="java.nio.LongBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="haxe.Int64"/>
						<c path="java.nio.LongBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.LongBuffer"/>
						<c path="java.nio.LongBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="haxe.Int64"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.LongBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<c path="java.nio.LongBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><x path="haxe.Int64"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="haxe.Int64"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.LongBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.LongBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.LongBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.LongBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.LongBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"LongBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.MappedByteBuffer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/MappedByteBuffer.class" extern="1">
		<extends path="java.nio.ByteBuffer"/>
		<force public="1" set="method">
			<f a=""><c path="java.nio.MappedByteBuffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</force>
		<load public="1" set="method">
			<f a=""><c path="java.nio.MappedByteBuffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</load>
		<isLoaded public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isLoaded>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.MappedByteBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"MappedByteBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.ShortBuffer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/ShortBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.ShortBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int16"/></c>
				<c path="java.nio.ShortBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Int16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.ShortBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.ShortBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.ShortBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int16"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.ShortBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int16"/></c>
				<c path="java.nio.ShortBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<t path="java.types.Int16"/>
						<c path="java.nio.ShortBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Int16"/>
						<c path="java.nio.ShortBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.ShortBuffer"/>
						<c path="java.nio.ShortBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.ShortBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int16"/></c>
				<c path="java.nio.ShortBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><t path="java.types.Int16"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<t path="java.types.Int16"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.ShortBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.ShortBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.ShortBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.ShortBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.ShortBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"ShortBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.Channel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/Channel.class" extern="1" interface="1">
		<extends path="java.io.Closeable"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.Channel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"Channel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.AsynchronousChannel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/AsynchronousChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.AsynchronousChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"AsynchronousChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.ClosedChannelException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/ClosedChannelException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.ClosedChannelException"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"ClosedChannelException"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.AsynchronousCloseException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/AsynchronousCloseException.class" extern="1">
		<extends path="java.nio.channels.ClosedChannelException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.AsynchronousCloseException"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"AsynchronousCloseException"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.AsynchronousFileChannel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/AsynchronousFileChannel.class" extern="1">
		<implements path="java.nio.channels.AsynchronousChannel"/>
		<open public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.nio.channels.AsynchronousFileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><open public="1" set="method">
	<f a="param1:param2:param3:param4">
		<c path="java.nio.file.Path"/>
		<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
		<c path="java.util.concurrent.ExecutorService"/>
		<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
		<c path="java.nio.channels.AsynchronousFileChannel"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</open></overloads>
		</open>
		<write public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.ByteBuffer"/>
				<x path="haxe.Int64"/>
				<c path="java.util.concurrent.Future"><x path="java.lang.Integer"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><write public="1" params="A" set="method">
	<f a="param1:param2:param3:param4">
		<c path="java.nio.ByteBuffer"/>
		<x path="haxe.Int64"/>
		<c path="write.A"/>
		<c path="java.nio.channels.CompletionHandler">
			<x path="java.lang.Integer"/>
			<d/>
		</c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</write></overloads>
		</write>
		<read public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.ByteBuffer"/>
				<x path="haxe.Int64"/>
				<c path="java.util.concurrent.Future"><x path="java.lang.Integer"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><read public="1" params="A" set="method">
	<f a="param1:param2:param3:param4">
		<c path="java.nio.ByteBuffer"/>
		<x path="haxe.Int64"/>
		<c path="read.A"/>
		<c path="java.nio.channels.CompletionHandler">
			<x path="java.lang.Integer"/>
			<d/>
		</c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</read></overloads>
		</read>
		<tryLock public="1" set="method">
			<f a=""><c path="java.nio.channels.FileLock"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><tryLock public="1" set="method">
	<f a="param1:param2:param3">
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<x path="Bool"/>
		<c path="java.nio.channels.FileLock"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</tryLock></overloads>
		</tryLock>
		<lock public="1" set="method">
			<f a=""><c path="java.util.concurrent.Future"><c path="java.nio.channels.FileLock"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<lock public="1" params="A" set="method">
					<f a="param1:param2:param3:param4:param5">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="Bool"/>
						<c path="lock.A"/>
						<c path="java.nio.channels.CompletionHandler">
							<c path="java.nio.channels.FileLock"/>
							<d/>
						</c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</lock>
				<lock public="1" params="A" set="method">
					<f a="param1:param2">
						<c path="lock.A"/>
						<c path="java.nio.channels.CompletionHandler">
							<c path="java.nio.channels.FileLock"/>
							<d/>
						</c>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</lock>
				<lock public="1" set="method">
					<f a="param1:param2:param3">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="Bool"/>
						<c path="java.util.concurrent.Future"><c path="java.nio.channels.FileLock"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</lock>
			</overloads>
		</lock>
		<force public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</force>
		<truncate public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.AsynchronousFileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</truncate>
		<size public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</size>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.AsynchronousFileChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"AsynchronousFileChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.ReadableByteChannel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/ReadableByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.ReadableByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"ReadableByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.WritableByteChannel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/WritableByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<write public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</write>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.WritableByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"WritableByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.ByteChannel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/ByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.ReadableByteChannel"/>
		<extends path="java.nio.channels.WritableByteChannel"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<write public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</write>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.ByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"ByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.CompletionHandler" params="V:A" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/CompletionHandler.class" extern="1" interface="1">
		<failed public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Throwable"/>
				<c path="java.nio.channels.CompletionHandler.A"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</failed>
		<completed public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.channels.CompletionHandler.V"/>
				<c path="java.nio.channels.CompletionHandler.A"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</completed>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.CompletionHandler"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"CompletionHandler"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.InterruptibleChannel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/InterruptibleChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.InterruptibleChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"InterruptibleChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.spi.AbstractInterruptibleChannel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/spi/AbstractInterruptibleChannel.class" extern="1">
		<implements path="java.nio.channels.Channel"/>
		<implements path="java.nio.channels.InterruptibleChannel"/>
		<end set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.nio.channels.AsynchronousCloseException"</e></m>
				<m n=":final"/>
			</meta>
		</end>
		<begin set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</begin>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isOpen>
		<implCloseChannel set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</implCloseChannel>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</close>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.spi.AbstractInterruptibleChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels.spi"</e>
				<e>"AbstractInterruptibleChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.SeekableByteChannel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/SeekableByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.ByteChannel"/>
		<truncate public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.SeekableByteChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</truncate>
		<size public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</size>
		<position public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.SeekableByteChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><position public="1" set="method">
	<f a=""><x path="haxe.Int64"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</position></overloads>
		</position>
		<write public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</write>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.SeekableByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"SeekableByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.GatheringByteChannel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/GatheringByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.WritableByteChannel"/>
		<write public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.GatheringByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"GatheringByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.ScatteringByteChannel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/ScatteringByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.ReadableByteChannel"/>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
			</overloads>
		</read>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.ScatteringByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"ScatteringByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.FileChannel" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/FileChannel.class" extern="1">
		<extends path="java.nio.channels.spi.AbstractInterruptibleChannel"/>
		<implements path="java.nio.channels.SeekableByteChannel"/>
		<implements path="java.nio.channels.GatheringByteChannel"/>
		<implements path="java.nio.channels.ScatteringByteChannel"/>
		<open public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.nio.channels.FileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><open public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.nio.file.Path"/>
		<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
		<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
		<c path="java.nio.channels.FileChannel"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</open></overloads>
		</open>
		<position public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.FileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><position public="1" set="method">
	<f a=""><x path="haxe.Int64"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</position></overloads>
		</position>
		<truncate public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.FileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</truncate>
		<tryLock public="1" set="method">
			<f a=""><c path="java.nio.channels.FileLock"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><tryLock public="1" set="method">
	<f a="param1:param2:param3">
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<x path="Bool"/>
		<c path="java.nio.channels.FileLock"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</tryLock></overloads>
		</tryLock>
		<lock public="1" set="method">
			<f a=""><c path="java.nio.channels.FileLock"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><lock public="1" set="method">
	<f a="param1:param2:param3">
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<x path="Bool"/>
		<c path="java.nio.channels.FileLock"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</lock></overloads>
		</lock>
		<map public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.channels.FileChannel_MapMode"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<c path="java.nio.MappedByteBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</map>
		<write public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.ByteBuffer"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
						<m n=":final"/>
					</meta>
				</write>
			</overloads>
		</write>
		<read public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.ByteBuffer"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
						<m n=":final"/>
					</meta>
				</read>
			</overloads>
		</read>
		<transferFrom public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.channels.ReadableByteChannel"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</transferFrom>
		<transferTo public="1" set="method">
			<f a="param1:param2:param3">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.WritableByteChannel"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</transferTo>
		<force public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</force>
		<size public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</size>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.FileChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"FileChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.FileChannel_MapMode" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/FileChannel$MapMode.class" module="java.nio.channels.FileChannel" extern="1">
		<READ_ONLY public="1" static="1">
			<c path="java.nio.channels.FileChannel_MapMode"/>
			<meta><m n=":final"/></meta>
		</READ_ONLY>
		<READ_WRITE public="1" static="1">
			<c path="java.nio.channels.FileChannel_MapMode"/>
			<meta><m n=":final"/></meta>
		</READ_WRITE>
		<PRIVATE public="1" static="1">
			<c path="java.nio.channels.FileChannel_MapMode"/>
			<meta><m n=":final"/></meta>
		</PRIVATE>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.FileChannel$MapMode"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"FileChannel.MapMode"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.FileLock" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/channels/FileLock.class" extern="1">
		<implements path="java.lang.AutoCloseable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</toString>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</close>
		<release public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</release>
		<isValid public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isValid>
		<overlaps public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</overlaps>
		<isShared public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isShared>
		<size public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</size>
		<position public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</position>
		<acquiredBy public="1" set="method">
			<f a=""><c path="java.nio.channels.Channel"/></f>
			<meta><m n=":overload"/></meta>
		</acquiredBy>
		<channel public="1" set="method">
			<f a=""><c path="java.nio.channels.FileChannel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</channel>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.channels.AsynchronousFileChannel"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a="param1:param2:param3:param4">
		<c path="java.nio.channels.FileChannel"/>
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.FileLock"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"FileLock"</e>
			</m>
		</meta>
	</class>
	<enum path="java.nio.file.AccessMode" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/AccessMode.class">
		<EXECUTE/>
		<WRITE/>
		<READ/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"AccessMode"</e>
			</m>
			<m n=":native"><e>"java.nio.file.AccessMode"</e></m>
		</meta>
	</enum>
	<class path="java.nio.file.CopyOption" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/CopyOption.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.nio.file.CopyOption"</e></m>
	<m n=":javaCanonical">
		<e>"java.nio.file"</e>
		<e>"CopyOption"</e>
	</m>
</meta></class>
	<class path="java.nio.file.DirectoryStream" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/DirectoryStream.class" extern="1" interface="1">
		<extends path="java.lang.Iterable"><c path="java.nio.file.DirectoryStream.T"/></extends>
		<extends path="java.io.Closeable"/>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.nio.file.DirectoryStream.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.DirectoryStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"DirectoryStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.DirectoryStream_Filter" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/DirectoryStream$Filter.class" module="java.nio.file.DirectoryStream" extern="1" interface="1">
		<accept public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.DirectoryStream_Filter.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</accept>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.DirectoryStream$Filter"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"DirectoryStream.Filter"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.FileStore" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/FileStore.class" extern="1">
		<getAttribute public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getAttribute>
		<getFileStoreAttributeView public="1" params="V" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getFileStoreAttributeView.V"/></c>
				<c path="getFileStoreAttributeView.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getFileStoreAttributeView>
		<supportsFileAttributeView public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><supportsFileAttributeView public="1" set="method">
	<f a="param1">
		<c path="java.lang.Class"><c path="java.nio.file.attribute.FileAttributeView"/></c>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</supportsFileAttributeView></overloads>
		</supportsFileAttributeView>
		<getUnallocatedSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getUnallocatedSpace>
		<getUsableSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getUsableSpace>
		<getTotalSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getTotalSpace>
		<isReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isReadOnly>
		<type public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</type>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.FileStore"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"FileStore"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.FileSystem" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/FileSystem.class" extern="1">
		<implements path="java.io.Closeable"/>
		<newWatchService public="1" set="method">
			<f a=""><c path="java.nio.file.WatchService"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newWatchService>
		<getUserPrincipalLookupService public="1" set="method">
			<f a=""><c path="java.nio.file.attribute.UserPrincipalLookupService"/></f>
			<meta><m n=":overload"/></meta>
		</getUserPrincipalLookupService>
		<getPathMatcher public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.file.PathMatcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPathMatcher>
		<getPath public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPath>
		<supportedFileAttributeViews public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</supportedFileAttributeViews>
		<getFileStores public="1" set="method">
			<f a=""><c path="java.lang.Iterable"><c path="java.nio.file.FileStore"/></c></f>
			<meta><m n=":overload"/></meta>
		</getFileStores>
		<getRootDirectories public="1" set="method">
			<f a=""><c path="java.lang.Iterable"><c path="java.nio.file.Path"/></c></f>
			<meta><m n=":overload"/></meta>
		</getRootDirectories>
		<getSeparator public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSeparator>
		<isReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isReadOnly>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<provider public="1" set="method">
			<f a=""><c path="java.nio.file.spi.FileSystemProvider"/></f>
			<meta><m n=":overload"/></meta>
		</provider>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.FileSystem"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"FileSystem"</e>
			</m>
		</meta>
	</class>
	<enum path="java.nio.file.LinkOption" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/LinkOption.class">
		<NOFOLLOW_LINKS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"LinkOption"</e>
			</m>
			<m n=":native"><e>"java.nio.file.LinkOption"</e></m>
		</meta>
	</enum>
	<class path="java.nio.file.OpenOption" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/OpenOption.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.nio.file.OpenOption"</e></m>
	<m n=":javaCanonical">
		<e>"java.nio.file"</e>
		<e>"OpenOption"</e>
	</m>
</meta></class>
	<class path="java.nio.file.Watchable" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/Watchable.class" extern="1" interface="1">
		<register public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.WatchService"/>
				<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Kind"><d/></c></c>
				<c path="java.nio.file.WatchKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><register public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.nio.file.WatchService"/>
		<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Kind"><d/></c></c>
		<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Modifier"/></c>
		<c path="java.nio.file.WatchKey"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</register></overloads>
		</register>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.Watchable"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"Watchable"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.Path" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/Path.class" extern="1" interface="1">
		<extends path="java.nio.file.Watchable"/>
		<extends path="java.lang.Iterable"><c path="java.nio.file.Path"/></extends>
		<extends path="java.lang.Comparable"><c path="java.nio.file.Path"/></extends>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compareTo>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.nio.file.Path"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<register public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.WatchService"/>
				<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Kind"><d/></c></c>
				<c path="java.nio.file.WatchKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><register public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.nio.file.WatchService"/>
		<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Kind"><d/></c></c>
		<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Modifier"/></c>
		<c path="java.nio.file.WatchKey"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</register></overloads>
		</register>
		<toFile public="1" set="method">
			<f a=""><c path="java.io.File"/></f>
			<meta><m n=":overload"/></meta>
		</toFile>
		<toRealPath public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><e path="java.nio.file.LinkOption"/></c>
				<c path="java.nio.file.Path"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</toRealPath>
		<toAbsolutePath public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</toAbsolutePath>
		<toUri public="1" set="method">
			<f a=""><c path="java.net.URI"/></f>
			<meta><m n=":overload"/></meta>
		</toUri>
		<relativize public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
		</relativize>
		<resolveSibling public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><resolveSibling public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.Path"/>
		<c path="java.nio.file.Path"/>
	</f>
	<meta><m n=":overload"/></meta>
</resolveSibling></overloads>
		</resolveSibling>
		<resolve public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><resolve public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.Path"/>
		<c path="java.nio.file.Path"/>
	</f>
	<meta><m n=":overload"/></meta>
</resolve></overloads>
		</resolve>
		<normalize public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</normalize>
		<endsWith public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><endsWith public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.Path"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</endsWith></overloads>
		</endsWith>
		<startsWith public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><startsWith public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.Path"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</startsWith></overloads>
		</startsWith>
		<subpath public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
		</subpath>
		<getName public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getNameCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getNameCount>
		<getParent public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</getParent>
		<getFileName public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</getFileName>
		<getRoot public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</getRoot>
		<isAbsolute public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAbsolute>
		<getFileSystem public="1" set="method">
			<f a=""><c path="java.nio.file.FileSystem"/></f>
			<meta><m n=":overload"/></meta>
		</getFileSystem>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.Path"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"Path"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.PathMatcher" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/PathMatcher.class" extern="1" interface="1">
		<matches public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</matches>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.PathMatcher"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"PathMatcher"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.WatchEvent" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/WatchEvent.class" extern="1" interface="1">
		<context public="1" set="method">
			<f a=""><c path="java.nio.file.WatchEvent.T"/></f>
			<meta><m n=":overload"/></meta>
		</context>
		<count public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</count>
		<kind public="1" set="method">
			<f a=""><c path="java.nio.file.WatchEvent_Kind"><c path="java.nio.file.WatchEvent.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</kind>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.WatchEvent"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"WatchEvent"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.WatchEvent_Kind" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/WatchEvent$Kind.class" module="java.nio.file.WatchEvent" extern="1" interface="1">
		<type public="1" set="method">
			<f a=""><c path="java.lang.Class"><c path="java.nio.file.WatchEvent_Kind.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</type>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.WatchEvent$Kind"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"WatchEvent.Kind"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.WatchEvent_Modifier" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/WatchEvent$Modifier.class" module="java.nio.file.WatchEvent" extern="1" interface="1">
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.WatchEvent$Modifier"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"WatchEvent.Modifier"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.WatchKey" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/WatchKey.class" extern="1" interface="1">
		<watchable public="1" set="method">
			<f a=""><c path="java.nio.file.Watchable"/></f>
			<meta><m n=":overload"/></meta>
		</watchable>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</cancel>
		<reset public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</reset>
		<pollEvents public="1" set="method">
			<f a=""><c path="java.util.List"><c path="java.nio.file.WatchEvent"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</pollEvents>
		<isValid public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isValid>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.WatchKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"WatchKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.WatchService" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/WatchService.class" extern="1" interface="1">
		<extends path="java.io.Closeable"/>
		<take public="1" set="method">
			<f a=""><c path="java.nio.file.WatchKey"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
		</take>
		<poll public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<c path="java.nio.file.WatchKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><poll public="1" set="method">
	<f a=""><c path="java.nio.file.WatchKey"/></f>
	<meta><m n=":overload"/></meta>
</poll></overloads>
		</poll>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.WatchService"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"WatchService"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.AttributeView" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/attribute/AttributeView.class" extern="1" interface="1">
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.AttributeView"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"AttributeView"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.BasicFileAttributes" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/attribute/BasicFileAttributes.class" extern="1" interface="1">
		<fileKey public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</fileKey>
		<size public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<isOther public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOther>
		<isSymbolicLink public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSymbolicLink>
		<isDirectory public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirectory>
		<isRegularFile public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isRegularFile>
		<creationTime public="1" set="method">
			<f a=""><c path="java.nio.file.attribute.FileTime"/></f>
			<meta><m n=":overload"/></meta>
		</creationTime>
		<lastAccessTime public="1" set="method">
			<f a=""><c path="java.nio.file.attribute.FileTime"/></f>
			<meta><m n=":overload"/></meta>
		</lastAccessTime>
		<lastModifiedTime public="1" set="method">
			<f a=""><c path="java.nio.file.attribute.FileTime"/></f>
			<meta><m n=":overload"/></meta>
		</lastModifiedTime>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.BasicFileAttributes"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"BasicFileAttributes"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileAttribute" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/attribute/FileAttribute.class" extern="1" interface="1">
		<value public="1" set="method">
			<f a=""><c path="java.nio.file.attribute.FileAttribute.T"/></f>
			<meta><m n=":overload"/></meta>
		</value>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.FileAttribute"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"FileAttribute"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileAttributeView" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/attribute/FileAttributeView.class" extern="1" interface="1">
		<extends path="java.nio.file.attribute.AttributeView"/>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.FileAttributeView"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"FileAttributeView"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileStoreAttributeView" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/attribute/FileStoreAttributeView.class" extern="1" interface="1">
		<extends path="java.nio.file.attribute.AttributeView"/>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.FileStoreAttributeView"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"FileStoreAttributeView"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileTime" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/attribute/FileTime.class" extern="1">
		<implements path="java.lang.Comparable"><c path="java.nio.file.attribute.FileTime"/></implements>
		<fromMillis public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.file.attribute.FileTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</fromMillis>
		<from public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<c path="java.nio.file.attribute.FileTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</from>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.attribute.FileTime"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<toMillis public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</toMillis>
		<to public="1" set="method">
			<f a="param1">
				<e path="java.util.concurrent.TimeUnit"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</to>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.FileTime"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"FileTime"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileTime_DaysAndNanos" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/attribute/FileTime$DaysAndNanos.class" module="java.nio.file.attribute.FileTime" extern="1">
		<implements path="java.lang.Comparable"><c path="java.nio.file.attribute.FileTime_DaysAndNanos"/></implements>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.attribute.FileTime_DaysAndNanos"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.FileTime$DaysAndNanos"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"FileTime.DaysAndNanos"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileTime_1" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/attribute/FileTime$1.class" module="java.nio.file.attribute.FileTime" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.nio.file.attribute.FileTime$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.nio.file.attribute"</e>
		<e>"FileTime.1"</e>
	</m>
</meta></class>
	<class path="java.security.Principal" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/Principal.class" extern="1" interface="1">
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Principal"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Principal"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.UserPrincipal" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/attribute/UserPrincipal.class" extern="1" interface="1">
		<extends path="java.security.Principal"/>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.UserPrincipal"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"UserPrincipal"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.GroupPrincipal" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/attribute/GroupPrincipal.class" extern="1" interface="1">
		<extends path="java.nio.file.attribute.UserPrincipal"/>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.GroupPrincipal"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"GroupPrincipal"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.UserPrincipalLookupService" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/attribute/UserPrincipalLookupService.class" extern="1">
		<lookupPrincipalByGroupName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.file.attribute.GroupPrincipal"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</lookupPrincipalByGroupName>
		<lookupPrincipalByName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.file.attribute.UserPrincipal"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</lookupPrincipalByName>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.UserPrincipalLookupService"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"UserPrincipalLookupService"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.spi.FileSystemProvider" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/nio/file/spi/FileSystemProvider.class" extern="1">
		<installedProviders public="1" set="method" static="1">
			<f a=""><c path="java.util.List"><c path="java.nio.file.spi.FileSystemProvider"/></c></f>
			<meta><m n=":overload"/></meta>
		</installedProviders>
		<setAttribute public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.file.Path"/>
				<c path="String"/>
				<d/>
				<c path="java.NativeArray"><e path="java.nio.file.LinkOption"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</setAttribute>
		<readAttributes public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="String"/>
				<c path="java.NativeArray"><e path="java.nio.file.LinkOption"/></c>
				<c path="java.util.Map">
					<c path="String"/>
					<d/>
				</c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><readAttributes public="1" params="A" set="method">
	<f a="param1:param2:param3">
		<c path="java.nio.file.Path"/>
		<c path="java.lang.Class"><c path="readAttributes.A"/></c>
		<c path="java.NativeArray"><e path="java.nio.file.LinkOption"/></c>
		<c path="readAttributes.A"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</readAttributes></overloads>
		</readAttributes>
		<getFileAttributeView public="1" params="V" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.lang.Class"><c path="getFileAttributeView.V"/></c>
				<c path="java.NativeArray"><e path="java.nio.file.LinkOption"/></c>
				<c path="getFileAttributeView.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getFileAttributeView>
		<checkAccess public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><e path="java.nio.file.AccessMode"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</checkAccess>
		<getFileStore public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.FileStore"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getFileStore>
		<isHidden public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</isHidden>
		<isSameFile public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</isSameFile>
		<move public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.CopyOption"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</move>
		<copy public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.CopyOption"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</copy>
		<readSymbolicLink public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readSymbolicLink>
		<deleteIfExists public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</deleteIfExists>
		<delete public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</delete>
		<createLink public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</createLink>
		<createSymbolicLink public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</createSymbolicLink>
		<createDirectory public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</createDirectory>
		<newDirectoryStream public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.DirectoryStream_Filter"><d/></c>
				<c path="java.nio.file.DirectoryStream"><c path="java.nio.file.Path"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newDirectoryStream>
		<newByteChannel public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
				<c path="java.nio.channels.SeekableByteChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newByteChannel>
		<newAsynchronousFileChannel public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.util.concurrent.ExecutorService"/>
				<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
				<c path="java.nio.channels.AsynchronousFileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newAsynchronousFileChannel>
		<newFileChannel public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
				<c path="java.nio.channels.FileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newFileChannel>
		<newOutputStream public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.io.OutputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newOutputStream>
		<newInputStream public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.io.InputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newInputStream>
		<newFileSystem public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Map">
					<c path="String"/>
					<d/>
				</c>
				<c path="java.nio.file.FileSystem"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><newFileSystem public="1" set="method">
	<f a="param1:param2">
		<c path="java.net.URI"/>
		<c path="java.util.Map">
			<c path="String"/>
			<d/>
		</c>
		<c path="java.nio.file.FileSystem"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</newFileSystem></overloads>
		</newFileSystem>
		<getPath public="1" set="method">
			<f a="param1">
				<c path="java.net.URI"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPath>
		<getFileSystem public="1" set="method">
			<f a="param1">
				<c path="java.net.URI"/>
				<c path="java.nio.file.FileSystem"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getFileSystem>
		<getScheme public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getScheme>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.spi.FileSystemProvider"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.spi"</e>
				<e>"FileSystemProvider"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.CodeSigner" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/CodeSigner.class" extern="1">
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<getTimestamp public="1" set="method">
			<f a=""><c path="java.security.Timestamp"/></f>
			<meta><m n=":overload"/></meta>
		</getTimestamp>
		<getSignerCertPath public="1" set="method">
			<f a=""><c path="java.security.cert.CertPath"/></f>
			<meta><m n=":overload"/></meta>
		</getSignerCertPath>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.security.cert.CertPath"/>
				<c path="java.security.Timestamp"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.CodeSigner"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"CodeSigner"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.CodeSource" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/CodeSource.class" extern="1">
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<implies public="1" set="method">
			<f a="param1">
				<c path="java.security.CodeSource"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</implies>
		<getCodeSigners public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.security.CodeSigner"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getCodeSigners>
		<getCertificates public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.security.cert.Certificate"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getCertificates>
		<getLocation public="1" set="method">
			<f a=""><c path="java.net.URL"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getLocation>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.URL"/>
				<c path="java.NativeArray"><c path="java.security.CodeSigner"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2">
		<c path="java.net.URL"/>
		<c path="java.NativeArray"><c path="java.security.cert.Certificate"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.CodeSource"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"CodeSource"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.GeneralSecurityException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/GeneralSecurityException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.GeneralSecurityException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"GeneralSecurityException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.Guard" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/Guard.class" extern="1" interface="1">
		<checkGuard public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</checkGuard>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Guard"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Guard"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.KeyException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/KeyException.class" extern="1">
		<extends path="java.security.GeneralSecurityException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.KeyException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"KeyException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.InvalidKeyException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/InvalidKeyException.class" extern="1">
		<extends path="java.security.KeyException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.InvalidKeyException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"InvalidKeyException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.Key" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/Key.class" extern="1" interface="1">
		<extends path="java.io.Serializable"/>
		<getEncoded public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
		</getEncoded>
		<getFormat public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getFormat>
		<getAlgorithm public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getAlgorithm>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Key"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Key"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.Key_Statics" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/Key.class" module="java.security.Key" extern="1">
		<serialVersionUID public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</serialVersionUID>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Key"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Key"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.NoSuchAlgorithmException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/NoSuchAlgorithmException.class" extern="1">
		<extends path="java.security.GeneralSecurityException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.NoSuchAlgorithmException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"NoSuchAlgorithmException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.NoSuchProviderException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/NoSuchProviderException.class" extern="1">
		<extends path="java.security.GeneralSecurityException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.NoSuchProviderException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"NoSuchProviderException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.Permission" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/Permission.class" extern="1">
		<implements path="java.security.Guard"/>
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<newPermissionCollection public="1" set="method">
			<f a=""><c path="java.security.PermissionCollection"/></f>
			<meta><m n=":overload"/></meta>
		</newPermissionCollection>
		<getActions public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getActions>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getName>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<implies public="1" set="method">
			<f a="param1">
				<c path="java.security.Permission"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</implies>
		<checkGuard public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</checkGuard>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Permission"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Permission"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.PermissionCollection" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/PermissionCollection.class" extern="1">
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isReadOnly>
		<setReadOnly public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</setReadOnly>
		<elements public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="java.security.Permission"/></c></f>
			<meta><m n=":overload"/></meta>
		</elements>
		<implies public="1" set="method">
			<f a="param1">
				<c path="java.security.Permission"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</implies>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.security.Permission"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.PermissionCollection"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"PermissionCollection"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.ProtectionDomain" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/ProtectionDomain.class" extern="1">
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<implies public="1" set="method">
			<f a="param1">
				<c path="java.security.Permission"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</implies>
		<getPermissions public="1" set="method">
			<f a=""><c path="java.security.PermissionCollection"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getPermissions>
		<getPrincipals public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.security.Principal"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getPrincipals>
		<getClassLoader public="1" set="method">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getClassLoader>
		<getCodeSource public="1" set="method">
			<f a=""><c path="java.security.CodeSource"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getCodeSource>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.security.CodeSource"/>
				<c path="java.security.PermissionCollection"/>
				<c path="java.lang.ClassLoader"/>
				<c path="java.NativeArray"><c path="java.security.Principal"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2">
		<c path="java.security.CodeSource"/>
		<c path="java.security.PermissionCollection"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.ProtectionDomain"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"ProtectionDomain"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.ProtectionDomain_Key" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/ProtectionDomain$Key.class" module="java.security.ProtectionDomain" extern="1"><meta>
	<m n=":final"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.security.ProtectionDomain$Key"</e></m>
	<m n=":javaCanonical">
		<e>"java.security"</e>
		<e>"ProtectionDomain.Key"</e>
	</m>
</meta></class>
	<class path="java.security.PublicKey" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/PublicKey.class" extern="1" interface="1">
		<extends path="java.security.Key"/>
		<getAlgorithm public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getAlgorithm>
		<getFormat public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getFormat>
		<getEncoded public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
		</getEncoded>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.PublicKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"PublicKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.PublicKey_Statics" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/PublicKey.class" module="java.security.PublicKey" extern="1">
		<serialVersionUID public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</serialVersionUID>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.PublicKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"PublicKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.SignatureException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/SignatureException.class" extern="1">
		<extends path="java.security.GeneralSecurityException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.SignatureException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"SignatureException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.Timestamp" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/Timestamp.class" extern="1">
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<getSignerCertPath public="1" set="method">
			<f a=""><c path="java.security.cert.CertPath"/></f>
			<meta><m n=":overload"/></meta>
		</getSignerCertPath>
		<getTimestamp public="1" set="method">
			<f a=""><c path="java.util.Date"/></f>
			<meta><m n=":overload"/></meta>
		</getTimestamp>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Date"/>
				<c path="java.security.cert.CertPath"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Timestamp"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Timestamp"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.CertPath" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/cert/CertPath.class" extern="1">
		<implements path="java.io.Serializable"/>
		<writeReplace set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.ObjectStreamException"</e></m>
			</meta>
		</writeReplace>
		<getCertificates public="1" set="method">
			<f a=""><c path="java.util.List"><c path="java.security.cert.Certificate"/></c></f>
			<meta><m n=":overload"/></meta>
		</getCertificates>
		<getEncoded public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.security.cert.CertificateEncodingException"</e></m>
			</meta>
			<overloads><getEncoded public="1" set="method">
	<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.security.cert.CertificateEncodingException"</e></m>
	</meta>
</getEncoded></overloads>
		</getEncoded>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getEncodings public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getEncodings>
		<getType public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getType>
		<new set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.CertPath"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"CertPath"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.CertPath_CertPathRep" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/cert/CertPath$CertPathRep.class" module="java.security.cert.CertPath" extern="1">
		<implements path="java.io.Serializable"/>
		<readResolve set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.ObjectStreamException"</e></m>
			</meta>
		</readResolve>
		<new set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.CertPath$CertPathRep"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"CertPath.CertPathRep"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.Certificate" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/cert/Certificate.class" extern="1">
		<implements path="java.io.Serializable"/>
		<writeReplace set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.ObjectStreamException"</e></m>
			</meta>
		</writeReplace>
		<getPublicKey public="1" set="method">
			<f a=""><c path="java.security.PublicKey"/></f>
			<meta><m n=":overload"/></meta>
		</getPublicKey>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<verify public="1" set="method">
			<f a="param1:param2">
				<c path="java.security.PublicKey"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.security.SignatureException"</e></m>
				<m n=":throws"><e>"java.security.NoSuchProviderException"</e></m>
				<m n=":throws"><e>"java.security.InvalidKeyException"</e></m>
				<m n=":throws"><e>"java.security.NoSuchAlgorithmException"</e></m>
				<m n=":throws"><e>"java.security.cert.CertificateException"</e></m>
			</meta>
			<overloads><verify public="1" set="method">
	<f a="param1">
		<c path="java.security.PublicKey"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.security.SignatureException"</e></m>
		<m n=":throws"><e>"java.security.NoSuchProviderException"</e></m>
		<m n=":throws"><e>"java.security.InvalidKeyException"</e></m>
		<m n=":throws"><e>"java.security.NoSuchAlgorithmException"</e></m>
		<m n=":throws"><e>"java.security.cert.CertificateException"</e></m>
	</meta>
</verify></overloads>
		</verify>
		<getEncoded public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.security.cert.CertificateEncodingException"</e></m>
			</meta>
		</getEncoded>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getType public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getType>
		<new set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.Certificate"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"Certificate"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.Certificate_CertificateRep" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/cert/Certificate$CertificateRep.class" module="java.security.cert.Certificate" extern="1">
		<implements path="java.io.Serializable"/>
		<readResolve set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.ObjectStreamException"</e></m>
			</meta>
		</readResolve>
		<new set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.Certificate$CertificateRep"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"Certificate.CertificateRep"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.CertificateException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/cert/CertificateException.class" extern="1">
		<extends path="java.security.GeneralSecurityException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.CertificateException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"CertificateException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.CertificateEncodingException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/security/cert/CertificateEncodingException.class" extern="1">
		<extends path="java.security.cert.CertificateException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.CertificateEncodingException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"CertificateEncodingException"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.LocaleServiceProviderPool" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@sun/util/LocaleServiceProviderPool.class" extern="1">
		<getAllAvailableLocales public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAllAvailableLocales>
		<getPool public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.util.spi.LocaleServiceProvider"/></c>
				<c path="java.sun.util.LocaleServiceProviderPool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPool>
		<getLocalizedObject public="1" params="P:S" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<c path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter">
					<c path="getLocalizedObject.P"/>
					<c path="getLocalizedObject.S"/>
				</c>
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.sun.util.resources.OpenListResourceBundle"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="getLocalizedObject.S"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getLocalizedObject public="1" params="P:S" set="method">
					<f a="param1:param2:param3">
						<c path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter">
							<c path="getLocalizedObject.P"/>
							<c path="getLocalizedObject.S"/>
						</c>
						<c path="java.util.Locale"/>
						<c path="java.NativeArray"><d/></c>
						<c path="getLocalizedObject.S"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getLocalizedObject>
				<getLocalizedObject public="1" params="P:S" set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter">
							<c path="getLocalizedObject.P"/>
							<c path="getLocalizedObject.S"/>
						</c>
						<c path="java.util.Locale"/>
						<c path="java.sun.util.resources.OpenListResourceBundle"/>
						<c path="String"/>
						<c path="java.NativeArray"><d/></c>
						<c path="getLocalizedObject.S"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getLocalizedObject>
			</overloads>
		</getLocalizedObject>
		<hasProviders public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasProviders>
		<getAvailableLocales public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAvailableLocales>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.LocaleServiceProviderPool"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util"</e>
				<e>"LocaleServiceProviderPool"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.LocaleServiceProviderPool_AllAvailableLocales" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@sun/util/LocaleServiceProviderPool$AllAvailableLocales.class" module="java.sun.util.LocaleServiceProviderPool" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"sun.util.LocaleServiceProviderPool$AllAvailableLocales"</e></m>
	<m n=":javaCanonical">
		<e>"sun.util"</e>
		<e>"LocaleServiceProviderPool.AllAvailableLocales"</e>
	</m>
</meta></class>
	<class path="java.util.spi.LocaleServiceProvider" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/spi/LocaleServiceProvider.class" extern="1">
		<getAvailableLocales public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAvailableLocales>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.spi.LocaleServiceProvider"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.spi"</e>
				<e>"LocaleServiceProvider"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.LocaleServiceProviderPool_NullProvider" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@sun/util/LocaleServiceProviderPool$NullProvider.class" module="java.sun.util.LocaleServiceProviderPool" extern="1">
		<extends path="java.util.spi.LocaleServiceProvider"/>
		<getAvailableLocales public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAvailableLocales>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.LocaleServiceProviderPool$NullProvider"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util"</e>
				<e>"LocaleServiceProviderPool.NullProvider"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter" params="P:S" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@sun/util/LocaleServiceProviderPool$LocalizedObjectGetter.class" module="java.sun.util.LocaleServiceProviderPool" extern="1" interface="1">
		<getObject public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter.P"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter.S"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getObject>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.LocaleServiceProviderPool$LocalizedObjectGetter"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util"</e>
				<e>"LocaleServiceProviderPool.LocalizedObjectGetter"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@sun/util/locale/BaseLocale.class" extern="1">
		<getInstance public="1" set="method" static="1">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sun.util.locale.BaseLocale"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getInstance>
		<createInstance public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="java.sun.util.locale.BaseLocale"/>
			</f>
			<meta><m n=":overload"/></meta>
		</createInstance>
		<SEP public="1" static="1">
			<c path="String"/>
			<meta><m n=":final"/></meta>
		</SEP>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getVariant public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getVariant>
		<getRegion public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRegion>
		<getScript public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getScript>
		<getLanguage public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getLanguage>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.locale.BaseLocale"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.locale"</e>
				<e>"BaseLocale"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale_Key" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@sun/util/locale/BaseLocale$Key.class" module="java.sun.util.locale.BaseLocale" extern="1">
		<implements path="java.lang.Comparable"><c path="java.sun.util.locale.BaseLocale_Key"/></implements>
		<normalize public="1" set="method" static="1">
			<f a="param1">
				<c path="java.sun.util.locale.BaseLocale_Key"/>
				<c path="java.sun.util.locale.BaseLocale_Key"/>
			</f>
			<meta><m n=":overload"/></meta>
		</normalize>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.sun.util.locale.BaseLocale_Key"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.locale.BaseLocale$Key"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.locale"</e>
				<e>"BaseLocale.Key"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.locale.LocaleObjectCache" params="K:V" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@sun/util/locale/LocaleObjectCache.class" extern="1">
		<normalizeKey set="method">
			<f a="param1">
				<c path="java.sun.util.locale.LocaleObjectCache.K"/>
				<c path="java.sun.util.locale.LocaleObjectCache.K"/>
			</f>
			<meta><m n=":overload"/></meta>
		</normalizeKey>
		<createObject set="method">
			<f a="param1">
				<c path="java.sun.util.locale.LocaleObjectCache.K"/>
				<c path="java.sun.util.locale.LocaleObjectCache.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</createObject>
		<put set="method">
			<f a="param1:param2">
				<c path="java.sun.util.locale.LocaleObjectCache.K"/>
				<c path="java.sun.util.locale.LocaleObjectCache.V"/>
				<c path="java.sun.util.locale.LocaleObjectCache.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.sun.util.locale.LocaleObjectCache.K"/>
				<c path="java.sun.util.locale.LocaleObjectCache.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Single"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.locale.LocaleObjectCache"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.locale"</e>
				<e>"LocaleObjectCache"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale_Cache" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@sun/util/locale/BaseLocale$Cache.class" module="java.sun.util.locale.BaseLocale" extern="1">
		<extends path="java.sun.util.locale.LocaleObjectCache">
			<c path="java.sun.util.locale.BaseLocale_Key"/>
			<c path="java.sun.util.locale.BaseLocale"/>
		</extends>
		<createObject set="method" override="1">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><createObject set="method">
	<f a="param1">
		<c path="java.sun.util.locale.BaseLocale_Key"/>
		<c path="java.sun.util.locale.BaseLocale"/>
	</f>
	<meta><m n=":overload"/></meta>
</createObject></overloads>
		</createObject>
		<normalizeKey set="method" override="1">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><normalizeKey set="method">
	<f a="param1">
		<c path="java.sun.util.locale.BaseLocale_Key"/>
		<c path="java.sun.util.locale.BaseLocale_Key"/>
	</f>
	<meta><m n=":overload"/></meta>
</normalizeKey></overloads>
		</normalizeKey>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.locale.BaseLocale$Cache"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.locale"</e>
				<e>"BaseLocale.Cache"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale_1" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@sun/util/locale/BaseLocale$1.class" module="java.sun.util.locale.BaseLocale" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"sun.util.locale.BaseLocale$1"</e></m>
	<m n=":javaCanonical">
		<e>"sun.util.locale"</e>
		<e>"BaseLocale.1"</e>
	</m>
</meta></class>
	<class path="java.sun.util.locale.LocaleObjectCache_CacheEntry" params="K:V" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@sun/util/locale/LocaleObjectCache$CacheEntry.class" module="java.sun.util.locale.LocaleObjectCache" extern="1">
		<extends path="java.lang.ref.SoftReference"><c path="java.sun.util.locale.LocaleObjectCache_CacheEntry.V"/></extends>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.locale.LocaleObjectCache$CacheEntry"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.locale"</e>
				<e>"LocaleObjectCache.CacheEntry"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/ResourceBundle.class" extern="1">
		<clearCache public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.ClassLoader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads><clearCache public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</clearCache></overloads>
		</clearCache>
		<getBundle public="1" set="method" static="1">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="java.lang.ClassLoader"/>
				<c path="java.util.ResourceBundle_Control"/>
				<c path="java.util.ResourceBundle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getBundle public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.util.ResourceBundle"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</getBundle>
				<getBundle public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.util.ResourceBundle_Control"/>
						<c path="java.util.ResourceBundle"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</getBundle>
				<getBundle public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.util.Locale"/>
						<c path="java.util.ResourceBundle"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</getBundle>
				<getBundle public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.util.Locale"/>
						<c path="java.util.ResourceBundle_Control"/>
						<c path="java.util.ResourceBundle"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</getBundle>
				<getBundle public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.util.Locale"/>
						<c path="java.lang.ClassLoader"/>
						<c path="java.util.ResourceBundle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getBundle>
			</overloads>
		</getBundle>
		<handleKeySet set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</handleKeySet>
		<keySet public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</keySet>
		<containsKey public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsKey>
		<getKeys public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getKeys>
		<handleGetObject set="method">
			<f a="param1">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</handleGetObject>
		<setParent set="method">
			<f a="param1">
				<c path="java.util.ResourceBundle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setParent>
		<getLocale public="1" set="method">
			<f a=""><c path="java.util.Locale"/></f>
			<meta><m n=":overload"/></meta>
		</getLocale>
		<getObject public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getObject>
		<getStringArray public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getStringArray>
		<getString public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getString>
		<parent><c path="java.util.ResourceBundle"/></parent>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.resources.OpenListResourceBundle" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@sun/util/resources/OpenListResourceBundle.class" extern="1">
		<extends path="java.util.ResourceBundle"/>
		<createMap set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.Map">
					<d/>
					<d/>
				</c>
			</f>
			<meta><m n=":overload"/></meta>
		</createMap>
		<getContents set="method">
			<f a=""><c path="java.NativeArray"><c path="java.NativeArray"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getContents>
		<getParent public="1" set="method">
			<f a=""><c path="java.sun.util.resources.OpenListResourceBundle"/></f>
			<meta><m n=":overload"/></meta>
		</getParent>
		<handleGetKeys public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</handleGetKeys>
		<getKeys public="1" set="method" override="1">
			<f a=""><c path="java.util.Enumeration"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getKeys>
		<handleGetObject public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</handleGetObject>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.resources.OpenListResourceBundle"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.resources"</e>
				<e>"OpenListResourceBundle"</e>
			</m>
		</meta>
	</class>
	<typedef path="java.types.Char16" params="" file="/usr/local/lib/haxe/std/java/types/Char16.hx"><x path="java.Char16"/></typedef>
	<typedef path="java.types.Int16" params="" file="/usr/local/lib/haxe/std/java/types/Int16.hx"><x path="java.Int16"/></typedef>
	<typedef path="java.types.Int8" params="" file="/usr/local/lib/haxe/std/java/types/Int8.hx"><x path="java.Int8"/></typedef>
	<class path="java.util.Collection" params="E" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Collection.class" extern="1" interface="1">
		<extends path="java.lang.Iterable"><c path="java.util.Collection.E"/></extends>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<retainAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</retainAll>
		<removeAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeAll>
		<addAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.Collection.E"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</addAll>
		<containsAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsAll>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection.E"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<toArray public="1" params="T" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="toArray.T"/></c>
				<c path="java.NativeArray"><c path="toArray.T"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toArray public="1" set="method">
	<f a=""><c path="java.NativeArray"><d/></c></f>
	<meta><m n=":overload"/></meta>
</toArray></overloads>
		</toArray>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.util.Collection.E"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<contains public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Collection"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Collection"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.AbstractCollection" params="E" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/AbstractCollection.class" extern="1">
		<implements path="java.util.Collection"><c path="java.util.AbstractCollection.E"/></implements>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<retainAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</retainAll>
		<removeAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeAll>
		<addAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.AbstractCollection.E"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</addAll>
		<containsAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsAll>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.util.AbstractCollection.E"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<toArray public="1" params="T" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="toArray.T"/></c>
				<c path="java.NativeArray"><c path="toArray.T"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toArray public="1" set="method">
	<f a=""><c path="java.NativeArray"><d/></c></f>
	<meta><m n=":overload"/></meta>
</toArray></overloads>
		</toArray>
		<contains public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.util.AbstractCollection.E"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.AbstractCollection"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"AbstractCollection"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Set" params="E" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Set.class" extern="1" interface="1">
		<extends path="java.util.Collection"><c path="java.util.Set.E"/></extends>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<removeAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeAll>
		<retainAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</retainAll>
		<addAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.Set.E"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</addAll>
		<containsAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsAll>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.util.Set.E"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<toArray public="1" params="T" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="toArray.T"/></c>
				<c path="java.NativeArray"><c path="toArray.T"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toArray public="1" set="method">
	<f a=""><c path="java.NativeArray"><d/></c></f>
	<meta><m n=":overload"/></meta>
</toArray></overloads>
		</toArray>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.util.Set.E"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<contains public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Set"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Set"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.AbstractSet" params="E" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/AbstractSet.class" extern="1">
		<extends path="java.util.AbstractCollection"><c path="java.util.AbstractSet.E"/></extends>
		<implements path="java.util.Set"><c path="java.util.AbstractSet.E"/></implements>
		<removeAll public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeAll>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.AbstractSet"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"AbstractSet"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Date" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Date.class" extern="1">
		<implements path="java.lang.Comparable"><c path="java.util.Date"/></implements>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.io.Serializable"/>
		<parse public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="param1:param2:param3:param4:param5:param6">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</UTC>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.util.Date"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getTimezoneOffset>
		<toGMTString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toGMTString>
		<toLocaleString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<after public="1" set="method">
			<f a="param1">
				<c path="java.util.Date"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</after>
		<before public="1" set="method">
			<f a="param1">
				<c path="java.util.Date"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</before>
		<setTime public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setTime>
		<getTime public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getTime>
		<setSeconds public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setSeconds>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getSeconds>
		<setMinutes public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setMinutes>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getMinutes>
		<setHours public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setHours>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getHours>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getDay>
		<setDate public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDate>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getDate>
		<setMonth public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setMonth>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getMonth>
		<setYear public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setYear>
		<getYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getYear>
		<clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4:param5">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4:param5:param6">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Date"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Date"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Dictionary" params="K:V" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Dictionary.class" extern="1">
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Dictionary.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<put public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Dictionary.K"/>
				<c path="java.util.Dictionary.V"/>
				<c path="java.util.Dictionary.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Dictionary.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<elements public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="java.util.Dictionary.V"/></c></f>
			<meta><m n=":overload"/></meta>
		</elements>
		<keys public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="java.util.Dictionary.K"/></c></f>
			<meta><m n=":overload"/></meta>
		</keys>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Dictionary"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Dictionary"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Enumeration" params="E" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Enumeration.class" extern="1" interface="1">
		<nextElement public="1" set="method">
			<f a=""><c path="java.util.Enumeration.E"/></f>
			<meta><m n=":overload"/></meta>
		</nextElement>
		<hasMoreElements public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasMoreElements>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Enumeration"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Enumeration"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Map" params="K:V" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Map.class" extern="1" interface="1">
		<entrySet public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Map.K"/>
	<c path="java.util.Map.V"/>
</c></c></f>
			<meta><m n=":overload"/></meta>
		</entrySet>
		<values public="1" set="method">
			<f a=""><c path="java.util.Collection"><c path="java.util.Map.V"/></c></f>
			<meta><m n=":overload"/></meta>
		</values>
		<keySet public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.util.Map.K"/></c></f>
			<meta><m n=":overload"/></meta>
		</keySet>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<putAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Map">
					<c path="java.util.Map.K"/>
					<c path="java.util.Map.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</putAll>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<put public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Map.K"/>
				<c path="java.util.Map.V"/>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<containsValue public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsValue>
		<containsKey public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsKey>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Map"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Map"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable" params="K:V" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Hashtable.class" extern="1">
		<extends path="java.util.Dictionary">
			<c path="java.util.Hashtable.K"/>
			<c path="java.util.Hashtable.V"/>
		</extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.util.Map">
			<c path="java.util.Hashtable.K"/>
			<c path="java.util.Hashtable.V"/>
		</implements>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<values public="1" set="method">
			<f a=""><c path="java.util.Collection"><c path="java.util.Hashtable.V"/></c></f>
			<meta><m n=":overload"/></meta>
		</values>
		<entrySet public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Hashtable.K"/>
	<c path="java.util.Hashtable.V"/>
</c></c></f>
			<meta><m n=":overload"/></meta>
		</entrySet>
		<keySet public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.util.Hashtable.K"/></c></f>
			<meta><m n=":overload"/></meta>
		</keySet>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<putAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Map">
					<c path="java.util.Hashtable.K"/>
					<c path="java.util.Hashtable.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</putAll>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<c path="java.util.Hashtable.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<put public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="java.util.Hashtable.K"/>
				<c path="java.util.Hashtable.V"/>
				<c path="java.util.Hashtable.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</put>
		<rehash set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</rehash>
		<get public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<c path="java.util.Hashtable.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<containsKey public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsKey>
		<containsValue public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsValue>
		<contains public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<elements public="1" set="method" override="1">
			<f a=""><c path="java.util.Enumeration"><c path="java.util.Hashtable.V"/></c></f>
			<meta><m n=":overload"/></meta>
		</elements>
		<keys public="1" set="method" override="1">
			<f a=""><c path="java.util.Enumeration"><c path="java.util.Hashtable.K"/></c></f>
			<meta><m n=":overload"/></meta>
		</keys>
		<isEmpty public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.Map">
					<c path="java.util.Hashtable.K"/>
					<c path="java.util.Hashtable.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_Holder" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Hashtable$Holder.class" module="java.util.Hashtable" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.Hashtable$Holder"</e></m>
	<m n=":javaCanonical">
		<e>"java.util"</e>
		<e>"Hashtable.Holder"</e>
	</m>
</meta></class>
	<class path="java.util.Hashtable_KeySet" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Hashtable$KeySet.class" module="java.util.Hashtable" extern="1">
		<extends path="java.util.AbstractSet"><d/></extends>
		<clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<contains public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<size public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<iterator public="1" set="method" override="1">
			<f a=""><c path="java.util.Iterator"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable$KeySet"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable.KeySet"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_EntrySet" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Hashtable$EntrySet.class" module="java.util.Hashtable" extern="1">
		<extends path="java.util.AbstractSet"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></extends>
		<add public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><add public="1" set="method">
	<f a="param1">
		<c path="java.util.Map_Entry">
			<d/>
			<d/>
		</c>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</add></overloads>
		</add>
		<clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<size public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<contains public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<iterator public="1" set="method" override="1">
			<f a=""><c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable$EntrySet"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable.EntrySet"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_ValueCollection" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Hashtable$ValueCollection.class" module="java.util.Hashtable" extern="1">
		<extends path="java.util.AbstractCollection"><d/></extends>
		<clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<contains public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<size public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<iterator public="1" set="method" override="1">
			<f a=""><c path="java.util.Iterator"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable$ValueCollection"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable.ValueCollection"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Map_Entry" params="K:V" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Map$Entry.class" module="java.util.Map" extern="1" interface="1">
		<setValue public="1" set="method">
			<f a="param1">
				<c path="java.util.Map_Entry.V"/>
				<c path="java.util.Map_Entry.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setValue>
		<getValue public="1" set="method">
			<f a=""><c path="java.util.Map_Entry.V"/></f>
			<meta><m n=":overload"/></meta>
		</getValue>
		<getKey public="1" set="method">
			<f a=""><c path="java.util.Map_Entry.K"/></f>
			<meta><m n=":overload"/></meta>
		</getKey>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Map$Entry"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Map.Entry"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_Entry" params="K:V" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Hashtable$Entry.class" module="java.util.Hashtable" extern="1">
		<implements path="java.util.Map_Entry">
			<c path="java.util.Hashtable_Entry.K"/>
			<c path="java.util.Hashtable_Entry.V"/>
		</implements>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<setValue public="1" set="method">
			<f a="param1">
				<c path="java.util.Hashtable_Entry.V"/>
				<c path="java.util.Hashtable_Entry.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setValue>
		<getValue public="1" set="method">
			<f a=""><c path="java.util.Hashtable_Entry.V"/></f>
			<meta><m n=":overload"/></meta>
		</getValue>
		<getKey public="1" set="method">
			<f a=""><c path="java.util.Hashtable_Entry.K"/></f>
			<meta><m n=":overload"/></meta>
		</getKey>
		<clone set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<c path="java.util.Hashtable_Entry.K"/>
				<c path="java.util.Hashtable_Entry.V"/>
				<c path="java.util.Hashtable_Entry">
					<c path="java.util.Hashtable_Entry.K"/>
					<c path="java.util.Hashtable_Entry.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable$Entry"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable.Entry"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Iterator" params="E" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Iterator.class" extern="1" interface="1">
		<remove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</remove>
		<next public="1" set="method">
			<f a=""><c path="java.util.Iterator.E"/></f>
			<meta><m n=":overload"/></meta>
		</next>
		<hasNext public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasNext>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Iterator"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Iterator"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_Enumerator" params="T" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Hashtable$Enumerator.class" module="java.util.Hashtable" extern="1">
		<implements path="java.util.Iterator"><c path="java.util.Hashtable_Enumerator.T"/></implements>
		<implements path="java.util.Enumeration"><c path="java.util.Hashtable_Enumerator.T"/></implements>
		<remove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</remove>
		<next public="1" set="method">
			<f a=""><c path="java.util.Hashtable_Enumerator.T"/></f>
			<meta><m n=":overload"/></meta>
		</next>
		<hasNext public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasNext>
		<nextElement public="1" set="method">
			<f a=""><c path="java.util.Hashtable_Enumerator.T"/></f>
			<meta><m n=":overload"/></meta>
		</nextElement>
		<hasMoreElements public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasMoreElements>
		<expectedModCount><x path="Int"/></expectedModCount>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable$Enumerator"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable.Enumerator"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_1" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Hashtable$1.class" module="java.util.Hashtable" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.Hashtable$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.util"</e>
		<e>"Hashtable.1"</e>
	</m>
</meta></class>
	<class path="java.util.InvalidPropertiesFormatException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/InvalidPropertiesFormatException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="java.lang.Throwable"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.InvalidPropertiesFormatException"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"InvalidPropertiesFormatException"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.List" params="E" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/List.class" extern="1" interface="1">
		<extends path="java.util.Collection"><c path="java.util.List.E"/></extends>
		<subList public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.util.List"><c path="java.util.List.E"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</subList>
		<listIterator public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.ListIterator"><c path="java.util.List.E"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><listIterator public="1" set="method">
	<f a=""><c path="java.util.ListIterator"><c path="java.util.List.E"/></c></f>
	<meta><m n=":overload"/></meta>
</listIterator></overloads>
		</listIterator>
		<lastIndexOf public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</indexOf>
		<remove public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.List.E"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><remove public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</remove></overloads>
		</remove>
		<add public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.util.List.E"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><add public="1" set="method">
	<f a="param1">
		<c path="java.util.List.E"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</add></overloads>
		</add>
		<set public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.util.List.E"/>
				<c path="java.util.List.E"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set>
		<get public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.List.E"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<retainAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</retainAll>
		<removeAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeAll>
		<addAll public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.util.Collection"><c path="java.util.List.E"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><addAll public="1" set="method">
	<f a="param1">
		<c path="java.util.Collection"><c path="java.util.List.E"/></c>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</addAll></overloads>
		</addAll>
		<containsAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsAll>
		<toArray public="1" params="T" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="toArray.T"/></c>
				<c path="java.NativeArray"><c path="toArray.T"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toArray public="1" set="method">
	<f a=""><c path="java.NativeArray"><d/></c></f>
	<meta><m n=":overload"/></meta>
</toArray></overloads>
		</toArray>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.util.List.E"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<contains public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.List"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"List"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ListIterator" params="E" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/ListIterator.class" extern="1" interface="1">
		<extends path="java.util.Iterator"><c path="java.util.ListIterator.E"/></extends>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.util.ListIterator.E"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<set public="1" set="method">
			<f a="param1">
				<c path="java.util.ListIterator.E"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set>
		<remove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</remove>
		<previousIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</previousIndex>
		<nextIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</nextIndex>
		<previous public="1" set="method">
			<f a=""><c path="java.util.ListIterator.E"/></f>
			<meta><m n=":overload"/></meta>
		</previous>
		<hasPrevious public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasPrevious>
		<next public="1" set="method">
			<f a=""><c path="java.util.ListIterator.E"/></f>
			<meta><m n=":overload"/></meta>
		</next>
		<hasNext public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasNext>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ListIterator"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ListIterator"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Locale" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Locale.class" extern="1">
		<implements path="java.lang.Cloneable"/>
		<implements path="java.io.Serializable"/>
		<forLanguageTag public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale"/>
			</f>
			<meta><m n=":overload"/></meta>
		</forLanguageTag>
		<getISOLanguages public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getISOLanguages>
		<getISOCountries public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getISOCountries>
		<getAvailableLocales public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAvailableLocales>
		<setDefault public="1" set="method" static="1">
			<f a="param1:param2">
				<e path="java.util.Locale_Category"/>
				<c path="java.util.Locale"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setDefault public="1" set="method">
	<f a="param1">
		<c path="java.util.Locale"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</setDefault></overloads>
		</setDefault>
		<getDefault public="1" set="method" static="1">
			<f a="param1">
				<e path="java.util.Locale_Category"/>
				<c path="java.util.Locale"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDefault public="1" set="method">
	<f a=""><c path="java.util.Locale"/></f>
	<meta><m n=":overload"/></meta>
</getDefault></overloads>
		</getDefault>
		<ENGLISH public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</ENGLISH>
		<FRENCH public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</FRENCH>
		<GERMAN public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</GERMAN>
		<ITALIAN public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</ITALIAN>
		<JAPANESE public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</JAPANESE>
		<KOREAN public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</KOREAN>
		<CHINESE public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</CHINESE>
		<SIMPLIFIED_CHINESE public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</SIMPLIFIED_CHINESE>
		<TRADITIONAL_CHINESE public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</TRADITIONAL_CHINESE>
		<FRANCE public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</FRANCE>
		<GERMANY public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</GERMANY>
		<ITALY public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</ITALY>
		<JAPAN public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</JAPAN>
		<KOREA public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</KOREA>
		<CHINA public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</CHINA>
		<PRC public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</PRC>
		<TAIWAN public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</TAIWAN>
		<UK public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</UK>
		<US public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</US>
		<CANADA public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</CANADA>
		<CANADA_FRENCH public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</CANADA_FRENCH>
		<ROOT public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</ROOT>
		<PRIVATE_USE_EXTENSION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</PRIVATE_USE_EXTENSION>
		<UNICODE_LOCALE_EXTENSION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</UNICODE_LOCALE_EXTENSION>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<getDisplayName public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDisplayName public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</getDisplayName></overloads>
		</getDisplayName>
		<getDisplayVariant public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDisplayVariant public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</getDisplayVariant></overloads>
		</getDisplayVariant>
		<getDisplayCountry public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDisplayCountry public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</getDisplayCountry></overloads>
		</getDisplayCountry>
		<getDisplayScript public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDisplayScript public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta><m n=":overload"/></meta>
</getDisplayScript></overloads>
		</getDisplayScript>
		<getDisplayLanguage public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDisplayLanguage public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</getDisplayLanguage></overloads>
		</getDisplayLanguage>
		<getISO3Country public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.util.MissingResourceException"</e></m>
			</meta>
		</getISO3Country>
		<getISO3Language public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.util.MissingResourceException"</e></m>
			</meta>
		</getISO3Language>
		<toLanguageTag public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toLanguageTag>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</toString>
		<getUnicodeLocaleKeys public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getUnicodeLocaleKeys>
		<getUnicodeLocaleType public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getUnicodeLocaleType>
		<getUnicodeLocaleAttributes public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getUnicodeLocaleAttributes>
		<getExtensionKeys public="1" set="method">
			<f a=""><c path="java.util.Set"><x path="java.lang.Character"/></c></f>
			<meta><m n=":overload"/></meta>
		</getExtensionKeys>
		<getExtension public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getExtension>
		<getVariant public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getVariant>
		<getCountry public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getCountry>
		<getScript public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getScript>
		<getLanguage public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getLanguage>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Locale"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Locale_Cache" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Locale$Cache.class" module="java.util.Locale" extern="1">
		<extends path="java.sun.util.locale.LocaleObjectCache">
			<c path="java.util.Locale_LocaleKey"/>
			<c path="java.util.Locale"/>
		</extends>
		<createObject set="method" override="1">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><createObject set="method">
	<f a="param1">
		<c path="java.util.Locale_LocaleKey"/>
		<c path="java.util.Locale"/>
	</f>
	<meta><m n=":overload"/></meta>
</createObject></overloads>
		</createObject>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Locale$Cache"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale.Cache"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Locale_LocaleKey" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Locale$LocaleKey.class" module="java.util.Locale" extern="1">
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Locale$LocaleKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale.LocaleKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Locale_LocaleNameGetter" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Locale$LocaleNameGetter.class" module="java.util.Locale" extern="1">
		<implements path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter">
			<c path="java.util.spi.LocaleNameProvider"/>
			<c path="String"/>
		</implements>
		<getObject public="1" set="method">
			<f a="param1:param2:param3:param4">
				<d/>
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getObject public="1" set="method">
	<f a="param1:param2:param3:param4">
		<c path="java.util.spi.LocaleNameProvider"/>
		<c path="java.util.Locale"/>
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</getObject></overloads>
		</getObject>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Locale$LocaleNameGetter"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale.LocaleNameGetter"</e>
			</m>
		</meta>
	</class>
	<enum path="java.util.Locale_Category" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Locale$Category.class" module="java.util.Locale">
		<FORMAT/>
		<DISPLAY/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale.Category"</e>
			</m>
			<m n=":native"><e>"java.util.Locale$Category"</e></m>
		</meta>
	</enum>
	<class path="java.util.Locale_Builder" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Locale$Builder.class" module="java.util.Locale" extern="1">
		<build public="1" set="method">
			<f a=""><c path="java.util.Locale"/></f>
			<meta><m n=":overload"/></meta>
		</build>
		<clearExtensions public="1" set="method">
			<f a=""><c path="java.util.Locale_Builder"/></f>
			<meta><m n=":overload"/></meta>
		</clearExtensions>
		<clear public="1" set="method">
			<f a=""><c path="java.util.Locale_Builder"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<removeUnicodeLocaleAttribute public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeUnicodeLocaleAttribute>
		<addUnicodeLocaleAttribute public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</addUnicodeLocaleAttribute>
		<setUnicodeLocaleKeyword public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setUnicodeLocaleKeyword>
		<setExtension public="1" set="method">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setExtension>
		<setVariant public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setVariant>
		<setRegion public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setRegion>
		<setScript public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setScript>
		<setLanguage public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLanguage>
		<setLanguageTag public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLanguageTag>
		<setLocale public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLocale>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Locale$Builder"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale.Builder"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Locale_1" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Locale$1.class" module="java.util.Locale" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.Locale$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.util"</e>
		<e>"Locale.1"</e>
	</m>
</meta></class>
	<class path="java.util.MissingResourceException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/MissingResourceException.class" extern="1">
		<extends path="java.lang.RuntimeException"/>
		<getKey public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getKey>
		<getClassName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getClassName>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.MissingResourceException"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"MissingResourceException"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Properties" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Properties.class" extern="1">
		<extends path="java.util.Hashtable">
			<d/>
			<d/>
		</extends>
		<list public="1" set="method">
			<f a="param1">
				<c path="java.io.PrintWriter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><list public="1" set="method">
	<f a="param1">
		<c path="java.io.PrintStream"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</list></overloads>
		</list>
		<stringPropertyNames public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</stringPropertyNames>
		<propertyNames public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</propertyNames>
		<getProperty public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getProperty public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</getProperty></overloads>
		</getProperty>
		<storeToXML public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.io.OutputStream"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><storeToXML public="1" set="method">
	<f a="param1:param2">
		<c path="java.io.OutputStream"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</storeToXML></overloads>
		</storeToXML>
		<loadFromXML public="1" set="method">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.util.InvalidPropertiesFormatException"</e></m>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</loadFromXML>
		<store public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.OutputStream"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><store public="1" set="method">
	<f a="param1:param2">
		<c path="java.io.Writer"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</store></overloads>
		</store>
		<save public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.OutputStream"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</save>
		<load public="1" set="method">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><load public="1" set="method">
	<f a="param1">
		<c path="java.io.Reader"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</load></overloads>
		</load>
		<setProperty public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</setProperty>
		<defaults><c path="java.util.Properties"/></defaults>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.Properties"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Properties"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Properties"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Properties_LineReader" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Properties$LineReader.class" module="java.util.Properties" extern="1">
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Properties"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2">
		<c path="java.util.Properties"/>
		<c path="java.io.InputStream"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Properties$LineReader"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Properties.LineReader"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_RBClassLoader" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/ResourceBundle$RBClassLoader.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.lang.ClassLoader"/>
		<getResourceAsStream public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResourceAsStream>
		<getResource public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResource>
		<loadClass public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
			</meta>
		</loadClass>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$RBClassLoader"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.RBClassLoader"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_CacheKey" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/ResourceBundle$CacheKey.class" module="java.util.ResourceBundle" extern="1">
		<implements path="java.lang.Cloneable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$CacheKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.CacheKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_CacheKeyReference" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/ResourceBundle$CacheKeyReference.class" module="java.util.ResourceBundle" extern="1" interface="1">
		<getCacheKey public="1" set="method">
			<f a=""><c path="java.util.ResourceBundle_CacheKey"/></f>
			<meta><m n=":overload"/></meta>
		</getCacheKey>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$CacheKeyReference"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.CacheKeyReference"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_LoaderReference" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/ResourceBundle$LoaderReference.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.lang.ref.WeakReference"><c path="java.lang.ClassLoader"/></extends>
		<implements path="java.util.ResourceBundle_CacheKeyReference"/>
		<getCacheKey public="1" set="method">
			<f a=""><c path="java.util.ResourceBundle_CacheKey"/></f>
			<meta><m n=":overload"/></meta>
		</getCacheKey>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$LoaderReference"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.LoaderReference"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_BundleReference" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/ResourceBundle$BundleReference.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.lang.ref.SoftReference"><c path="java.util.ResourceBundle"/></extends>
		<implements path="java.util.ResourceBundle_CacheKeyReference"/>
		<getCacheKey public="1" set="method">
			<f a=""><c path="java.util.ResourceBundle_CacheKey"/></f>
			<meta><m n=":overload"/></meta>
		</getCacheKey>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$BundleReference"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.BundleReference"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_Control" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/ResourceBundle$Control.class" module="java.util.ResourceBundle" extern="1">
		<getNoFallbackControl public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.List"><c path="String"/></c>
				<c path="java.util.ResourceBundle_Control"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getNoFallbackControl>
		<getControl public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.List"><c path="String"/></c>
				<c path="java.util.ResourceBundle_Control"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getControl>
		<FORMAT_DEFAULT public="1" static="1">
			<c path="java.util.List"><c path="String"/></c>
			<meta><m n=":final"/></meta>
		</FORMAT_DEFAULT>
		<FORMAT_CLASS public="1" static="1">
			<c path="java.util.List"><c path="String"/></c>
			<meta><m n=":final"/></meta>
		</FORMAT_CLASS>
		<FORMAT_PROPERTIES public="1" static="1">
			<c path="java.util.List"><c path="String"/></c>
			<meta><m n=":final"/></meta>
		</FORMAT_PROPERTIES>
		<TTL_DONT_CACHE public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</TTL_DONT_CACHE>
		<TTL_NO_EXPIRATION_CONTROL public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</TTL_NO_EXPIRATION_CONTROL>
		<toResourceName public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</toResourceName>
		<toBundleName public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toBundleName>
		<needsReload public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.lang.ClassLoader"/>
				<c path="java.util.ResourceBundle"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</needsReload>
		<getTimeToLive public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getTimeToLive>
		<newBundle public="1" set="method">
			<f a="param1:param2:param3:param4:param5">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.lang.ClassLoader"/>
				<x path="Bool"/>
				<c path="java.util.ResourceBundle"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":throws"><e>"java.lang.InstantiationException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
			</meta>
		</newBundle>
		<getFallbackLocale public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="java.util.Locale"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getFallbackLocale>
		<getCandidateLocales public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="java.util.List"><c path="java.util.Locale"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</getCandidateLocales>
		<getFormats public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.List"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</getFormats>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$Control"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.Control"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_Control_CandidateListCache" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/ResourceBundle$Control$CandidateListCache.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.sun.util.locale.LocaleObjectCache">
			<c path="java.sun.util.locale.BaseLocale"/>
			<c path="java.util.List"><c path="java.util.Locale"/></c>
		</extends>
		<createObject set="method" override="1">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><createObject set="method">
	<f a="param1">
		<c path="java.sun.util.locale.BaseLocale"/>
		<c path="java.util.List"><c path="java.util.Locale"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</createObject></overloads>
		</createObject>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$Control$CandidateListCache"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.Control.CandidateListCache"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_SingleFormatControl" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/ResourceBundle$SingleFormatControl.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.util.ResourceBundle_Control"/>
		<getFormats public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.List"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</getFormats>
		<new set="method">
			<f a="param1">
				<c path="java.util.List"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$SingleFormatControl"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.SingleFormatControl"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_NoFallbackControl" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/ResourceBundle$NoFallbackControl.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.util.ResourceBundle_SingleFormatControl"/>
		<getFallbackLocale public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="java.util.Locale"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getFallbackLocale>
		<new set="method">
			<f a="param1">
				<c path="java.util.List"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$NoFallbackControl"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.NoFallbackControl"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Timer" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/Timer.class" extern="1">
		<purge public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</purge>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</cancel>
		<scheduleAtFixedRate public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.TimerTask"/>
				<c path="java.util.Date"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><scheduleAtFixedRate public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.util.TimerTask"/>
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</scheduleAtFixedRate></overloads>
		</scheduleAtFixedRate>
		<schedule public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.TimerTask"/>
				<c path="java.util.Date"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<schedule public="1" set="method">
					<f a="param1:param2">
						<c path="java.util.TimerTask"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</schedule>
				<schedule public="1" set="method">
					<f a="param1:param2">
						<c path="java.util.TimerTask"/>
						<c path="java.util.Date"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</schedule>
				<schedule public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.util.TimerTask"/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</schedule>
			</overloads>
		</schedule>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Timer"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Timer"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.Callable" params="V" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/concurrent/Callable.class" extern="1" interface="1">
		<call public="1" set="method">
			<f a=""><c path="java.util.concurrent.Callable.V"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</call>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.Callable"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"Callable"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.ExecutionException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/concurrent/ExecutionException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.ExecutionException"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"ExecutionException"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.Executor" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/concurrent/Executor.class" extern="1" interface="1">
		<execute public="1" set="method">
			<f a="param1">
				<c path="java.lang.Runnable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</execute>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.Executor"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"Executor"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.ExecutorService" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/concurrent/ExecutorService.class" extern="1" interface="1">
		<extends path="java.util.concurrent.Executor"/>
		<invokeAny public="1" params="T" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAny.T"/></c></c>
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<c path="invokeAny.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.util.concurrent.TimeoutException"</e></m>
				<m n=":throws"><e>"java.util.concurrent.ExecutionException"</e></m>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><invokeAny public="1" params="T" set="method">
	<f a="param1">
		<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAny.T"/></c></c>
		<c path="invokeAny.T"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.util.concurrent.ExecutionException"</e></m>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
	</meta>
</invokeAny></overloads>
		</invokeAny>
		<invokeAll public="1" params="T" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAll.T"/></c></c>
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<c path="java.util.List"><c path="java.util.concurrent.Future"><c path="invokeAll.T"/></c></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><invokeAll public="1" params="T" set="method">
	<f a="param1">
		<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAll.T"/></c></c>
		<c path="java.util.List"><c path="java.util.concurrent.Future"><c path="invokeAll.T"/></c></c>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
	</meta>
</invokeAll></overloads>
		</invokeAll>
		<submit public="1" set="method">
			<f a="param1">
				<c path="java.lang.Runnable"/>
				<c path="java.util.concurrent.Future"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<submit public="1" params="T" set="method">
					<f a="param1">
						<c path="java.util.concurrent.Callable"><c path="submit.T"/></c>
						<c path="java.util.concurrent.Future"><c path="submit.T"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</submit>
				<submit public="1" params="T" set="method">
					<f a="param1:param2">
						<c path="java.lang.Runnable"/>
						<c path="submit.T"/>
						<c path="java.util.concurrent.Future"><c path="submit.T"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</submit>
			</overloads>
		</submit>
		<awaitTermination public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
		</awaitTermination>
		<isTerminated public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isTerminated>
		<isShutdown public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isShutdown>
		<shutdownNow public="1" set="method">
			<f a=""><c path="java.util.List"><c path="java.lang.Runnable"/></c></f>
			<meta><m n=":overload"/></meta>
		</shutdownNow>
		<shutdown public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</shutdown>
		<execute public="1" set="method">
			<f a="param1">
				<c path="java.lang.Runnable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</execute>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.ExecutorService"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"ExecutorService"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.Future" params="V" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/concurrent/Future.class" extern="1" interface="1">
		<get public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<c path="java.util.concurrent.Future.V"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.util.concurrent.TimeoutException"</e></m>
				<m n=":throws"><e>"java.util.concurrent.ExecutionException"</e></m>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><get public="1" set="method">
	<f a=""><c path="java.util.concurrent.Future.V"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.util.concurrent.ExecutionException"</e></m>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
	</meta>
</get></overloads>
		</get>
		<isDone public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDone>
		<isCancelled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isCancelled>
		<cancel public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</cancel>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.Future"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"Future"</e>
			</m>
		</meta>
	</class>
	<enum path="java.util.concurrent.TimeUnit" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/concurrent/TimeUnit.class">
		<DAYS/>
		<HOURS/>
		<MINUTES/>
		<SECONDS/>
		<MILLISECONDS/>
		<MICROSECONDS/>
		<NANOSECONDS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"TimeUnit"</e>
			</m>
			<m n=":native"><e>"java.util.concurrent.TimeUnit"</e></m>
		</meta>
	</enum>
	<class path="java.util.concurrent.TimeoutException" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/concurrent/TimeoutException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.TimeoutException"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"TimeoutException"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.MatchResult" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/MatchResult.class" extern="1" interface="1">
		<groupCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</groupCount>
		<group public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><group public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta><m n=":overload"/></meta>
</group></overloads>
		</group>
		<end public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><end public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</end></overloads>
		</end>
		<start public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><start public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</start></overloads>
		</start>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.MatchResult"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"MatchResult"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Matcher" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Matcher.class" extern="1">
		<implements path="java.util.regex.MatchResult"/>
		<quoteReplacement public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</quoteReplacement>
		<requireEnd public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</requireEnd>
		<hitEnd public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hitEnd>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<useAnchoringBounds public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</useAnchoringBounds>
		<hasAnchoringBounds public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasAnchoringBounds>
		<useTransparentBounds public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</useTransparentBounds>
		<hasTransparentBounds public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasTransparentBounds>
		<regionEnd public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</regionEnd>
		<regionStart public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</regionStart>
		<region public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</region>
		<replaceFirst public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</replaceFirst>
		<replaceAll public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</replaceAll>
		<appendTail public="1" set="method">
			<f a="param1">
				<c path="java.lang.StringBuffer"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendTail>
		<appendReplacement public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.StringBuffer"/>
				<c path="String"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendReplacement>
		<lookingAt public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</lookingAt>
		<find public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><find public="1" set="method">
	<f a=""><x path="Bool"/></f>
	<meta><m n=":overload"/></meta>
</find></overloads>
		</find>
		<matches public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</matches>
		<groupCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</groupCount>
		<group public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<group public="1" set="method">
					<f a=""><c path="String"/></f>
					<meta><m n=":overload"/></meta>
				</group>
				<group public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</group>
			</overloads>
		</group>
		<end public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><end public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</end></overloads>
		</end>
		<start public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><start public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</start></overloads>
		</start>
		<reset public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><reset public="1" set="method">
	<f a=""><c path="java.util.regex.Matcher"/></f>
	<meta><m n=":overload"/></meta>
</reset></overloads>
		</reset>
		<usePattern public="1" set="method">
			<f a="param1">
				<c path="java.util.regex.Pattern"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</usePattern>
		<toMatchResult public="1" set="method">
			<f a=""><c path="java.util.regex.MatchResult"/></f>
			<meta><m n=":overload"/></meta>
		</toMatchResult>
		<pattern public="1" set="method">
			<f a=""><c path="java.util.regex.Pattern"/></f>
			<meta><m n=":overload"/></meta>
		</pattern>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Matcher"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Matcher"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern.class" extern="1">
		<implements path="java.io.Serializable"/>
		<quote public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</quote>
		<matches public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.lang.CharSequence"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</matches>
		<compile public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<c path="java.util.regex.Pattern"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compile public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="java.util.regex.Pattern"/>
	</f>
	<meta><m n=":overload"/></meta>
</compile></overloads>
		</compile>
		<_compile public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<c path="java.util.regex.Pattern"/>
			</f>
			<meta>
				<m n=":native"><e>"compile"</e></m>
				<m n=":deprecated"><e>"This static field `_compile` is deprecated and will be removed in later versions. Please use `compile` instead"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><compile public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="java.util.regex.Pattern"/>
	</f>
	<meta>
		<m n=":native"><e>"compile"</e></m>
		<m n=":deprecated"><e>"This static field `_compile` is deprecated and will be removed in later versions. Please use `compile` instead"</e></m>
		<m n=":overload"/>
	</meta>
</compile></overloads>
		</_compile>
		<UNIX_LINES public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</UNIX_LINES>
		<CASE_INSENSITIVE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CASE_INSENSITIVE>
		<COMMENTS public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</COMMENTS>
		<MULTILINE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MULTILINE>
		<LITERAL public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</LITERAL>
		<DOTALL public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DOTALL>
		<UNICODE_CASE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</UNICODE_CASE>
		<CANON_EQ public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CANON_EQ>
		<UNICODE_CHARACTER_CLASS public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</UNICODE_CHARACTER_CLASS>
		<split public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><split public="1" set="method">
	<f a="param1:param2">
		<c path="java.lang.CharSequence"/>
		<x path="Int"/>
		<c path="java.NativeArray"><c path="String"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</split></overloads>
		</split>
		<flags public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</flags>
		<matcher public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</matcher>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<pattern public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</pattern>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_TreeInfo" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$TreeInfo.class" module="java.util.regex.Pattern" extern="1"><meta>
	<m n=":final"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.regex.Pattern$TreeInfo"</e></m>
	<m n=":javaCanonical">
		<e>"java.util.regex"</e>
		<e>"Pattern.TreeInfo"</e>
	</m>
</meta></class>
	<class path="java.util.regex.Pattern_Node" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Node.class" module="java.util.regex.Pattern" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.regex.Pattern$Node"</e></m>
	<m n=":javaCanonical">
		<e>"java.util.regex"</e>
		<e>"Pattern.Node"</e>
	</m>
</meta></class>
	<class path="java.util.regex.Pattern_CharProperty" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$CharProperty.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$CharProperty"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.CharProperty"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BmpCharProperty" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$BmpCharProperty.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BmpCharProperty"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BmpCharProperty"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BitClass" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$BitClass.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BitClass"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BitClass"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_LastNode" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$LastNode.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$LastNode"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.LastNode"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Start" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Start.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Start"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Start"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_StartS" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$StartS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Start"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$StartS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.StartS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Begin" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Begin.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Begin"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Begin"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_End" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$End.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$End"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.End"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Caret" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Caret.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Caret"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Caret"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_UnixCaret" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$UnixCaret.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$UnixCaret"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.UnixCaret"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_LastMatch" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$LastMatch.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$LastMatch"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.LastMatch"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Dollar" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Dollar.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Dollar"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Dollar"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_UnixDollar" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$UnixDollar.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$UnixDollar"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.UnixDollar"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SingleS" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$SingleS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SingleS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SingleS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Single" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Single.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Single"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Single"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SingleI" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$SingleI.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SingleI"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SingleI"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SingleU" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$SingleU.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SingleU"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SingleU"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Block" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Block.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Block"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Block"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Script" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Script.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Script"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Script"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Category" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Category.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Category"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Category"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Utype" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Utype.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Utype"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Utype"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Ctype" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Ctype.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Ctype"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Ctype"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceNode" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$SliceNode.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceNode"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceNode"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Slice" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Slice.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Slice"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Slice"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceI" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$SliceI.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceI"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceI"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceU" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$SliceU.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceU"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceU"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceS" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$SliceS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceIS" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$SliceIS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceIS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceIS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceUS" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$SliceUS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceIS"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceUS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceUS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_All" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$All.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$All"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.All"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Dot" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Dot.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Dot"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Dot"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_UnixDot" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$UnixDot.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$UnixDot"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.UnixDot"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Ques" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Ques.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Ques"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Ques"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Curly" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Curly.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Curly"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Curly"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupCurly" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$GroupCurly.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$GroupCurly"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.GroupCurly"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BranchConn" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$BranchConn.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BranchConn"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BranchConn"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Branch" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Branch.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Branch"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Branch"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupHead" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$GroupHead.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$GroupHead"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.GroupHead"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupRef" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$GroupRef.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$GroupRef"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.GroupRef"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupTail" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$GroupTail.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$GroupTail"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.GroupTail"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Prolog" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Prolog.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Prolog"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Prolog"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Loop" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Loop.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Loop"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Loop"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_LazyLoop" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$LazyLoop.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Loop"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$LazyLoop"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.LazyLoop"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BackRef" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$BackRef.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BackRef"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BackRef"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CIBackRef" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$CIBackRef.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$CIBackRef"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.CIBackRef"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_First" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$First.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$First"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.First"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Conditional" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Conditional.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Conditional"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Conditional"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Pos" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Pos.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Pos"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Pos"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Neg" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Neg.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Neg"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Neg"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Behind" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Behind.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Behind"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Behind"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BehindS" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$BehindS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Behind"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BehindS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BehindS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_NotBehind" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$NotBehind.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$NotBehind"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.NotBehind"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_NotBehindS" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$NotBehindS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_NotBehind"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$NotBehindS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.NotBehindS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Bound" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$Bound.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Bound"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Bound"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BnM" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$BnM.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BnM"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BnM"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BnMS" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$BnMS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BnM"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BnMS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BnMS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames.class" module="java.util.regex.Pattern" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames"</e></m>
	<m n=":javaCanonical">
		<e>"java.util.regex"</e>
		<e>"Pattern.CharPropertyNames"</e>
	</m>
</meta></class>
	<class path="java.util.regex.Pattern_CharPropertyNames_CharPropertyFactory" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$CharPropertyFactory.class" module="java.util.regex.Pattern" extern="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory"</e></m>
	<m n=":javaCanonical">
		<e>"java.util.regex"</e>
		<e>"Pattern.CharPropertyNames.CharPropertyFactory"</e>
	</m>
</meta></class>
	<class path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$CloneableProperty.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<implements path="java.lang.Cloneable"/>
		<clone public="1" set="method">
			<f a=""><c path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$CloneableProperty"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.CharPropertyNames.CloneableProperty"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.spi.LocaleNameProvider" params="" file="/usr/local/lib/haxelib/lib/hxjava/3,2,0/lib/hxjava-std.jar@java/util/spi/LocaleNameProvider.class" extern="1">
		<extends path="java.util.spi.LocaleServiceProvider"/>
		<getDisplayVariant public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getDisplayVariant>
		<getDisplayCountry public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getDisplayCountry>
		<getDisplayScript public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getDisplayScript>
		<getDisplayLanguage public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getDisplayLanguage>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.spi.LocaleNameProvider"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.spi"</e>
				<e>"LocaleNameProvider"</e>
			</m>
		</meta>
	</class>
	<class path="sys.io.Process" params="" file="/usr/local/lib/haxe/std/java/_std/sys/io/Process.hx">
		<createProcessBuilder set="method" line="39" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<c path="java.lang.ProcessBuilder"/>
			</f>
			<meta><m n=":allow"><e>Sys</e></m></meta>
		</createProcessBuilder>
		<stdout public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard output. The output stream where a process writes its output data.</haxe_doc>
		</stdout>
		<stderr public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard error. The output stream to output error messages or diagnostics.</haxe_doc>
		</stderr>
		<stdin public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>Standard input. The stream data going into a process.</haxe_doc>
		</stdin>
		<proc><c path="java.lang.Process"/></proc>
		<getPid public="1" set="method" line="88">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the process ID.</haxe_doc>
		</getPid>
		<exitCode public="1" set="method" line="95">
			<f a="?block">
				<x path="Bool"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Query the exit code of the process.
		If `block` is true or not specified, it will block until the process terminates.
		If `block` is false, it will return either the process exit code if it's already terminated or null if it's still running.
		If the process has already exited, return the exit code immediately.</haxe_doc>
		</exitCode>
		<close public="1" set="method" line="115">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the process handle and release the associated resources.
		All `Process` fields should not be used after `close()` is called.</haxe_doc>
		</close>
		<kill public="1" set="method" line="120">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Kill the process.</haxe_doc>
		</kill>
		<new public="1" set="method" line="80">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a `Process` object, which run the given command immediately.

		Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.

		 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		`close()` should be called when the `Process` is no longer used.</haxe_doc>
		</new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io._Process.ProcessInput" params="" file="/usr/local/lib/haxe/std/java/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="java.io.NativeInput"/>
		<chained><c path="haxe.io.BytesInput"/></chained>
		<bufferContents public="1" set="method" line="132"><f a=""><x path="Void"/></f></bufferContents>
		<readByte public="1" set="method" line="139" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="156" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="180" override="1"><f a=""><x path="Void"/></f></close>
	</class>
	<class path="thx.Arrays" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Arrays.hx">
		<append public="1" params="T" set="method" line="30" static="1">
			<f a="array:element">
				<c path="Array"><c path="append.T"/></c>
				<c path="append.T"/>
				<c path="Array"><c path="append.T"/></c>
			</f>
			<haxe_doc>Arrays.add pushes an element at the end of the `array` and returns it. Practical
for chaining push operations.</haxe_doc>
		</append>
		<appendIf public="1" params="T" set="method" line="39" static="1">
			<f a="array:cond:element">
				<c path="Array"><c path="appendIf.T"/></c>
				<x path="Bool"/>
				<c path="appendIf.T"/>
				<c path="Array"><c path="appendIf.T"/></c>
			</f>
			<haxe_doc>Arrays.addIf conditionaly pushes an element at the end of the `array` and returns it.
Practical for chaining push operations.</haxe_doc>
		</appendIf>
		<applyIndexes public="1" params="T" set="method" line="53" static="1">
			<f a="array:indexes:?incrementDuplicates" v="::false">
				<x path="thx.ReadonlyArray"><c path="applyIndexes.T"/></x>
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
				<c path="Array"><c path="applyIndexes.T"/></c>
			</f>
			<meta><m n=":value"><e>{ incrementDuplicates : false }</e></m></meta>
			<haxe_doc>Arrays.applyIndexes takes an `array` and returns a copy of it with its elements rearranged according to `indexes`.

If the `indexes` array does not contain continuous values, you may want to set `incrementDuplicates` to `true`.

var result = Arrays.applyIndexes(["B", "C", "A"], [1, 2, 0]);
trace(result); // output ["A", "B", "C"]</haxe_doc>
		</applyIndexes>
		<monoid public="1" params="A" set="method" line="77" static="1">
			<f a=""><x path="thx.Monoid"><c path="Array"><c path="monoid.A"/></c></x></f>
			<haxe_doc>* The concatenation monoid for arrays.</haxe_doc>
		</monoid>
		<after public="1" params="T" get="inline" set="null" line="86" static="1">
			<f a="array:element">
				<x path="thx.ReadonlyArray"><c path="after.T"/></x>
				<c path="after.T"/>
				<c path="Array"><c path="after.T"/></c>
			</f>
			<haxe_doc>Finds the first occurrance of `element` and returns all the elements after it.</haxe_doc>
		</after>
		<atIndex public="1" params="T" set="method" line="93" static="1">
			<f a="array:i">
				<x path="thx.ReadonlyArray"><c path="atIndex.T"/></x>
				<x path="Int"/>
				<e path="haxe.ds.Option"><c path="atIndex.T"/></e>
			</f>
			<meta><m n=":deprecated"><e>"atIndex is deprecated, use getOption instead"</e></m></meta>
			<haxe_doc>Safe indexed access to array elements. Deprecated in favor of `getOption`.</haxe_doc>
		</atIndex>
		<getOption public="1" params="T" set="method" line="100" static="1">
			<f a="array:i">
				<x path="thx.ReadonlyArray"><c path="getOption.T"/></x>
				<x path="Int"/>
				<e path="haxe.ds.Option"><c path="getOption.T"/></e>
			</f>
			<haxe_doc>Safe indexed access to array elements.
Null values within `array` will also return `None` instead of `Some(null)`.</haxe_doc>
		</getOption>
		<each public="1" params="T" set="method" line="106" static="1">
			<f a="arr:effect">
				<x path="thx.ReadonlyArray"><c path="each.T"/></x>
				<f a="">
					<c path="each.T"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies a side-effect function to all elements in the array.</haxe_doc>
		</each>
		<eachi public="1" params="T" set="method" line="113" static="1">
			<f a="arr:effect">
				<x path="thx.ReadonlyArray"><c path="eachi.T"/></x>
				<f a=":">
					<c path="eachi.T"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies a side-effect function to all elements in the array.</haxe_doc>
		</eachi>
		<all public="1" params="T" set="method" line="120" static="1">
			<f a="arr:predicate">
				<x path="thx.ReadonlyArray"><c path="all.T"/></x>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for all elements in the array.</haxe_doc>
		</all>
		<any public="1" params="T" set="method" line="130" static="1">
			<f a="arr:predicate">
				<x path="thx.ReadonlyArray"><c path="any.T"/></x>
				<f a="">
					<c path="any.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for at least one element in the array.</haxe_doc>
		</any>
		<at public="1" params="T" set="method" line="140" static="1">
			<f a="arr:indexes">
				<x path="thx.ReadonlyArray"><c path="at.T"/></x>
				<x path="thx.ReadonlyArray"><x path="Int"/></x>
				<c path="Array"><c path="at.T"/></c>
			</f>
			<haxe_doc>Creates an array of elements from the specified indexes.</haxe_doc>
		</at>
		<before public="1" params="T" get="inline" set="null" line="146" static="1">
			<f a="array:element">
				<x path="thx.ReadonlyArray"><c path="before.T"/></x>
				<c path="before.T"/>
				<c path="Array"><c path="before.T"/></c>
			</f>
			<haxe_doc>Finds the first occurrance of `element` and returns all the elements before it.</haxe_doc>
		</before>
		<commonsFromStart public="1" params="T" set="method" line="153" static="1">
			<f a="self:other:?equality">
				<x path="thx.ReadonlyArray"><c path="commonsFromStart.T"/></x>
				<x path="thx.ReadonlyArray"><c path="commonsFromStart.T"/></x>
				<f a=":">
					<c path="commonsFromStart.T"/>
					<c path="commonsFromStart.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="commonsFromStart.T"/></c>
			</f>
			<haxe_doc>Traverse both arrays from the beginning and collect the elements that are the
same. It stops as soon as the arrays differ.</haxe_doc>
		</commonsFromStart>
		<compact public="1" params="T" set="method" line="167" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><t path="Null"><c path="compact.T"/></t></x>
				<c path="Array"><c path="compact.T"/></c>
			</f>
			<meta><m n=":deprecated"><e>"Arrays.compact is deprecated, use Arrays.filterNull instead."</e></m></meta>
			<haxe_doc>Filters out all null elements in the array</haxe_doc>
		</compact>
		<compare public="1" params="T" set="method" line="187" static="1">
			<f a="a:b">
				<x path="thx.ReadonlyArray"><c path="compare.T"/></x>
				<x path="thx.ReadonlyArray"><c path="compare.T"/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares two arrays returning a negative integer, zero or a positive integer.

The first comparison is made on the array length.

If they match each pair of elements is compared using `thx.Dynamics.compare`.</haxe_doc>
		</compare>
		<count public="1" params="T" set="method" line="202" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="count.T"/></x>
				<x path="Map">
					<c path="count.T"/>
					<x path="Int"/>
				</x>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns a Map containing the number of occurrances for each value in the array.</haxe_doc>
		</count>
		<contains public="1" params="T" set="method" line="215" static="1">
			<f a="array:element:?eq">
				<x path="thx.ReadonlyArray"><c path="contains.T"/></x>
				<c path="contains.T"/>
				<f a=":">
					<c path="contains.T"/>
					<c path="contains.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `element` is found in the array.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</contains>
		<containsAll public="1" params="T" set="method" line="231" static="1">
			<f a="array:elements:?eq">
				<c path="Array"><c path="containsAll.T"/></c>
				<t path="Iterable"><c path="containsAll.T"/></t>
				<f a=":">
					<c path="containsAll.T"/>
					<c path="containsAll.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if all elements in `elements` are found in the array.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</containsAll>
		<containsAny public="1" params="T" set="method" line="243" static="1">
			<f a="array:elements:?eq">
				<x path="thx.ReadonlyArray"><c path="containsAny.T"/></x>
				<t path="Iterable"><c path="containsAny.T"/></t>
				<f a=":">
					<c path="containsAny.T"/>
					<c path="containsAny.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if any element in `elements` is found in the array.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</containsAny>
		<create public="1" params="T" set="method" line="253" static="1">
			<f a="length:fillWith">
				<x path="Int"/>
				<c path="create.T"/>
				<c path="Array"><c path="create.T"/></c>
			</f>
			<haxe_doc>Creates a new `Array` with `length` elements all set to `fillWith`.</haxe_doc>
		</create>
		<fromItem public="1" params="T" set="method" line="263" static="1">
			<f a="t">
				<c path="fromItem.T"/>
				<c path="Array"><c path="fromItem.T"/></c>
			</f>
			<haxe_doc><![CDATA[Creates an `Array<T>` containing the given item]]></haxe_doc>
		</fromItem>
		<cross public="1" params="T" set="method" line="274" static="1">
			<f a="a:b">
				<x path="thx.ReadonlyArray"><c path="cross.T"/></x>
				<x path="thx.ReadonlyArray"><c path="cross.T"/></x>
				<c path="Array"><c path="Array"><c path="cross.T"/></c></c>
			</f>
			<haxe_doc>It returns the cross product between two arrays.

```haxe
var r = [1,2,3].cross([4,5,6]);
trace(r); // [[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]
```</haxe_doc>
		</cross>
		<crossMulti public="1" params="T" set="method" line="290" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="thx.ReadonlyArray"><c path="crossMulti.T"/></x></x>
				<c path="Array"><c path="Array"><c path="crossMulti.T"/></c></c>
			</f>
			<haxe_doc>It produces the cross product of each array element.

```haxe
var r = [[1,2],[3,4],[5,6]].crossMulti();
trace(r); // [[1,3,5],[2,3,5],[1,4,5],[2,4,5],[1,3,6],[2,3,6],[1,4,6],[2,4,6]]
```</haxe_doc>
		</crossMulti>
		<distinct public="1" params="T" set="method" line="314" static="1">
			<f a="array:?predicate">
				<x path="thx.ReadonlyArray"><c path="distinct.T"/></x>
				<f a=":">
					<c path="distinct.T"/>
					<c path="distinct.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="distinct.T"/></c>
			</f>
			<haxe_doc>Returns a new array containing only unique values from the input array.
Input array does not need to be sorted.
A predicate comparison function can be provided for comparing values.  Default
comparison is ==.</haxe_doc>
		</distinct>
		<eachPair public="1" params="TIn:TOut" set="method" line="338" static="1">
			<f a="array:callback">
				<x path="thx.ReadonlyArray"><c path="eachPair.TIn"/></x>
				<f a=":">
					<c path="eachPair.TIn"/>
					<c path="eachPair.TIn"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>It allows to iterate an array pairing each element with every other element in the array.

The iteration ends as soon as the `callback` returns `false`.</haxe_doc>
		</eachPair>
		<equals public="1" params="T" set="method" line="349" static="1">
			<f a="a:b:?equality">
				<x path="thx.ReadonlyArray"><c path="equals.T"/></x>
				<x path="thx.ReadonlyArray"><c path="equals.T"/></x>
				<f a=":">
					<c path="equals.T"/>
					<c path="equals.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>It compares the lengths and elements of two given arrays and returns `true` if they match.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</equals>
		<extract public="1" params="T" set="method" line="364" static="1">
			<f a="a:predicate">
				<c path="Array"><c path="extract.T"/></c>
				<f a="">
					<c path="extract.T"/>
					<x path="Bool"/>
				</f>
				<c path="extract.T"/>
			</f>
			<haxe_doc>It finds an element in the array using `predicate` and returns it. The element is also
removed from the original array.

If no element satisfies `predicate` the array is left unmodified and `null` is returned.</haxe_doc>
		</extract>
		<filterNull public="1" params="T" set="method" line="374" static="1">
			<f a="a">
				<x path="thx.ReadonlyArray"><t path="Null"><c path="filterNull.T"/></t></x>
				<c path="Array"><c path="filterNull.T"/></c>
			</f>
			<haxe_doc>Filters out all `null` values from an array.</haxe_doc>
		</filterNull>
		<filterOption public="1" params="T" set="method" line="384" static="1">
			<f a="a">
				<x path="thx.ReadonlyArray"><e path="haxe.ds.Option"><c path="filterOption.T"/></e></x>
				<c path="Array"><c path="filterOption.T"/></c>
			</f>
			<haxe_doc>Filters out all `None` values from an array and extracts `Some(value)` to `value`.</haxe_doc>
		</filterOption>
		<flattenOptions public="1" params="T" set="method" line="398" static="1">
			<f a="a">
				<x path="thx.ReadonlyArray"><e path="haxe.ds.Option"><c path="flattenOptions.T"/></e></x>
				<e path="haxe.ds.Option"><c path="Array"><c path="flattenOptions.T"/></c></e>
			</f>
			<haxe_doc><![CDATA[Converts an `Array<Option<T>>` to `Option<Array<T>>` only if all elements in the input
array contain a `Some` value. The input and the output array (if any) will have
the same length.]]></haxe_doc>
		</flattenOptions>
		<find public="1" params="T" set="method" line="411" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="find.T"/></x>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>It returns the first element of the array that matches the predicate function.
If none is found it returns null.</haxe_doc>
		</find>
		<findi public="1" params="T" set="method" line="421" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="findi.T"/></x>
				<f a=":">
					<c path="findi.T"/>
					<x path="Int"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="findi.T"/></t>
			</f>
			<haxe_doc>Like `find`, but each item's index is also passed to the predicate.</haxe_doc>
		</findi>
		<findiOption public="1" params="T" set="method" line="431" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="findiOption.T"/></x>
				<f a=":">
					<c path="findiOption.T"/>
					<x path="Int"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="findiOption.T"/></e>
			</f>
			<haxe_doc>Like `findOption`, but each item's index is also passed to the predicate.</haxe_doc>
		</findiOption>
		<findOption public="1" params="T" set="method" line="443" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="findOption.T"/></x>
				<f a="">
					<c path="findOption.T"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="findOption.T"/></e>
			</f>
			<haxe_doc>It returns the first element of the array that matches the predicate function.
If none is found it returns null.</haxe_doc>
		</findOption>
		<findMap public="1" params="TIn:TOut" set="method" line="454" static="1">
			<f a="values:f">
				<c path="Array"><c path="findMap.TIn"/></c>
				<f a="">
					<c path="findMap.TIn"/>
					<e path="haxe.ds.Option"><c path="findMap.TOut"/></e>
				</f>
				<e path="haxe.ds.Option"><c path="findMap.TOut"/></e>
			</f>
			<haxe_doc>Finds the first item in an array where the given function `f` returns a `Option.Some` value.
If no items map to `Some`, `None` is returned.</haxe_doc>
		</findMap>
		<filterMap public="1" params="TIn:TOut" set="method" line="466" static="1">
			<f a="values:f">
				<c path="Array"><c path="filterMap.TIn"/></c>
				<f a="">
					<c path="filterMap.TIn"/>
					<e path="haxe.ds.Option"><c path="filterMap.TOut"/></e>
				</f>
				<c path="Array"><c path="filterMap.TOut"/></c>
			</f>
			<haxe_doc>Performs a `filter` and `map` operation at once. It uses predicate to get either
`None` or a transformed value `Some` of `TOut`.</haxe_doc>
		</filterMap>
		<findSome public="1" params="T" set="method" line="480" static="1">
			<f a="options">
				<c path="Array"><e path="haxe.ds.Option"><c path="findSome.T"/></e></c>
				<e path="haxe.ds.Option"><c path="findSome.T"/></e>
			</f>
			<haxe_doc><![CDATA[Finds the first item in an `Array<Option<T>>` that is `Some`, otherwise `None`.]]></haxe_doc>
		</findSome>
		<findIndex public="1" params="T" set="method" line="491" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="findIndex.T"/></x>
				<f a="">
					<c path="findIndex.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>It returns the index of the first element of the array that matches the predicate function.
If none is found it returns `-1`.</haxe_doc>
		</findIndex>
		<findLast public="1" params="T" set="method" line="502" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="findLast.T"/></x>
				<f a="">
					<c path="findLast.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="findLast.T"/></t>
			</f>
			<haxe_doc>It returns the last element of the array that matches the provided predicate function.
If none is found it returns null.</haxe_doc>
		</findLast>
		<first public="1" params="T" get="inline" set="null" line="516" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="first.T"/></x>
				<t path="Null"><c path="first.T"/></t>
			</f>
			<haxe_doc>It returns the first element of the array or null if the array is empty.</haxe_doc>
		</first>
		<firstOption public="1" params="T" get="inline" set="null" line="523" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="firstOption.T"/></x>
				<e path="haxe.ds.Option"><c path="firstOption.T"/></e>
			</f>
			<haxe_doc>It returns an option of the first element or None if the array is empty.</haxe_doc>
		</firstOption>
		<flatMap public="1" params="TIn:TOut" get="inline" set="null" line="534" static="1">
			<f a="array:callback">
				<x path="thx.ReadonlyArray"><c path="flatMap.TIn"/></x>
				<f a="">
					<c path="flatMap.TIn"/>
					<c path="Array"><c path="flatMap.TOut"/></c>
				</f>
				<c path="Array"><c path="flatMap.TOut"/></c>
			</f>
			<haxe_doc>It traverses an array of elements. Each element is split using the `callback` function and a 'flattened' array is returned.

```haxe
var chars = ['Hello', 'World'].flatMap(function(s) return s.split(''));
trace(chars); // ['H','e','l','l','o','W','o','r','l','d']
```</haxe_doc>
		</flatMap>
		<flatten public="1" params="T" set="method" line="546" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="Array"><c path="flatten.T"/></c></x>
				<c path="Array"><c path="flatten.T"/></c>
			</f>
			<haxe_doc>It takes an array of arrays and 'flattens' it into an array.

```haxe
var arr = [[1,2,3],[4,5,6],[7,8,9]];
trace(arr); // [1,2,3,4,5,6,7,8,9]
```</haxe_doc>
		</flatten>
		<from public="1" params="T" get="inline" set="null" line="556" static="1">
			<f a="array:element">
				<x path="thx.ReadonlyArray"><c path="from.T"/></x>
				<c path="from.T"/>
				<c path="Array"><c path="from.T"/></c>
			</f>
			<haxe_doc>Finds the first occurrance of `element` and returns all the elements from that point on.</haxe_doc>
		</from>
		<groupBy public="1" params="TKey:TValue" set="method" line="568" static="1">
			<f a="arr:resolver">
				<x path="thx.ReadonlyArray"><c path="groupBy.TValue"/></x>
				<f a="">
					<c path="groupBy.TValue"/>
					<c path="groupBy.TKey"/>
				</f>
				<x path="Map">
					<c path="groupBy.TKey"/>
					<c path="Array"><c path="groupBy.TValue"/></c>
				</x>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns a Map of arrays. Each value in the array is passed to `resolver` that returns a key to use
to group such element.

This method is tagged with `@:generic` and needs a compatible type to be used (ex: no anonymous objects).

In case you have to use a type that is not supported by `@:generic`, please use `groupByAppend`.</haxe_doc>
		</groupBy>
		<groupByAppend public="1" params="TKey:TValue" set="method" line="591" static="1">
			<f a="arr:resolver:map">
				<x path="thx.ReadonlyArray"><c path="groupByAppend.TValue"/></x>
				<f a="">
					<c path="groupByAppend.TValue"/>
					<c path="groupByAppend.TKey"/>
				</f>
				<x path="Map">
					<c path="groupByAppend.TKey"/>
					<c path="Array"><c path="groupByAppend.TValue"/></c>
				</x>
				<x path="Map">
					<c path="groupByAppend.TKey"/>
					<c path="Array"><c path="groupByAppend.TValue"/></c>
				</x>
			</f>
			<haxe_doc>Each value in the array is passed to `resolver` that returns a key to use to group such element.
  Groups are appended to the passed map.</haxe_doc>
		</groupByAppend>
		<groupByIndex public="1" params="A:K" set="method" line="612" static="1">
			<f a="arr:groupKey">
				<x path="thx.ReadonlyArray"><c path="groupByIndex.A"/></x>
				<f a="">
					<x path="Int"/>
					<c path="groupByIndex.K"/>
				</f>
				<x path="Map">
					<c path="groupByIndex.K"/>
					<c path="Array"><c path="groupByIndex.A"/></c>
				</x>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>* Group the array by a function of the index.</haxe_doc>
		</groupByIndex>
		<spanByIndex public="1" params="A:K" set="method" line="627" static="1"><f a="arr:spanKey">
	<x path="thx.ReadonlyArray"><c path="spanByIndex.A"/></x>
	<f a="">
		<x path="Int"/>
		<c path="spanByIndex.K"/>
	</f>
	<c path="Array"><c path="Array"><c path="spanByIndex.A"/></c></c>
</f></spanByIndex>
		<hasElements public="1" params="T" get="inline" set="null" line="648" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="hasElements.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the array contains at least one element.</haxe_doc>
		</hasElements>
		<head public="1" params="T" get="inline" set="null" line="654" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="head.T"/></x>
				<t path="Null"><c path="head.T"/></t>
			</f>
			<haxe_doc>It returns the first element of the array or null if the array is empty. Same as `first`.</haxe_doc>
		</head>
		<ifEmpty public="1" params="T" get="inline" set="null" line="660" static="1">
			<f a="array:alt">
				<c path="Array"><c path="ifEmpty.T"/></c>
				<c path="Array"><c path="ifEmpty.T"/></c>
				<c path="Array"><c path="ifEmpty.T"/></c>
			</f>
			<haxe_doc>`ifEmpty` returns `array` if it is neither `null` or empty, otherwise it returns `alt`</haxe_doc>
		</ifEmpty>
		<initial public="1" params="T" get="inline" set="null" line="666" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="initial.T"/></x>
				<c path="Array"><c path="initial.T"/></c>
			</f>
			<haxe_doc>Get all the elements from `array` except for the last one.</haxe_doc>
		</initial>
		<intersperse public="1" params="T" set="method" line="672" static="1">
			<f a="array:value">
				<x path="thx.ReadonlyArray"><c path="intersperse.T"/></x>
				<c path="intersperse.T"/>
				<c path="Array"><c path="intersperse.T"/></c>
			</f>
			<haxe_doc>Creates a new array that alternates the values in `array` with `value`.</haxe_doc>
		</intersperse>
		<interspersef public="1" params="T" set="method" line="681" static="1">
			<f a="array:f">
				<x path="thx.ReadonlyArray"><c path="interspersef.T"/></x>
				<f a=""><c path="interspersef.T"/></f>
				<c path="Array"><c path="interspersef.T"/></c>
			</f>
			<haxe_doc>Lazy version of `intersperse`. It creates a new array that alternates the values in `array` with the result of `f`.</haxe_doc>
		</interspersef>
		<isEmpty public="1" params="T" get="inline" set="null" line="695" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="isEmpty.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>It returns `true` if the array contains zero elements.</haxe_doc>
		</isEmpty>
		<last public="1" params="T" get="inline" set="null" line="701" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="last.T"/></x>
				<t path="Null"><c path="last.T"/></t>
			</f>
			<haxe_doc>It returns the last element of the array or null if the array is empty.</haxe_doc>
		</last>
		<lastOption public="1" params="T" get="inline" set="null" line="707" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="lastOption.T"/></x>
				<e path="haxe.ds.Option"><c path="lastOption.T"/></e>
			</f>
			<haxe_doc>It returns an option of the last element, `None` if the array is empty.</haxe_doc>
		</lastOption>
		<map public="1" params="TIn:TOut" set="method" line="714" static="1">
			<f a="array:callback">
				<x path="thx.ReadonlyArray"><c path="map.TIn"/></x>
				<f a="">
					<c path="map.TIn"/>
					<c path="map.TOut"/>
				</f>
				<c path="Array"><c path="map.TOut"/></c>
			</f>
			<haxe_doc>Static wrapper for `Array` `map` function.</haxe_doc>
		</map>
		<mapi public="1" params="TIn:TOut" set="method" line="725" static="1">
			<f a="array:callback">
				<x path="thx.ReadonlyArray"><c path="mapi.TIn"/></x>
				<f a=":">
					<c path="mapi.TIn"/>
					<x path="Int"/>
					<c path="mapi.TOut"/>
				</f>
				<c path="Array"><c path="mapi.TOut"/></c>
			</f>
			<haxe_doc>Same as `Array.map` but it adds a second argument to the `callback` function with the current index value.</haxe_doc>
		</mapi>
		<mapRight public="1" params="TIn:TOut" set="method" line="735" static="1">
			<f a="array:callback">
				<x path="thx.ReadonlyArray"><c path="mapRight.TIn"/></x>
				<f a="">
					<c path="mapRight.TIn"/>
					<c path="mapRight.TOut"/>
				</f>
				<c path="Array"><c path="mapRight.TOut"/></c>
			</f>
			<haxe_doc>Same as `Array.map` but traverses the array from the last to the first element.</haxe_doc>
		</mapRight>
		<order public="1" params="T" set="method" line="746" static="1">
			<f a="array:sort">
				<x path="thx.ReadonlyArray"><c path="order.T"/></x>
				<f a=":">
					<c path="order.T"/>
					<c path="order.T"/>
					<x path="Int"/>
				</f>
				<c path="Array"><c path="order.T"/></c>
			</f>
			<haxe_doc>It works the same as `Array.sort()` but doesn't change the original array and returns a sorted copy it.</haxe_doc>
		</order>
		<pull public="1" params="T" set="method" line="756" static="1">
			<f a="array:toRemove:?equality">
				<c path="Array"><c path="pull.T"/></c>
				<x path="thx.ReadonlyArray"><c path="pull.T"/></x>
				<f a=":">
					<c path="pull.T"/>
					<c path="pull.T"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Pulls from `array` all occurrences of all the elements in `toRemove`. Optionally takes
an `equality` function.</haxe_doc>
		</pull>
		<pushIf public="1" params="T" set="method" line="763" static="1">
			<f a="array:condition:value">
				<c path="Array"><c path="pushIf.T"/></c>
				<x path="Bool"/>
				<c path="pushIf.T"/>
				<c path="Array"><c path="pushIf.T"/></c>
			</f>
			<haxe_doc>It pushes `value` onto the array if `condition` is true. Also returns the array for easy method chaining.</haxe_doc>
		</pushIf>
		<rank public="1" params="T" set="method" line="780" static="1">
			<f a="array:compare:?incrementDuplicates" v="::true">
				<x path="thx.ReadonlyArray"><c path="rank.T"/></x>
				<f a=":">
					<c path="rank.T"/>
					<c path="rank.T"/>
					<x path="Int"/>
				</f>
				<x path="Bool"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ incrementDuplicates : true }</e></m></meta>
			<haxe_doc>Given an array of values, it returns an array of indexes permutated applying the function `compare`.

By default `rank` will return continuous values. If you know that your set does not contain duplicates you might want to turn off that feature by setting `incrementDuplicates` to `false`.

```
var arr = ["C","A","B"];
var indexes = Arrays.rank(arr, Strings.compare);
trace(indexes); // output [2,0,1]
```</haxe_doc>
		</rank>
		<reduce public="1" params="A:B" set="method" line="805" static="1">
			<f a="array:f:initial">
				<x path="thx.ReadonlyArray"><c path="reduce.A"/></x>
				<f a=":">
					<c path="reduce.B"/>
					<c path="reduce.A"/>
					<c path="reduce.B"/>
				</f>
				<c path="reduce.B"/>
				<c path="reduce.B"/>
			</f>
			<haxe_doc>It applies a function against an accumulator and each value of the array (from left-to-right) has to reduce it to a single value.</haxe_doc>
		</reduce>
		<foldLeft public="1" params="A:B" get="inline" set="null" line="814" static="1">
			<f a="array:init:f">
				<x path="thx.ReadonlyArray"><c path="foldLeft.A"/></x>
				<c path="foldLeft.B"/>
				<f a=":">
					<c path="foldLeft.B"/>
					<c path="foldLeft.A"/>
					<c path="foldLeft.B"/>
				</f>
				<c path="foldLeft.B"/>
			</f>
			<haxe_doc>* Alias for reduce that puts the arguments in the proper order.</haxe_doc>
		</foldLeft>
		<foldLeft1 public="1" params="A:B" get="inline" set="null" line="820" static="1">
			<f a="array:f">
				<x path="thx.ReadonlyArray"><c path="foldLeft1.A"/></x>
				<f a=":">
					<c path="foldLeft1.A"/>
					<c path="foldLeft1.A"/>
					<c path="foldLeft1.A"/>
				</f>
				<e path="haxe.ds.Option"><c path="foldLeft1.A"/></e>
			</f>
			<haxe_doc>* As with foldLeft, but uses first element as Init.</haxe_doc>
		</foldLeft1>
		<foldLeftEither public="1" params="A:E:B" set="method" line="831" static="1"><f a="array:init:f">
	<x path="thx.ReadonlyArray"><c path="foldLeftEither.A"/></x>
	<c path="foldLeftEither.B"/>
	<f a=":">
		<c path="foldLeftEither.B"/>
		<c path="foldLeftEither.A"/>
		<e path="thx.Either">
			<c path="foldLeftEither.E"/>
			<c path="foldLeftEither.B"/>
		</e>
	</f>
	<e path="thx.Either">
		<c path="foldLeftEither.E"/>
		<c path="foldLeftEither.B"/>
	</e>
</f></foldLeftEither>
		<foldMap public="1" params="A:B" set="method" line="846" static="1">
			<f a="array:f:m">
				<x path="thx.ReadonlyArray"><c path="foldMap.A"/></x>
				<f a="">
					<c path="foldMap.A"/>
					<c path="foldMap.B"/>
				</f>
				<x path="thx.Monoid"><c path="foldMap.B"/></x>
				<c path="foldMap.B"/>
			</f>
			<haxe_doc>* Fold by mapping the contained values into some monoidal type and reducing with that monoid.</haxe_doc>
		</foldMap>
		<fold public="1" params="A" set="method" line="852" static="1">
			<f a="array:m">
				<x path="thx.ReadonlyArray"><c path="fold.A"/></x>
				<x path="thx.Monoid"><c path="fold.A"/></x>
				<c path="fold.A"/>
			</f>
			<haxe_doc>* Reduce with a monoid</haxe_doc>
		</fold>
		<nel public="1" params="A" set="method" line="858" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="nel.A"/></x>
				<e path="haxe.ds.Option"><x path="thx.Nel"><c path="nel.A"/></x></e>
			</f>
			<haxe_doc>* Safely convert to a non-empty list.</haxe_doc>
		</nel>
		<foldS public="1" params="A" set="method" line="864" static="1">
			<f a="array:s">
				<x path="thx.ReadonlyArray"><c path="foldS.A"/></x>
				<x path="thx.Semigroup"><c path="foldS.A"/></x>
				<e path="haxe.ds.Option"><c path="foldS.A"/></e>
			</f>
			<haxe_doc>* Reduce with a semigroup, returning None if the array is empty.</haxe_doc>
		</foldS>
		<resize public="1" params="T" set="method" line="873" static="1">
			<f a="array:length:fill">
				<c path="Array"><c path="resize.T"/></c>
				<x path="Int"/>
				<c path="resize.T"/>
				<c path="Array"><c path="resize.T"/></c>
			</f>
			<haxe_doc>Resizes an array of `T` to an arbitrary length by adding more elements to its end
or by removing extra elements.

Note that the function changes the passed array and doesn't create a copy.</haxe_doc>
		</resize>
		<resized public="1" params="T" set="method" line="886" static="1">
			<f a="array:length:fill">
				<c path="Array"><c path="resized.T"/></c>
				<x path="Int"/>
				<c path="resized.T"/>
				<c path="Array"><c path="resized.T"/></c>
			</f>
			<haxe_doc>Copies and resizes an array of `T` to an arbitrary length by adding more
elements to its end or by removing extra elements.

Note that the function creates and returns a copy of the passed array.</haxe_doc>
		</resized>
		<reducei public="1" params="A:B" set="method" line="894" static="1">
			<f a="array:f:initial">
				<x path="thx.ReadonlyArray"><c path="reducei.A"/></x>
				<f a="::">
					<c path="reducei.B"/>
					<c path="reducei.A"/>
					<x path="Int"/>
					<c path="reducei.B"/>
				</f>
				<c path="reducei.B"/>
				<c path="reducei.B"/>
			</f>
			<haxe_doc>It is the same as `reduce` but with the extra integer `index` parameter.</haxe_doc>
		</reducei>
		<reduceRight public="1" params="A:B" get="inline" set="null" line="903" static="1">
			<f a="array:f:initial">
				<x path="thx.ReadonlyArray"><c path="reduceRight.A"/></x>
				<f a=":">
					<c path="reduceRight.B"/>
					<c path="reduceRight.A"/>
					<c path="reduceRight.B"/>
				</f>
				<c path="reduceRight.B"/>
				<c path="reduceRight.B"/>
			</f>
			<haxe_doc>Same as `Arrays.reduce` but starting from the last element and traversing to the first</haxe_doc>
		</reduceRight>
		<removeAll public="1" params="T" set="method" line="914" static="1">
			<f a="array:element:?equality">
				<c path="Array"><c path="removeAll.T"/></c>
				<c path="removeAll.T"/>
				<f a=":">
					<c path="removeAll.T"/>
					<c path="removeAll.T"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove every occurrance of `element` from `array`. If `equality` is not specified, strict equality
will be adopted.</haxe_doc>
		</removeAll>
		<rest public="1" params="T" get="inline" set="null" line="926" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="rest.T"/></x>
				<c path="Array"><c path="rest.T"/></c>
			</f>
			<haxe_doc>Returns all but the first element of the array</haxe_doc>
		</rest>
		<reversed public="1" params="T" get="inline" set="null" line="932" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="reversed.T"/></x>
				<c path="Array"><c path="reversed.T"/></c>
			</f>
			<haxe_doc>Creates a copy of the array with its elements in reverse order.</haxe_doc>
		</reversed>
		<sample public="1" params="T" get="inline" set="null" line="942" static="1">
			<f a="array:n">
				<x path="thx.ReadonlyArray"><c path="sample.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="sample.T"/></c>
			</f>
			<haxe_doc>Returns `n` elements at random from the array. Elements will not be repeated.</haxe_doc>
		</sample>
		<sampleOne public="1" params="T" get="inline" set="null" line="954" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="sampleOne.T"/></x>
				<t path="Null"><c path="sampleOne.T"/></t>
			</f>
			<haxe_doc>Returns one element at random from the array or null if the array is empty.</haxe_doc>
		</sampleOne>
		<string public="1" params="T" set="method" line="960" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="string.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Converts an `Array<T>` into a string.]]></haxe_doc>
		</string>
		<shuffle public="1" params="T" set="method" line="968" static="1">
			<f a="a">
				<x path="thx.ReadonlyArray"><c path="shuffle.T"/></x>
				<c path="Array"><c path="shuffle.T"/></c>
			</f>
			<haxe_doc>It returns a copy of the array with its elements randomly changed in position.</haxe_doc>
		</shuffle>
		<split public="1" params="T" set="method" line="983" static="1">
			<f a="array:parts">
				<x path="thx.ReadonlyArray"><c path="split.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="Array"><c path="split.T"/></c></c>
			</f>
			<haxe_doc>Splits an array into a specified number of `parts`.</haxe_doc>
		</split>
		<splitBy public="1" params="T" set="method" line="991" static="1">
			<f a="array:len">
				<x path="thx.ReadonlyArray"><c path="splitBy.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="Array"><c path="splitBy.T"/></c></c>
			</f>
			<haxe_doc>Splits an array into smaller arrays at most of length equal to `len`.</haxe_doc>
		</splitBy>
		<splitByPad public="1" params="T" set="method" line="1003" static="1">
			<f a="arr:len:pad">
				<c path="Array"><c path="splitByPad.T"/></c>
				<x path="Int"/>
				<c path="splitByPad.T"/>
				<c path="Array"><c path="Array"><c path="splitByPad.T"/></c></c>
			</f>
			<haxe_doc>Splits an array by the given number and pads last group with the given element if necessary.</haxe_doc>
		</splitByPad>
		<tail public="1" params="T" get="inline" set="null" line="1013" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="tail.T"/></x>
				<c path="Array"><c path="tail.T"/></c>
			</f>
			<haxe_doc>It returns the elements of the array after the first.</haxe_doc>
		</tail>
		<take public="1" params="T" get="inline" set="null" line="1019" static="1">
			<f a="arr:n">
				<x path="thx.ReadonlyArray"><c path="take.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="take.T"/></c>
			</f>
			<haxe_doc>Returns the first `n` elements from the array.</haxe_doc>
		</take>
		<takeLast public="1" params="T" get="inline" set="null" line="1024" static="1">
			<f a="arr:n">
				<x path="thx.ReadonlyArray"><c path="takeLast.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="takeLast.T"/></c>
			</f>
			<haxe_doc>Returns the last `n` elements from the array.</haxe_doc>
		</takeLast>
		<traverseOption public="1" params="T:U" set="method" line="1032" static="1">
			<f a="arr:f">
				<x path="thx.ReadonlyArray"><c path="traverseOption.T"/></x>
				<f a="">
					<c path="traverseOption.T"/>
					<e path="haxe.ds.Option"><c path="traverseOption.U"/></e>
				</f>
				<e path="haxe.ds.Option"><c path="Array"><c path="traverseOption.U"/></c></e>
			</f>
			<haxe_doc>Traverse the array with a function that may return values wrapped in Option.
If any of the values are None, return None, otherwise return the array of mapped
values in a Some.</haxe_doc>
		</traverseOption>
		<traverseValidation public="1" params="E:T:U" set="method" line="1042" static="1">
			<f a="arr:f:s">
				<x path="thx.ReadonlyArray"><c path="traverseValidation.T"/></x>
				<f a="">
					<c path="traverseValidation.T"/>
					<x path="thx.Validation">
						<c path="traverseValidation.E"/>
						<c path="traverseValidation.U"/>
					</x>
				</f>
				<x path="thx.Semigroup"><c path="traverseValidation.E"/></x>
				<x path="thx.Validation">
					<c path="traverseValidation.E"/>
					<c path="Array"><c path="traverseValidation.U"/></c>
				</x>
			</f>
			<haxe_doc>Traverse the array with a function that may return values wrapped in Validation.
If any of the values are Failures, return a Failure that accumulates all errors
from the failed values, otherwise return the array of mapped values in a Success.</haxe_doc>
		</traverseValidation>
		<traverseValidationIndexed public="1" params="E:T:U" set="method" line="1052" static="1">
			<f a="arr:f:s">
				<x path="thx.ReadonlyArray"><c path="traverseValidationIndexed.T"/></x>
				<f a=":">
					<c path="traverseValidationIndexed.T"/>
					<x path="Int"/>
					<x path="thx.Validation">
						<c path="traverseValidationIndexed.E"/>
						<c path="traverseValidationIndexed.U"/>
					</x>
				</f>
				<x path="thx.Semigroup"><c path="traverseValidationIndexed.E"/></x>
				<x path="thx.Validation">
					<c path="traverseValidationIndexed.E"/>
					<c path="Array"><c path="traverseValidationIndexed.U"/></c>
				</x>
			</f>
			<haxe_doc>Traverse the array with a function that may return values wrapped in Validation.
If any of the values are Failures, return a Failure that accumulates all errors
from the failed values, otherwise return the array of mapped values in a Success.</haxe_doc>
		</traverseValidationIndexed>
		<rotate public="1" params="T" set="method" line="1061" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="thx.ReadonlyArray"><c path="rotate.T"/></x></x>
				<c path="Array"><c path="Array"><c path="rotate.T"/></c></c>
			</f>
			<haxe_doc>Transforms an array like `[[a0,b0],[a1,b1],[a2,b2]]` into
`[[a0,a1,a2],[b0,b1,b2]]`.</haxe_doc>
		</rotate>
		<sliding2 public="1" params="T:U" set="method" line="1073" static="1"><f a="arr:f">
	<x path="thx.ReadonlyArray"><c path="sliding2.T"/></x>
	<f a=":">
		<c path="sliding2.T"/>
		<c path="sliding2.T"/>
		<c path="sliding2.U"/>
	</f>
	<c path="Array"><c path="sliding2.U"/></c>
</f></sliding2>
		<unzip public="1" params="T1:T2" set="method" line="1088" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="thx.Tuple2">
	<c path="unzip.T1"/>
	<c path="unzip.T2"/>
</x></x>
				<x path="thx.Tuple2">
					<c path="Array"><c path="unzip.T1"/></c>
					<c path="Array"><c path="unzip.T2"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple2<T1, T2> to a Tuple2<Array<T1>, Array<T2>>.]]></haxe_doc>
		</unzip>
		<unzip3 public="1" params="T1:T2:T3" set="method" line="1100" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="thx.Tuple3">
	<c path="unzip3.T1"/>
	<c path="unzip3.T2"/>
	<c path="unzip3.T3"/>
</x></x>
				<x path="thx.Tuple3">
					<c path="Array"><c path="unzip3.T1"/></c>
					<c path="Array"><c path="unzip3.T2"/></c>
					<c path="Array"><c path="unzip3.T3"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple3<T1, T2, T3> to a Tuple3<Array<T1>, Array<T2>, Array<T3>>.]]></haxe_doc>
		</unzip3>
		<unzip4 public="1" params="T1:T2:T3:T4" set="method" line="1113" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="thx.Tuple4">
	<c path="unzip4.T1"/>
	<c path="unzip4.T2"/>
	<c path="unzip4.T3"/>
	<c path="unzip4.T4"/>
</x></x>
				<x path="thx.Tuple4">
					<c path="Array"><c path="unzip4.T1"/></c>
					<c path="Array"><c path="unzip4.T2"/></c>
					<c path="Array"><c path="unzip4.T3"/></c>
					<c path="Array"><c path="unzip4.T4"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple4<T1, T2, T3, T4> to a Tuple4<Array<T1>, Array<T2>, Array<T3>, Array<T4>>.]]></haxe_doc>
		</unzip4>
		<unzip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="1127" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="thx.Tuple5">
	<c path="unzip5.T1"/>
	<c path="unzip5.T2"/>
	<c path="unzip5.T3"/>
	<c path="unzip5.T4"/>
	<c path="unzip5.T5"/>
</x></x>
				<x path="thx.Tuple5">
					<c path="Array"><c path="unzip5.T1"/></c>
					<c path="Array"><c path="unzip5.T2"/></c>
					<c path="Array"><c path="unzip5.T3"/></c>
					<c path="Array"><c path="unzip5.T4"/></c>
					<c path="Array"><c path="unzip5.T5"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple5<T1, T2, T3, T4, T5> to a Tuple5<Array<T1>, Array<T2>, Array<T3>, Array<T4>, Array<T5>>.]]></haxe_doc>
		</unzip5>
		<zip public="1" params="T1:T2" set="method" line="1142" static="1">
			<f a="array1:array2">
				<x path="thx.ReadonlyArray"><c path="zip.T1"/></x>
				<x path="thx.ReadonlyArray"><c path="zip.T2"/></x>
				<c path="Array"><x path="thx.Tuple2">
	<c path="zip.T1"/>
	<c path="zip.T2"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of two arrays in an array of `Tuple2`.</haxe_doc>
		</zip>
		<zip3 public="1" params="T1:T2:T3" set="method" line="1153" static="1">
			<f a="array1:array2:array3">
				<x path="thx.ReadonlyArray"><c path="zip3.T1"/></x>
				<x path="thx.ReadonlyArray"><c path="zip3.T2"/></x>
				<x path="thx.ReadonlyArray"><c path="zip3.T3"/></x>
				<c path="Array"><x path="thx.Tuple3">
	<c path="zip3.T1"/>
	<c path="zip3.T2"/>
	<c path="zip3.T3"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of three arrays in an array of `Tuple3`.</haxe_doc>
		</zip3>
		<zip4 public="1" params="T1:T2:T3:T4" set="method" line="1164" static="1">
			<f a="array1:array2:array3:array4">
				<x path="thx.ReadonlyArray"><c path="zip4.T1"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4.T2"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4.T3"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4.T4"/></x>
				<c path="Array"><x path="thx.Tuple4">
	<c path="zip4.T1"/>
	<c path="zip4.T2"/>
	<c path="zip4.T3"/>
	<c path="zip4.T4"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of four arrays in an array of `Tuple4`.</haxe_doc>
		</zip4>
		<zip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="1175" static="1">
			<f a="array1:array2:array3:array4:array5">
				<x path="thx.ReadonlyArray"><c path="zip5.T1"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5.T2"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5.T3"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5.T4"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5.T5"/></x>
				<c path="Array"><x path="thx.Tuple5">
	<c path="zip5.T1"/>
	<c path="zip5.T2"/>
	<c path="zip5.T3"/>
	<c path="zip5.T4"/>
	<c path="zip5.T5"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of five arrays in an array of `Tuple5`.</haxe_doc>
		</zip5>
		<zipAp public="1" params="A:B" set="method" line="1186" static="1">
			<f a="ax:fx">
				<x path="thx.ReadonlyArray"><c path="zipAp.A"/></x>
				<x path="thx.ReadonlyArray"><f a="">
	<c path="zipAp.A"/>
	<c path="zipAp.B"/>
</f></x>
				<c path="Array"><c path="zipAp.B"/></c>
			</f>
			<haxe_doc>* The 'zip' applicative functor operation.</haxe_doc>
		</zipAp>
		<zip2Ap public="1" params="A:B:C" set="method" line="1197" static="1">
			<f a="f:ax:bx">
				<f a=":">
					<c path="zip2Ap.A"/>
					<c path="zip2Ap.B"/>
					<c path="zip2Ap.C"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="zip2Ap.A"/></x>
				<x path="thx.ReadonlyArray"><c path="zip2Ap.B"/></x>
				<c path="Array"><c path="zip2Ap.C"/></c>
			</f>
			<haxe_doc>* Zip two arrays by applying the provided function to the aligned members.</haxe_doc>
		</zip2Ap>
		<zip3Ap public="1" params="A:B:C:D" set="method" line="1203" static="1">
			<f a="f:ax:bx:cx">
				<f a="::">
					<c path="zip3Ap.A"/>
					<c path="zip3Ap.B"/>
					<c path="zip3Ap.C"/>
					<c path="zip3Ap.D"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="zip3Ap.A"/></x>
				<x path="thx.ReadonlyArray"><c path="zip3Ap.B"/></x>
				<x path="thx.ReadonlyArray"><c path="zip3Ap.C"/></x>
				<c path="Array"><c path="zip3Ap.D"/></c>
			</f>
			<haxe_doc>* Zip three arrays by applying the provided function to the aligned members.</haxe_doc>
		</zip3Ap>
		<zip4Ap public="1" params="A:B:C:D:E" set="method" line="1209" static="1">
			<f a="f:ax:bx:cx:dx">
				<f a=":::">
					<c path="zip4Ap.A"/>
					<c path="zip4Ap.B"/>
					<c path="zip4Ap.C"/>
					<c path="zip4Ap.D"/>
					<c path="zip4Ap.E"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="zip4Ap.A"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4Ap.B"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4Ap.C"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4Ap.D"/></x>
				<c path="Array"><c path="zip4Ap.E"/></c>
			</f>
			<haxe_doc>* Zip four arrays by applying the provided function to the aligned members.</haxe_doc>
		</zip4Ap>
		<zip5Ap public="1" params="A:B:C:D:E:F" set="method" line="1215" static="1">
			<f a="f:ax:bx:cx:dx:ex">
				<f a="::::">
					<c path="zip5Ap.A"/>
					<c path="zip5Ap.B"/>
					<c path="zip5Ap.C"/>
					<c path="zip5Ap.D"/>
					<c path="zip5Ap.E"/>
					<c path="zip5Ap.F"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="zip5Ap.A"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5Ap.B"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5Ap.C"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5Ap.D"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5Ap.E"/></x>
				<c path="Array"><c path="zip5Ap.F"/></c>
			</f>
			<haxe_doc>* Zip five arrays by applying the provided function to the aligned members.</haxe_doc>
		</zip5Ap>
		<withPrepend public="1" params="T" get="inline" set="null" line="1221" static="1">
			<f a="arr:el">
				<x path="thx.ReadonlyArray"><c path="withPrepend.T"/></x>
				<c path="withPrepend.T"/>
				<x path="thx.ReadonlyArray"><c path="withPrepend.T"/></x>
			</f>
			<haxe_doc>Returns a copy of the array with the new element added to the beginning.</haxe_doc>
		</withPrepend>
		<with public="1" params="T" get="inline" set="null" line="1227" static="1">
			<f a="arr:el">
				<x path="thx.ReadonlyArray"><c path="with.T"/></x>
				<c path="with.T"/>
				<x path="thx.ReadonlyArray"><c path="with.T"/></x>
			</f>
			<haxe_doc>Returns a copy of the array with the new element added to the end.</haxe_doc>
		</with>
		<withSlice public="1" params="T" set="method" line="1233" static="1">
			<f a="arr:other:start:?length" v=":::0">
				<x path="thx.ReadonlyArray"><c path="withSlice.T"/></x>
				<x path="thx.ReadonlyArray"><c path="withSlice.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="thx.ReadonlyArray"><c path="withSlice.T"/></x>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Returns a copy of the array with the `other` elements inserted at `start`. The `length` elements after `start` are going to be removed.</haxe_doc>
		</withSlice>
		<withInsert public="1" params="T" set="method" line="1239" static="1">
			<f a="arr:el:pos">
				<x path="thx.ReadonlyArray"><c path="withInsert.T"/></x>
				<c path="withInsert.T"/>
				<x path="Int"/>
				<x path="thx.ReadonlyArray"><c path="withInsert.T"/></x>
			</f>
			<haxe_doc>Returns a copy of the array with the new element inserted at position `pos`.</haxe_doc>
		</withInsert>
		<maxBy public="1" params="A" set="method" line="1245" static="1">
			<f a="arr:ord">
				<x path="thx.ReadonlyArray"><c path="maxBy.A"/></x>
				<x path="thx.Ord"><c path="maxBy.A"/></x>
				<e path="haxe.ds.Option"><c path="maxBy.A"/></e>
			</f>
			<haxe_doc>Finds the min element of the array given the specified ordering.</haxe_doc>
		</maxBy>
		<minBy public="1" params="A" set="method" line="1251" static="1">
			<f a="arr:ord">
				<x path="thx.ReadonlyArray"><c path="minBy.A"/></x>
				<x path="thx.Ord"><c path="minBy.A"/></x>
				<e path="haxe.ds.Option"><c path="minBy.A"/></e>
			</f>
			<haxe_doc>Finds the min element of the array given the specified ordering.</haxe_doc>
		</minBy>
		<toMap public="1" params="K:V" set="method" line="1258" static="1">
			<f a="arr:keyOrder">
				<x path="thx.ReadonlyArray"><t path="thx.Tuple">
	<c path="toMap.K"/>
	<c path="toMap.V"/>
</t></x>
				<x path="thx.Ord"><c path="toMap.K"/></x>
				<t path="thx.VNel">
					<c path="toMap.K"/>
					<x path="thx.fp.Map">
						<c path="toMap.K"/>
						<c path="toMap.V"/>
					</x>
				</t>
			</f>
			<haxe_doc>* Convert an array of tuples to a map. If there are collisions between keys,
   * return an error.</haxe_doc>
		</toMap>
		<toStringMap public="1" params="V" set="method" line="1273" static="1"><f a="arr">
	<x path="thx.ReadonlyArray"><t path="thx.Tuple">
	<c path="String"/>
	<c path="toStringMap.V"/>
</t></x>
	<x path="Map">
		<c path="String"/>
		<c path="toStringMap.V"/>
	</x>
</f></toStringMap>
		<partition public="1" params="T" set="method" line="1286" static="1">
			<f a="arr:f">
				<x path="thx.ReadonlyArray"><c path="partition.T"/></x>
				<f a="">
					<c path="partition.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.Tuple2">
					<c path="Array"><c path="partition.T"/></c>
					<c path="Array"><c path="partition.T"/></c>
				</x>
			</f>
			<haxe_doc>Produces a `Tuple2` containing two `Array`, the left being elements where `f(e) == true`, the rest in the right.</haxe_doc>
		</partition>
		<partitionWhile public="1" params="T" set="method" line="1300" static="1">
			<f a="arr:f">
				<x path="thx.ReadonlyArray"><c path="partitionWhile.T"/></x>
				<f a="">
					<c path="partitionWhile.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.Tuple2">
					<c path="Array"><c path="partitionWhile.T"/></c>
					<c path="Array"><c path="partitionWhile.T"/></c>
				</x>
			</f>
			<haxe_doc>Produces a `Tuple2` containing two `Arrays`, the difference from partition being that after the predicate
  returns true once, the rest of the elements will be in the right hand of the tuple, regardless of
  the result of the predicate.</haxe_doc>
		</partitionWhile>
		<dropLeft public="1" params="T" set="method" line="1320" static="1">
			<f a="a:n">
				<x path="thx.ReadonlyArray"><c path="dropLeft.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="dropLeft.T"/></c>
			</f>
			<haxe_doc>Produces an Array from `a[n]` to the last element of `a`.</haxe_doc>
		</dropLeft>
		<dropRight public="1" params="T" set="method" line="1326" static="1">
			<f a="a:n">
				<x path="thx.ReadonlyArray"><c path="dropRight.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="dropRight.T"/></c>
			</f>
			<haxe_doc>Produces an Array from `a[0]` to a[a.length-n].</haxe_doc>
		</dropRight>
		<dropWhile public="1" params="T" set="method" line="1332" static="1">
			<f a="a:p">
				<x path="thx.ReadonlyArray"><c path="dropWhile.T"/></x>
				<f a="">
					<c path="dropWhile.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="dropWhile.T"/></c>
			</f>
			<haxe_doc>Drops values from Array `a` while the predicate returns true.</haxe_doc>
		</dropWhile>
		<pad public="1" params="T" set="method" line="1346" static="1">
			<f a="arr:len:?def">
				<x path="thx.ReadonlyArray"><c path="pad.T"/></x>
				<x path="Int"/>
				<c path="pad.T"/>
				<c path="Array"><c path="pad.T"/></c>
			</f>
			<haxe_doc>Pads out to len with optional default `def`, ignores if len is less than Array length.</haxe_doc>
		</pad>
		<fill public="1" params="T" set="method" line="1357" static="1">
			<f a="arr:def">
				<x path="thx.ReadonlyArray"><c path="fill.T"/></x>
				<c path="fill.T"/>
				<c path="Array"><c path="fill.T"/></c>
			</f>
			<haxe_doc>Fills `null` values in `arr` with `def`.</haxe_doc>
		</fill>
		<haxe_doc>`Arrays` provides additional extension methods on top of the `Array` type.

Note that some of the examples imply `using thx.Arrays;`.</haxe_doc>
	</class>
	<class path="thx.ArrayFloats" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Arrays.hx" module="thx.Arrays">
		<average public="1" set="method" line="1375" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<haxe_doc>Finds the average of all the elements in the array.

It returns `NaN` if the array is empty.</haxe_doc>
		</average>
		<compact public="1" set="method" line="1382" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><t path="Null"><x path="Float"/></t></x>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>Filters out all null or Math.NaN floats in the array</haxe_doc>
		</compact>
		<max public="1" set="method" line="1389" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Float"/></x>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the max float element in the array.</haxe_doc>
		</max>
		<min public="1" set="method" line="1395" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Float"/></x>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the min float element in the array.</haxe_doc>
		</min>
		<resize public="1" set="method" line="1404" static="1">
			<f a="array:length:?fill" v="::0.0">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ fill : 0.0 }</e></m></meta>
			<haxe_doc>Resizes an array of `Float` to an arbitrary length by adding more elements (default is `0.0`)
to its end or by removing extra elements.

Note that the function changes the passed array and doesn't create a copy.</haxe_doc>
		</resize>
		<resized public="1" set="method" line="1419" static="1">
			<f a="array:length:?fill" v="::0.0">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ fill : 0.0 }</e></m></meta>
			<haxe_doc>Copies and resizes an array of `Float` to an arbitrary length by adding more
elements (default is `0.0`) to its end or by removing extra elements.

Note that the function creates and returns a copy of the passed array.</haxe_doc>
		</resized>
		<standardDeviation public="1" set="method" line="1427" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the sample standard deviation of the sampled values.</haxe_doc>
		</standardDeviation>
		<sum public="1" set="method" line="1440" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Float"/></x>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the sum of all the elements in the array.</haxe_doc>
		</sum>
		<haxe_doc><![CDATA[Helper class for `Array<Float>`.]]></haxe_doc>
	</class>
	<class path="thx.ArrayInts" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Arrays.hx" module="thx.Arrays">
		<average public="1" set="method" line="1451" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Int"/></x>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the average of all the elements in the array.</haxe_doc>
		</average>
		<max public="1" set="method" line="1457" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Int"/></x>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Finds the max int element in the array.</haxe_doc>
		</max>
		<min public="1" set="method" line="1463" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Int"/></x>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Finds the min int element in the array.</haxe_doc>
		</min>
		<resize public="1" set="method" line="1472" static="1">
			<f a="array:length:?fill" v="::0">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ fill : 0 }</e></m></meta>
			<haxe_doc>Resizes an array of `Int` to an arbitrary length by adding more elements (default is `0`)
to its end or by removing extra elements.

Note that the function changes the passed array and doesn't create a copy.</haxe_doc>
		</resize>
		<resized public="1" set="method" line="1485" static="1">
			<f a="array:length:?fill" v="::0">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ fill : 0 }</e></m></meta>
			<haxe_doc>Copies and resizes an array of `Int` to an arbitrary length by adding more
elements (default is `0`) to its end or by removing extra elements.

Note that the function creates and returns a copy of the passed array.</haxe_doc>
		</resized>
		<sum public="1" set="method" line="1493" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Int"/></x>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Finds the sum of all the elements in the array.</haxe_doc>
		</sum>
		<haxe_doc><![CDATA[Helper class for `Array<Int>`.]]></haxe_doc>
	</class>
	<class path="thx.ArrayStrings" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Arrays.hx" module="thx.Arrays">
		<compact public="1" set="method" line="1504" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="String"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Filters out all null or empty strings in the array</haxe_doc>
		</compact>
		<max public="1" set="method" line="1510" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="String"/></x>
				<t path="Null"><c path="String"/></t>
			</f>
			<haxe_doc>Finds the max string element in the array.</haxe_doc>
		</max>
		<min public="1" set="method" line="1516" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="String"/></x>
				<t path="Null"><c path="String"/></t>
			</f>
			<haxe_doc>Finds the min string element in the array.</haxe_doc>
		</min>
		<haxe_doc><![CDATA[Helper class for `Array<String>`.]]></haxe_doc>
	</class>
	<class path="thx.Bools" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Bools.hx">
		<compare public="1" set="method" line="9" static="1">
			<f a="a:b">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns a comparison value (`Int`) from two boolean values.</haxe_doc>
		</compare>
		<toInt public="1" set="method" line="15" static="1">
			<f a="v">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Converts a boolean to an integer value (`true` => `1`, `false` => `0`).]]></haxe_doc>
		</toInt>
		<canParse public="1" set="method" line="21" static="1">
			<f a="v">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed value is either `true` or `false` (case insensitive).</haxe_doc>
		</canParse>
		<parse public="1" set="method" line="29" static="1">
			<f a="v">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true`/`false` if the passed value is `true`/`false` (case insensitive); with any other value it will return null.</haxe_doc>
		</parse>
		<xor public="1" get="inline" set="null" line="38" static="1">
			<f a="a:b">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` when arguments are different.</haxe_doc>
		</xor>
		<option public="1" params="A" get="inline" set="null" line="45" static="1">
			<f a="cond:a">
				<x path="Bool"/>
				<c path="option.A"/>
				<e path="haxe.ds.Option"><c path="option.A"/></e>
			</f>
			<haxe_doc>* Depending upon the condition, return the provided value wrapped 
   * in a Some, or None if the condition is false.</haxe_doc>
		</option>
	</class>
	<class path="thx._Ord.Ord_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" private="1" module="thx.Ord">
		<order public="1" set="method" line="45" static="1">
			<f a="this:a0:a1">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<meta><m n=":impl"/></meta>
		</order>
		<max public="1" set="method" line="48" static="1">
			<f a="this:a0:a1">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</max>
		<min public="1" set="method" line="54" static="1">
			<f a="this:a0:a1">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</min>
		<equal public="1" set="method" line="60" static="1">
			<f a="this:a0:a1">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</equal>
		<contramap public="1" params="B" set="method" line="63" static="1">
			<f a="this:f">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<f a="">
					<c path="contramap.B"/>
					<c path="thx.Ord.A"/>
				</f>
				<x path="thx.Ord"><c path="contramap.B"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</contramap>
		<inverse public="1" set="method" line="66" static="1">
			<f a="this">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<x path="thx.Ord"><c path="thx.Ord.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</inverse>
		<intComparison public="1" set="method" line="69" static="1">
			<f a="this:a0:a1">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</intComparison>
		<fromIntComparison public="1" params="A" set="method" line="76" static="1"><f a="f">
	<f a=":">
		<c path="fromIntComparison.A"/>
		<c path="fromIntComparison.A"/>
		<x path="Int"/>
	</f>
	<x path="thx.Ord"><c path="fromIntComparison.A"/></x>
</f></fromIntComparison>
		<forComparable public="1" params="T" set="method" line="79" static="1"><f a=""><x path="thx.Ord"><c path="forComparable.T"/></x></f></forComparable>
		<forComparableOrd public="1" params="T" set="method" line="82" static="1"><f a=""><x path="thx.Ord"><c path="forComparableOrd.T"/></x></f></forComparableOrd>
		<meta><m n=":final"/></meta>
	</class>
	<class path="thx._Ord.Ordering_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" private="1" module="thx.Ord">
		<fromInt public="1" set="method" line="8" static="1"><f a="value">
	<x path="Int"/>
	<x path="thx.Ordering"/>
</f></fromInt>
		<fromFloat public="1" set="method" line="11" static="1"><f a="value">
	<x path="Float"/>
	<x path="thx.Ordering"/>
</f></fromFloat>
		<toInt public="1" set="method" line="14" static="1">
			<f a="this">
				<e path="thx.OrderingImpl"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toInt>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="thx.OrderingImpl" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" module="thx.Ord">
		<LT/>
		<GT/>
		<EQ/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="thx.Dates" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Dates.hx">
		<compare public="1" set="method" line="19" static="1">
			<f a="a:b">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It compares two dates.</haxe_doc>
		</compare>
		<create public="1" set="method" line="29" static="1">
			<f a="year:?month:?day:?hour:?minute:?second" v=":0:1:0:0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<meta>
				<m n=":value"><e>{ second : 0, minute : 0, hour : 0, day : 1, month : 0 }</e></m>
				<m n=":noUsing"/>
			</meta>
			<haxe_doc>Creates a Date by using the passed year, month, day, hour, minute, second.

Note that each argument can overflow its normal boundaries (e.g. a month value of `-33` is perfectly valid)
and the method will normalize that value by offsetting the other arguments by the right amount.</haxe_doc>
		</create>
		<daysRange public="1" set="method" line="78" static="1">
			<f a="start:end">
				<c path="Date"/>
				<c path="Date"/>
				<c path="Array"><c path="Date"/></c>
			</f>
			<haxe_doc>Creates an array of dates that begin at `start` and end at `end` included.

Time values are pick from the `start` value except for the last value that will
match `end`. No interpolation is made.</haxe_doc>
		</daysRange>
		<equals public="1" get="inline" set="null" line="92" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed dates are the same.</haxe_doc>
		</equals>
		<nearEquals public="1" set="method" line="102" static="1">
			<f a="self:other:?units:?period" v="::1:">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Int"/>
				<e path="thx.TimePeriod"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ units : 1 }</e></m></meta>
			<haxe_doc>Returns `true` if the dates are approximately equals. The amount of delta
allowed is determined by `units` and it spans that amount equally before and
after the `self` date. The default `unit` value is `1`.

The default `period` range is `Second`.</haxe_doc>
		</nearEquals>
		<greater public="1" get="inline" set="null" line="115" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the `self` date is greater than `other`.</haxe_doc>
		</greater>
		<more public="1" get="inline" set="null" line="119" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"more is deprecated, use greater instead"</e></m></meta>
		</more>
		<less public="1" get="inline" set="null" line="125" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the `self` date is lesser than `other`.</haxe_doc>
		</less>
		<greaterEquals public="1" get="inline" set="null" line="131" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the `self` date is greater than or equal to `other`.</haxe_doc>
		</greaterEquals>
		<moreEqual public="1" get="inline" set="null" line="135" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"moreEqual is deprecated, use greaterEquals instead"</e></m></meta>
		</moreEqual>
		<lessEquals public="1" get="inline" set="null" line="141" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the `self` date is lesser than or equal to `other`.</haxe_doc>
		</lessEquals>
		<lessEqual public="1" get="inline" set="null" line="145" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"lessEqual is deprecated, use lessEquals instead"</e></m></meta>
		</lessEqual>
		<isLeapYear public="1" set="method" line="154" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a year is a leap year.

@param year The year, represented as a 4 digit integer
@return True if a leap year, false otherwise.</haxe_doc>
		</isLeapYear>
		<isInLeapYear public="1" get="inline" set="null" line="170" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the given date is inside a leap year.

@param date The date object to check.
@return True if it is in a leap year, false otherwise.</haxe_doc>
		</isInLeapYear>
		<daysInMonth public="1" set="method" line="180" static="1">
			<f a="year:month">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in a month.

@param month An integer representing the month. (Jan=0, Dec=11)
@param year An 4 digit integer representing the year.
@return Int, the number of days in the month.
@throws Error if the month is not between 0 and 11.</haxe_doc>
		</daysInMonth>
		<numDaysInMonth public="1" set="method" line="192" static="1">
			<f a="month:year">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":deprecated"><e>"Use daysIntMonth instead. Also notice that arguments are inverted now"</e></m></meta>
		</numDaysInMonth>
		<daysInThisMonth public="1" set="method" line="201" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Tells how many days in the month of the given date.

@param date The date representing the month we are checking.
@return Int, the number of days in the month.</haxe_doc>
		</daysInThisMonth>
		<numDaysInThisMonth public="1" set="method" line="205" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<meta><m n=":depreacated"><e>"use daysInThisMonth instead"</e></m></meta>
		</numDaysInThisMonth>
		<sameYear public="1" set="method" line="211" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the 2 dates share the same year.</haxe_doc>
		</sameYear>
		<sameMonth public="1" set="method" line="217" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the 2 dates share the same year and month.</haxe_doc>
		</sameMonth>
		<sameDay public="1" set="method" line="223" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the 2 dates share the same year, month and day.</haxe_doc>
		</sameDay>
		<sameHour public="1" set="method" line="229" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the 2 dates share the same year, month, day and hour.</haxe_doc>
		</sameHour>
		<sameMinute public="1" set="method" line="235" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the 2 dates share the same year, month, day, hour and minute.</haxe_doc>
		</sameMinute>
		<snapNext public="1" get="inline" set="null" line="245" static="1">
			<f a="date:period">
				<c path="Date"/>
				<e path="thx.TimePeriod"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Snaps a Date to the next second, minute, hour, day, week, month or year.

@param date The date to snap.  See Date.
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The snapped date.</haxe_doc>
		</snapNext>
		<snapPrev public="1" get="inline" set="null" line="255" static="1">
			<f a="date:period">
				<c path="Date"/>
				<e path="thx.TimePeriod"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Snaps a Date to the previous second, minute, hour, day, week, month or year.

@param date The date to snap.  See Date.
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The snapped date.</haxe_doc>
		</snapPrev>
		<snapTo public="1" get="inline" set="null" line="265" static="1">
			<f a="date:period">
				<c path="Date"/>
				<e path="thx.TimePeriod"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Snaps a Date to the nearest second, minute, hour, day, week, month or year.

@param date The date to snap.  See Date.
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The snapped date.</haxe_doc>
		</snapTo>
		<jump public="1" set="method" line="279" static="1">
			<f a="date:period:amount">
				<c path="Date"/>
				<e path="thx.TimePeriod"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Get a date relative to the current date, shifting by a set period of time.

  Please note this works by constructing a new date object, rather than using `DateTools.delta()`.
  The key difference is that this allows us to jump over a period that may not be a set number of seconds.
  For example, jumping between months (which have different numbers of days), leap years, leap seconds, daylight savings time changes etc.

  @param date The starting date.
  @param period The TimePeriod you wish to jump by, Second, Minute, Hour, Day, Week, Month or Year.
  @param amount The multiple of `period` that you wish to jump by. A positive amount moves forward in time, a negative amount moves backward.</haxe_doc>
		</jump>
		<max public="1" set="method" line="303" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Finds and returns which of the two passed dates is the newest.</haxe_doc>
		</max>
		<min public="1" set="method" line="309" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Finds and returns which of the two passed dates is the oldest.</haxe_doc>
		</min>
		<snapToWeekDay public="1" set="method" line="322" static="1">
			<f a="date:day:?firstDayOfWk" v="::Sunday">
				<c path="Date"/>
				<x path="thx.Weekday"/>
				<x path="thx.Weekday"/>
				<c path="Date"/>
			</f>
			<meta><m n=":value"><e>{ firstDayOfWk : Sunday }</e></m></meta>
			<haxe_doc>Snaps a date to the given weekday inside the current week.  The time within the day will stay the same.

If you are already on the given day, the date will not change.

@param date The date value to snap
@param day Day to snap to.  Either `Sunday`, `Monday`, `Tuesday` etc.
@param firstDayOfWk The first day of the week.  Default to `Sunday`.
@return The date of the day you have snapped to.</haxe_doc>
		</snapToWeekDay>
		<snapNextWeekDay public="1" set="method" line="341" static="1">
			<f a="date:day">
				<c path="Date"/>
				<x path="thx.Weekday"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Snaps a date to the next given weekday.  The time within the day will stay the same.

If you are already on the given day, the date will not change.

@param date The date value to snap
@param day Day to snap to.  Either `Sunday`, `Monday`, `Tuesday` etc.
@return The date of the day you have snapped to.</haxe_doc>
		</snapNextWeekDay>
		<snapPrevWeekDay public="1" set="method" line="359" static="1">
			<f a="date:day">
				<c path="Date"/>
				<x path="thx.Weekday"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Snaps a date to the previous given weekday.  The time within the day will stay the same.

If you are already on the given day, the date will not change.

@param date The date value to snap
@param day Day to snap to.  Either `Sunday`, `Monday`, `Tuesday` etc.
@return The date of the day you have snapped to.</haxe_doc>
		</snapPrevWeekDay>
		<prevYear public="1" get="inline" set="null" line="371" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 year before the given date/time.</haxe_doc>
		</prevYear>
		<nextYear public="1" get="inline" set="null" line="377" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 year after the given date/time.</haxe_doc>
		</nextYear>
		<prevMonth public="1" get="inline" set="null" line="383" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 month before the given date/time.</haxe_doc>
		</prevMonth>
		<nextMonth public="1" get="inline" set="null" line="389" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 month after the given date/time.</haxe_doc>
		</nextMonth>
		<prevWeek public="1" get="inline" set="null" line="395" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 week before the given date/time.</haxe_doc>
		</prevWeek>
		<nextWeek public="1" get="inline" set="null" line="401" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 week after the given date/time.</haxe_doc>
		</nextWeek>
		<prevDay public="1" get="inline" set="null" line="407" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 day before the given date/time.</haxe_doc>
		</prevDay>
		<nextDay public="1" get="inline" set="null" line="413" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 day after the given date/time.</haxe_doc>
		</nextDay>
		<prevHour public="1" get="inline" set="null" line="419" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 hour before the given date/time.</haxe_doc>
		</prevHour>
		<nextHour public="1" get="inline" set="null" line="425" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 hour after the given date/time.</haxe_doc>
		</nextHour>
		<prevMinute public="1" get="inline" set="null" line="431" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 minute before the given date/time.</haxe_doc>
		</prevMinute>
		<nextMinute public="1" get="inline" set="null" line="437" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 minute after the given date/time.</haxe_doc>
		</nextMinute>
		<prevSecond public="1" get="inline" set="null" line="443" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 second before the given date/time.</haxe_doc>
		</prevSecond>
		<nextSecond public="1" get="inline" set="null" line="449" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 second after the given date/time.</haxe_doc>
		</nextSecond>
		<withYear public="1" set="method" line="455" static="1">
			<f a="date:year">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the year.</haxe_doc>
		</withYear>
		<withMonth public="1" set="method" line="461" static="1">
			<f a="date:month">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the month (remember that month indexes begin at zero).</haxe_doc>
		</withMonth>
		<withDay public="1" set="method" line="467" static="1">
			<f a="date:day">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the day.</haxe_doc>
		</withDay>
		<withHour public="1" set="method" line="473" static="1">
			<f a="date:hour">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the hour.</haxe_doc>
		</withHour>
		<withMinute public="1" set="method" line="479" static="1">
			<f a="date:minute">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the minute.</haxe_doc>
		</withMinute>
		<withSecond public="1" set="method" line="485" static="1">
			<f a="date:second">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the second.</haxe_doc>
		</withSecond>
		<parseDate public="1" set="method" line="491" static="1">
			<f a="s">
				<c path="String"/>
				<e path="thx.Either">
					<c path="String"/>
					<c path="Date"/>
				</e>
			</f>
			<haxe_doc>* Safely parse a string value to a date.</haxe_doc>
		</parseDate>
		<order public="1" set="null" expr="Ord.fromIntComparison(compare)" line="499" static="1">
			<x path="thx.Ord"><c path="Date"/></x>
			<meta><m n=":value"><e>Ord.fromIntComparison(compare)</e></m></meta>
		</order>
		<haxe_doc>`Dates` provides additional extension methods on top of the `Date` type.

```
using Dates;
```

@author Jason O'Neil
@author Franco Ponticelli</haxe_doc>
	</class>
	<typedef path="thx.HaxeDateTools" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Dates.hx" module="thx.Dates">
		<c path="DateTools"/>
		<haxe_doc>Alias of `DateTools`, included so mixins work with `using thx.Dates;`</haxe_doc>
	</typedef>
	<class path="thx.Dynamics" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Dynamics.hx">
		<equals public="1" params="T1:T2" set="method" line="14" static="1">
			<f a="a:b">
				<c path="equals.T1"/>
				<c path="equals.T2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Structural and recursive equality.</haxe_doc>
		</equals>
		<clone public="1" set="method" line="167" static="1">
			<f a="v:?cloneInstances" v=":false">
				<d/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ cloneInstances : false }</e></m></meta>
			<haxe_doc>Clone the object.

Null values, strings, dates, numbers, enums and functions are immutable so will be returned as is.
Anonymous objects will be created and each field cloned recursively.
Arrays will be recreated and each object cloned recursively.
Class instances will either be cloned, or the reference copied, depending on the value of `cloneInstances`.

@param v The object which will be cloned.
@param cloneInstances If true, class instances will be cloned using `Type.createEmptyInstance` and `Reflect.setField`. If false, class instances will be re-used, not cloned. Default is false.</haxe_doc>
		</clone>
		<compare public="1" set="method" line="200" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares two runtime values trying to match values.</haxe_doc>
		</compare>
		<string public="1" set="method" line="238" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert any value into a `String`.</haxe_doc>
		</string>
		<haxe_doc>`Dynamics` provides additional extension methods on any type.</haxe_doc>
	</class>
	<class path="thx.DynamicsT" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Dynamics.hx" module="thx.Dynamics">
		<isEmpty public="1" params="T" get="inline" set="null" line="274" static="1">
			<f a="o">
				<d><c path="isEmpty.T"/></d>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isEmpty` returns `true` if the object doesn't have any field.</haxe_doc>
		</isEmpty>
		<exists public="1" params="T" get="inline" set="null" line="280" static="1">
			<f a="o:name">
				<d><c path="exists.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`exists` returns true if `o` contains a field named `name`.</haxe_doc>
		</exists>
		<fields public="1" params="T" get="inline" set="null" line="286" static="1">
			<f a="o">
				<d><c path="fields.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>`fields` returns an array of string containing the field names of the argument object.</haxe_doc>
		</fields>
		<merge public="1" params="T" set="method" line="295" static="1">
			<f a="to:from:?replacef">
				<d><c path="merge.T"/></d>
				<d><c path="merge.T"/></d>
				<f a="::">
					<c path="String"/>
					<d/>
					<d/>
					<d/>
				</f>
				<d><c path="merge.T"/></d>
			</f>
			<haxe_doc>Copies the values from the fields of `from` to `to`. If `to` already contains those fields, then it replace
  those values with the return value of the function `replacef`.

  If not set, `replacef` always returns the value from the `from` object.</haxe_doc>
		</merge>
		<toMap public="1" params="T" set="method" line="313" static="1">
			<f a="o">
				<d><c path="toMap.T"/></d>
				<x path="Map">
					<c path="String"/>
					<c path="toMap.T"/>
				</x>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[`objectToMap` transforms an anonymous object into an instance of `Map<String, Dynamic>`.]]></haxe_doc>
		</toMap>
		<size public="1" params="T" get="inline" set="null" line="322" static="1">
			<f a="o">
				<d><c path="size.T"/></d>
				<x path="Int"/>
			</f>
			<haxe_doc>`size` returns how many fields are present in the object.</haxe_doc>
		</size>
		<values public="1" params="T" get="inline" set="null" line="328" static="1">
			<f a="o">
				<d><c path="values.T"/></d>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>`values` returns an array of dynamic values containing the values of each field in the argument object.</haxe_doc>
		</values>
		<tuples public="1" params="T" set="method" line="335" static="1">
			<f a="o">
				<d><c path="tuples.T"/></d>
				<c path="Array"><x path="thx.Tuple2">
	<c path="String"/>
	<c path="tuples.T"/>
</x></c>
			</f>
			<haxe_doc><![CDATA[Converts an object into an Array<Tuple2<String, Dynamic>> where the left value (_0) of the
  tuple is the field name and the right value (_1) is the field value.]]></haxe_doc>
		</tuples>
	</class>
	<enum path="thx.Either" params="L:R" file="/Users/francoponticelli/projects/thx.core/src/thx/Either.hx">
		<Left a="value">
			<c path="thx.Either.L"/>
			<haxe_doc>Left contructors wrapping a value of type L</haxe_doc>
		</Left>
		<Right a="value">
			<c path="thx.Either.R"/>
			<haxe_doc>Right contructors wrapping a value of type R</haxe_doc>
		</Right>
		<haxe_doc>`Either` wraps one value of two possible types.</haxe_doc>
	</enum>
	<class path="thx.Eithers" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Eithers.hx">
		<isLeft public="1" params="L:R" set="method" line="12" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="isLeft.L"/>
					<c path="isLeft.R"/>
				</e>
				<x path="Bool"/>
			</f>
			<haxe_doc>Indicates if the either has a Left value</haxe_doc>
		</isLeft>
		<isRight public="1" params="L:R" set="method" line="22" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="isRight.L"/>
					<c path="isRight.R"/>
				</e>
				<x path="Bool"/>
			</f>
			<haxe_doc>Indicates if the either has a Right value</haxe_doc>
		</isRight>
		<toLeft public="1" params="L:R" set="method" line="32" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="toLeft.L"/>
					<c path="toLeft.R"/>
				</e>
				<e path="haxe.ds.Option"><c path="toLeft.L"/></e>
			</f>
			<haxe_doc><![CDATA[Converts the Either<L, R> to an Option<L> containing the Left value if Left, or None if Right.]]></haxe_doc>
		</toLeft>
		<toRight public="1" params="L:R" set="method" line="42" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="toRight.L"/>
					<c path="toRight.R"/>
				</e>
				<e path="haxe.ds.Option"><c path="toRight.R"/></e>
			</f>
			<haxe_doc><![CDATA[Converts the Either<L, R> to an Option<R> containing the Right value if Right, or None if Left.]]></haxe_doc>
		</toRight>
		<toLeftUnsafe public="1" params="L:R" set="method" line="52" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="toLeftUnsafe.L"/>
					<c path="toLeftUnsafe.R"/>
				</e>
				<t path="Null"><c path="toLeftUnsafe.L"/></t>
			</f>
			<haxe_doc>Extracts the left value if Left, or null if Right.</haxe_doc>
		</toLeftUnsafe>
		<toRightUnsafe public="1" params="L:R" set="method" line="62" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="toRightUnsafe.L"/>
					<c path="toRightUnsafe.R"/>
				</e>
				<t path="Null"><c path="toRightUnsafe.R"/></t>
			</f>
			<haxe_doc>Extracts the right value if Right, or null if Left.</haxe_doc>
		</toRightUnsafe>
		<map public="1" params="L:RIn:ROut" set="method" line="69" static="1"><f a="either:f">
	<e path="thx.Either">
		<c path="map.L"/>
		<c path="map.RIn"/>
	</e>
	<f a="">
		<c path="map.RIn"/>
		<c path="map.ROut"/>
	</f>
	<e path="thx.Either">
		<c path="map.L"/>
		<c path="map.ROut"/>
	</e>
</f></map>
		<flatMap public="1" params="L:RIn:ROut" set="method" line="78" static="1">
			<f a="either:f">
				<e path="thx.Either">
					<c path="flatMap.L"/>
					<c path="flatMap.RIn"/>
				</e>
				<f a="">
					<c path="flatMap.RIn"/>
					<e path="thx.Either">
						<c path="flatMap.L"/>
						<c path="flatMap.ROut"/>
					</e>
				</f>
				<e path="thx.Either">
					<c path="flatMap.L"/>
					<c path="flatMap.ROut"/>
				</e>
			</f>
			<haxe_doc><![CDATA[Maps an Either<L, RIn> to and Either<L, ROut>.]]></haxe_doc>
		</flatMap>
		<leftMap public="1" params="LIn:LOut:R" set="method" line="85" static="1"><f a="either:f">
	<e path="thx.Either">
		<c path="leftMap.LIn"/>
		<c path="leftMap.R"/>
	</e>
	<f a="">
		<c path="leftMap.LIn"/>
		<c path="leftMap.LOut"/>
	</f>
	<e path="thx.Either">
		<c path="leftMap.LOut"/>
		<c path="leftMap.R"/>
	</e>
</f></leftMap>
		<orThrow public="1" params="L:R" set="method" line="91" static="1"><f a="either:message">
	<e path="thx.Either">
		<c path="orThrow.L"/>
		<c path="orThrow.R"/>
	</e>
	<c path="String"/>
	<c path="orThrow.R"/>
</f></orThrow>
		<toVNel public="1" params="E:T" set="method" line="97" static="1"><f a="either">
	<e path="thx.Either">
		<c path="toVNel.E"/>
		<c path="toVNel.T"/>
	</e>
	<t path="thx.VNel">
		<c path="toVNel.E"/>
		<c path="toVNel.T"/>
	</t>
</f></toVNel>
		<cata public="1" params="L:R:A" set="method" line="103" static="1"><f a="either:l:r">
	<e path="thx.Either">
		<c path="cata.L"/>
		<c path="cata.R"/>
	</e>
	<f a="">
		<c path="cata.L"/>
		<c path="cata.A"/>
	</f>
	<f a="">
		<c path="cata.R"/>
		<c path="cata.A"/>
	</f>
	<c path="cata.A"/>
</f></cata>
		<orElse public="1" params="L:R" set="method" line="109" static="1"><f a="e0:e1">
	<e path="thx.Either">
		<c path="orElse.L"/>
		<c path="orElse.R"/>
	</e>
	<e path="thx.Either">
		<c path="orElse.L"/>
		<c path="orElse.R"/>
	</e>
	<e path="thx.Either">
		<c path="orElse.L"/>
		<c path="orElse.R"/>
	</e>
</f></orElse>
		<haxe_doc>Extension methods for the `thx.Either` type.</haxe_doc>
	</class>
	<class path="thx.Enums" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Enums.hx">
		<string public="1" params="T" set="method" line="10" static="1">
			<f a="e">
				<c path="string.T"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts an enum value into a `String` representation.</haxe_doc>
		</string>
		<compare public="1" params="T" set="method" line="23" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares two enum values. Comparison is based on the constructor definition
index. If `a` and `b` are the same constructor and have parameters, parameters
are compared using the same rules applied for `thx.Arrays.compare`.</haxe_doc>
		</compare>
		<sameConstructor public="1" params="T" get="inline" set="null" line="33" static="1">
			<f a="a:b">
				<c path="sameConstructor.T"/>
				<c path="sameConstructor.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares two enum instances for equality ignoring the constructor arguments.</haxe_doc>
		</sameConstructor>
		<min public="1" params="T" set="method" line="40" static="1">
			<f a="a:b">
				<c path="min.T"/>
				<c path="min.T"/>
				<c path="min.T"/>
			</f>
			<haxe_doc>Returns the lower between two enum instances. Sequence is determined by their
index in the type definition.</haxe_doc>
		</min>
		<max public="1" params="T" set="method" line="51" static="1">
			<f a="a:b">
				<c path="max.T"/>
				<c path="max.T"/>
				<c path="max.T"/>
			</f>
			<haxe_doc>Returns the higher between two enum instances. Sequence is determined by their
index in the type definition.</haxe_doc>
		</max>
		<haxe_doc>Helper class for enums.</haxe_doc>
	</class>
	<class path="thx.Error" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Error.hx">
		<fromDynamic public="1" set="method" line="17" static="1">
			<f a="err:?pos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="thx.Error"/>
			</f>
			<haxe_doc>It creates an instance of Error from any value.

If `err` is already an instance of `Error`, it is returned and nothing is created.</haxe_doc>
		</fromDynamic>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>The text message associated with the error.</haxe_doc>
		</message>
		<pos public="1" set="null">
			<t path="haxe.PosInfos"/>
			<haxe_doc>The location in code where the error has been instantiated.</haxe_doc>
		</pos>
		<stackItems public="1" set="null">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<haxe_doc>The collected error stack.</haxe_doc>
		</stackItems>
		<toString public="1" set="method" line="58"><f a=""><c path="String"/></f></toString>
		<getPosition public="1" set="method" line="61"><f a=""><c path="String"/></f></getPosition>
		<stackToString public="1" set="method" line="64"><f a=""><c path="String"/></f></stackToString>
		<new public="1" set="method" line="43">
			<f a="message:?stack:?pos">
				<c path="String"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The `Error` constructor only requires a steing message. `stack` and `pos` are automatically
populate but can be provided if preferred.</haxe_doc>
		</new>
		<haxe_doc>Defines a generic Error type. When the target platform is JS, `Error` extends the native
`js.Error` type.</haxe_doc>
	</class>
	<class path="thx.Floats" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Floats.hx">
		<TOLERANCE public="1" get="inline" set="null" expr="10e-5" line="7" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>10e-5</e></m></meta>
		</TOLERANCE>
		<EPSILON public="1" get="inline" set="null" expr="1e-9" line="11" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1e-9</e></m></meta>
			<haxe_doc>Constant value employed to see if two `Float` values are very close.</haxe_doc>
		</EPSILON>
		<pattern_parse expr="~/^(\+|-)?\d+(\.\d+)?(e-?\d+)?$/" line="13" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^(\+|-)?\d+(\.\d+)?(e-?\d+)?$/</e></m></meta>
		</pattern_parse>
		<angleDifference public="1" set="method" line="18" static="1">
			<f a="a:b:?turn" v="::360.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ turn : 360.0 }</e></m></meta>
			<haxe_doc>Returns the angular distance between 2 angles.</haxe_doc>
		</angleDifference>
		<ceilTo public="1" set="method" line="30" static="1">
			<f a="f:decimals">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds a number up to the specified number of decimals.</haxe_doc>
		</ceilTo>
		<canParse public="1" set="method" line="38" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`canParse` checks if a string value can be safely converted into a `Float` value.</haxe_doc>
		</canParse>
		<clamp public="1" get="inline" set="null" line="50" static="1">
			<f a="v:min:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>`clamp` restricts a value within the specified range.

```haxe
trace(1.3.clamp(0, 1)); // prints 1
trace(0.8.clamp(0, 1)); // prints 0.8
trace(-0.5.clamp(0, 1)); // prints 0.0
```</haxe_doc>
		</clamp>
		<clampSym public="1" get="inline" set="null" line="57" static="1">
			<f a="v:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Like clamp but you only pass one argument (`max`) that is used as the upper limit
and the opposite (additive inverse or `-max`) as the lower limit.</haxe_doc>
		</clampSym>
		<compare public="1" get="inline" set="null" line="63" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It returns the comparison value (an integer number) between two `float` values.</haxe_doc>
		</compare>
		<floorTo public="1" set="method" line="69" static="1">
			<f a="f:decimals">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds a number down to the specified number of decimals.</haxe_doc>
		</floorTo>
		<interpolate public="1" set="method" line="77" static="1">
			<f a="f:a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>`interpolate` returns a value between `a` and `b` for any value of `f` between 0 and 1.</haxe_doc>
		</interpolate>
		<interpolateAngle public="1" set="method" line="85" static="1">
			<f a="f:a:b:?turn" v=":::360">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ turn : 360 }</e></m></meta>
			<haxe_doc>Interpolates values in a polar coordinate system looking for the narrowest delta angle.

It can be either clock-wise or counter-clock-wise.</haxe_doc>
		</interpolateAngle>
		<interpolateAngleWidest public="1" set="method" line="93" static="1">
			<f a="f:a:b:?turn" v=":::360">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ turn : 360 }</e></m></meta>
			<haxe_doc>Interpolates values in a polar coordinate system looking for the wideset delta angle.

It can be either clock-wise or counter-clock-wise.</haxe_doc>
		</interpolateAngleWidest>
		<interpolateAngleCW public="1" set="method" line="100" static="1">
			<f a="f:a:b:?turn" v=":::360">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ turn : 360 }</e></m></meta>
			<haxe_doc>Interpolates values in a polar coordinate system always in clock-wise direction.</haxe_doc>
		</interpolateAngleCW>
		<interpolateAngleCCW public="1" set="method" line="111" static="1">
			<f a="f:a:b:?turn" v=":::360">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ turn : 360 }</e></m></meta>
			<haxe_doc>Interpolates values in a polar coordinate system always in counter-clock-wise direction.</haxe_doc>
		</interpolateAngleCCW>
		<max public="1" params="T" get="inline" set="null" line="122" static="1">
			<f a="a:b">
				<c path="max.T"/>
				<c path="max.T"/>
				<c path="max.T"/>
			</f>
			<haxe_doc>Return the maximum value between two integers or floats.</haxe_doc>
		</max>
		<min public="1" params="T" get="inline" set="null" line="128" static="1">
			<f a="a:b">
				<c path="min.T"/>
				<c path="min.T"/>
				<c path="min.T"/>
			</f>
			<haxe_doc>Return the minimum value between two integers or floats.</haxe_doc>
		</min>
		<nearEquals public="1" set="method" line="136" static="1">
			<f a="a:b:?tollerance" v="::EPSILON">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ tollerance : EPSILON }</e></m></meta>
			<haxe_doc>Float numbers can sometime introduce tiny errors even for simple operations.
`nearEquals` compares two floats using a tiny tollerance (last optional
argument). By default it is defined as `EPSILON`.</haxe_doc>
		</nearEquals>
		<nearEqualAngles public="1" get="inline" set="null" line="160" static="1">
			<f a="a:b:?turn:?tollerance" v="::360.0:EPSILON">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ tollerance : EPSILON, turn : 360.0 }</e></m></meta>
			<haxe_doc>Float numbers can sometime introduce tiny errors even for simple operations.
`nearEqualAngles` compares two angles (default is 360deg) using a tiny
tollerance (last optional argument). By default the tollerance is defined as
`EPSILON`.</haxe_doc>
		</nearEqualAngles>
		<nearZero public="1" get="inline" set="null" line="167" static="1">
			<f a="n:?tollerance" v=":EPSILON">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ tollerance : EPSILON }</e></m></meta>
			<haxe_doc>`nearZero` finds if the passed number is zero or very close to it. By default
`EPSILON` is used as the tollerance value.</haxe_doc>
		</nearZero>
		<normalize public="1" get="inline" set="null" line="173" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>`normalize` clamps the passwed value between 0 and 1.</haxe_doc>
		</normalize>
		<parse public="1" set="method" line="179" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>`parse` can parse a string and tranform it into a `Float` value.</haxe_doc>
		</parse>
		<root public="1" get="inline" set="null" line="188" static="1">
			<f a="base:index">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Computes the nth root (`index`) of `base`.</haxe_doc>
		</root>
		<roundTo public="1" set="method" line="194" static="1">
			<f a="f:decimals">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds a number to the specified number of decimals.</haxe_doc>
		</roundTo>
		<sign public="1" params="T" get="inline" set="null" line="202" static="1">
			<f a="value">
				<c path="sign.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>`sign` returns `-1` if `value` is a negative number, `1` otherwise.</haxe_doc>
		</sign>
		<toString public="1" get="inline" set="null" line="205" static="1"><f a="v">
	<x path="Float"/>
	<c path="String"/>
</f></toString>
		<toFloat public="1" get="inline" set="null" line="211" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Alias for parse, mainly for disambiguation with other parses using mega Thx.</haxe_doc>
		</toFloat>
		<trunc public="1" get="inline" set="null" line="214" static="1"><f a="value">
	<x path="Float"/>
	<x path="Int"/>
</f></trunc>
		<ftrunc public="1" get="inline" set="null" line="217" static="1"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></ftrunc>
		<wrap public="1" set="method" line="226" static="1">
			<f a="v:min:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Passed two boundaries values (`min`, `max`), `wrap` ensures that the passed value `v` will
be included in the boundaries. If the value exceeds `max`, the value is reduced by `min`
repeatedely until it falls within the range. Similar and inverted treatment is performed if
the value is below `min`.</haxe_doc>
		</wrap>
		<wrapCircular public="1" set="method" line="235" static="1">
			<f a="v:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Similar to `wrap`, it works for numbers between 0 and `max`.</haxe_doc>
		</wrapCircular>
		<order public="1" set="null" expr="Ord.fromIntComparison(compare)" line="245" static="1">
			<x path="thx.Ord"><x path="Float"/></x>
			<meta><m n=":value"><e>Ord.fromIntComparison(compare)</e></m></meta>
			<haxe_doc>* The ordering instance for floating-point values.</haxe_doc>
		</order>
		<monoid public="1" set="null" expr="{ zero : 0.0, append : function(a:Float, b:Float) return a + b }" line="248" static="1">
			<x path="thx.Monoid"><x path="Float"/></x>
			<meta><m n=":value"><e>{ zero : 0.0, append : function(a:Float, b:Float) return a + b }</e></m></meta>
		</monoid>
		<haxe_doc>`Floats` contains helper methods to work with `Float` values.</haxe_doc>
	</class>
	<typedef path="thx.HaxeMath" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Floats.hx" module="thx.Floats"><c path="Math"/></typedef>
	<class path="thx.Functions0" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions">
		<after public="1" get="inline" set="null" line="15" static="1">
			<f a="callback:n">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>Returns a function that invokes `callback` after being being invoked `n` times.</haxe_doc>
		</after>
		<join public="1" get="inline" set="null" line="22" static="1">
			<f a="fa:fb">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>`join` creates a function that calls the 2 functions passed as arguments in sequence.</haxe_doc>
		</join>
		<once public="1" get="inline" set="null" line="32" static="1">
			<f a="f">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>`once` wraps and returns the argument function. `once` ensures that `f` will be called
at most once even if the returned function is invoked multiple times.</haxe_doc>
		</once>
		<negate public="1" get="inline" set="null" line="42" static="1">
			<f a="callback">
				<f a=""><x path="Bool"/></f>
				<f a=""><x path="Bool"/></f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<times public="1" params="T" get="inline" set="null" line="49" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a=""><c path="times.T"/></f>
				<f a=""><c path="Array"><c path="times.T"/></c></f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.</haxe_doc>
		</times>
		<timesi public="1" params="T" get="inline" set="null" line="58" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a="">
					<x path="Int"/>
					<c path="timesi.T"/>
				</f>
				<f a=""><c path="Array"><c path="timesi.T"/></c></f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.

Callback takes an additional argument `index`.</haxe_doc>
		</timesi>
		<haxe_doc>Extension methods for functions with arity 0 (functions that do not take arguments).</haxe_doc>
	</class>
	<class path="thx.Functions1" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions">
		<compose public="1" params="TIn:TRet1:TRet2" get="inline" set="null" line="72" static="1">
			<f a="fa:fb">
				<f a="">
					<c path="compose.TRet2"/>
					<c path="compose.TRet1"/>
				</f>
				<f a="">
					<c path="compose.TIn"/>
					<c path="compose.TRet2"/>
				</f>
				<f a="">
					<c path="compose.TIn"/>
					<c path="compose.TRet1"/>
				</f>
			</f>
			<haxe_doc>`compose` returns a function that calls the first argument function with the result
of the following one.</haxe_doc>
		</compose>
		<map public="1" params="A:B:C" get="inline" set="null" line="78" static="1">
			<f a="fab:fbc">
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<f a="">
					<c path="map.B"/>
					<c path="map.C"/>
				</f>
				<f a="">
					<c path="map.A"/>
					<c path="map.C"/>
				</f>
			</f>
			<haxe_doc><![CDATA[* The covariant functor for Function1<A, _>]]></haxe_doc>
		</map>
		<contramap public="1" params="A:B:C" get="inline" set="null" line="84" static="1">
			<f a="fbc:fab">
				<f a="">
					<c path="contramap.B"/>
					<c path="contramap.C"/>
				</f>
				<f a="">
					<c path="contramap.A"/>
					<c path="contramap.B"/>
				</f>
				<f a="">
					<c path="contramap.A"/>
					<c path="contramap.C"/>
				</f>
			</f>
			<haxe_doc><![CDATA[* The contravariant functor for Function1<_, B>. Equivalent to compose.]]></haxe_doc>
		</contramap>
		<join public="1" params="TIn" get="inline" set="null" line="91" static="1">
			<f a="fa:fb">
				<f a="">
					<c path="join.TIn"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="join.TIn"/>
					<x path="Void"/>
				</f>
				<f a="v">
					<c path="join.TIn"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>`join` creates a function that calls the 2 functions passed as arguments in sequence
and passes the same argument value to the both of them.</haxe_doc>
		</join>
		<memoize public="1" params="TIn:TOut" set="method" line="103" static="1">
			<f a="callback:?resolver">
				<f a="">
					<c path="memoize.TIn"/>
					<c path="memoize.TOut"/>
				</f>
				<f a="">
					<c path="memoize.TIn"/>
					<c path="String"/>
				</f>
				<f a="">
					<c path="memoize.TIn"/>
					<c path="memoize.TOut"/>
				</f>
			</f>
			<haxe_doc>`memoize` wraps `callback` and calls it only once storing the result for future needs.

Computed results are stored in an internal map. The keys to this map are generated by
the resolver function that by default directly converts the first argument into a string.</haxe_doc>
		</memoize>
		<negate public="1" params="T1" get="inline" set="null" line="120" static="1">
			<f a="callback">
				<f a="">
					<c path="negate.T1"/>
					<x path="Bool"/>
				</f>
				<f a="v">
					<c path="negate.T1"/>
					<x path="Bool"/>
				</f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<noop public="1" params="T" set="method" line="127" static="1">
			<f a="_">
				<c path="noop.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>`noop` is a function that has no side effects and doesn't return any value.</haxe_doc>
		</noop>
		<times public="1" params="TIn:TOut" get="inline" set="null" line="132" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a="">
					<c path="times.TIn"/>
					<c path="times.TOut"/>
				</f>
				<f a="value">
					<c path="times.TIn"/>
					<c path="Array"><c path="times.TOut"/></c>
				</f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.</haxe_doc>
		</times>
		<timesi public="1" params="TIn:TOut" get="inline" set="null" line="141" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a=":">
					<c path="timesi.TIn"/>
					<x path="Int"/>
					<c path="timesi.TOut"/>
				</f>
				<f a="value">
					<c path="timesi.TIn"/>
					<c path="Array"><c path="timesi.TOut"/></c>
				</f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.

Callback takes an additional argument `index`.</haxe_doc>
		</timesi>
		<swapArguments public="1" params="T1:T2:TReturn" get="inline" set="null" line="148" static="1">
			<f a="callback">
				<f a=":">
					<c path="swapArguments.T1"/>
					<c path="swapArguments.T2"/>
					<c path="swapArguments.TReturn"/>
				</f>
				<f a=":">
					<c path="swapArguments.T2"/>
					<c path="swapArguments.T1"/>
					<c path="swapArguments.TReturn"/>
				</f>
			</f>
			<haxe_doc>Returns a function that behaves the same as `callback` but has its arguments inverted.</haxe_doc>
		</swapArguments>
		<fn public="1" params="T:T2" set="method" static="1">
			<f a="fn:restArgs">
				<f a="">
					<c path="fn.T"/>
					<c path="fn.T2"/>
				</f>
				<d/>
				<d/>
			</f>
			<haxe_doc>Lambda expressions</haxe_doc>
		</fn>
		<haxe_doc>Extension methods for functions with arity 1 (functions that take exactly 1 argument).</haxe_doc>
	</class>
	<class path="thx.Functions2" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions">
		<memoize public="1" params="T1:T2:TOut" set="method" line="169" static="1">
			<f a="callback:?resolver">
				<f a=":">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.TOut"/>
				</f>
				<f a=":">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="String"/>
				</f>
				<f a=":">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.TOut"/>
				</f>
			</f>
			<haxe_doc>`memoize` wraps `callback` and calls it only once storing the result for future needs.

Computed results are stored in an internal map. The keys to this map are generated by
the resolver function that by default directly converts the arguments into a string.</haxe_doc>
		</memoize>
		<curry public="1" params="A:B:C" set="method" line="183" static="1"><f a="f">
	<f a=":">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
	</f>
	<f a="">
		<c path="curry.A"/>
		<f a="">
			<c path="curry.B"/>
			<c path="curry.C"/>
		</f>
	</f>
</f></curry>
		<join public="1" params="T1:T2" get="inline" set="null" line="190" static="1">
			<f a="fa:fb">
				<f a=":">
					<c path="join.T1"/>
					<c path="join.T2"/>
					<x path="Void"/>
				</f>
				<f a=":">
					<c path="join.T1"/>
					<c path="join.T2"/>
					<x path="Void"/>
				</f>
				<f a="v1:v2">
					<c path="join.T1"/>
					<c path="join.T2"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>`join` creates a function that calls the 2 functions passed as arguments in sequence
and passes the same argument values to the both of them.</haxe_doc>
		</join>
		<negate public="1" params="T1:T2" get="inline" set="null" line="199" static="1">
			<f a="callback">
				<f a=":">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<x path="Bool"/>
				</f>
				<f a="v1:v2">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<x path="Bool"/>
				</f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<fn public="1" params="T:T2:T3" set="method" static="1">
			<f a="fn:restArgs">
				<f a=":">
					<c path="fn.T"/>
					<c path="fn.T2"/>
					<c path="fn.T3"/>
				</f>
				<d/>
				<d/>
			</f>
			<haxe_doc>Lambda expressions</haxe_doc>
		</fn>
		<haxe_doc>Helper class for functions that take 2 arguments</haxe_doc>
	</class>
	<class path="thx.Functions3" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions">
		<memoize public="1" params="T1:T2:T3:TOut" set="method" line="220" static="1">
			<f a="callback:?resolver">
				<f a="::">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.T3"/>
					<c path="memoize.TOut"/>
				</f>
				<f a="::">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.T3"/>
					<c path="String"/>
				</f>
				<f a="::">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.T3"/>
					<c path="memoize.TOut"/>
				</f>
			</f>
			<haxe_doc>`memoize` wraps `callback` and calls it only once storing the result for future needs.

Computed results are stored in an internal map. The keys to this map are generated by
the resolver function that by default directly converts the arguments into a string.</haxe_doc>
		</memoize>
		<negate public="1" params="T1:T2:T3" get="inline" set="null" line="237" static="1">
			<f a="callback">
				<f a="::">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<c path="negate.T3"/>
					<x path="Bool"/>
				</f>
				<f a="v1:v2:v3">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<c path="negate.T3"/>
					<x path="Bool"/>
				</f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<curry public="1" params="A:B:C:D" get="inline" set="null" line="241" static="1"><f a="f">
	<f a="::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
	</f>
	<f a=":">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<f a="">
			<c path="curry.C"/>
			<c path="curry.D"/>
		</f>
	</f>
</f></curry>
		<fn public="1" params="T:T2:T3:T4" set="method" static="1">
			<f a="fn:restArgs">
				<f a="::">
					<c path="fn.T"/>
					<c path="fn.T2"/>
					<c path="fn.T3"/>
					<c path="fn.T4"/>
				</f>
				<d/>
				<d/>
			</f>
			<haxe_doc>Lambda expressions</haxe_doc>
		</fn>
		<haxe_doc>Helper class for functions that take 3 arguments</haxe_doc>
	</class>
	<class path="thx.Functions4" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E" get="inline" set="null" line="253" static="1"><f a="f">
	<f a=":::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
	</f>
	<f a="::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<f a="">
			<c path="curry.D"/>
			<c path="curry.E"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions5" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F" get="inline" set="null" line="258" static="1"><f a="f">
	<f a="::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
	</f>
	<f a=":::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<f a="">
			<c path="curry.E"/>
			<c path="curry.F"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions6" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G" get="inline" set="null" line="263" static="1"><f a="f">
	<f a=":::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
	</f>
	<f a="::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<f a="">
			<c path="curry.F"/>
			<c path="curry.G"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions7" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H" get="inline" set="null" line="268" static="1"><f a="f">
	<f a="::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
	</f>
	<f a=":::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<f a="">
			<c path="curry.G"/>
			<c path="curry.H"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions8" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H:I" get="inline" set="null" line="273" static="1"><f a="f">
	<f a=":::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
	</f>
	<f a="::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<f a="">
			<c path="curry.H"/>
			<c path="curry.I"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions9" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H:I:J" get="inline" set="null" line="278" static="1"><f a="f">
	<f a="::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
	</f>
	<f a=":::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<f a="">
			<c path="curry.I"/>
			<c path="curry.J"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions10" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H:I:J:K" get="inline" set="null" line="283" static="1"><f a="f">
	<f a=":::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
		<c path="curry.K"/>
	</f>
	<f a="::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<f a="">
			<c path="curry.J"/>
			<c path="curry.K"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions11" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H:I:J:K:L" get="inline" set="null" line="288" static="1"><f a="f">
	<f a="::::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
		<c path="curry.K"/>
		<c path="curry.L"/>
	</f>
	<f a=":::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
		<f a="">
			<c path="curry.K"/>
			<c path="curry.L"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions12" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H:I:J:K:L:M" get="inline" set="null" line="293" static="1"><f a="f">
	<f a=":::::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
		<c path="curry.K"/>
		<c path="curry.L"/>
		<c path="curry.M"/>
	</f>
	<f a="::::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
		<c path="curry.K"/>
		<f a="">
			<c path="curry.L"/>
			<c path="curry.M"/>
		</f>
	</f>
</f></curry></class>
	<abstract path="thx.Reader" params="A:B" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions">
		<from><icast><f a="">
	<c path="thx.Reader.A"/>
	<c path="thx.Reader.B"/>
</f></icast></from>
		<this><f a="">
	<c path="thx.Reader.A"/>
	<c path="thx.Reader.B"/>
</f></this>
		<to><icast><f a="">
	<c path="thx.Reader.A"/>
	<c path="thx.Reader.B"/>
</f></icast></to>
		<impl><class path="thx._Functions.Reader_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" private="1" module="thx.Functions">
	<flatMap public="1" params="C" set="method" line="298" static="1">
		<f a="this:f">
			<f a="">
				<c path="thx.Reader.A"/>
				<c path="thx.Reader.B"/>
			</f>
			<f a="">
				<c path="thx.Reader.B"/>
				<f a="">
					<c path="thx.Reader.A"/>
					<c path="flatMap.C"/>
				</f>
			</f>
			<f a="">
				<c path="thx.Reader.A"/>
				<c path="flatMap.C"/>
			</f>
		</f>
		<meta><m n=":impl"/></meta>
	</flatMap>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Functions.Reader_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" private="1" module="thx.Functions">
		<flatMap public="1" params="C" set="method" line="298" static="1">
			<f a="this:f">
				<f a="">
					<c path="thx.Reader.A"/>
					<c path="thx.Reader.B"/>
				</f>
				<f a="">
					<c path="thx.Reader.B"/>
					<f a="">
						<c path="thx.Reader.A"/>
						<c path="flatMap.C"/>
					</f>
				</f>
				<f a="">
					<c path="thx.Reader.A"/>
					<c path="flatMap.C"/>
				</f>
			</f>
			<meta><m n=":impl"/></meta>
		</flatMap>
		<meta><m n=":final"/></meta>
	</class>
	<class path="thx.Functions" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx">
		<equality public="1" params="T" set="method" line="312" static="1">
			<f a="a:b">
				<c path="equality.T"/>
				<c path="equality.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>It provides strict equality between the two arguments `a` and `b`.</haxe_doc>
		</equality>
		<identity public="1" params="T" set="method" line="318" static="1">
			<f a="value">
				<c path="identity.T"/>
				<c path="identity.T"/>
			</f>
			<haxe_doc>The `identity` function returns the value of its argument.</haxe_doc>
		</identity>
		<noop public="1" set="method" line="324" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>`noop` is a function that has no side effects and doesn't return any value.</haxe_doc>
		</noop>
		<with public="1" set="method" static="1"><f a="context:body">
	<d/>
	<d/>
	<d/>
</f></with>
		<fn public="1" params="T" set="method" static="1">
			<f a="fn:restArgs">
				<f a=""><c path="fn.T"/></f>
				<d/>
				<d/>
			</f>
			<haxe_doc>Lambda expressions</haxe_doc>
		</fn>
		<lift public="1" params="T:U" get="inline" set="null" line="353" static="1">
			<f a="t:f">
				<c path="lift.T"/>
				<f a="">
					<c path="lift.T"/>
					<c path="lift.U"/>
				</f>
				<c path="lift.U"/>
			</f>
			<haxe_doc><![CDATA[Converts an instance of type `T` to an instance of type `U`.

Useful as an extension methods for converting a value to another type inside a chain of function calls.

E.g.

```
using thx.Functions;
import thx.Options;

var arr: Array<Int> = [1, 2, 3];
var opt : Option<Array<Int>> = myArray.lift(Options.ofValue);
Assert.same(Some(arr), opt); // true
```]]></haxe_doc>
		</lift>
		<haxe_doc>Generic helper for functions.</haxe_doc>
	</class>
	<class path="thx.Ints" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ints.hx">
		<pattern_parse expr="~/^[ 	
]*[+-]?(\d+|0x[0-9A-F]+)/" line="13" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 	
]*[+-]?(\d+|0x[0-9A-F]+)/</e></m></meta>
		</pattern_parse>
		<abs public="1" get="inline" set="null" line="17" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>`abs` returns the absolute integer value of the passed argument.</haxe_doc>
		</abs>
		<canParse public="1" set="method" line="24" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`canParse` takes a string and return a boolean indicating if the argument can be safely transformed
into a valid integer value.</haxe_doc>
		</canParse>
		<clamp public="1" get="inline" set="null" line="30" static="1">
			<f a="v:min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>`clamp` restricts a value within the specified range.</haxe_doc>
		</clamp>
		<clampSym public="1" get="inline" set="null" line="37" static="1">
			<f a="v:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Like clamp but you only pass one argument (`max`) that is used as the upper limit
and the opposite (additive inverse or `-max`) as the lower limit.</haxe_doc>
		</clampSym>
		<compare public="1" set="method" line="45" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Return a comparison value between `a` and `b`. The number is negative if `a` is
greater than `b`, positive if `a` is lesser than `b` or zero if `a` and `b` are
equals.</haxe_doc>
		</compare>
		<gcd public="1" set="method" line="51" static="1">
			<f a="m:n">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the greater common denominator</haxe_doc>
		</gcd>
		<interpolate public="1" set="method" line="63" static="1">
			<f a="f:a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Given a value `t` between 0 and 1, it interpolates that value in the range between `a` and `b`.

The returned value is a rounded integer.</haxe_doc>
		</interpolate>
		<isEven public="1" get="inline" set="null" line="69" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isEven` returns `true` if `v` is even, `false` otherwise.</haxe_doc>
		</isEven>
		<isOdd public="1" get="inline" set="null" line="75" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isOdd` returns `true` if `v` is odd, `false` otherwise.</haxe_doc>
		</isOdd>
		<lpad public="1" set="method" line="78" static="1">
			<f a="v:?pad:len" v=":&quot;0&quot;:">
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pad : "0" }</e></m></meta>
		</lpad>
		<lcm public="1" set="method" line="90" static="1">
			<f a="m:n">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the least common multiple</haxe_doc>
		</lcm>
		<rpad public="1" get="inline" set="null" line="97" static="1">
			<f a="v:?pad:len" v=":&quot;0&quot;:">
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pad : "0" }</e></m></meta>
		</rpad>
		<max public="1" get="inline" set="null" line="103" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It returns the maximum value between `a` and `b`.</haxe_doc>
		</max>
		<min public="1" get="inline" set="null" line="109" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It returns the minimum value between `a` and `b`.</haxe_doc>
		</min>
		<parse public="1" set="method" line="116" static="1">
			<f a="s:?base">
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Parses a string into an Int value using the provided base. Default base is 16 for strings that begin with
0x (after optional sign) or 10 otherwise.</haxe_doc>
		</parse>
		<random public="1" get="inline" set="null" line="177" static="1">
			<f a="?min:max" v="0:">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ min : 0 }</e></m></meta>
			<haxe_doc>Integer random function that includes both upper and lower limits. A roll on a die with
6 sides would be the equivalent to the following:

```haxe
var d6 = Ints.random(1, 6);
```</haxe_doc>
		</random>
		<range public="1" set="method" line="185" static="1">
			<f a="start:?stop:?step" v="::1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ step : 1 }</e></m></meta>
			<haxe_doc>`range` creates an array of integer containing values between  start (included) and stop (excluded)
with a progression set by `step`. A negative value for `step` can be used but in that
case start will need to be a greater value than stop.</haxe_doc>
		</range>
		<rangeIter public="1" set="method" line="199" static="1">
			<f a="start:?stop:?step" v="::1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="Iterator"><x path="Int"/></t>
			</f>
			<meta><m n=":value"><e>{ step : 1 }</e></m></meta>
		</rangeIter>
		<BASE expr="&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;" line="204" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"0123456789abcdefghijklmnopqrstuvwxyz"</e></m></meta>
		</BASE>
		<toString public="1" set="method" line="210" static="1">
			<f a="value:base">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Transform an `Int` value to a `String` using the specified `base`</haxe_doc>
		</toString>
		<toBase public="1" get="inline" set="null" line="236" static="1">
			<f a="value:base">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Alias for toString, mainly for disambig. with standard toString using mega Thx.
Should toString just be renamed to this? At least with this, existing code
doesn't break.</haxe_doc>
		</toBase>
		<toBool public="1" get="inline" set="null" line="242" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Converts an integer value into a boolean. Any value different from `0` will evaluate to `true`.</haxe_doc>
		</toBool>
		<toInt public="1" get="inline" set="null" line="248" static="1">
			<f a="s:?base">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Alias for parse, mainly for disambiguation with other parses using mega Thx.</haxe_doc>
		</toInt>
		<sign public="1" get="inline" set="null" line="254" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>`sign` returns `-1` if `value` is a negative number, `1` otherwise.</haxe_doc>
		</sign>
		<wrapCircular public="1" set="method" line="260" static="1">
			<f a="v:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `wrap`, it works for numbers between 0 and `max`.</haxe_doc>
		</wrapCircular>
		<order public="1" set="null" expr="function(i0, i1) {
	return if (i0 &gt; i1) GT else if (i0 == i1) EQ else LT;
}" line="268" static="1">
			<x path="thx.Ord"><x path="Int"/></x>
			<meta><m n=":value"><e><![CDATA[function(i0, i1) {
	return if (i0 > i1) GT else if (i0 == i1) EQ else LT;
}]]></e></m></meta>
		</order>
		<monoid public="1" set="null" expr="{ zero : 0, append : function(a:Int, b:Int) return a + b }" line="271" static="1">
			<x path="thx.Monoid"><x path="Int"/></x>
			<meta><m n=":value"><e>{ zero : 0, append : function(a:Int, b:Int) return a + b }</e></m></meta>
		</monoid>
		<haxe_doc>Extension methods for integer values.</haxe_doc>
	</class>
	<class path="thx.RangeIterator" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ints.hx" module="thx.Ints">
		<current><x path="Int"/></current>
		<stop><t path="Null"><x path="Int"/></t></stop>
		<step><x path="Int"/></step>
		<hasNext public="1" set="method" line="285"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="289"><f a=""><x path="Int"/></f></next>
		<new public="1" set="method" line="279">
			<f a="start:?stop:?step" v=":null:1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ step : 1, stop : null }</e></m></meta>
		</new>
	</class>
	<class path="thx.Iterables" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Iterables.hx">
		<all public="1" params="T" set="method" line="23" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="all.T"/></t>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for all elements in the iterable.</haxe_doc>
		</all>
		<any public="1" params="T" set="method" line="29" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="any.T"/></t>
				<f a="">
					<c path="any.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for at least one element in the iterable.</haxe_doc>
		</any>
		<eachPair public="1" params="TIn:TOut" get="inline" set="null" line="35" static="1">
			<f a="it:handler">
				<t path="Iterable"><c path="eachPair.TIn"/></t>
				<f a=":">
					<c path="eachPair.TIn"/>
					<c path="eachPair.TIn"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.eachPair`.</haxe_doc>
		</eachPair>
		<equals public="1" params="T" get="inline" set="null" line="43" static="1">
			<f a="a:b:?equality">
				<t path="Iterable"><c path="equals.T"/></t>
				<t path="Iterable"><c path="equals.T"/></t>
				<f a=":">
					<c path="equals.T"/>
					<c path="equals.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>It compares the lengths and elements of two given iterables and returns `true` if they match.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</equals>
		<filter public="1" params="T" get="inline" set="null" line="49" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="filter.T"/></t>
				<f a="">
					<c path="filter.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.T"/></c>
			</f>
			<haxe_doc>Refer to `Array.filter`.</haxe_doc>
		</filter>
		<find public="1" params="T:TFind" get="inline" set="null" line="55" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.find`.</haxe_doc>
		</find>
		<findOption public="1" params="T:TFind" get="inline" set="null" line="61" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="findOption.T"/></t>
				<f a="">
					<c path="findOption.T"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="findOption.T"/></e>
			</f>
			<haxe_doc>Refer to `thx.Arrays.findOption`.</haxe_doc>
		</findOption>
		<first public="1" params="T:TFind" get="inline" set="null" line="67" static="1">
			<f a="it">
				<t path="Iterable"><c path="first.T"/></t>
				<t path="Null"><c path="first.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.first`.</haxe_doc>
		</first>
		<get public="1" params="T" get="inline" set="null" line="73" static="1">
			<f a="it:index">
				<t path="Iterable"><c path="get.T"/></t>
				<x path="Int"/>
				<t path="Null"><c path="get.T"/></t>
			</f>
			<haxe_doc>Get the element at the `index` position.</haxe_doc>
		</get>
		<getOption public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="it:index">
				<t path="Iterable"><c path="getOption.T"/></t>
				<x path="Int"/>
				<e path="haxe.ds.Option"><c path="getOption.T"/></e>
			</f>
			<haxe_doc>Refer to `thx.Arrays.getOption`.</haxe_doc>
		</getOption>
		<last public="1" params="T:TFind" get="inline" set="null" line="85" static="1">
			<f a="it">
				<t path="Iterable"><c path="last.T"/></t>
				<t path="Null"><c path="last.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.last`.</haxe_doc>
		</last>
		<hasElements public="1" params="T" get="inline" set="null" line="91" static="1">
			<f a="it">
				<t path="Iterable"><c path="hasElements.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the iterable contains at least one element.</haxe_doc>
		</hasElements>
		<indexOf public="1" params="T" get="inline" set="null" line="97" static="1">
			<f a="it:element">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of element in the iterable. It returns -1 if not found.</haxe_doc>
		</indexOf>
		<isEmpty public="1" params="T" get="inline" set="null" line="103" static="1">
			<f a="it">
				<t path="Iterable"><c path="isEmpty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.isEmpty`.</haxe_doc>
		</isEmpty>
		<isIterable public="1" set="method" line="112" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isIterable` checks that the passed argument has all the requirements to be an `Iterable`.

Note that no type checking is performed at runtime, only if a method `iterator` exists regardless
of its signature.</haxe_doc>
		</isIterable>
		<map public="1" params="T:S" get="inline" set="null" line="121" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.T"/></t>
				<f a="">
					<c path="map.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Refer to `Array.map`.</haxe_doc>
		</map>
		<fmap public="1" params="T:S" get="inline" set="null" line="127" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="fmap.T"/></t>
				<f a="">
					<c path="fmap.T"/>
					<c path="fmap.S"/>
				</f>
				<t path="Iterable"><c path="fmap.S"/></t>
			</f>
			<haxe_doc>* A proper Functor-like map function that preverses iterable structure.</haxe_doc>
		</fmap>
		<mapi public="1" params="T:S" get="inline" set="null" line="133" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.T"/></t>
				<f a=":">
					<c path="mapi.T"/>
					<x path="Int"/>
					<c path="mapi.S"/>
				</f>
				<c path="Array"><c path="mapi.S"/></c>
			</f>
			<haxe_doc>Refer to `thx.Arrays.mapi`.</haxe_doc>
		</mapi>
		<fmapi public="1" params="T:S" get="inline" set="null" line="139" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="fmapi.T"/></t>
				<f a=":">
					<c path="fmapi.T"/>
					<x path="Int"/>
					<c path="fmapi.S"/>
				</f>
				<t path="Iterable"><c path="fmapi.S"/></t>
			</f>
			<haxe_doc>* A proper Functor-like mapi function that preverses iterable structure, with index information.</haxe_doc>
		</fmapi>
		<order public="1" params="T" get="inline" set="null" line="145" static="1">
			<f a="it:sort">
				<t path="Iterable"><c path="order.T"/></t>
				<f a=":">
					<c path="order.T"/>
					<c path="order.T"/>
					<x path="Int"/>
				</f>
				<c path="Array"><c path="order.T"/></c>
			</f>
			<haxe_doc>Refer to `thx.Arrays.order`.</haxe_doc>
		</order>
		<reduce public="1" params="TElement:TAcc" get="inline" set="null" line="151" static="1">
			<f a="it:callback:initial">
				<t path="Iterable"><c path="reduce.TElement"/></t>
				<f a=":">
					<c path="reduce.TAcc"/>
					<c path="reduce.TElement"/>
					<c path="reduce.TAcc"/>
				</f>
				<c path="reduce.TAcc"/>
				<c path="reduce.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.reduce`.</haxe_doc>
		</reduce>
		<reducei public="1" params="TElement:TAcc" get="inline" set="null" line="157" static="1">
			<f a="it:callback:initial">
				<t path="Iterable"><c path="reducei.TElement"/></t>
				<f a="::">
					<c path="reducei.TAcc"/>
					<c path="reducei.TElement"/>
					<x path="Int"/>
					<c path="reducei.TAcc"/>
				</f>
				<c path="reducei.TAcc"/>
				<c path="reducei.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.reducei`.</haxe_doc>
		</reducei>
		<toArray public="1" params="T" get="inline" set="null" line="163" static="1">
			<f a="it">
				<t path="Iterable"><c path="toArray.T"/></t>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc><![CDATA[`toArray` transforms an `Iterable<T>` into an `Array<T>`.]]></haxe_doc>
		</toArray>
		<minBy public="1" params="A:B" set="method" line="170" static="1">
			<f a="it:f:ord">
				<t path="Iterable"><c path="minBy.A"/></t>
				<f a="">
					<c path="minBy.A"/>
					<c path="minBy.B"/>
				</f>
				<x path="thx.Ord"><c path="minBy.B"/></x>
				<e path="haxe.ds.Option"><c path="minBy.A"/></e>
			</f>
			<haxe_doc>`minBy` finds the minimum value included in the iterable, as compared by some
function of the values contained within the iterable.</haxe_doc>
		</minBy>
		<maxBy public="1" params="A:B" get="inline" set="null" line="182" static="1">
			<f a="it:f:ord">
				<t path="Iterable"><c path="maxBy.A"/></t>
				<f a="">
					<c path="maxBy.A"/>
					<c path="maxBy.B"/>
				</f>
				<x path="thx.Ord"><c path="maxBy.B"/></x>
				<e path="haxe.ds.Option"><c path="maxBy.A"/></e>
			</f>
			<haxe_doc>`maxBy` finds the maximum value included in the iterable, as compared by some
function of the values contained within the iterable.</haxe_doc>
		</maxBy>
		<min public="1" params="A" get="inline" set="null" line="189" static="1">
			<f a="it:ord">
				<t path="Iterable"><c path="min.A"/></t>
				<x path="thx.Ord"><c path="min.A"/></x>
				<e path="haxe.ds.Option"><c path="min.A"/></e>
			</f>
			<haxe_doc>`min` finds the minimum value included in the iterable, accorrding
to the specified ordering.</haxe_doc>
		</min>
		<max public="1" params="A" get="inline" set="null" line="196" static="1">
			<f a="it:ord">
				<t path="Iterable"><c path="max.A"/></t>
				<x path="thx.Ord"><c path="max.A"/></x>
				<e path="haxe.ds.Option"><c path="max.A"/></e>
			</f>
			<haxe_doc>`max` finds the maximum value included in the iterable, accorrding
to the specified ordering.</haxe_doc>
		</max>
		<extremaBy public="1" params="A:B" set="method" line="204" static="1">
			<f a="it:f:ord">
				<t path="Iterable"><c path="extremaBy.A"/></t>
				<f a="">
					<c path="extremaBy.A"/>
					<c path="extremaBy.B"/>
				</f>
				<x path="thx.Ord"><c path="extremaBy.B"/></x>
				<e path="haxe.ds.Option"><t path="thx.Tuple">
	<c path="extremaBy.A"/>
	<c path="extremaBy.A"/>
</t></e>
			</f>
			<haxe_doc>`extremaBy` finds both the minimum and maximum value included in the iterable,
as compared by some function of the values contained within the iterable and
the specified ordering.</haxe_doc>
		</extremaBy>
		<extrema public="1" params="A" get="inline" set="null" line="221" static="1">
			<f a="it:ord">
				<t path="Iterable"><c path="extrema.A"/></t>
				<x path="thx.Ord"><c path="extrema.A"/></x>
				<e path="haxe.ds.Option"><t path="thx.Tuple">
	<c path="extrema.A"/>
	<c path="extrema.A"/>
</t></e>
			</f>
			<haxe_doc>`extrema` finds both the minimum and maximum value included in the iterable,
as compared by the specified ordering.</haxe_doc>
		</extrema>
		<takeUntil public="1" params="A" set="method" line="227" static="1">
			<f a="it:fn">
				<t path="Iterable"><c path="takeUntil.A"/></t>
				<f a="">
					<c path="takeUntil.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="takeUntil.A"/></c>
			</f>
			<haxe_doc>Take values until the first time `fn` produced false.</haxe_doc>
		</takeUntil>
		<dropLeft public="1" params="A" set="method" line="233" static="1">
			<f a="itr:n">
				<t path="Iterable"><c path="dropLeft.A"/></t>
				<x path="Int"/>
				<t path="Iterable"><c path="dropLeft.A"/></t>
			</f>
			<haxe_doc>Produces an Array from `a[n]` to the last element of `a`.</haxe_doc>
		</dropLeft>
		<dropUntil public="1" params="A" set="method" line="253" static="1">
			<f a="it:fn">
				<t path="Iterable"><c path="dropUntil.A"/></t>
				<f a="">
					<c path="dropUntil.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="dropUntil.A"/></c>
			</f>
			<haxe_doc>Drop values until the first time `fn` produced false.</haxe_doc>
		</dropUntil>
		<unionBy public="1" params="T" set="method" line="260" static="1">
			<f a="a:b:eq">
				<t path="Iterable"><c path="unionBy.T"/></t>
				<t path="Iterable"><c path="unionBy.T"/></t>
				<f a=":">
					<c path="unionBy.T"/>
					<c path="unionBy.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="unionBy.T"/></c>
			</f>
			<haxe_doc>Returns an Array that contains all elements from a which are also elements of b.
    If a contains duplicates, so will the result.</haxe_doc>
		</unionBy>
		<differenceBy public="1" params="T" set="method" line="274" static="1">
			<f a="a:b:eq">
				<t path="Iterable"><c path="differenceBy.T"/></t>
				<t path="Iterable"><c path="differenceBy.T"/></t>
				<f a=":">
					<c path="differenceBy.T"/>
					<c path="differenceBy.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="differenceBy.T"/></c>
			</f>
			<haxe_doc>Returns an Array that contains all elements from a which are not elements of b.
    If a contains duplicates, the resulting Array contains duplicates.</haxe_doc>
		</differenceBy>
		<unzip public="1" params="T1:T2" set="method" line="284" static="1">
			<f a="it">
				<t path="Iterable"><x path="thx.Tuple2">
	<c path="unzip.T1"/>
	<c path="unzip.T2"/>
</x></t>
				<x path="thx.Tuple2">
					<c path="Array"><c path="unzip.T1"/></c>
					<c path="Array"><c path="unzip.T2"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterable of Tuple2<T1, T2> to a Tuple2<Array<T1>, Array<T2>>.]]></haxe_doc>
		</unzip>
		<unzip3 public="1" params="T1:T2:T3" set="method" line="289" static="1">
			<f a="it">
				<t path="Iterable"><x path="thx.Tuple3">
	<c path="unzip3.T1"/>
	<c path="unzip3.T2"/>
	<c path="unzip3.T3"/>
</x></t>
				<x path="thx.Tuple3">
					<c path="Array"><c path="unzip3.T1"/></c>
					<c path="Array"><c path="unzip3.T2"/></c>
					<c path="Array"><c path="unzip3.T3"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterable of Tuple3<T1, T2, T3> to a Tuple3<Array<T1>, Array<T2>, Array<T3>>.]]></haxe_doc>
		</unzip3>
		<unzip4 public="1" params="T1:T2:T3:T4" set="method" line="295" static="1">
			<f a="it">
				<t path="Iterable"><x path="thx.Tuple4">
	<c path="unzip4.T1"/>
	<c path="unzip4.T2"/>
	<c path="unzip4.T3"/>
	<c path="unzip4.T4"/>
</x></t>
				<x path="thx.Tuple4">
					<c path="Array"><c path="unzip4.T1"/></c>
					<c path="Array"><c path="unzip4.T2"/></c>
					<c path="Array"><c path="unzip4.T3"/></c>
					<c path="Array"><c path="unzip4.T4"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterable of Tuple4<T1, T2, T3, T4> to a Tuple4<Array<T1>, Array<T2>, Array<T3>, Array<T4>>.]]></haxe_doc>
		</unzip4>
		<unzip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="301" static="1">
			<f a="it">
				<t path="Iterable"><x path="thx.Tuple5">
	<c path="unzip5.T1"/>
	<c path="unzip5.T2"/>
	<c path="unzip5.T3"/>
	<c path="unzip5.T4"/>
	<c path="unzip5.T5"/>
</x></t>
				<x path="thx.Tuple5">
					<c path="Array"><c path="unzip5.T1"/></c>
					<c path="Array"><c path="unzip5.T2"/></c>
					<c path="Array"><c path="unzip5.T3"/></c>
					<c path="Array"><c path="unzip5.T4"/></c>
					<c path="Array"><c path="unzip5.T5"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterable of Tuple5<T1, T2, T3, T4, T5> to a Tuple5<Array<T1>, Array<T2>, Array<T3>, Array<T4>, Array<T5>>.]]></haxe_doc>
		</unzip5>
		<zip public="1" params="T1:T2" set="method" line="307" static="1">
			<f a="it1:it2">
				<t path="Iterable"><c path="zip.T1"/></t>
				<t path="Iterable"><c path="zip.T2"/></t>
				<c path="Array"><x path="thx.Tuple2">
	<c path="zip.T1"/>
	<c path="zip.T2"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of two iterables in an array of `Tuple2`.</haxe_doc>
		</zip>
		<zip3 public="1" params="T1:T2:T3" set="method" line="313" static="1">
			<f a="it1:it2:it3">
				<t path="Iterable"><c path="zip3.T1"/></t>
				<t path="Iterable"><c path="zip3.T2"/></t>
				<t path="Iterable"><c path="zip3.T3"/></t>
				<c path="Array"><x path="thx.Tuple3">
	<c path="zip3.T1"/>
	<c path="zip3.T2"/>
	<c path="zip3.T3"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of three iterables in an array of `Tuple3`.</haxe_doc>
		</zip3>
		<zip4 public="1" params="T1:T2:T3:T4" set="method" line="319" static="1">
			<f a="it1:it2:it3:it4">
				<t path="Iterable"><c path="zip4.T1"/></t>
				<t path="Iterable"><c path="zip4.T2"/></t>
				<t path="Iterable"><c path="zip4.T3"/></t>
				<t path="Iterable"><c path="zip4.T4"/></t>
				<c path="Array"><x path="thx.Tuple4">
	<c path="zip4.T1"/>
	<c path="zip4.T2"/>
	<c path="zip4.T3"/>
	<c path="zip4.T4"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of four iterables in an array of `Tuple4`.</haxe_doc>
		</zip4>
		<zip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="325" static="1">
			<f a="it1:it2:it3:it4:it5">
				<t path="Iterable"><c path="zip5.T1"/></t>
				<t path="Iterable"><c path="zip5.T2"/></t>
				<t path="Iterable"><c path="zip5.T3"/></t>
				<t path="Iterable"><c path="zip5.T4"/></t>
				<t path="Iterable"><c path="zip5.T5"/></t>
				<c path="Array"><x path="thx.Tuple5">
	<c path="zip5.T1"/>
	<c path="zip5.T2"/>
	<c path="zip5.T3"/>
	<c path="zip5.T4"/>
	<c path="zip5.T5"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of five iterables in an array of `Tuple5`.</haxe_doc>
		</zip5>
		<haxe_doc>Helper class for `Iterable`. Implementations usually fallback on `thx.Iterators`.

For documentation of specific methods refer to the equivalent methods in `thx.Arrays`;</haxe_doc>
	</class>
	<class path="thx.Iterators" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Iterators.hx">
		<all public="1" params="T" set="method" line="19" static="1">
			<f a="it:predicate">
				<t path="Iterator"><c path="all.T"/></t>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for all elements in the iterator.</haxe_doc>
		</all>
		<any public="1" params="T" set="method" line="29" static="1">
			<f a="it:predicate">
				<t path="Iterator"><c path="any.T"/></t>
				<f a="">
					<c path="any.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for at least one element in the iterator.</haxe_doc>
		</any>
		<equals public="1" params="T" set="method" line="41" static="1">
			<f a="a:b:?equality">
				<t path="Iterator"><c path="equals.T"/></t>
				<t path="Iterator"><c path="equals.T"/></t>
				<f a=":">
					<c path="equals.T"/>
					<c path="equals.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>It compares the lengths and elements of two given iterators and returns `true` if they match.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</equals>
		<get public="1" params="T" set="method" line="62" static="1">
			<f a="it:index">
				<t path="Iterator"><c path="get.T"/></t>
				<x path="Int"/>
				<t path="Null"><c path="get.T"/></t>
			</f>
			<haxe_doc>Get the element at the `index` position.</haxe_doc>
		</get>
		<getOption public="1" params="T" set="method" line="74" static="1">
			<f a="it:index">
				<t path="Iterator"><c path="getOption.T"/></t>
				<x path="Int"/>
				<e path="haxe.ds.Option"><c path="getOption.T"/></e>
			</f>
			<haxe_doc>Refer to `thx.Arrays.getOption`</haxe_doc>
		</getOption>
		<eachPair public="1" params="TIn:TOut" set="method" line="80" static="1">
			<f a="it:handler">
				<t path="Iterator"><c path="eachPair.TIn"/></t>
				<f a=":">
					<c path="eachPair.TIn"/>
					<c path="eachPair.TIn"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.eachPair`.</haxe_doc>
		</eachPair>
		<filter public="1" params="TElement" set="method" line="86" static="1">
			<f a="it:predicate">
				<t path="Iterator"><c path="filter.TElement"/></t>
				<f a="">
					<c path="filter.TElement"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.TElement"/></c>
			</f>
			<haxe_doc>Refer to `Array.filter`.</haxe_doc>
		</filter>
		<find public="1" params="T:TFind" set="method" line="96" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.find`.</haxe_doc>
		</find>
		<findOption public="1" params="T:TFind" set="method" line="106" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="findOption.T"/></t>
				<f a="">
					<c path="findOption.T"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="findOption.T"/></e>
			</f>
			<haxe_doc>Refer to `thx.Arrays.findOption`.</haxe_doc>
		</findOption>
		<first public="1" params="T:TFind" set="method" line="112" static="1">
			<f a="it">
				<t path="Iterator"><c path="first.T"/></t>
				<t path="Null"><c path="first.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.first`.</haxe_doc>
		</first>
		<hasElements public="1" params="T" get="inline" set="null" line="118" static="1">
			<f a="it">
				<t path="Iterator"><c path="hasElements.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the iterator contains at least one element.</haxe_doc>
		</hasElements>
		<indexOf public="1" params="T" set="method" line="124" static="1">
			<f a="it:element">
				<t path="Iterator"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of element in the iterator. It returns -1 if not found.</haxe_doc>
		</indexOf>
		<isEmpty public="1" params="T" get="inline" set="null" line="137" static="1">
			<f a="it">
				<t path="Iterator"><c path="isEmpty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.isEmpty`.</haxe_doc>
		</isEmpty>
		<isIterator public="1" set="method" line="146" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isIterator` checks that the passed argument has all the requirements to be an `Iterator`.

Note that no type checking is performed at runtime, the method only checks that the value
has two fields `next` and `hasNext` and that they are both functions.</haxe_doc>
		</isIterator>
		<last public="1" params="T:TFind" set="method" line="155" static="1">
			<f a="it">
				<t path="Iterator"><c path="last.T"/></t>
				<t path="Null"><c path="last.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.last`.</haxe_doc>
		</last>
		<forEach public="1" params="A" set="method" line="165" static="1">
			<f a="it:proc">
				<t path="Iterator"><c path="forEach.A"/></t>
				<f a="">
					<c path="forEach.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Effectful traversal. Use this instead of .map if producing side-effects.
This method consumes the original iterator.</haxe_doc>
		</forEach>
		<map public="1" params="T:S" set="method" line="174" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="map.T"/></t>
				<f a="">
					<c path="map.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Refer to `Array.map`.</haxe_doc>
		</map>
		<fmap public="1" params="T:S" set="method" line="185" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="fmap.T"/></t>
				<f a="">
					<c path="fmap.T"/>
					<c path="fmap.S"/>
				</f>
				<t path="Iterator"><c path="fmap.S"/></t>
			</f>
			<haxe_doc>* Produce a new Iterator that lazily applies the provided function to
   * each element of this iterator.</haxe_doc>
		</fmap>
		<mapi public="1" params="T:S" set="method" line="191" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="mapi.T"/></t>
				<f a=":">
					<c path="mapi.T"/>
					<x path="Int"/>
					<c path="mapi.S"/>
				</f>
				<c path="Array"><c path="mapi.S"/></c>
			</f>
			<haxe_doc>Refer to `thx.Arrays.mapi`.</haxe_doc>
		</mapi>
		<fmapi public="1" params="T:S" set="method" line="204" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="fmapi.T"/></t>
				<f a=":">
					<c path="fmapi.T"/>
					<x path="Int"/>
					<c path="fmapi.S"/>
				</f>
				<t path="Iterator"><c path="fmapi.S"/></t>
			</f>
			<haxe_doc>* Produce a new Iterator that lazily applies the provided function to
   * each element of this iterator and an index value that increases with
   * each application.</haxe_doc>
		</fmapi>
		<order public="1" params="T" set="method" line="210" static="1">
			<f a="it:sort">
				<t path="Iterator"><c path="order.T"/></t>
				<f a=":">
					<c path="order.T"/>
					<c path="order.T"/>
					<x path="Int"/>
				</f>
				<c path="Array"><c path="order.T"/></c>
			</f>
			<haxe_doc>Refer to `thx.Arrays.order`.</haxe_doc>
		</order>
		<reduce public="1" params="TElement:TAcc" set="method" line="219" static="1">
			<f a="it:callback:initial">
				<t path="Iterator"><c path="reduce.TElement"/></t>
				<f a=":">
					<c path="reduce.TAcc"/>
					<c path="reduce.TElement"/>
					<c path="reduce.TAcc"/>
				</f>
				<c path="reduce.TAcc"/>
				<c path="reduce.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.reduce`.</haxe_doc>
		</reduce>
		<reducei public="1" params="TElement:TAcc" set="method" line="230" static="1">
			<f a="it:callback:initial">
				<t path="Iterator"><c path="reducei.TElement"/></t>
				<f a="::">
					<c path="reducei.TAcc"/>
					<c path="reducei.TElement"/>
					<x path="Int"/>
					<c path="reducei.TAcc"/>
				</f>
				<c path="reducei.TAcc"/>
				<c path="reducei.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.reducei`.</haxe_doc>
		</reducei>
		<foldLeft public="1" params="A:B" set="method" line="235" static="1"><f a="it:zero:f">
	<t path="Iterator"><c path="foldLeft.A"/></t>
	<c path="foldLeft.B"/>
	<f a=":">
		<c path="foldLeft.B"/>
		<c path="foldLeft.A"/>
		<c path="foldLeft.B"/>
	</f>
	<c path="foldLeft.B"/>
</f></foldLeft>
		<foldMap public="1" params="A:B" set="method" line="241" static="1">
			<f a="it:f:m">
				<t path="Iterator"><c path="foldMap.A"/></t>
				<f a="">
					<c path="foldMap.A"/>
					<c path="foldMap.B"/>
				</f>
				<x path="thx.Monoid"><c path="foldMap.B"/></x>
				<c path="foldMap.B"/>
			</f>
			<haxe_doc>* Fold by mapping the contained values into some monoidal type and reducing with that monoid.</haxe_doc>
		</foldMap>
		<takeUntil public="1" params="A" set="method" line="247" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="takeUntil.A"/></t>
				<f a="">
					<c path="takeUntil.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="takeUntil.A"/></c>
			</f>
			<haxe_doc>Take values until the first time `fn` produced false.</haxe_doc>
		</takeUntil>
		<dropUntil public="1" params="A" set="method" line="261" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="dropUntil.A"/></t>
				<f a="">
					<c path="dropUntil.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="dropUntil.A"/></c>
			</f>
			<haxe_doc>Drop values until the first time `fn` produces false.</haxe_doc>
		</dropUntil>
		<toArray public="1" params="T" set="method" line="280" static="1">
			<f a="it">
				<t path="Iterator"><c path="toArray.T"/></t>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc><![CDATA[`toArray` transforms an `Iterator<T>` into an `Array<T>`.]]></haxe_doc>
		</toArray>
		<unzip public="1" params="T1:T2" set="method" line="290" static="1">
			<f a="it">
				<t path="Iterator"><x path="thx.Tuple2">
	<c path="unzip.T1"/>
	<c path="unzip.T2"/>
</x></t>
				<x path="thx.Tuple2">
					<c path="Array"><c path="unzip.T1"/></c>
					<c path="Array"><c path="unzip.T2"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterator of Tuple2<T1, T2> to a Tuple2<Array<T1>, Array<T2>>.]]></haxe_doc>
		</unzip>
		<unzip3 public="1" params="T1:T2:T3" set="method" line="302" static="1">
			<f a="it">
				<t path="Iterator"><x path="thx.Tuple3">
	<c path="unzip3.T1"/>
	<c path="unzip3.T2"/>
	<c path="unzip3.T3"/>
</x></t>
				<x path="thx.Tuple3">
					<c path="Array"><c path="unzip3.T1"/></c>
					<c path="Array"><c path="unzip3.T2"/></c>
					<c path="Array"><c path="unzip3.T3"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterator of Tuple3<T1, T2, T3> to a Tuple3<Array<T1>, Array<T2>, Array<T3>>.]]></haxe_doc>
		</unzip3>
		<unzip4 public="1" params="T1:T2:T3:T4" set="method" line="315" static="1">
			<f a="it">
				<t path="Iterator"><x path="thx.Tuple4">
	<c path="unzip4.T1"/>
	<c path="unzip4.T2"/>
	<c path="unzip4.T3"/>
	<c path="unzip4.T4"/>
</x></t>
				<x path="thx.Tuple4">
					<c path="Array"><c path="unzip4.T1"/></c>
					<c path="Array"><c path="unzip4.T2"/></c>
					<c path="Array"><c path="unzip4.T3"/></c>
					<c path="Array"><c path="unzip4.T4"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterator of Tuple4<T1, T2, T3, T4> to a Tuple4<Array<T1>, Array<T2>, Array<T3>, Array<T4>>.]]></haxe_doc>
		</unzip4>
		<unzip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="329" static="1">
			<f a="it">
				<t path="Iterator"><x path="thx.Tuple5">
	<c path="unzip5.T1"/>
	<c path="unzip5.T2"/>
	<c path="unzip5.T3"/>
	<c path="unzip5.T4"/>
	<c path="unzip5.T5"/>
</x></t>
				<x path="thx.Tuple5">
					<c path="Array"><c path="unzip5.T1"/></c>
					<c path="Array"><c path="unzip5.T2"/></c>
					<c path="Array"><c path="unzip5.T3"/></c>
					<c path="Array"><c path="unzip5.T4"/></c>
					<c path="Array"><c path="unzip5.T5"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterator of Tuple5<T1, T2, T3, T4, T5> to a Tuple5<Array<T1>, Array<T2>, Array<T3>, Array<T4>, Array<T5>>.]]></haxe_doc>
		</unzip5>
		<zip public="1" params="T1:T2" set="method" line="344" static="1">
			<f a="it1:it2">
				<t path="Iterator"><c path="zip.T1"/></t>
				<t path="Iterator"><c path="zip.T2"/></t>
				<c path="Array"><x path="thx.Tuple2">
	<c path="zip.T1"/>
	<c path="zip.T2"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of two iterators in an array of `Tuple2`.</haxe_doc>
		</zip>
		<zip3 public="1" params="T1:T2:T3" set="method" line="354" static="1">
			<f a="it1:it2:it3">
				<t path="Iterator"><c path="zip3.T1"/></t>
				<t path="Iterator"><c path="zip3.T2"/></t>
				<t path="Iterator"><c path="zip3.T3"/></t>
				<c path="Array"><x path="thx.Tuple3">
	<c path="zip3.T1"/>
	<c path="zip3.T2"/>
	<c path="zip3.T3"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of three iterators in an array of `Tuple3`.</haxe_doc>
		</zip3>
		<zip4 public="1" params="T1:T2:T3:T4" set="method" line="364" static="1">
			<f a="it1:it2:it3:it4">
				<t path="Iterator"><c path="zip4.T1"/></t>
				<t path="Iterator"><c path="zip4.T2"/></t>
				<t path="Iterator"><c path="zip4.T3"/></t>
				<t path="Iterator"><c path="zip4.T4"/></t>
				<c path="Array"><x path="thx.Tuple4">
	<c path="zip4.T1"/>
	<c path="zip4.T2"/>
	<c path="zip4.T3"/>
	<c path="zip4.T4"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of four iterators in an array of `Tuple4`.</haxe_doc>
		</zip4>
		<zip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="374" static="1">
			<f a="it1:it2:it3:it4:it5">
				<t path="Iterator"><c path="zip5.T1"/></t>
				<t path="Iterator"><c path="zip5.T2"/></t>
				<t path="Iterator"><c path="zip5.T3"/></t>
				<t path="Iterator"><c path="zip5.T4"/></t>
				<t path="Iterator"><c path="zip5.T5"/></t>
				<c path="Array"><x path="thx.Tuple5">
	<c path="zip5.T1"/>
	<c path="zip5.T2"/>
	<c path="zip5.T3"/>
	<c path="zip5.T4"/>
	<c path="zip5.T5"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of five iterators in an array of `Tuple5`.</haxe_doc>
		</zip5>
		<haxe_doc>Helper class to work with `Iterator`.

For documentation of specific methods refer to the equivalent methods in `thx.Arrays`;</haxe_doc>
	</class>
	<class path="thx.MapIterator" params="A:B" file="/Users/francoponticelli/projects/thx.core/src/thx/Iterators.hx" module="thx.Iterators">
		<base><t path="Iterator"><c path="thx.MapIterator.A"/></t></base>
		<f><f a="">
	<c path="thx.MapIterator.A"/>
	<c path="thx.MapIterator.B"/>
</f></f>
		<next public="1" set="method" line="391"><f a=""><c path="thx.MapIterator.B"/></f></next>
		<hasNext public="1" set="method" line="394"><f a=""><x path="Bool"/></f></hasNext>
		<new public="1" set="method" line="386"><f a="base:f">
	<t path="Iterator"><c path="thx.MapIterator.A"/></t>
	<f a="">
		<c path="thx.MapIterator.A"/>
		<c path="thx.MapIterator.B"/>
	</f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.MapIIterator" params="A:B" file="/Users/francoponticelli/projects/thx.core/src/thx/Iterators.hx" module="thx.Iterators">
		<base><t path="Iterator"><c path="thx.MapIIterator.A"/></t></base>
		<f><f a=":">
	<c path="thx.MapIIterator.A"/>
	<x path="Int"/>
	<c path="thx.MapIIterator.B"/>
</f></f>
		<i expr="0" line="401">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</i>
		<next public="1" set="method" line="408"><f a=""><c path="thx.MapIIterator.B"/></f></next>
		<hasNext public="1" set="method" line="414"><f a=""><x path="Bool"/></f></hasNext>
		<new public="1" set="method" line="403"><f a="base:f">
	<t path="Iterator"><c path="thx.MapIIterator.A"/></t>
	<f a=":">
		<c path="thx.MapIIterator.A"/>
		<x path="Int"/>
		<c path="thx.MapIIterator.B"/>
	</f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.Maps" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Maps.hx">
		<copyTo public="1" params="TKey:TValue" set="method" line="22" static="1">
			<f a="src:dst">
				<c path="haxe.IMap">
					<c path="copyTo.TKey"/>
					<c path="copyTo.TValue"/>
				</c>
				<c path="haxe.IMap">
					<c path="copyTo.TKey"/>
					<c path="copyTo.TValue"/>
				</c>
				<c path="haxe.IMap">
					<c path="copyTo.TKey"/>
					<c path="copyTo.TValue"/>
				</c>
			</f>
			<haxe_doc>Copies all the key/values pairs from `src` to `dst`. It overwrites already existing
keys in `dst` if needed.</haxe_doc>
		</copyTo>
		<tuples public="1" params="TKey:TValue" set="method" line="31" static="1">
			<f a="map">
				<c path="haxe.IMap">
					<c path="tuples.TKey"/>
					<c path="tuples.TValue"/>
				</c>
				<c path="Array"><x path="thx.Tuple2">
	<c path="tuples.TKey"/>
	<c path="tuples.TValue"/>
</x></c>
			</f>
			<haxe_doc><![CDATA[Converts a Map<TKey, TValue> into an Array<Tuple2<TKey, TValue>>]]></haxe_doc>
		</tuples>
		<mapValues public="1" params="TKey:TValueA:TValueB" set="method" line="39" static="1">
			<f a="map:f:acc">
				<c path="haxe.IMap">
					<c path="mapValues.TKey"/>
					<c path="mapValues.TValueA"/>
				</c>
				<f a="">
					<c path="mapValues.TValueA"/>
					<c path="mapValues.TValueB"/>
				</f>
				<x path="Map">
					<c path="mapValues.TKey"/>
					<c path="mapValues.TValueB"/>
				</x>
				<x path="Map">
					<c path="mapValues.TKey"/>
					<c path="mapValues.TValueB"/>
				</x>
			</f>
			<haxe_doc>It maps values from one `Map` instance to another.</haxe_doc>
		</mapValues>
		<reduce public="1" params="TKey:TValue:TOut" set="method" line="48" static="1">
			<f a="map:f:acc">
				<c path="haxe.IMap">
					<c path="reduce.TKey"/>
					<c path="reduce.TValue"/>
				</c>
				<f a=":">
					<c path="reduce.TOut"/>
					<t path="thx.Tuple">
						<c path="reduce.TKey"/>
						<c path="reduce.TValue"/>
					</t>
					<c path="reduce.TOut"/>
				</f>
				<c path="reduce.TOut"/>
				<c path="reduce.TOut"/>
			</f>
			<haxe_doc>Applies the reduce function on every key/value pair in the map.</haxe_doc>
		</reduce>
		<values public="1" params="TKey:TValue" set="method" line="54" static="1">
			<f a="map">
				<c path="haxe.IMap">
					<c path="values.TKey"/>
					<c path="values.TValue"/>
				</c>
				<c path="Array"><c path="values.TValue"/></c>
			</f>
			<haxe_doc><![CDATA[Extracts the values of a Map<TKey, TValue> into Array<TValue>]]></haxe_doc>
		</values>
		<foldLeftWithKeys public="1" params="K:A:B" set="method" line="62" static="1">
			<f a="map:f:acc">
				<x path="Map">
					<c path="foldLeftWithKeys.K"/>
					<c path="foldLeftWithKeys.A"/>
				</x>
				<f a="::">
					<c path="foldLeftWithKeys.B"/>
					<c path="foldLeftWithKeys.K"/>
					<c path="foldLeftWithKeys.A"/>
					<c path="foldLeftWithKeys.B"/>
				</f>
				<c path="foldLeftWithKeys.B"/>
				<c path="foldLeftWithKeys.B"/>
			</f>
			<haxe_doc>* Unordered fold over key/value pairs in the map.</haxe_doc>
		</foldLeftWithKeys>
		<getOption public="1" params="TKey:TValue" set="method" line="72" static="1">
			<f a="map:key">
				<c path="haxe.IMap">
					<c path="getOption.TKey"/>
					<c path="getOption.TValue"/>
				</c>
				<c path="getOption.TKey"/>
				<e path="haxe.ds.Option"><c path="getOption.TValue"/></e>
			</f>
			<haxe_doc>Null-safe get.</haxe_doc>
		</getOption>
		<toObject public="1" params="T" set="method" line="78" static="1">
			<f a="map">
				<x path="Map">
					<c path="String"/>
					<c path="toObject.T"/>
				</x>
				<a/>
			</f>
			<haxe_doc><![CDATA[`mapToObject` transforms a `Map<String, T>` into an anonymous object.]]></haxe_doc>
		</toObject>
		<getAlt public="1" params="TKey:TValue" set="method" line="88" static="1">
			<f a="map:key:alt">
				<x path="Map">
					<c path="getAlt.TKey"/>
					<c path="getAlt.TValue"/>
				</x>
				<c path="getAlt.TKey"/>
				<c path="getAlt.TValue"/>
				<c path="getAlt.TValue"/>
			</f>
			<haxe_doc>Given a `key` returns the associated value from `map`. If the key doesn't exist or the associated value is `null`,
it returns the provided `alt` value instead.</haxe_doc>
		</getAlt>
		<isMap public="1" get="inline" set="null" line="96" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if a value is of any type of Map. Equivalent to `Std.is(v, IMap)`.</haxe_doc>
		</isMap>
		<string public="1" params="TKey:TValue" set="method" line="99" static="1"><f a="m">
	<c path="haxe.IMap">
		<c path="string.TKey"/>
		<c path="string.TValue"/>
	</c>
	<c path="String"/>
</f></string>
		<merge public="1" params="TKey:TValue" set="method" line="115" static="1">
			<f a="dest:sources">
				<c path="haxe.IMap">
					<c path="merge.TKey"/>
					<c path="merge.TValue"/>
				</c>
				<c path="Array"><c path="haxe.IMap">
	<c path="merge.TKey"/>
	<c path="merge.TValue"/>
</c></c>
				<c path="haxe.IMap">
					<c path="merge.TKey"/>
					<c path="merge.TValue"/>
				</c>
			</f>
			<haxe_doc><![CDATA[Merges 0 or more maps of the same type into a destination map.  Successive source maps will overwrite values for
the same key from previous sources.  The destination map is modified in place, and the destination is also returned
from the function.  To merge into an empty map, pass a new empty map as the dest argument.

```
var result1 = map1.merge([map2, map3]); // result1 and map1 should be the same after this.  map2 and map3 are not modified.
var result2 = (new Map() : Map<String, Int>).merge(map1, map2); // map1 and map2 not modified
```]]></haxe_doc>
		</merge>
		<semigroup public="1" params="K:V" set="method" line="130" static="1">
			<f a=""><x path="thx.Semigroup"><c path="haxe.IMap">
	<c path="semigroup.K"/>
	<c path="semigroup.V"/>
</c></x></f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>* The way that Haxe specializes maps inhibits us from defining a Monoid
   * instance for maps. The recommended way to reduce an array of maps
   * is `Nel.nel(new Map(), maps).fold(Maps.semigroup())`</haxe_doc>
		</semigroup>
		<haxe_doc>Extension methods for Maps</haxe_doc>
	</class>
	<typedef path="thx.MonoidImpl" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Monoid.hx" module="thx.Monoid"><a>
	<zero><c path="thx.MonoidImpl.A"/></zero>
	<append><f a=":">
	<c path="thx.MonoidImpl.A"/>
	<c path="thx.MonoidImpl.A"/>
	<c path="thx.MonoidImpl.A"/>
</f></append>
</a></typedef>
	<abstract path="thx.Monoid" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Monoid.hx">
		<from><icast><t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t></icast></from>
		<this><t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t></this>
		<impl><class path="thx._Monoid.Monoid_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Monoid.hx" private="1" module="thx.Monoid">
	<semigroup public="1" get="accessor" set="null" static="1">
		<x path="thx.Semigroup"><c path="thx.Monoid.A"/></x>
		<meta><m n=":impl"/></meta>
	</semigroup>
	<get_semigroup set="method" line="12" static="1">
		<f a="this">
			<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
			<x path="thx.Semigroup"><c path="thx.Monoid.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</get_semigroup>
	<zero public="1" get="accessor" set="null" static="1">
		<c path="thx.Monoid.A"/>
		<meta><m n=":impl"/></meta>
	</zero>
	<get_zero set="method" line="15" static="1">
		<f a="this">
			<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
			<c path="thx.Monoid.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_zero>
	<append public="1" set="method" line="17" static="1">
		<f a="this:a0:a1">
			<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
			<c path="thx.Monoid.A"/>
			<c path="thx.Monoid.A"/>
			<c path="thx.Monoid.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</append>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Monoid.Monoid_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Monoid.hx" private="1" module="thx.Monoid">
		<semigroup public="1" get="accessor" set="null" static="1">
			<x path="thx.Semigroup"><c path="thx.Monoid.A"/></x>
			<meta><m n=":impl"/></meta>
		</semigroup>
		<get_semigroup set="method" line="12" static="1">
			<f a="this">
				<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
				<x path="thx.Semigroup"><c path="thx.Monoid.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</get_semigroup>
		<zero public="1" get="accessor" set="null" static="1">
			<c path="thx.Monoid.A"/>
			<meta><m n=":impl"/></meta>
		</zero>
		<get_zero set="method" line="15" static="1">
			<f a="this">
				<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
				<c path="thx.Monoid.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_zero>
		<append public="1" set="method" line="17" static="1">
			<f a="this:a0:a1">
				<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
				<c path="thx.Monoid.A"/>
				<c path="thx.Monoid.A"/>
				<c path="thx.Monoid.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</append>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Nel" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Nel.hx">
		<from><icast><e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e></icast></from>
		<this><e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e></this>
		<to><icast><e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e></icast></to>
		<haxe_doc><![CDATA[Abstract around `NonEmptyList<A>`, which is similar to a Cons-style list, but must contain
at least one element (cannot be empty).]]></haxe_doc>
		<impl><class path="thx._Nel.Nel_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Nel.hx" private="1" module="thx.Nel">
	<nel public="1" params="A" set="method" line="15" static="1">
		<f a="hd:tl">
			<c path="nel.A"/>
			<c path="Array"><c path="nel.A"/></c>
			<x path="thx.Nel"><c path="nel.A"/></x>
		</f>
		<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element and tail `Array<A>`]]></haxe_doc>
	</nel>
	<pure public="1" params="A" set="method" line="25" static="1">
		<f a="a">
			<c path="pure.A"/>
			<x path="thx.Nel"><c path="pure.A"/></x>
		</f>
		<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element]]></haxe_doc>
	</pure>
	<cons public="1" params="A" set="method" line="31" static="1">
		<f a="a:nl">
			<c path="cons.A"/>
			<x path="thx.Nel"><c path="cons.A"/></x>
			<x path="thx.Nel"><c path="cons.A"/></x>
		</f>
		<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element and tail `Nel<A>`]]></haxe_doc>
	</cons>
	<fromArray public="1" params="A" set="method" line="38" static="1">
		<f a="arr">
			<x path="thx.ReadonlyArray"><c path="fromArray.A"/></x>
			<e path="haxe.ds.Option"><x path="thx.Nel"><c path="fromArray.A"/></x></e>
		</f>
		<haxe_doc><![CDATA[Attempts to construct a `Nel<A>` from a possibly-empty `Array<A>`.  If the array
is empty, `None` is returned.]]></haxe_doc>
	</fromArray>
	<map public="1" params="B" set="method" line="51" static="1">
		<f a="this:f">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<f a="">
				<c path="thx.Nel.A"/>
				<c path="map.B"/>
			</f>
			<x path="thx.Nel"><c path="map.B"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Applies an `A -> B` function to each element in this `Nel<A>` to create a new `Nel<B>`]]></haxe_doc>
	</map>
	<flatMap public="1" params="B" set="method" line="57" static="1">
		<f a="this:f">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<f a="">
				<c path="thx.Nel.A"/>
				<x path="thx.Nel"><c path="flatMap.B"/></x>
			</f>
			<x path="thx.Nel"><c path="flatMap.B"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Applies an `A -> Nel<B>` function to each element in this `Nel<A>` and flattens the result to create a new `Nel<B>`]]></haxe_doc>
	</flatMap>
	<fold public="1" set="method" line="66" static="1">
		<f a="this:f">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<f a=":">
				<c path="thx.Nel.A"/>
				<c path="thx.Nel.A"/>
				<c path="thx.Nel.A"/>
			</f>
			<c path="thx.Nel.A"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Applies a reducing function to this `Nel<A>`]]></haxe_doc>
	</fold>
	<append public="1" set="method" line="78" static="1">
		<f a="this:nel">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<x path="thx.Nel"><c path="thx.Nel.A"/></x>
			<x path="thx.Nel"><c path="thx.Nel.A"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>N + N0</e></m>
		</meta>
		<haxe_doc><![CDATA[Appends another non-empty list to this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
	</append>
	<head public="1" set="method" line="88" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<c path="thx.Nel.A"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Gets the head item of this `Nel<A>`, which is guaranteed to exist]]></haxe_doc>
	</head>
	<tail public="1" set="method" line="98" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Gets the tail (all but the first element) of the `Nel<A>` as a possibly-empty `ReadonlyArray<A>`]]></haxe_doc>
	</tail>
	<init public="1" set="method" line="110" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Gets the initial elements (all but the last element) of the `Nel<A>` as a possibly-empty `ReadonlyArray<A>`

Warning: this operation is `O(n)`]]></haxe_doc>
	</init>
	<last public="1" set="method" line="122" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<c path="thx.Nel.A"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Gets the last item of the `Nel<A>`, which is guaranteed to exist.

Warning: this operation is `O(n)`]]></haxe_doc>
	</last>
	<push public="1" set="method" line="136" static="1">
		<f a="this:a">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<c path="thx.Nel.A"/>
			<x path="thx.Nel"><c path="thx.Nel.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Returns a new `Nel<A>` with the given item added at the end.

Does not modify this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
	</push>
	<pop public="1" set="method" line="147" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<t path="thx.Tuple">
				<c path="thx.Nel.A"/>
				<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Returns the last item of the `Nel<A>` and a new `Nel<A>` with the last item removed.

Does not modify this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
	</pop>
	<unshift public="1" set="method" line="156" static="1">
		<f a="this:a">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<c path="thx.Nel.A"/>
			<x path="thx.Nel"><c path="thx.Nel.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Returns a new `Nel<A>` with the given item added at the front.

Does not modify this `Nel<A>`.]]></haxe_doc>
	</unshift>
	<shift public="1" set="method" line="165" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<t path="thx.Tuple">
				<c path="thx.Nel.A"/>
				<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Returns the first item of the `Nel<A>` and a new `Nel<A>` with the first item removed.

Does not modify this `Nel<A>`.]]></haxe_doc>
	</shift>
	<toArray public="1" set="method" line="174" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Converts the `Nel<A>` to a `ReadonlyArray<A>`

Warning: this operation is `O(n)`]]></haxe_doc>
	</toArray>
	<semigroup public="1" params="A" set="method" line="187" static="1">
		<f a=""><x path="thx.Semigroup"><x path="thx.Nel"><c path="semigroup.A"/></x></x></f>
		<haxe_doc><![CDATA[Gets a `Semigroup` instance for `Nel<A>`, using the `append` method of `Nel<A>`.]]></haxe_doc>
	</semigroup>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Nel.Nel_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Nel.hx" private="1" module="thx.Nel">
		<nel public="1" params="A" set="method" line="15" static="1">
			<f a="hd:tl">
				<c path="nel.A"/>
				<c path="Array"><c path="nel.A"/></c>
				<x path="thx.Nel"><c path="nel.A"/></x>
			</f>
			<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element and tail `Array<A>`]]></haxe_doc>
		</nel>
		<pure public="1" params="A" set="method" line="25" static="1">
			<f a="a">
				<c path="pure.A"/>
				<x path="thx.Nel"><c path="pure.A"/></x>
			</f>
			<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element]]></haxe_doc>
		</pure>
		<cons public="1" params="A" set="method" line="31" static="1">
			<f a="a:nl">
				<c path="cons.A"/>
				<x path="thx.Nel"><c path="cons.A"/></x>
				<x path="thx.Nel"><c path="cons.A"/></x>
			</f>
			<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element and tail `Nel<A>`]]></haxe_doc>
		</cons>
		<fromArray public="1" params="A" set="method" line="38" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="fromArray.A"/></x>
				<e path="haxe.ds.Option"><x path="thx.Nel"><c path="fromArray.A"/></x></e>
			</f>
			<haxe_doc><![CDATA[Attempts to construct a `Nel<A>` from a possibly-empty `Array<A>`.  If the array
is empty, `None` is returned.]]></haxe_doc>
		</fromArray>
		<map public="1" params="B" set="method" line="51" static="1">
			<f a="this:f">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<f a="">
					<c path="thx.Nel.A"/>
					<c path="map.B"/>
				</f>
				<x path="thx.Nel"><c path="map.B"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Applies an `A -> B` function to each element in this `Nel<A>` to create a new `Nel<B>`]]></haxe_doc>
		</map>
		<flatMap public="1" params="B" set="method" line="57" static="1">
			<f a="this:f">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<f a="">
					<c path="thx.Nel.A"/>
					<x path="thx.Nel"><c path="flatMap.B"/></x>
				</f>
				<x path="thx.Nel"><c path="flatMap.B"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Applies an `A -> Nel<B>` function to each element in this `Nel<A>` and flattens the result to create a new `Nel<B>`]]></haxe_doc>
		</flatMap>
		<fold public="1" set="method" line="66" static="1">
			<f a="this:f">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<f a=":">
					<c path="thx.Nel.A"/>
					<c path="thx.Nel.A"/>
					<c path="thx.Nel.A"/>
				</f>
				<c path="thx.Nel.A"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Applies a reducing function to this `Nel<A>`]]></haxe_doc>
		</fold>
		<append public="1" set="method" line="78" static="1">
			<f a="this:nel">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<x path="thx.Nel"><c path="thx.Nel.A"/></x>
				<x path="thx.Nel"><c path="thx.Nel.A"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>N + N0</e></m>
			</meta>
			<haxe_doc><![CDATA[Appends another non-empty list to this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
		</append>
		<head public="1" set="method" line="88" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<c path="thx.Nel.A"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Gets the head item of this `Nel<A>`, which is guaranteed to exist]]></haxe_doc>
		</head>
		<tail public="1" set="method" line="98" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Gets the tail (all but the first element) of the `Nel<A>` as a possibly-empty `ReadonlyArray<A>`]]></haxe_doc>
		</tail>
		<init public="1" set="method" line="110" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Gets the initial elements (all but the last element) of the `Nel<A>` as a possibly-empty `ReadonlyArray<A>`

Warning: this operation is `O(n)`]]></haxe_doc>
		</init>
		<last public="1" set="method" line="122" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<c path="thx.Nel.A"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Gets the last item of the `Nel<A>`, which is guaranteed to exist.

Warning: this operation is `O(n)`]]></haxe_doc>
		</last>
		<push public="1" set="method" line="136" static="1">
			<f a="this:a">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<c path="thx.Nel.A"/>
				<x path="thx.Nel"><c path="thx.Nel.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Returns a new `Nel<A>` with the given item added at the end.

Does not modify this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
		</push>
		<pop public="1" set="method" line="147" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<t path="thx.Tuple">
					<c path="thx.Nel.A"/>
					<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Returns the last item of the `Nel<A>` and a new `Nel<A>` with the last item removed.

Does not modify this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
		</pop>
		<unshift public="1" set="method" line="156" static="1">
			<f a="this:a">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<c path="thx.Nel.A"/>
				<x path="thx.Nel"><c path="thx.Nel.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Returns a new `Nel<A>` with the given item added at the front.

Does not modify this `Nel<A>`.]]></haxe_doc>
		</unshift>
		<shift public="1" set="method" line="165" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<t path="thx.Tuple">
					<c path="thx.Nel.A"/>
					<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Returns the first item of the `Nel<A>` and a new `Nel<A>` with the first item removed.

Does not modify this `Nel<A>`.]]></haxe_doc>
		</shift>
		<toArray public="1" set="method" line="174" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Converts the `Nel<A>` to a `ReadonlyArray<A>`

Warning: this operation is `O(n)`]]></haxe_doc>
		</toArray>
		<semigroup public="1" params="A" set="method" line="187" static="1">
			<f a=""><x path="thx.Semigroup"><x path="thx.Nel"><c path="semigroup.A"/></x></x></f>
			<haxe_doc><![CDATA[Gets a `Semigroup` instance for `Nel<A>`, using the `append` method of `Nel<A>`.]]></haxe_doc>
		</semigroup>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="thx.NonEmptyList" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Nel.hx" module="thx.Nel">
		<Single a="x"><c path="thx.NonEmptyList.A"/></Single>
		<ConsNel a="x:xs">
			<c path="thx.NonEmptyList.A"/>
			<x path="thx.Nel"><c path="thx.NonEmptyList.A"/></x>
		</ConsNel>
	</enum>
	<enum path="thx.Nil" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Nil.hx">
		<nil><haxe_doc>`nil` is the only value available for `Nil` and it is a constant value.</haxe_doc></nil>
		<haxe_doc>A runtime value that describes the absence of a value.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="thx.Nulls" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Nulls.hx">
		<ensure public="1" params="T" set="method" static="1">
			<f a="value:alt">
				<t path="Null"><c path="ensure.T"/></t>
				<c path="ensure.T"/>
				<d/>
			</f>
			<haxe_doc>Assigns the value `alt` to `value` if found `null`;</haxe_doc>
		</ensure>
		<exists public="1" set="method" static="1">
			<f a="value">
				<d/>
				<d/>
			</f>
			<haxe_doc>`exists` is synonymous of `notNull`.</haxe_doc>
		</exists>
		<with public="1" params="TValue:TOut" set="method" static="1">
			<f a="value:expr:?alt">
				<c path="with.TValue"/>
				<c path="with.TOut"/>
				<c path="with.TOut"/>
				<c path="with.TOut"/>
			</f>
			<haxe_doc>Executes `expr` only if `value` is a non-null value. Inside `expr` the `value` can be
referenced using the special var `_`. It is also possible to provide an alternative value `alt` in
case a non null value is desired.

```haxe
myvalue.with(_.myMethod());
```</haxe_doc>
		</with>
		<isNull public="1" set="method" static="1">
			<f a="value">
				<d/>
				<d/>
			</f>
			<haxe_doc>`isNull` checks if a chain of identifier is null at any point.</haxe_doc>
		</isNull>
		<opt public="1" set="method" static="1">
			<f a="value">
				<d/>
				<d/>
			</f>
			<haxe_doc>It traverses a chain of dot/array identifiers and it returns the last value in the chain or null if any of the identifiers is not set.

```haxe
var o : { a : { b : { c : String }}} = null;
trace((o.a.b.c).opt()); // prints null
var o = { a : { b : { c : 'A' }}};
trace((o.a.b.c).opt()); // prints 'A'
```</haxe_doc>
		</opt>
		<or public="1" params="T" set="method" static="1">
			<f a="value:alt">
				<t path="Null"><c path="or.T"/></t>
				<c path="or.T"/>
				<d/>
			</f>
			<haxe_doc>Like `opt` but allows an `alt` value that replaces a `null` occurrance.

```haxe
var s : String = null;
trace(s.or('b')); // prints 'b'
s = 'a';
trace(s.or('b')); // prints 'a'

// or more complex
var o : { a : { b : { c : String }}} = null;
trace((o.a.b.c).or("B")); // prints 'B'
var o = { a : { b : { c : 'A' }}};
trace((o.a.b.c).or("B")); // prints 'A'
```

Notice that the subject `value` must be a constant identifier (eg: fields, local variables, ...).</haxe_doc>
		</or>
		<notNull public="1" set="method" static="1">
			<f a="value">
				<d/>
				<d/>
			</f>
			<haxe_doc>`notNull` is the negation of `isNull`.</haxe_doc>
		</notNull>
		<haxe_doc>`Nulls` provides extension methods that help to deal with nullable values.

Note that the parenthesis wrap the entire chain of identifiers. That means that a null check will be performed for each identifier in the chain.

Identifiers can also be getters and methods (both are invoked only once and only if the check reaches them). `Python` seems to struggle with some native methods like methods on strings.</haxe_doc>
	</class>
	<class path="thx.Objects" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Objects.hx">
		<compare public="1" set="method" line="19" static="1">
			<f a="a:b">
				<a/>
				<a/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares two objects assuming that the object with less fields will come first.

If both objects have the same number of fields, each field value is compared
using `thx.Dynamics.compare`.</haxe_doc>
		</compare>
		<isEmpty public="1" get="inline" set="null" line="33" static="1">
			<f a="o">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isEmpty` returns `true` if the object doesn't have any field.</haxe_doc>
		</isEmpty>
		<exists public="1" get="inline" set="null" line="39" static="1">
			<f a="o:name">
				<a/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`exists` returns true if `o` contains a field named `name`.</haxe_doc>
		</exists>
		<fields public="1" get="inline" set="null" line="45" static="1">
			<f a="o">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>`fields` returns an array of string containing the field names of the argument object.</haxe_doc>
		</fields>
		<deflate public="1" set="method" line="48" static="1">
			<f a="o:?flattenArrays" v=":true">
				<a/>
				<x path="Bool"/>
				<a/>
			</f>
			<meta><m n=":value"><e>{ flattenArrays : true }</e></m></meta>
		</deflate>
		<inflate public="1" set="method" line="89" static="1"><f a="o">
	<a/>
	<a/>
</f></inflate>
		<merge public="1" set="method" static="1">
			<f a="first:second">
				<a/>
				<a/>
				<d/>
			</f>
			<haxe_doc>Shallow, typed merge of two anonymous objects.</haxe_doc>
		</merge>
		<shallowMerge public="1" set="method" static="1">
			<f a="first:second">
				<a/>
				<a/>
				<d/>
			</f>
			<haxe_doc>Shallow, typed merge of two anonymous objects.</haxe_doc>
		</shallowMerge>
		<combine public="1" set="method" line="114" static="1">
			<f a="first:second">
				<a/>
				<a/>
				<a/>
			</f>
			<meta><m n=":deprecated"><e>"use thx.Objects.shallowCombine or thx.Objects.deepCombine instead"</e></m></meta>
			<haxe_doc>Shallow, untyped merge of two anonymous objects.</haxe_doc>
		</combine>
		<shallowCombine public="1" set="method" line="121" static="1">
			<f a="first:second">
				<a/>
				<a/>
				<a/>
			</f>
			<haxe_doc>Shallow, untyped merge of two anonymous objects.</haxe_doc>
		</shallowCombine>
		<deepCombine public="1" set="method" line="144" static="1">
			<f a="first:second">
				<a/>
				<a/>
				<a/>
			</f>
			<haxe_doc>Deep, typed merge of two objects.</haxe_doc>
		</deepCombine>
		<assign public="1" set="method" line="158" static="1">
			<f a="to:from:?replacef">
				<a/>
				<a/>
				<f a="::">
					<c path="String"/>
					<d/>
					<d/>
					<d/>
				</f>
				<a/>
			</f>
			<haxe_doc>Copies the values from the fields of `from` to `to`. If `to` already contains those fields, then it replaces
those values with the return value of the function `replacef`.

If not set, `replacef` always returns the value from the `from` object.</haxe_doc>
		</assign>
		<copyTo public="1" set="method" line="176" static="1">
			<f a="src:dst:?cloneInstances" v="::false">
				<a/>
				<a/>
				<x path="Bool"/>
				<a/>
			</f>
			<meta><m n=":value"><e>{ cloneInstances : false }</e></m></meta>
			<haxe_doc>`copyTo` copies the fields from `src` to `dst` using `Reflect.setField()` and `Dynamics.clone()`.
Anonymous objects are entered into and copied recursively.</haxe_doc>
		</copyTo>
		<clone public="1" params="T" set="method" line="192" static="1">
			<f a="src:?cloneInstances" v=":false">
				<c path="clone.T"/>
				<x path="Bool"/>
				<c path="clone.T"/>
			</f>
			<meta><m n=":value"><e>{ cloneInstances : false }</e></m></meta>
			<haxe_doc>Clone the current object by creating a new object and using `copyTo` to clone each field.</haxe_doc>
		</clone>
		<toMap public="1" set="method" line="200" static="1">
			<f a="o">
				<a/>
				<x path="Map">
					<c path="String"/>
					<d/>
				</x>
			</f>
			<haxe_doc><![CDATA[`objectToMap` transforms an anonymous object into an instance of `Map<String, Dynamic>`.]]></haxe_doc>
		</toMap>
		<size public="1" get="inline" set="null" line="209" static="1">
			<f a="o">
				<a/>
				<x path="Int"/>
			</f>
			<haxe_doc>`size` returns how many fields are present in the object.</haxe_doc>
		</size>
		<string public="1" set="method" line="218" static="1">
			<f a="o">
				<a/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of the object containing each field and value.

The function is recursive so it might generate infinite loops if used with
circular references.</haxe_doc>
		</string>
		<stringImpl set="method" line="234" static="1"><f a="o:cache">
	<a/>
	<x path="Map">
		<a/>
		<x path="Bool"/>
	</x>
	<x path="Void"/>
</f></stringImpl>
		<values public="1" get="inline" set="null" line="241" static="1">
			<f a="o">
				<a/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>`values` returns an array of dynamic values containing the values of each field in the argument object.</haxe_doc>
		</values>
		<tuples public="1" set="method" line="248" static="1">
			<f a="o">
				<a/>
				<c path="Array"><x path="thx.Tuple2">
	<c path="String"/>
	<d/>
</x></c>
			</f>
			<haxe_doc><![CDATA[Converts an object into an Array<Tuple2<String, Dynamic>> where the left value (_0) of the
tuple is the field name and the right value (_1) is the field value.]]></haxe_doc>
		</tuples>
		<hasPath public="1" set="method" line="259" static="1">
			<f a="o:path">
				<a/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Determines whether an object has fields represented by a string path.  The path
can contain object keys and array indices separated by ".".

E.g. { key1: { key2: [1, 2, 3] } }.hasPath("key1.key2.2") -> returns true]]></haxe_doc>
		</hasPath>
		<hasPathValue public="1" set="method" line="284" static="1">
			<f a="o:path">
				<a/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Like `hasPath`, but will return `false` for null values, even if the key exists.

E.g. { key1 : { key2: null } }.hasPathValue("key1.key2") -> returns false]]></haxe_doc>
		</hasPathValue>
		<getPath public="1" set="method" line="294" static="1">
			<f a="o:path">
				<a/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Gets a value from an object by a string path.  The path can contain object keys and array indices separated
by ".".  Returns null for a path that does not exist.

E.g. { key1: { key2: [1, 2, 3] } }.getPath("key1.key2.2") -> returns 3
E.g. { key1: { key2: [1, 2, 3] } }.getPath("key1.key2[2]") -> returns 3]]></haxe_doc>
		</getPath>
		<getPathOption public="1" set="method" line="318" static="1">
			<f a="o:path">
				<a/>
				<c path="String"/>
				<e path="haxe.ds.Option"><d/></e>
			</f>
			<haxe_doc>Null-safe getPath</haxe_doc>
		</getPathOption>
		<parsePath public="1" params="T" set="method" line="325" static="1">
			<f a="o:path:parse">
				<a/>
				<c path="String"/>
				<f a="">
					<d/>
					<t path="thx.VNel">
						<c path="String"/>
						<c path="parsePath.T"/>
					</t>
				</f>
				<t path="thx.VNel">
					<c path="String"/>
					<c path="parsePath.T"/>
				</t>
			</f>
			<haxe_doc>Null-safe `getPath` that attempts to parse the result using the provided parse
function. `thx.fp.Dynamics` has several functions that match this pattern.</haxe_doc>
		</parsePath>
		<getPathOr public="1" set="method" line="337" static="1">
			<f a="o:path:alt">
				<a/>
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Gets a value from an object by a string path.  The path can contain object keys and array indices separated
  by ".".  Returns `alt` for a path that does not exist.
```
  E.g. { key1: { key2: [1, 2, 3] } }.getPath("key1.key2.2") -> returns 3
  E.g. { key1: { key2: [1, 2, 3] } }.getPath("key1.key2.5", 7) -> returns 7
```]]></haxe_doc>
		</getPathOr>
		<setPath public="1" params="T" set="method" line="349" static="1">
			<f a="o:path:val">
				<a/>
				<c path="String"/>
				<c path="setPath.T"/>
				<a/>
			</f>
			<haxe_doc><![CDATA[Sets a value in an object by a string path.  The path can contain object keys and array indices separated
by ".".  Returns the original object, for optional chaining of other object methods.

Inner objects and arrays will be created as needed when traversing the path.

E.g. { key1: { key2: [1, 2, 3] } }.setPath("key1.key2.2", 4) -> returns { key1: { key2: [ 1, 2, 4 ] } }]]></haxe_doc>
		</setPath>
		<removePath public="1" set="method" line="400" static="1">
			<f a="o:path">
				<a/>
				<c path="String"/>
				<a/>
			</f>
			<haxe_doc><![CDATA[Delete an object's property, given a string path to that property.

E.g. { foo : 'bar' }.removePath('foo') -> returns {}]]></haxe_doc>
		</removePath>
		<normalizePath get="inline" set="null" line="429" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></normalizePath>
		<with public="1" params="T" set="method" static="1"><f a="o:field:value">
	<c path="with.T"/>
	<d/>
	<d/>
	<d/>
</f></with>
		<haxe_doc>Helper methods for generic objects.</haxe_doc>
	</class>
	<class path="thx.Options" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Options.hx">
		<ofValue public="1" params="T" get="inline" set="null" line="12" static="1"><f a="value">
	<t path="Null"><c path="ofValue.T"/></t>
	<e path="haxe.ds.Option"><c path="ofValue.T"/></e>
</f></ofValue>
		<maybe public="1" params="T" get="inline" set="null" line="15" static="1"><f a="value">
	<t path="Null"><c path="maybe.T"/></t>
	<e path="haxe.ds.Option"><c path="maybe.T"/></e>
</f></maybe>
		<equals public="1" params="T" set="method" line="23" static="1">
			<f a="a:b:?eq">
				<e path="haxe.ds.Option"><c path="equals.T"/></e>
				<e path="haxe.ds.Option"><c path="equals.T"/></e>
				<f a=":">
					<c path="equals.T"/>
					<c path="equals.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Equality function to campare two `Option` values of the same type. An optional equality
function can be provided if values inside `Some` should be compared using something
different than strict equality.</haxe_doc>
		</equals>
		<equalsValue public="1" params="T" set="method" line="38" static="1">
			<f a="a:b:?eq">
				<e path="haxe.ds.Option"><c path="equalsValue.T"/></e>
				<t path="Null"><c path="equalsValue.T"/></t>
				<f a=":">
					<c path="equalsValue.T"/>
					<c path="equalsValue.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[`equalsValue` compares an `Option<T>` with a value `T`. The logic adopted to compare
values is the same as in `Options.equals()`.]]></haxe_doc>
		</equalsValue>
		<map public="1" params="T:TOut" set="method" line="45" static="1">
			<f a="option:callback">
				<e path="haxe.ds.Option"><c path="map.T"/></e>
				<f a="">
					<c path="map.T"/>
					<c path="map.TOut"/>
				</f>
				<e path="haxe.ds.Option"><c path="map.TOut"/></e>
			</f>
			<haxe_doc><![CDATA[`map` transforms a value contained in `Option<T>` to `Option<TOut>` using a `callback`.
`callback` is used only if `Option` is `Some(value)`.]]></haxe_doc>
		</map>
		<ap public="1" params="T:U" set="method" line="55" static="1">
			<f a="option:fopt">
				<e path="haxe.ds.Option"><c path="ap.T"/></e>
				<e path="haxe.ds.Option"><f a="">
	<c path="ap.T"/>
	<c path="ap.U"/>
</f></e>
				<e path="haxe.ds.Option"><c path="ap.U"/></e>
			</f>
			<haxe_doc><![CDATA[`ap` transforms a value contained in `Option<T>` to `Option<TOut>` using a `callback`
wrapped in another Option.]]></haxe_doc>
		</ap>
		<flatMap public="1" params="T:TOut" set="method" line="64" static="1">
			<f a="option:callback">
				<e path="haxe.ds.Option"><c path="flatMap.T"/></e>
				<f a="">
					<c path="flatMap.T"/>
					<e path="haxe.ds.Option"><c path="flatMap.TOut"/></e>
				</f>
				<e path="haxe.ds.Option"><c path="flatMap.TOut"/></e>
			</f>
			<haxe_doc>`flatMap` is shortcut for `map(cb).join()`</haxe_doc>
		</flatMap>
		<join public="1" params="T" set="method" line="73" static="1">
			<f a="option">
				<e path="haxe.ds.Option"><e path="haxe.ds.Option"><c path="join.T"/></e></e>
				<e path="haxe.ds.Option"><c path="join.T"/></e>
			</f>
			<haxe_doc>`join` collapses a nested option into a single optional value.</haxe_doc>
		</join>
		<cata public="1" params="A:B" set="method" line="82" static="1">
			<f a="option:ifNone:f">
				<e path="haxe.ds.Option"><c path="cata.A"/></e>
				<c path="cata.B"/>
				<f a="">
					<c path="cata.A"/>
					<c path="cata.B"/>
				</f>
				<c path="cata.B"/>
			</f>
			<haxe_doc>`cata` the option catamorphism, useful for inline deconstruction.</haxe_doc>
		</cata>
		<cataf public="1" params="A:B" set="method" line="91" static="1">
			<f a="option:ifNone:f">
				<e path="haxe.ds.Option"><c path="cataf.A"/></e>
				<f a=""><c path="cataf.B"/></f>
				<f a="">
					<c path="cataf.A"/>
					<c path="cataf.B"/>
				</f>
				<c path="cataf.B"/>
			</f>
			<haxe_doc>Lazy version of `thx.Options.cata`</haxe_doc>
		</cataf>
		<foldLeft public="1" params="T:B" set="method" line="101" static="1">
			<f a="option:b:f">
				<e path="haxe.ds.Option"><c path="foldLeft.T"/></e>
				<c path="foldLeft.B"/>
				<f a=":">
					<c path="foldLeft.B"/>
					<c path="foldLeft.T"/>
					<c path="foldLeft.B"/>
				</f>
				<c path="foldLeft.B"/>
			</f>
			<haxe_doc>`foldLeft` reduce using an accumulating function and an initial value.</haxe_doc>
		</foldLeft>
		<foldLeftf public="1" params="T:B" set="method" line="110" static="1">
			<f a="option:b:f">
				<e path="haxe.ds.Option"><c path="foldLeftf.T"/></e>
				<f a=""><c path="foldLeftf.B"/></f>
				<f a=":">
					<c path="foldLeftf.B"/>
					<c path="foldLeftf.T"/>
					<c path="foldLeftf.B"/>
				</f>
				<c path="foldLeftf.B"/>
			</f>
			<haxe_doc>Lazy version of `thx.Options.foldLeft`</haxe_doc>
		</foldLeftf>
		<foldMap public="1" params="A:B" set="method" line="119" static="1">
			<f a="option:f:m">
				<e path="haxe.ds.Option"><c path="foldMap.A"/></e>
				<f a="">
					<c path="foldMap.A"/>
					<c path="foldMap.B"/>
				</f>
				<x path="thx.Monoid"><c path="foldMap.B"/></x>
				<c path="foldMap.B"/>
			</f>
			<haxe_doc>* Fold by mapping the contained value into some monoidal type and reducing with that monoid.</haxe_doc>
		</foldMap>
		<filter public="1" params="A" set="method" line="125" static="1">
			<f a="option:f">
				<e path="haxe.ds.Option"><c path="filter.A"/></e>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="filter.A"/></e>
			</f>
			<haxe_doc>`filter` returns the current value if any contained value matches the predicate, None otherwise.</haxe_doc>
		</filter>
		<toArray public="1" params="T" set="method" line="135" static="1">
			<f a="option">
				<e path="haxe.ds.Option"><c path="toArray.T"/></e>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc><![CDATA[`toArray` transforms an `Option<T>` value into an `Array<T>` value. The result array
will be empty if `Option` is `None` or will contain one value otherwise.]]></haxe_doc>
		</toArray>
		<toBool public="1" params="T" set="method" line="146" static="1">
			<f a="option">
				<e path="haxe.ds.Option"><c path="toBool.T"/></e>
				<x path="Bool"/>
			</f>
			<haxe_doc>`toBool` transforms an `Option` value into a boolean: `None` maps to `false`, and
`Some(_)` to `true`. The value in `Some` has no play in the conversion.</haxe_doc>
		</toBool>
		<isNone public="1" params="T" set="method" line="156" static="1">
			<f a="option">
				<e path="haxe.ds.Option"><c path="isNone.T"/></e>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isNone` determines whether the option is a None</haxe_doc>
		</isNone>
		<toOption public="1" params="T" get="inline" set="null" line="163" static="1">
			<f a="value">
				<t path="Null"><c path="toOption.T"/></t>
				<e path="haxe.ds.Option"><c path="toOption.T"/></e>
			</f>
			<haxe_doc><![CDATA[`toOption` transforms any type T into `Option<T>`. If the value is null, the result
is be `None`.]]></haxe_doc>
		</toOption>
		<get public="1" params="T" set="method" line="169" static="1">
			<f a="option">
				<e path="haxe.ds.Option"><c path="get.T"/></e>
				<t path="Null"><c path="get.T"/></t>
			</f>
			<haxe_doc>`toValue` extracts the value from `Option`. If the `Option` is `None`, `null` is returned.</haxe_doc>
		</get>
		<getOrElse public="1" params="T" set="method" line="178" static="1">
			<f a="option:alt">
				<e path="haxe.ds.Option"><c path="getOrElse.T"/></e>
				<c path="getOrElse.T"/>
				<c path="getOrElse.T"/>
			</f>
			<haxe_doc>`getOrElse` extracts the value from `Option`. If the `Option` is `None`, `alt` value is returned.</haxe_doc>
		</getOrElse>
		<getOrThrow public="1" params="T" set="method" line="187" static="1">
			<f a="option:?err:?posInfo">
				<e path="haxe.ds.Option"><c path="getOrThrow.T"/></e>
				<c path="thx.Error"/>
				<t path="haxe.PosInfos"/>
				<c path="getOrThrow.T"/>
			</f>
			<haxe_doc>Extract the value from `Option` or throw a thx.Error if the `Option` is `None`.</haxe_doc>
		</getOrThrow>
		<getOrFail public="1" params="T" set="method" line="198" static="1">
			<f a="option:msg:?posInfo">
				<e path="haxe.ds.Option"><c path="getOrFail.T"/></e>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<c path="getOrFail.T"/>
			</f>
			<haxe_doc>Extract the value from `Option` or throw a thx.Error with the provided message.</haxe_doc>
		</getOrFail>
		<orElse public="1" params="T" set="method" line="204" static="1">
			<f a="option:alt">
				<e path="haxe.ds.Option"><c path="orElse.T"/></e>
				<e path="haxe.ds.Option"><c path="orElse.T"/></e>
				<e path="haxe.ds.Option"><c path="orElse.T"/></e>
			</f>
			<haxe_doc>`orElse` returns `option` if it holds a value or `alt` otherwise.</haxe_doc>
		</orElse>
		<all public="1" params="T" set="method" line="210" static="1"><f a="option:f">
	<e path="haxe.ds.Option"><c path="all.T"/></e>
	<f a="">
		<c path="all.T"/>
		<x path="Bool"/>
	</f>
	<x path="Bool"/>
</f></all>
		<any public="1" params="T" set="method" line="216" static="1"><f a="option:f">
	<e path="haxe.ds.Option"><c path="any.T"/></e>
	<f a="">
		<c path="any.T"/>
		<x path="Bool"/>
	</f>
	<x path="Bool"/>
</f></any>
		<traverseValidation public="1" params="E:T:U" set="method" line="227" static="1">
			<f a="option:f">
				<e path="haxe.ds.Option"><c path="traverseValidation.T"/></e>
				<f a="">
					<c path="traverseValidation.T"/>
					<x path="thx.Validation">
						<c path="traverseValidation.E"/>
						<c path="traverseValidation.U"/>
					</x>
				</f>
				<x path="thx.Validation">
					<c path="traverseValidation.E"/>
					<e path="haxe.ds.Option"><c path="traverseValidation.U"/></e>
				</x>
			</f>
			<haxe_doc>Traverse the array with a function that may return values wrapped in Validation.
  If any of the values are Failures, return a Failure that accumulates all errors
  from the failed values, otherwise return the array of mapped values in a Success.</haxe_doc>
		</traverseValidation>
		<toSuccess public="1" params="E:T" set="method" line="233" static="1"><f a="option:error">
	<e path="haxe.ds.Option"><c path="toSuccess.T"/></e>
	<c path="toSuccess.E"/>
	<x path="thx.Validation">
		<c path="toSuccess.E"/>
		<c path="toSuccess.T"/>
	</x>
</f></toSuccess>
		<toSuccessNel public="1" params="E:T" set="method" line="239" static="1"><f a="option:error">
	<e path="haxe.ds.Option"><c path="toSuccessNel.T"/></e>
	<c path="toSuccessNel.E"/>
	<t path="thx.VNel">
		<c path="toSuccessNel.E"/>
		<c path="toSuccessNel.T"/>
	</t>
</f></toSuccessNel>
		<toFailure public="1" params="E:T" set="method" line="245" static="1"><f a="error:value">
	<e path="haxe.ds.Option"><c path="toFailure.E"/></e>
	<c path="toFailure.T"/>
	<x path="thx.Validation">
		<c path="toFailure.E"/>
		<c path="toFailure.T"/>
	</x>
</f></toFailure>
		<toFailureNel public="1" params="E:T" set="method" line="251" static="1"><f a="error:value">
	<e path="haxe.ds.Option"><c path="toFailureNel.E"/></e>
	<c path="toFailureNel.T"/>
	<t path="thx.VNel">
		<c path="toFailureNel.E"/>
		<c path="toFailureNel.T"/>
	</t>
</f></toFailureNel>
		<toRight public="1" params="E:T" set="method" line="257" static="1"><f a="opt:left">
	<e path="haxe.ds.Option"><c path="toRight.T"/></e>
	<c path="toRight.E"/>
	<e path="thx.Either">
		<c path="toRight.E"/>
		<c path="toRight.T"/>
	</e>
</f></toRight>
		<toLeft public="1" params="E:T" set="method" line="263" static="1"><f a="opt:right">
	<e path="haxe.ds.Option"><c path="toLeft.E"/></e>
	<c path="toLeft.T"/>
	<e path="thx.Either">
		<c path="toLeft.E"/>
		<c path="toLeft.T"/>
	</e>
</f></toLeft>
		<each public="1" params="T" set="method" line="272" static="1">
			<f a="o:f">
				<e path="haxe.ds.Option"><c path="each.T"/></e>
				<f a="">
					<c path="each.T"/>
					<x path="Void"/>
				</f>
				<e path="haxe.ds.Option"><c path="each.T"/></e>
			</f>
			<haxe_doc>Performs `f` on the contents of `o` if `o` != None</haxe_doc>
		</each>
		<ap2 public="1" params="A:B:C" get="inline" set="null" line="278" static="1"><f a="f:v1:v2">
	<f a=":">
		<c path="ap2.A"/>
		<c path="ap2.B"/>
		<c path="ap2.C"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap2.A"/></e>
	<e path="haxe.ds.Option"><c path="ap2.B"/></e>
	<e path="haxe.ds.Option"><c path="ap2.C"/></e>
</f></ap2>
		<ap3 public="1" params="A:B:C:D" get="inline" set="null" line="281" static="1"><f a="f:v1:v2:v3">
	<f a="::">
		<c path="ap3.A"/>
		<c path="ap3.B"/>
		<c path="ap3.C"/>
		<c path="ap3.D"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap3.A"/></e>
	<e path="haxe.ds.Option"><c path="ap3.B"/></e>
	<e path="haxe.ds.Option"><c path="ap3.C"/></e>
	<e path="haxe.ds.Option"><c path="ap3.D"/></e>
</f></ap3>
		<ap4 public="1" params="A:B:C:D:E" get="inline" set="null" line="284" static="1"><f a="f:v1:v2:v3:v4">
	<f a=":::">
		<c path="ap4.A"/>
		<c path="ap4.B"/>
		<c path="ap4.C"/>
		<c path="ap4.D"/>
		<c path="ap4.E"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap4.A"/></e>
	<e path="haxe.ds.Option"><c path="ap4.B"/></e>
	<e path="haxe.ds.Option"><c path="ap4.C"/></e>
	<e path="haxe.ds.Option"><c path="ap4.D"/></e>
	<e path="haxe.ds.Option"><c path="ap4.E"/></e>
</f></ap4>
		<ap5 public="1" params="A:B:C:D:E:F" get="inline" set="null" line="289" static="1"><f a="f:v1:v2:v3:v4:v5">
	<f a="::::">
		<c path="ap5.A"/>
		<c path="ap5.B"/>
		<c path="ap5.C"/>
		<c path="ap5.D"/>
		<c path="ap5.E"/>
		<c path="ap5.F"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap5.A"/></e>
	<e path="haxe.ds.Option"><c path="ap5.B"/></e>
	<e path="haxe.ds.Option"><c path="ap5.C"/></e>
	<e path="haxe.ds.Option"><c path="ap5.D"/></e>
	<e path="haxe.ds.Option"><c path="ap5.E"/></e>
	<e path="haxe.ds.Option"><c path="ap5.F"/></e>
</f></ap5>
		<ap6 public="1" params="A:B:C:D:E:F:G" get="inline" set="null" line="294" static="1"><f a="f:v1:v2:v3:v4:v5:v6">
	<f a=":::::">
		<c path="ap6.A"/>
		<c path="ap6.B"/>
		<c path="ap6.C"/>
		<c path="ap6.D"/>
		<c path="ap6.E"/>
		<c path="ap6.F"/>
		<c path="ap6.G"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap6.A"/></e>
	<e path="haxe.ds.Option"><c path="ap6.B"/></e>
	<e path="haxe.ds.Option"><c path="ap6.C"/></e>
	<e path="haxe.ds.Option"><c path="ap6.D"/></e>
	<e path="haxe.ds.Option"><c path="ap6.E"/></e>
	<e path="haxe.ds.Option"><c path="ap6.F"/></e>
	<e path="haxe.ds.Option"><c path="ap6.G"/></e>
</f></ap6>
		<ap7 public="1" params="A:B:C:D:E:F:G:H" get="inline" set="null" line="299" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7">
	<f a="::::::">
		<c path="ap7.A"/>
		<c path="ap7.B"/>
		<c path="ap7.C"/>
		<c path="ap7.D"/>
		<c path="ap7.E"/>
		<c path="ap7.F"/>
		<c path="ap7.G"/>
		<c path="ap7.H"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap7.A"/></e>
	<e path="haxe.ds.Option"><c path="ap7.B"/></e>
	<e path="haxe.ds.Option"><c path="ap7.C"/></e>
	<e path="haxe.ds.Option"><c path="ap7.D"/></e>
	<e path="haxe.ds.Option"><c path="ap7.E"/></e>
	<e path="haxe.ds.Option"><c path="ap7.F"/></e>
	<e path="haxe.ds.Option"><c path="ap7.G"/></e>
	<e path="haxe.ds.Option"><c path="ap7.H"/></e>
</f></ap7>
		<ap8 public="1" params="A:B:C:D:E:F:G:H:I" get="inline" set="null" line="304" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8">
	<f a=":::::::">
		<c path="ap8.A"/>
		<c path="ap8.B"/>
		<c path="ap8.C"/>
		<c path="ap8.D"/>
		<c path="ap8.E"/>
		<c path="ap8.F"/>
		<c path="ap8.G"/>
		<c path="ap8.H"/>
		<c path="ap8.I"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap8.A"/></e>
	<e path="haxe.ds.Option"><c path="ap8.B"/></e>
	<e path="haxe.ds.Option"><c path="ap8.C"/></e>
	<e path="haxe.ds.Option"><c path="ap8.D"/></e>
	<e path="haxe.ds.Option"><c path="ap8.E"/></e>
	<e path="haxe.ds.Option"><c path="ap8.F"/></e>
	<e path="haxe.ds.Option"><c path="ap8.G"/></e>
	<e path="haxe.ds.Option"><c path="ap8.H"/></e>
	<e path="haxe.ds.Option"><c path="ap8.I"/></e>
</f></ap8>
		<combine public="1" params="A:B" get="inline" set="null" line="309" static="1"><f a="a:b">
	<e path="haxe.ds.Option"><c path="combine.A"/></e>
	<e path="haxe.ds.Option"><c path="combine.B"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple2">
	<c path="combine.A"/>
	<c path="combine.B"/>
</x></e>
</f></combine>
		<combine2 public="1" params="A:B" get="inline" set="null" line="312" static="1"><f a="a:b">
	<e path="haxe.ds.Option"><c path="combine2.A"/></e>
	<e path="haxe.ds.Option"><c path="combine2.B"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple2">
	<c path="combine2.A"/>
	<c path="combine2.B"/>
</x></e>
</f></combine2>
		<combine3 public="1" params="A:B:C" get="inline" set="null" line="315" static="1"><f a="a:b:c">
	<e path="haxe.ds.Option"><c path="combine3.A"/></e>
	<e path="haxe.ds.Option"><c path="combine3.B"/></e>
	<e path="haxe.ds.Option"><c path="combine3.C"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple3">
	<c path="combine3.A"/>
	<c path="combine3.B"/>
	<c path="combine3.C"/>
</x></e>
</f></combine3>
		<combine4 public="1" params="A:B:C:D" get="inline" set="null" line="318" static="1"><f a="a:b:c:d">
	<e path="haxe.ds.Option"><c path="combine4.A"/></e>
	<e path="haxe.ds.Option"><c path="combine4.B"/></e>
	<e path="haxe.ds.Option"><c path="combine4.C"/></e>
	<e path="haxe.ds.Option"><c path="combine4.D"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple4">
	<c path="combine4.A"/>
	<c path="combine4.B"/>
	<c path="combine4.C"/>
	<c path="combine4.D"/>
</x></e>
</f></combine4>
		<combine5 public="1" params="A:B:C:D:E" get="inline" set="null" line="321" static="1"><f a="a:b:c:d:e">
	<e path="haxe.ds.Option"><c path="combine5.A"/></e>
	<e path="haxe.ds.Option"><c path="combine5.B"/></e>
	<e path="haxe.ds.Option"><c path="combine5.C"/></e>
	<e path="haxe.ds.Option"><c path="combine5.D"/></e>
	<e path="haxe.ds.Option"><c path="combine5.E"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple5">
	<c path="combine5.A"/>
	<c path="combine5.B"/>
	<c path="combine5.C"/>
	<c path="combine5.D"/>
	<c path="combine5.E"/>
</x></e>
</f></combine5>
		<combine6 public="1" params="A:B:C:D:E:F" get="inline" set="null" line="324" static="1"><f a="a:b:c:d:e:f">
	<e path="haxe.ds.Option"><c path="combine6.A"/></e>
	<e path="haxe.ds.Option"><c path="combine6.B"/></e>
	<e path="haxe.ds.Option"><c path="combine6.C"/></e>
	<e path="haxe.ds.Option"><c path="combine6.D"/></e>
	<e path="haxe.ds.Option"><c path="combine6.E"/></e>
	<e path="haxe.ds.Option"><c path="combine6.F"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple6">
	<c path="combine6.A"/>
	<c path="combine6.B"/>
	<c path="combine6.C"/>
	<c path="combine6.D"/>
	<c path="combine6.E"/>
	<c path="combine6.F"/>
</x></e>
</f></combine6>
		<spread2 public="1" params="A:B:C" get="inline" set="null" line="327" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple2">
	<c path="spread2.A"/>
	<c path="spread2.B"/>
</x></e>
	<f a=":">
		<c path="spread2.A"/>
		<c path="spread2.B"/>
		<c path="spread2.C"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread2.C"/></e>
</f></spread2>
		<spread public="1" params="A:B:C" get="inline" set="null" line="332" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple2">
	<c path="spread.A"/>
	<c path="spread.B"/>
</x></e>
	<f a=":">
		<c path="spread.A"/>
		<c path="spread.B"/>
		<c path="spread.C"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread.C"/></e>
</f></spread>
		<spread3 public="1" params="A:B:C:D" get="inline" set="null" line="335" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple3">
	<c path="spread3.A"/>
	<c path="spread3.B"/>
	<c path="spread3.C"/>
</x></e>
	<f a="::">
		<c path="spread3.A"/>
		<c path="spread3.B"/>
		<c path="spread3.C"/>
		<c path="spread3.D"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread3.D"/></e>
</f></spread3>
		<spread4 public="1" params="A:B:C:D:E" get="inline" set="null" line="340" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple4">
	<c path="spread4.A"/>
	<c path="spread4.B"/>
	<c path="spread4.C"/>
	<c path="spread4.D"/>
</x></e>
	<f a=":::">
		<c path="spread4.A"/>
		<c path="spread4.B"/>
		<c path="spread4.C"/>
		<c path="spread4.D"/>
		<c path="spread4.E"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread4.E"/></e>
</f></spread4>
		<spread5 public="1" params="A:B:C:D:E:F" get="inline" set="null" line="345" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple5">
	<c path="spread5.A"/>
	<c path="spread5.B"/>
	<c path="spread5.C"/>
	<c path="spread5.D"/>
	<c path="spread5.E"/>
</x></e>
	<f a="::::">
		<c path="spread5.A"/>
		<c path="spread5.B"/>
		<c path="spread5.C"/>
		<c path="spread5.D"/>
		<c path="spread5.E"/>
		<c path="spread5.F"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread5.F"/></e>
</f></spread5>
		<spread6 public="1" params="A:B:C:D:E:F:G" get="inline" set="null" line="350" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple6">
	<c path="spread6.A"/>
	<c path="spread6.B"/>
	<c path="spread6.C"/>
	<c path="spread6.D"/>
	<c path="spread6.E"/>
	<c path="spread6.F"/>
</x></e>
	<f a=":::::">
		<c path="spread6.A"/>
		<c path="spread6.B"/>
		<c path="spread6.C"/>
		<c path="spread6.D"/>
		<c path="spread6.E"/>
		<c path="spread6.F"/>
		<c path="spread6.G"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread6.G"/></e>
</f></spread6>
		<haxe_doc>Extension methods for the `haxe.ds.Option` type.</haxe_doc>
	</class>
	<abstract path="thx.Ordering" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" module="thx.Ord">
		<from><icast><e path="thx.OrderingImpl"/></icast></from>
		<this><e path="thx.OrderingImpl"/></this>
		<to><icast><e path="thx.OrderingImpl"/></icast></to>
		<impl><class path="thx._Ord.Ordering_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" private="1" module="thx.Ord">
	<fromInt public="1" set="method" line="8" static="1"><f a="value">
	<x path="Int"/>
	<x path="thx.Ordering"/>
</f></fromInt>
	<fromFloat public="1" set="method" line="11" static="1"><f a="value">
	<x path="Float"/>
	<x path="thx.Ordering"/>
</f></fromFloat>
	<toInt public="1" set="method" line="14" static="1">
		<f a="this">
			<e path="thx.OrderingImpl"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toInt>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx.Orderings" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" module="thx.Ord">
		<monoid public="1" set="null" expr="{ zero : EQ, append : function(o0:Ordering, o1:Ordering):Ordering return switch o0 {
	case LT:
		LT;	
	case EQ:
		o1;	
	case GT:
		GT;	
} }" line="27" static="1">
			<x path="thx.Monoid"><x path="thx.Ordering"/></x>
			<meta><m n=":value"><e>{ zero : EQ, append : function(o0:Ordering, o1:Ordering):Ordering return switch o0 {
	case LT:
		LT;	
	case EQ:
		o1;	
	case GT:
		GT;	
} }</e></m></meta>
		</monoid>
		<negate public="1" set="method" line="36" static="1"><f a="o">
	<x path="thx.Ordering"/>
	<x path="thx.Ordering"/>
</f></negate>
	</class>
	<abstract path="thx.Ord" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx">
		<from><icast><f a=":">
	<c path="thx.Ord.A"/>
	<c path="thx.Ord.A"/>
	<x path="thx.Ordering"/>
</f></icast></from>
		<this><f a=":">
	<c path="thx.Ord.A"/>
	<c path="thx.Ord.A"/>
	<x path="thx.Ordering"/>
</f></this>
		<to><icast><f a=":">
	<c path="thx.Ord.A"/>
	<c path="thx.Ord.A"/>
	<x path="thx.Ordering"/>
</f></icast></to>
		<meta><m n=":callable"/></meta>
		<impl><class path="thx._Ord.Ord_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" private="1" module="thx.Ord">
	<order public="1" set="method" line="45" static="1">
		<f a="this:a0:a1">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
			<x path="thx.Ordering"/>
		</f>
		<meta><m n=":impl"/></meta>
	</order>
	<max public="1" set="method" line="48" static="1">
		<f a="this:a0:a1">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</max>
	<min public="1" set="method" line="54" static="1">
		<f a="this:a0:a1">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</min>
	<equal public="1" set="method" line="60" static="1">
		<f a="this:a0:a1">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</equal>
	<contramap public="1" params="B" set="method" line="63" static="1">
		<f a="this:f">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<f a="">
				<c path="contramap.B"/>
				<c path="thx.Ord.A"/>
			</f>
			<x path="thx.Ord"><c path="contramap.B"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</contramap>
	<inverse public="1" set="method" line="66" static="1">
		<f a="this">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<x path="thx.Ord"><c path="thx.Ord.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</inverse>
	<intComparison public="1" set="method" line="69" static="1">
		<f a="this:a0:a1">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</intComparison>
	<fromIntComparison public="1" params="A" set="method" line="76" static="1"><f a="f">
	<f a=":">
		<c path="fromIntComparison.A"/>
		<c path="fromIntComparison.A"/>
		<x path="Int"/>
	</f>
	<x path="thx.Ord"><c path="fromIntComparison.A"/></x>
</f></fromIntComparison>
	<forComparable public="1" params="T" set="method" line="79" static="1"><f a=""><x path="thx.Ord"><c path="forComparable.T"/></x></f></forComparable>
	<forComparableOrd public="1" params="T" set="method" line="82" static="1"><f a=""><x path="thx.Ord"><c path="forComparableOrd.T"/></x></f></forComparableOrd>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<abstract path="thx.OrderedMap" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx">
		<this><c path="thx.OrderedMapImpl">
	<c path="thx.OrderedMap.K"/>
	<c path="thx.OrderedMap.V"/>
</c></this>
		<to><icast><c path="haxe.IMap">
	<c path="thx.OrderedMap.K"/>
	<c path="thx.OrderedMap.V"/>
</c></icast></to>
		<meta><m n=":forward">
	<e>length</e>
	<e>set</e>
	<e>insert</e>
	<e>exists</e>
	<e>remove</e>
	<e>keys</e>
	<e>iterator</e>
	<e>tuples</e>
	<e>toArray</e>
	<e>toString</e>
	<e>keyAt</e>
	<e>keyIndex</e>
	<e>valueIndex</e>
	<e>removeAt</e>
</m></meta>
		<impl><class path="thx._OrderedMap.OrderedMap_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" private="1" module="thx.OrderedMap">
	<createString public="1" params="K:V" get="inline" set="null" line="8" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createString.K"/>
	<c path="createString.V"/>
</x></f></createString>
	<createInt public="1" params="K:V" get="inline" set="null" line="13" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createInt.K"/>
	<c path="createInt.V"/>
</x></f></createInt>
	<createObject public="1" params="K:V" get="inline" set="null" line="17" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createObject.K"/>
	<c path="createObject.V"/>
</x></f></createObject>
	<createEnum public="1" params="K:V" get="inline" set="null" line="20" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createEnum.K"/>
	<c path="createEnum.V"/>
</x></f></createEnum>
	<_new get="inline" set="null" line="23" static="1">
		<f a="inst">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<x path="thx.OrderedMap">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<getOption public="1" get="inline" set="null" line="26" static="1">
		<f a="this:key">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<c path="thx.OrderedMap.K"/>
			<e path="haxe.ds.Option"><c path="thx.OrderedMap.V"/></e>
		</f>
		<meta><m n=":impl"/></meta>
	</getOption>
	<empty public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<x path="thx.OrderedMap">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</empty>
	<copyTo public="1" get="inline" set="null" line="32" static="1">
		<f a="this:that">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<x path="thx.OrderedMap">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</x>
			<x path="thx.OrderedMap">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</copyTo>
	<clone public="1" get="inline" set="null" line="38" static="1">
		<f a="this">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<x path="thx.OrderedMap">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<get public="1" get="inline" set="null" line="41" static="1">
		<f a="this:key">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<c path="thx.OrderedMap.K"/>
			<t path="Null"><c path="thx.OrderedMap.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<at public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<x path="Int"/>
			<t path="Null"><c path="thx.OrderedMap.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</at>
	<arrayWrite public="1" get="inline" set="null" line="47" static="1">
		<f a="this:k:v">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<c path="thx.OrderedMap.K"/>
			<c path="thx.OrderedMap.V"/>
			<c path="thx.OrderedMap.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<self public="1" get="inline" set="null" line="50" static="1">
		<f a="this">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
		</f>
		<meta><m n=":impl"/></meta>
	</self>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._OrderedMap.OrderedMap_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" private="1" module="thx.OrderedMap">
		<createString public="1" params="K:V" get="inline" set="null" line="8" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createString.K"/>
	<c path="createString.V"/>
</x></f></createString>
		<createInt public="1" params="K:V" get="inline" set="null" line="13" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createInt.K"/>
	<c path="createInt.V"/>
</x></f></createInt>
		<createObject public="1" params="K:V" get="inline" set="null" line="17" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createObject.K"/>
	<c path="createObject.V"/>
</x></f></createObject>
		<createEnum public="1" params="K:V" get="inline" set="null" line="20" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createEnum.K"/>
	<c path="createEnum.V"/>
</x></f></createEnum>
		<_new get="inline" set="null" line="23" static="1">
			<f a="inst">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<x path="thx.OrderedMap">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<getOption public="1" get="inline" set="null" line="26" static="1">
			<f a="this:key">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<c path="thx.OrderedMap.K"/>
				<e path="haxe.ds.Option"><c path="thx.OrderedMap.V"/></e>
			</f>
			<meta><m n=":impl"/></meta>
		</getOption>
		<empty public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<x path="thx.OrderedMap">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</empty>
		<copyTo public="1" get="inline" set="null" line="32" static="1">
			<f a="this:that">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<x path="thx.OrderedMap">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</x>
				<x path="thx.OrderedMap">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</copyTo>
		<clone public="1" get="inline" set="null" line="38" static="1">
			<f a="this">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<x path="thx.OrderedMap">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<get public="1" get="inline" set="null" line="41" static="1">
			<f a="this:key">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<c path="thx.OrderedMap.K"/>
				<t path="Null"><c path="thx.OrderedMap.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<at public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<x path="Int"/>
				<t path="Null"><c path="thx.OrderedMap.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</at>
		<arrayWrite public="1" get="inline" set="null" line="47" static="1">
			<f a="this:k:v">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
				<c path="thx.OrderedMap.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<self public="1" get="inline" set="null" line="50" static="1">
			<f a="this">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
			</f>
			<meta><m n=":impl"/></meta>
		</self>
		<meta><m n=":final"/></meta>
	</class>
	<class path="thx.OrderedMapImpl" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" module="thx.OrderedMap">
		<implements path="haxe.IMap">
			<c path="thx.OrderedMapImpl.K"/>
			<c path="thx.OrderedMapImpl.V"/>
		</implements>
		<map><c path="haxe.IMap">
	<c path="thx.OrderedMapImpl.K"/>
	<c path="thx.OrderedMapImpl.V"/>
</c></map>
		<arr><c path="Array"><c path="thx.OrderedMapImpl.K"/></c></arr>
		<length public="1" set="null"><x path="Int"/></length>
		<get public="1" set="method" line="110"><f a="k">
	<c path="thx.OrderedMapImpl.K"/>
	<t path="Null"><c path="thx.OrderedMapImpl.V"/></t>
</f></get>
		<keyAt public="1" set="method" line="113"><f a="index">
	<x path="Int"/>
	<t path="Null"><c path="thx.OrderedMapImpl.K"/></t>
</f></keyAt>
		<keyIndex public="1" set="method" line="116"><f a="k">
	<c path="thx.OrderedMapImpl.K"/>
	<x path="Int"/>
</f></keyIndex>
		<valueIndex public="1" set="method" line="123"><f a="v">
	<c path="thx.OrderedMapImpl.V"/>
	<x path="Int"/>
</f></valueIndex>
		<at public="1" set="method" line="130"><f a="index">
	<x path="Int"/>
	<t path="Null"><c path="thx.OrderedMapImpl.V"/></t>
</f></at>
		<set public="1" set="method" line="133"><f a="k:v">
	<c path="thx.OrderedMapImpl.K"/>
	<c path="thx.OrderedMapImpl.V"/>
	<x path="Void"/>
</f></set>
		<empty public="1" set="method" line="141"><f a=""><c path="thx.OrderedMapImpl">
	<c path="thx.OrderedMapImpl.K"/>
	<c path="thx.OrderedMapImpl.V"/>
</c></f></empty>
		<setValue public="1" set="method" line="145">
			<f a="k:v">
				<c path="thx.OrderedMapImpl.K"/>
				<c path="thx.OrderedMapImpl.V"/>
				<c path="thx.OrderedMapImpl.V"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</setValue>
		<insert public="1" set="method" line="150"><f a="index:k:v">
	<x path="Int"/>
	<c path="thx.OrderedMapImpl.K"/>
	<c path="thx.OrderedMapImpl.V"/>
	<x path="Void"/>
</f></insert>
		<exists public="1" set="method" line="157"><f a="k">
	<c path="thx.OrderedMapImpl.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method" line="160"><f a="k">
	<c path="thx.OrderedMapImpl.K"/>
	<x path="Bool"/>
</f></remove>
		<removeAt public="1" set="method" line="168"><f a="index">
	<x path="Int"/>
	<x path="Bool"/>
</f></removeAt>
		<keys public="1" set="method" line="178"><f a=""><t path="Iterator"><c path="thx.OrderedMapImpl.K"/></t></f></keys>
		<iterator public="1" set="method" line="181"><f a=""><t path="Iterator"><c path="thx.OrderedMapImpl.V"/></t></f></iterator>
		<tuples public="1" set="method" line="184"><f a=""><c path="Array"><x path="thx.Tuple2">
	<c path="thx.OrderedMapImpl.K"/>
	<c path="thx.OrderedMapImpl.V"/>
</x></c></f></tuples>
		<toString public="1" set="method" line="188"><f a=""><c path="String"/></f></toString>
		<toArray public="1" set="method" line="203"><f a=""><c path="Array"><c path="thx.OrderedMapImpl.V"/></c></f></toArray>
		<new set="method" line="104"><f a="map">
	<c path="haxe.IMap">
		<c path="thx.OrderedMapImpl.K"/>
		<c path="thx.OrderedMapImpl.V"/>
	</c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.EnumValueOrderedMap" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" module="thx.OrderedMap">
		<extends path="thx.OrderedMapImpl">
			<c path="thx.EnumValueOrderedMap.K"/>
			<c path="thx.EnumValueOrderedMap.V"/>
		</extends>
		<empty public="1" set="method" line="58" override="1"><f a=""><c path="thx.OrderedMapImpl">
	<c path="thx.EnumValueOrderedMap.K"/>
	<c path="thx.EnumValueOrderedMap.V"/>
</c></f></empty>
		<new public="1" set="method" line="55"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="thx.IntOrderedMap" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" module="thx.OrderedMap">
		<extends path="thx.OrderedMapImpl">
			<c path="thx.IntOrderedMap.K"/>
			<c path="thx.IntOrderedMap.V"/>
		</extends>
		<empty public="1" set="method" line="66" override="1"><f a=""><c path="thx.OrderedMapImpl">
	<c path="thx.IntOrderedMap.K"/>
	<c path="thx.IntOrderedMap.V"/>
</c></f></empty>
		<new public="1" set="method" line="63"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="thx.ObjectOrderedMap" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" module="thx.OrderedMap">
		<extends path="thx.OrderedMapImpl">
			<c path="thx.ObjectOrderedMap.K"/>
			<c path="thx.ObjectOrderedMap.V"/>
		</extends>
		<empty public="1" set="method" line="74" override="1"><f a=""><c path="thx.OrderedMapImpl">
	<c path="thx.ObjectOrderedMap.K"/>
	<c path="thx.ObjectOrderedMap.V"/>
</c></f></empty>
		<new public="1" set="method" line="71"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="thx.StringOrderedMap" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" module="thx.OrderedMap">
		<extends path="thx.OrderedMapImpl">
			<c path="thx.StringOrderedMap.K"/>
			<c path="thx.StringOrderedMap.V"/>
		</extends>
		<fromArray public="1" params="T:K:V" set="method" line="85" static="1"><f a="array:toKey:toVal">
	<x path="thx.ReadonlyArray"><c path="fromArray.T"/></x>
	<f a="">
		<c path="fromArray.T"/>
		<c path="fromArray.K"/>
	</f>
	<f a="">
		<c path="fromArray.T"/>
		<c path="fromArray.V"/>
	</f>
	<x path="thx.OrderedMap">
		<c path="fromArray.K"/>
		<c path="fromArray.V"/>
	</x>
</f></fromArray>
		<fromValueArray public="1" params="K:V" get="inline" set="null" line="91" static="1"><f a="array:toKey">
	<x path="thx.ReadonlyArray"><c path="fromValueArray.V"/></x>
	<f a="">
		<c path="fromValueArray.V"/>
		<c path="fromValueArray.K"/>
	</f>
	<x path="thx.OrderedMap">
		<c path="fromValueArray.K"/>
		<c path="fromValueArray.V"/>
	</x>
</f></fromValueArray>
		<fromTuples public="1" params="K:V" get="inline" set="null" line="94" static="1"><f a="array">
	<x path="thx.ReadonlyArray"><t path="thx.Tuple">
	<c path="fromTuples.K"/>
	<c path="fromTuples.V"/>
</t></x>
	<x path="thx.OrderedMap">
		<c path="fromTuples.K"/>
		<c path="fromTuples.V"/>
	</x>
</f></fromTuples>
		<empty public="1" set="method" line="82" override="1"><f a=""><c path="thx.OrderedMapImpl">
	<c path="thx.StringOrderedMap.K"/>
	<c path="thx.StringOrderedMap.V"/>
</c></f></empty>
		<new public="1" set="method" line="79"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="thx.ReadonlyArray" params="T" file="/Users/francoponticelli/projects/thx.core/src/thx/ReadonlyArray.hx">
		<from><icast><c path="Array"><c path="thx.ReadonlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="thx.ReadonlyArray.T"/></c></this>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>join</e>
	<e>map</e>
	<e>slice</e>
	<e>toString</e>
</m></meta>
		<impl><class path="thx._ReadonlyArray.ReadonlyArray_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/ReadonlyArray.hx" private="1" module="thx.ReadonlyArray">
	<empty public="1" params="T" get="inline" set="null" line="8" static="1"><f a=""><x path="thx.ReadonlyArray"><c path="empty.T"/></x></f></empty>
	<flatten public="1" params="T" set="method" line="12" static="1"><f a="array">
	<x path="thx.ReadonlyArray"><x path="thx.ReadonlyArray"><c path="flatten.T"/></x></x>
	<x path="thx.ReadonlyArray"><c path="flatten.T"/></x>
</f></flatten>
	<indexOf public="1" set="method" line="19" static="1">
		<f a="this:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</indexOf>
	<lastIndexOf public="1" set="method" line="27" static="1">
		<f a="this:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</lastIndexOf>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get get="inline" set="null" line="40" static="1">
		<f a="this:i">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="Int"/>
			<c path="thx.ReadonlyArray.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<head public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</head>
	<tail public="1" get="inline" set="null" line="46" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</tail>
	<reduce public="1" params="A:B" set="method" line="49" static="1">
		<f a="this:arr:f:initial">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="Array"><c path="reduce.A"/></c>
			<f a=":">
				<c path="reduce.B"/>
				<c path="reduce.A"/>
				<c path="reduce.B"/>
			</f>
			<c path="reduce.B"/>
			<c path="reduce.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</reduce>
	<reducei public="1" params="A:B" set="method" line="58" static="1">
		<f a="array:f:initial">
			<x path="thx.ReadonlyArray"><c path="reducei.A"/></x>
			<f a="::">
				<c path="reducei.B"/>
				<c path="reducei.A"/>
				<x path="Int"/>
				<c path="reducei.B"/>
			</f>
			<c path="reducei.B"/>
			<c path="reducei.B"/>
		</f>
		<haxe_doc>It is the same as `reduce` but with the extra integer `index` parameter.</haxe_doc>
	</reducei>
	<reverse public="1" set="method" line="64" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
	<toArray public="1" get="inline" set="null" line="70" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</toArray>
	<unsafe public="1" get="inline" set="null" line="73" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</unsafe>
	<concat public="1" get="inline" set="null" line="76" static="1">
		<f a="this:that">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</concat>
	<insertAt public="1" get="inline" set="null" line="79" static="1">
		<f a="this:pos:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="Int"/>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</insertAt>
	<insertAfter public="1" set="method" line="82" static="1">
		<f a="this:ref:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</insertAfter>
	<insertBefore public="1" get="inline" set="null" line="89" static="1">
		<f a="this:ref:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</insertBefore>
	<replace public="1" set="method" line="92" static="1">
		<f a="this:ref:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</replace>
	<replaceAt public="1" get="inline" set="null" line="98" static="1">
		<f a="this:pos:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="Int"/>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</replaceAt>
	<remove public="1" get="inline" set="null" line="101" static="1">
		<f a="this:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</remove>
	<removeAt public="1" get="inline" set="null" line="104" static="1">
		<f a="this:pos">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="Int"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</removeAt>
	<prepend public="1" get="inline" set="null" line="107" static="1">
		<f a="this:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</prepend>
	<append public="1" get="inline" set="null" line="110" static="1">
		<f a="this:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</append>
	<unshift public="1" get="inline" set="null" line="116" static="1">
		<f a="this:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Alias for prepend</haxe_doc>
	</unshift>
	<shift public="1" set="method" line="122" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<t path="thx.Tuple">
				<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes and returns the value at the beginning of the array.  The original ReadonlyArray is unchanged.</haxe_doc>
	</shift>
	<push public="1" get="inline" set="null" line="132" static="1">
		<f a="this:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Alias for append</haxe_doc>
	</push>
	<pop public="1" get="inline" set="null" line="138" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<t path="thx.Tuple">
				<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes and returns the value at the end of the array.  The original ReadonlyArray is unchanged.</haxe_doc>
	</pop>
	<iterator public="1" get="inline" set="null" line="145" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<t path="Iterator"><c path="thx.ReadonlyArray.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._ReadonlyArray.ReadonlyArray_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/ReadonlyArray.hx" private="1" module="thx.ReadonlyArray">
		<empty public="1" params="T" get="inline" set="null" line="8" static="1"><f a=""><x path="thx.ReadonlyArray"><c path="empty.T"/></x></f></empty>
		<flatten public="1" params="T" set="method" line="12" static="1"><f a="array">
	<x path="thx.ReadonlyArray"><x path="thx.ReadonlyArray"><c path="flatten.T"/></x></x>
	<x path="thx.ReadonlyArray"><c path="flatten.T"/></x>
</f></flatten>
		<indexOf public="1" set="method" line="19" static="1">
			<f a="this:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</indexOf>
		<lastIndexOf public="1" set="method" line="27" static="1">
			<f a="this:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</lastIndexOf>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get get="inline" set="null" line="40" static="1">
			<f a="this:i">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="Int"/>
				<c path="thx.ReadonlyArray.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<head public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</head>
		<tail public="1" get="inline" set="null" line="46" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</tail>
		<reduce public="1" params="A:B" set="method" line="49" static="1">
			<f a="this:arr:f:initial">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="Array"><c path="reduce.A"/></c>
				<f a=":">
					<c path="reduce.B"/>
					<c path="reduce.A"/>
					<c path="reduce.B"/>
				</f>
				<c path="reduce.B"/>
				<c path="reduce.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</reduce>
		<reducei public="1" params="A:B" set="method" line="58" static="1">
			<f a="array:f:initial">
				<x path="thx.ReadonlyArray"><c path="reducei.A"/></x>
				<f a="::">
					<c path="reducei.B"/>
					<c path="reducei.A"/>
					<x path="Int"/>
					<c path="reducei.B"/>
				</f>
				<c path="reducei.B"/>
				<c path="reducei.B"/>
			</f>
			<haxe_doc>It is the same as `reduce` but with the extra integer `index` parameter.</haxe_doc>
		</reducei>
		<reverse public="1" set="method" line="64" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
		<toArray public="1" get="inline" set="null" line="70" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</toArray>
		<unsafe public="1" get="inline" set="null" line="73" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</unsafe>
		<concat public="1" get="inline" set="null" line="76" static="1">
			<f a="this:that">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</concat>
		<insertAt public="1" get="inline" set="null" line="79" static="1">
			<f a="this:pos:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="Int"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</insertAt>
		<insertAfter public="1" set="method" line="82" static="1">
			<f a="this:ref:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</insertAfter>
		<insertBefore public="1" get="inline" set="null" line="89" static="1">
			<f a="this:ref:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</insertBefore>
		<replace public="1" set="method" line="92" static="1">
			<f a="this:ref:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</replace>
		<replaceAt public="1" get="inline" set="null" line="98" static="1">
			<f a="this:pos:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="Int"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</replaceAt>
		<remove public="1" get="inline" set="null" line="101" static="1">
			<f a="this:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</remove>
		<removeAt public="1" get="inline" set="null" line="104" static="1">
			<f a="this:pos">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="Int"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</removeAt>
		<prepend public="1" get="inline" set="null" line="107" static="1">
			<f a="this:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</prepend>
		<append public="1" get="inline" set="null" line="110" static="1">
			<f a="this:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</append>
		<unshift public="1" get="inline" set="null" line="116" static="1">
			<f a="this:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Alias for prepend</haxe_doc>
		</unshift>
		<shift public="1" set="method" line="122" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<t path="thx.Tuple">
					<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
					<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes and returns the value at the beginning of the array.  The original ReadonlyArray is unchanged.</haxe_doc>
		</shift>
		<push public="1" get="inline" set="null" line="132" static="1">
			<f a="this:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Alias for append</haxe_doc>
		</push>
		<pop public="1" get="inline" set="null" line="138" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<t path="thx.Tuple">
					<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
					<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes and returns the value at the end of the array.  The original ReadonlyArray is unchanged.</haxe_doc>
		</pop>
		<iterator public="1" get="inline" set="null" line="145" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<t path="Iterator"><c path="thx.ReadonlyArray.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Semigroup" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Semigroup.hx">
		<from><icast><f a=":">
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
</f></icast></from>
		<this><f a=":">
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
</f></this>
		<to><icast><f a=":">
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
</f></icast></to>
		<impl><class path="thx._Semigroup.Semigroup_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Semigroup.hx" private="1" module="thx.Semigroup">
	<append public="1" get="accessor" set="null" static="1">
		<f a=":">
			<c path="thx.Semigroup.A"/>
			<c path="thx.Semigroup.A"/>
			<c path="thx.Semigroup.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</append>
	<get_append set="method" line="6" static="1">
		<f a="this">
			<f a=":">
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
			</f>
			<f a=":">
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
			</f>
		</f>
		<meta><m n=":impl"/></meta>
	</get_append>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Semigroup.Semigroup_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Semigroup.hx" private="1" module="thx.Semigroup">
		<append public="1" get="accessor" set="null" static="1">
			<f a=":">
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</append>
		<get_append set="method" line="6" static="1">
			<f a="this">
				<f a=":">
					<c path="thx.Semigroup.A"/>
					<c path="thx.Semigroup.A"/>
					<c path="thx.Semigroup.A"/>
				</f>
				<f a=":">
					<c path="thx.Semigroup.A"/>
					<c path="thx.Semigroup.A"/>
					<c path="thx.Semigroup.A"/>
				</f>
			</f>
			<meta><m n=":impl"/></meta>
		</get_append>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Set" params="T" file="/Users/francoponticelli/projects/thx.core/src/thx/Set.hx">
		<this><x path="Map">
	<c path="thx.Set.T"/>
	<x path="Bool"/>
</x></this>
		<to>
			<icast field="toArray"><c path="Array"><c path="thx.Set.T"/></c></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<haxe_doc>A set is a list of unique values.  Value equality is determined using `==`.

See thx.HashSet for an alternative set implementation that uses a hash code to determine item equality.</haxe_doc>
		<impl><class path="thx._Set.Set_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Set.hx" private="1" module="thx.Set">
	<createString public="1" set="method" line="12" static="1">
		<f a="?it">
			<t path="Iterable"><c path="String"/></t>
			<x path="thx.Set"><c path="String"/></x>
		</f>
		<haxe_doc>Creates a Set of Strings with optional initial values.</haxe_doc>
	</createString>
	<createInt public="1" set="method" line="23" static="1">
		<f a="?it">
			<t path="Iterable"><x path="Int"/></t>
			<x path="thx.Set"><x path="Int"/></x>
		</f>
		<haxe_doc>Creates a Set of Ints with optional initial values.</haxe_doc>
	</createInt>
	<createObject public="1" params="T" set="method" line="34" static="1">
		<f a="?it">
			<t path="Iterable"><c path="createObject.T"/></t>
			<x path="thx.Set"><c path="createObject.T"/></x>
		</f>
		<haxe_doc>Creates a Set of anonymous objects with optional initial values.</haxe_doc>
	</createObject>
	<createEnum public="1" params="T" set="method" line="45" static="1">
		<f a="?arr">
			<t path="Iterable"><c path="createEnum.T"/></t>
			<x path="thx.Set"><c path="createEnum.T"/></x>
		</f>
		<haxe_doc>Creates a Set of EnumValue, with optional initial values.</haxe_doc>
	</createEnum>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new get="inline" set="null" line="55" static="1">
		<f a="map">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<add public="1" set="method" line="63" static="1">
		<f a="this:v">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="thx.Set.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`add` pushes a value into `Set` if the value was not already present.

It returns a boolean value indicating if `Set` was changed by the operation or not.</haxe_doc>
	</add>
	<copy public="1" set="method" line="74" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`copy` creates a new `Set` with copied elements.</haxe_doc>
	</copy>
	<empty public="1" set="method" line="84" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates an empty copy of the current set.</haxe_doc>
	</empty>
	<difference public="1" get="inline" set="null" line="93" static="1">
		<f a="this:set">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
		<haxe_doc>`difference` creates a new `Set` with elements from the first set excluding the elements
from the second.</haxe_doc>
	</difference>
	<filter public="1" set="method" line="100" static="1">
		<f a="this:predicate">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<f a="">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</f>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</filter>
	<map public="1" params="TOut" set="method" line="107" static="1">
		<f a="this:f">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<f a="">
				<c path="thx.Set.T"/>
				<c path="map.TOut"/>
			</f>
			<c path="Array"><c path="map.TOut"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<exists public="1" get="inline" set="null" line="116" static="1">
		<f a="this:v">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="thx.Set.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`exists` returns `true` if it contains an element that is equals to `v`.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="119" static="1">
		<f a="this:v">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="thx.Set.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</remove>
	<intersection public="1" get="inline" set="null" line="125" static="1">
		<f a="this:set">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`intersection` returns a Set with elements that are presents in both sets</haxe_doc>
	</intersection>
	<push public="1" get="inline" set="null" line="136" static="1">
		<f a="this:v">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="thx.Set.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Like `add` but doesn't notify if the addition was successful or not.</haxe_doc>
	</push>
	<pushMany public="1" set="method" line="142" static="1">
		<f a="this:values">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<t path="Iterable"><c path="thx.Set.T"/></t>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Pushes many values to the set</haxe_doc>
	</pushMany>
	<reduce public="1" params="TOut" set="method" line="146" static="1">
		<f a="this:handler:acc">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<f a=":">
				<c path="reduce.TOut"/>
				<c path="thx.Set.T"/>
				<c path="reduce.TOut"/>
			</f>
			<c path="reduce.TOut"/>
			<c path="reduce.TOut"/>
		</f>
		<meta><m n=":impl"/></meta>
	</reduce>
	<iterator public="1" set="method" line="156" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<t path="Iterator"><c path="thx.Set.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Iterates the values of the Set.</haxe_doc>
	</iterator>
	<union public="1" get="inline" set="null" line="162" static="1">
		<f a="this:set">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
		<haxe_doc>Union creates a new Set with elements from both sets.</haxe_doc>
	</union>
	<toArray public="1" set="method" line="173" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="Array"><c path="thx.Set.T"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[Converts a `Set<T>` into `Array<T>`. The returned array is a copy of the internal
array used by `Set`. This ensures that the set is not affected by unsafe operations
that might happen on the returned array.]]></haxe_doc>
	</toArray>
	<toString public="1" set="method" line="184" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Converts `Set` into `String`. To differentiate from normal `Array`s the output string
uses curly braces `{}` instead of square brackets `[]`.</haxe_doc>
	</toString>
	<get_length set="method" line="187" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Set.Set_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Set.hx" private="1" module="thx.Set">
		<createString public="1" set="method" line="12" static="1">
			<f a="?it">
				<t path="Iterable"><c path="String"/></t>
				<x path="thx.Set"><c path="String"/></x>
			</f>
			<haxe_doc>Creates a Set of Strings with optional initial values.</haxe_doc>
		</createString>
		<createInt public="1" set="method" line="23" static="1">
			<f a="?it">
				<t path="Iterable"><x path="Int"/></t>
				<x path="thx.Set"><x path="Int"/></x>
			</f>
			<haxe_doc>Creates a Set of Ints with optional initial values.</haxe_doc>
		</createInt>
		<createObject public="1" params="T" set="method" line="34" static="1">
			<f a="?it">
				<t path="Iterable"><c path="createObject.T"/></t>
				<x path="thx.Set"><c path="createObject.T"/></x>
			</f>
			<haxe_doc>Creates a Set of anonymous objects with optional initial values.</haxe_doc>
		</createObject>
		<createEnum public="1" params="T" set="method" line="45" static="1">
			<f a="?arr">
				<t path="Iterable"><c path="createEnum.T"/></t>
				<x path="thx.Set"><c path="createEnum.T"/></x>
			</f>
			<haxe_doc>Creates a Set of EnumValue, with optional initial values.</haxe_doc>
		</createEnum>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new get="inline" set="null" line="55" static="1">
			<f a="map">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<add public="1" set="method" line="63" static="1">
			<f a="this:v">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`add` pushes a value into `Set` if the value was not already present.

It returns a boolean value indicating if `Set` was changed by the operation or not.</haxe_doc>
		</add>
		<copy public="1" set="method" line="74" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`copy` creates a new `Set` with copied elements.</haxe_doc>
		</copy>
		<empty public="1" set="method" line="84" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates an empty copy of the current set.</haxe_doc>
		</empty>
		<difference public="1" get="inline" set="null" line="93" static="1">
			<f a="this:set">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
			<haxe_doc>`difference` creates a new `Set` with elements from the first set excluding the elements
from the second.</haxe_doc>
		</difference>
		<filter public="1" set="method" line="100" static="1">
			<f a="this:predicate">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<f a="">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</filter>
		<map public="1" params="TOut" set="method" line="107" static="1">
			<f a="this:f">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<f a="">
					<c path="thx.Set.T"/>
					<c path="map.TOut"/>
				</f>
				<c path="Array"><c path="map.TOut"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<exists public="1" get="inline" set="null" line="116" static="1">
			<f a="this:v">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`exists` returns `true` if it contains an element that is equals to `v`.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="119" static="1">
			<f a="this:v">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</remove>
		<intersection public="1" get="inline" set="null" line="125" static="1">
			<f a="this:set">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`intersection` returns a Set with elements that are presents in both sets</haxe_doc>
		</intersection>
		<push public="1" get="inline" set="null" line="136" static="1">
			<f a="this:v">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="thx.Set.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Like `add` but doesn't notify if the addition was successful or not.</haxe_doc>
		</push>
		<pushMany public="1" set="method" line="142" static="1">
			<f a="this:values">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<t path="Iterable"><c path="thx.Set.T"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Pushes many values to the set</haxe_doc>
		</pushMany>
		<reduce public="1" params="TOut" set="method" line="146" static="1">
			<f a="this:handler:acc">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<f a=":">
					<c path="reduce.TOut"/>
					<c path="thx.Set.T"/>
					<c path="reduce.TOut"/>
				</f>
				<c path="reduce.TOut"/>
				<c path="reduce.TOut"/>
			</f>
			<meta><m n=":impl"/></meta>
		</reduce>
		<iterator public="1" set="method" line="156" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<t path="Iterator"><c path="thx.Set.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Iterates the values of the Set.</haxe_doc>
		</iterator>
		<union public="1" get="inline" set="null" line="162" static="1">
			<f a="this:set">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
			<haxe_doc>Union creates a new Set with elements from both sets.</haxe_doc>
		</union>
		<toArray public="1" set="method" line="173" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="Array"><c path="thx.Set.T"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[Converts a `Set<T>` into `Array<T>`. The returned array is a copy of the internal
array used by `Set`. This ensures that the set is not affected by unsafe operations
that might happen on the returned array.]]></haxe_doc>
		</toArray>
		<toString public="1" set="method" line="184" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Converts `Set` into `String`. To differentiate from normal `Array`s the output string
uses curly braces `{}` instead of square brackets `[]`.</haxe_doc>
		</toString>
		<get_length set="method" line="187" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="thx.HaxeStringTools" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Strings.hx" module="thx.Strings">
		<c path="StringTools"/>
		<haxe_doc>Alias of `StringTools`, included so mixins work with `using thx.Strings;`</haxe_doc>
	</typedef>
	<class path="thx.Strings" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Strings.hx">
		<after public="1" set="method" line="20" static="1">
			<f a="value:searchFor">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`after` searches for the first occurrance of `searchFor` and returns the text after that.

If `searchFor` is not found, an empty string is returned.</haxe_doc>
		</after>
		<afterLast public="1" set="method" line="33" static="1">
			<f a="value:searchFor">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`afterLast` searches for the last occurrance of `searchFor` and returns the text after that.

  If `searchFor` is not found, an empty string is returned.</haxe_doc>
		</afterLast>
		<capitalize public="1" get="inline" set="null" line="44" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`capitalize` returns a string with the first character convert to upper case.</haxe_doc>
		</capitalize>
		<capitalizeWords public="1" set="method" line="51" static="1">
			<f a="value:?whiteSpaceOnly" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ whiteSpaceOnly : false }</e></m></meta>
			<haxe_doc>Capitalize the first letter of every word in `value`. If `whiteSpaceOnly` is set to `true`
the process is limited to whitespace separated words.</haxe_doc>
		</capitalizeWords>
		<canonicalizeNewlines public="1" set="method" line="66" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces occurrances of `\r\n`, `\n\r`, `\r` with `\n`;</haxe_doc>
		</canonicalizeNewlines>
		<caseInsensitiveCompare public="1" set="method" line="72" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares two strings ignoring their case.</haxe_doc>
		</caseInsensitiveCompare>
		<caseInsensitiveEndsWith public="1" get="inline" set="null" line="85" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `s` ends with `end` ignoring their case.</haxe_doc>
		</caseInsensitiveEndsWith>
		<caseInsensitiveEndsWithAny public="1" get="inline" set="null" line="91" static="1">
			<f a="s:values">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares a string `s` with many `values` and see if one of them matches its end ignoring their case.</haxe_doc>
		</caseInsensitiveEndsWithAny>
		<caseInsensitiveStartsWith public="1" get="inline" set="null" line="97" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares two strings ignoring their case.</haxe_doc>
		</caseInsensitiveStartsWith>
		<caseInsensitiveStartsWithAny public="1" get="inline" set="null" line="103" static="1">
			<f a="s:values">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares a string `s` with many `values` and see if one of them matches its beginning ignoring their case.</haxe_doc>
		</caseInsensitiveStartsWithAny>
		<collapse public="1" set="method" line="114" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>It cleans up all the whitespaces in the passed `value`. `collapse` does the following:

  - remove trailing/leading whitespaces
  - within the string, it collapses seqeunces of whitespaces into a single space character

For whitespaces in this description, it is intended to be anything that is matched by the regular expression `\s`.</haxe_doc>
		</collapse>
		<compare public="1" get="inline" set="null" line="121" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It compares to string and it returns a negative number if `a` is inferior to `b`, zero if they are the same,
or otherwise a positive non-sero number.</haxe_doc>
		</compare>
		<order public="1" set="null" expr="Ord.fromIntComparison(compare)" line="128" static="1">
			<x path="thx.Ord"><c path="String"/></x>
			<meta><m n=":value"><e>Ord.fromIntComparison(compare)</e></m></meta>
		</order>
		<caseInsensitiveContains public="1" get="inline" set="null" line="133" static="1">
			<f a="s:test">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`contains` returns `true` if `s` contains one or more occurrences of `test` regardless of the text case.</haxe_doc>
		</caseInsensitiveContains>
		<contains public="1" get="inline" set="null" line="143" static="1">
			<f a="s:test">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`contains` returns `true` if `s` contains one or more occurrences of `test`.</haxe_doc>
		</contains>
		<count public="1" set="method" line="153" static="1">
			<f a="s:test">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Return the number of occurances of `test` in `s`.</haxe_doc>
		</count>
		<caseInsensitiveContainsAny public="1" get="inline" set="null" line="159" static="1">
			<f a="s:tests">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>`contains` returns `true` if `s` contains any of the strings in `tests` regardless of the text case</haxe_doc>
		</caseInsensitiveContainsAny>
		<containsAny public="1" get="inline" set="null" line="165" static="1">
			<f a="s:tests">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>`contains` returns `true` if `s` contains any of the strings in `tests`</haxe_doc>
		</containsAny>
		<dasherize public="1" set="method" line="172" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`dasherize` replaces all the occurrances of `_` with `-`;</haxe_doc>
		</dasherize>
		<diffAt public="1" set="method" line="182" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares strings `a` and `b` and returns the position where they differ.

```haxe
Strings.diffAt("abcdef", "abc123"); // returns 3
```</haxe_doc>
		</diffAt>
		<ellipsis public="1" set="method" line="198" static="1">
			<f a="s:?maxlen:?symbol" v=":20:&quot;…&quot;">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ symbol : "…", maxlen : 20 }</e></m></meta>
			<haxe_doc>`ellipsis` truncates `s` at len `maxlen` replaces the last characters with the content
of `symbol`.

```haxe
'thx is a nice library'.ellipsis(8); // returns 'thx is …'
```</haxe_doc>
		</ellipsis>
		<ellipsisMiddle public="1" set="method" line="218" static="1">
			<f a="s:?maxlen:?symbol" v=":20:&quot;…&quot;">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ symbol : "…", maxlen : 20 }</e></m></meta>
			<haxe_doc>Same as `ellipsis` but puts the symbol in the middle of the string and not to the end.

```haxe
'thx is a nice library'.ellipsisMiddle(16); // returns 'thx is … library'
```</haxe_doc>
		</ellipsisMiddle>
		<endsWithAny public="1" set="method" line="235" static="1">
			<f a="s:values">
				<c path="String"/>
				<t path="Iterable"><c path="String"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `s` ends with any of the values in `values`.</haxe_doc>
		</endsWithAny>
		<filter public="1" set="method" line="242" static="1">
			<f a="s:predicate">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>`filter` applies `predicate` character by character to `s` and it returns a filtered
version of the string.</haxe_doc>
		</filter>
		<filterCharcode public="1" set="method" line="250" static="1">
			<f a="s:predicate">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Bool"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Same as `filter` but `predicate` operates on integer char codes instead of string characters.</haxe_doc>
		</filterCharcode>
		<from public="1" set="method" line="262" static="1">
			<f a="value:searchFor">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`from` searches for the first occurrance of `searchFor` and returns the text from that point on.

If `searchFor` is not found, an empty string is returned.</haxe_doc>
		</from>
		<HASCODE_MAX expr="2147483647" line="270" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":value"><e>2147483647</e></m></meta>
		</HASCODE_MAX>
		<HASCODE_MUL expr="31" line="271" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":value"><e>31</e></m></meta>
		</HASCODE_MUL>
		<hashCode public="1" set="method" line="272" static="1"><f a="value">
	<c path="String"/>
	<x path="Int"/>
</f></hashCode>
		<hasContent public="1" get="inline" set="null" line="284" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `value` is not `null` and contains at least one character.</haxe_doc>
		</hasContent>
		<humanize public="1" set="method" line="290" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Works the same as `underscore` but also replaces underscores with whitespaces.</haxe_doc>
		</humanize>
		<isAlpha public="1" set="method" line="296" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `s` contains only (and at least one) alphabetical characters.</haxe_doc>
		</isAlpha>
		<isAlphaNum public="1" get="inline" set="null" line="302" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isAlphaNum` returns `true` if the string only contains alpha-numeric characters.</haxe_doc>
		</isAlphaNum>
		<isBreakingWhitespace public="1" set="method" line="309" static="1"><f a="value">
	<c path="String"/>
	<x path="Bool"/>
</f></isBreakingWhitespace>
		<isLowerCase public="1" set="method" line="316" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the value string is composed of only lower cased characters
or case neutral characters.</haxe_doc>
		</isLowerCase>
		<isUpperCase public="1" set="method" line="323" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the value string is composed of only upper cased characters
or case neutral characters.</haxe_doc>
		</isUpperCase>
		<ifEmpty public="1" get="inline" set="null" line="329" static="1">
			<f a="value:alt">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`ifEmpty` returns `value` if it is neither `null` or empty, otherwise it returns `alt`</haxe_doc>
		</ifEmpty>
		<isDigitsOnly public="1" get="inline" set="null" line="335" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isDigitsOnly` returns `true` if the string only contains digits.</haxe_doc>
		</isDigitsOnly>
		<isEmpty public="1" set="method" line="345" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isEmpty` returns true if either `value` is null or is an empty string.</haxe_doc>
		</isEmpty>
		<lowerCaseFirst public="1" set="method" line="351" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert first letter in `value` to lower case.</haxe_doc>
		</lowerCaseFirst>
		<random public="1" set="method" line="357" static="1">
			<f a="value:?length" v=":1">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ length : 1 }</e></m></meta>
			<haxe_doc>Returns a random substring from the `value` argument. The length of such value is by default `1`.</haxe_doc>
		</random>
		<randomSequence public="1" set="method" line="363" static="1">
			<f a="seed:length">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a random sampling of the specified length from the seed string.</haxe_doc>
		</randomSequence>
		<randomSequence64 public="1" set="method" line="370" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Like `Strings.randomSequence`, but automatically uses `haxe.crypto.Base64.CHARS`
as the seed string.</haxe_doc>
		</randomSequence64>
		<iterator public="1" set="method" line="376" static="1">
			<f a="s">
				<c path="String"/>
				<t path="Iterator"><c path="String"/></t>
			</f>
			<haxe_doc>It returns an iterator holding in sequence one character of the string per iteration.</haxe_doc>
		</iterator>
		<map public="1" params="T" set="method" line="382" static="1">
			<f a="value:callback">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<c path="map.T"/>
				</f>
				<c path="Array"><c path="map.T"/></c>
			</f>
			<haxe_doc>It maps a string character by character using `callback`.</haxe_doc>
		</map>
		<remove public="1" get="inline" set="null" line="388" static="1">
			<f a="value:toremove">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>If present, it removes all the occurrences of `toremove` from `value`.</haxe_doc>
		</remove>
		<removeAfter public="1" set="method" line="394" static="1">
			<f a="value:toremove">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>If present, it removes the `toremove` text from the end of `value`.</haxe_doc>
		</removeAfter>
		<removeAt public="1" set="method" line="400" static="1">
			<f a="value:index:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes a slice from `index` to `index + length` from `value`.</haxe_doc>
		</removeAt>
		<removeBefore public="1" set="method" line="406" static="1">
			<f a="value:toremove">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>If present, it removes the `toremove` text from the beginning of `value`.</haxe_doc>
		</removeBefore>
		<removeOne public="1" set="method" line="412" static="1">
			<f a="value:toremove">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>If present, it removes the first occurrence of `toremove` from `value`.</haxe_doc>
		</removeOne>
		<repeat public="1" set="method" line="426" static="1">
			<f a="s:times">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>`repeat` builds a new string by repeating the argument `s`, n `times`.

```haxe
'Xy'.repeat(3); // generates 'XyXyXy'
```</haxe_doc>
		</repeat>
		<reverse public="1" set="method" line="432" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a new string whose characters are in reverse order.</haxe_doc>
		</reverse>
		<quote public="1" set="method" line="441" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a string in a quoted string.</haxe_doc>
		</quote>
		<splitOnce public="1" set="method" line="453" static="1">
			<f a="s:separator">
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Like `StringTools.split` but it only splits on the first occurrance of separator.</haxe_doc>
		</splitOnce>
		<startsWithAny public="1" set="method" line="463" static="1">
			<f a="s:values">
				<c path="String"/>
				<t path="Iterable"><c path="String"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `s` starts with any of the values in `values`.</haxe_doc>
		</startsWithAny>
		<stripTags public="1" set="method" line="470" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`stripTags` removes any HTML/XML markup from the string leaving only the concatenation
of the existing text nodes.</haxe_doc>
		</stripTags>
		<surround public="1" get="inline" set="null" line="481" static="1">
			<f a="s:left:?right">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Surrounds a string with the contents of `left` and `right`. If `right` is omitted,
`left` will be used on both sides;</haxe_doc>
		</surround>
		<toArray public="1" get="inline" set="null" line="487" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>It transforms a string into an `Array` of characters.</haxe_doc>
		</toArray>
		<toCharcodes public="1" get="inline" set="null" line="501" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>It transforms a string into an `Array` of char codes in integer format.</haxe_doc>
		</toCharcodes>
		<toChunks public="1" set="method" line="509" static="1">
			<f a="s:len">
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array of `String` whose elements are equally long (using `len`). If the string `s`
is not exactly divisible by `len` the last element of the array will be shorter.</haxe_doc>
		</toChunks>
		<toLines public="1" get="inline" set="null" line="521" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array of `String` split by line breaks.</haxe_doc>
		</toLines>
		<trimChars public="1" get="inline" set="null" line="527" static="1">
			<f a="value:charlist">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`trimChars` removes from the beginning and the end of the string any character that is present in `charlist`.</haxe_doc>
		</trimChars>
		<trimCharsLeft public="1" set="method" line="537" static="1">
			<f a="value:charlist">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`trimCharsLeft` removes from the beginning of the string any character that is present in `charlist`.</haxe_doc>
		</trimCharsLeft>
		<trimCharsRight public="1" set="method" line="554" static="1">
			<f a="value:charlist">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`trimCharsRight` removes from the end of the string any character that is present in `charlist`.</haxe_doc>
		</trimCharsRight>
		<underscore public="1" set="method" line="576" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`underscore` finds UpperCase characters and turns them into LowerCase and prepends them with a whtiespace.
Sequences of more than one UpperCase character are left untouched.</haxe_doc>
		</underscore>
		<upperCaseFirst public="1" set="method" line="587" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert first letter in `value` to upper case.</haxe_doc>
		</upperCaseFirst>
		<upTo public="1" set="method" line="595" static="1">
			<f a="value:searchFor">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`upTo` searches for the first occurrance of `searchFor` and returns the text up to that point.

If `searchFor` is not found, the entire string is returned.</haxe_doc>
		</upTo>
		<wrapColumns public="1" set="method" line="608" static="1">
			<f a="s:?columns:?indent:?newline" v=":78:&quot;&quot;:&quot;\n&quot;">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ newline : "\n", indent : "", columns : 78 }</e></m></meta>
			<haxe_doc>`wrapColumns` splits a long string into lines that are at most `columns` long.

Words whose length exceeds `columns` are not split.</haxe_doc>
		</wrapColumns>
		<upperMatch set="method" line="615" static="1"><f a="re">
	<c path="EReg"/>
	<c path="String"/>
</f></upperMatch>
		<wrapLine set="method" line="618" static="1"><f a="s:columns:indent:newline">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></wrapLine>
		<lpad public="1" set="method" line="649" static="1"><f a="s:char:length">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></lpad>
		<rpad public="1" set="method" line="658" static="1"><f a="s:char:length">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></rpad>
		<monoid public="1" set="null" expr="{ zero : &quot;&quot;, append : function(a:String, b:String) return a + b }" line="668" static="1">
			<x path="thx.Monoid"><c path="String"/></x>
			<meta><m n=":value"><e>{ zero : "", append : function(a:String, b:String) return a + b }</e></m></meta>
		</monoid>
		<UCWORDS expr="~/[^a-zA-Z]([a-z])/" line="670" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[^a-zA-Z]([a-z])/</e></m></meta>
		</UCWORDS>
		<IS_BREAKINGWHITESPACE expr="~/[^	
 ]/" line="671" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[^	
 ]/</e></m></meta>
		</IS_BREAKINGWHITESPACE>
		<IS_ALPHA expr="~/[^a-zA-Z]/" line="672" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[^a-zA-Z]/</e></m></meta>
		</IS_ALPHA>
		<UCWORDSWS expr="~/[ 	
][a-z]/" line="674" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[ 	
][a-z]/</e></m></meta>
		</UCWORDSWS>
		<ALPHANUM expr="~/^[a-z0-9]+$/" line="675" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[a-z0-9]+$/</e></m></meta>
		</ALPHANUM>
		<DIGITS expr="~/^[0-9]+$/" line="676" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</DIGITS>
		<STRIPTAGS expr="~/&lt;/?[a-z]+[^&gt;]*&gt;/" line="677" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/</?[a-z]+[^>]*>/]]></e></m></meta>
		</STRIPTAGS>
		<WSG expr="~/[ 	
]+/" line="679" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[ 	
]+/</e></m></meta>
		</WSG>
		<SPLIT_LINES expr="~/
|
|
|/" line="680" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/
|
|
|/</e></m></meta>
		</SPLIT_LINES>
		<CANONICALIZE_LINES expr="~/
|
|/" line="681" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/
|
|/</e></m></meta>
		</CANONICALIZE_LINES>
		<haxe_doc>Extension methods for strings.</haxe_doc>
	</class>
	<enum path="thx.TimePeriod" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/TimePeriod.hx">
		<Second/>
		<Minute/>
		<Hour/>
		<Day/>
		<Week/>
		<Month/>
		<Year/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="thx.Timer" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Timer.hx">
		<debounce public="1" set="method" line="27" static="1">
			<f a="callback:delayms:?leading" v="::false">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<x path="Bool"/>
				<f a=""><x path="Void"/></f>
			</f>
			<meta><m n=":value"><e>{ leading : false }</e></m></meta>
			<haxe_doc>Creates a function that delays the execution of `callback` by `delayms` every time it is
invoked. If `leading` is set to true, a first execution is guaranteed to happen as soon
as the returnd function is invoked.</haxe_doc>
		</debounce>
		<throttle public="1" set="method" line="47" static="1">
			<f a="callback:delayms:?leading" v="::false">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<x path="Bool"/>
				<f a=""><x path="Void"/></f>
			</f>
			<meta><m n=":value"><e>{ leading : false }</e></m></meta>
			<haxe_doc>The returned function executes `callback` at most once every `delayms` regardless of
how many times it is invoked in that timespance. Setting `leading` to true ensures
that the callback is invoked at the beginning of the cycle.</haxe_doc>
		</throttle>
		<timers expr="new Map&lt;Int,haxe.Timer&gt;()" line="68" static="1">
			<x path="Map">
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<Int,haxe.Timer>()]]></e></m></meta>
		</timers>
		<_id expr="0" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</_id>
		<repeat public="1" set="method" line="76" static="1">
			<f a="callback:delayms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>`Timer.repeat` continues to invoke `callback` until it is cancelled using the returned
cancel function.</haxe_doc>
		</repeat>
		<delay public="1" set="method" line="102" static="1">
			<f a="callback:delayms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>`Timer.delay` invokes `callback` after `delayms` milliseconds. The scheduling can be
canelled using the returned cancel function.</haxe_doc>
		</delay>
		<frame public="1" set="method" line="130" static="1">
			<f a="callback">
				<f a="">
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>Invokes `callback` at every frame using native implementation where available. A delta time
in milliseconds is passed since the latest time callback was invoked.</haxe_doc>
		</frame>
		<nextFrame public="1" set="method" line="183" static="1">
			<f a="callback">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>Delays `callback` untile the next frame using native implementation where available.</haxe_doc>
		</nextFrame>
		<FRAME_RATE expr="Math.round(1000 / 60)" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>Math.round(1000 / 60)</e></m></meta>
		</FRAME_RATE>
		<immediate public="1" set="method" line="217" static="1">
			<f a="callback">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>`Timer.immediate` works essentially like `Timer.delay` with the exception that the delay
will be the shortest allowed by the platform. How short the delay depends a lot on
the target platform.</haxe_doc>
		</immediate>
		<clear set="method" line="227" static="1"><f a="id">
	<unknown/>
	<x path="Void"/>
</f></clear>
		<time public="1" get="inline" set="null" line="250" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a time value in milliseconds. Where supported, the decimal value represents microseconds.

Note that the initial value might change from platform to platform so only delta measurements make sense.</haxe_doc>
		</time>
		<_resolution static="1"><t path="Null"><x path="Float"/></t></_resolution>
		<resolution public="1" set="method" line="270" static="1"><f a=""><x path="Float"/></f></resolution>
		<haxe_doc><![CDATA[`Timer` provides several meaning to delay the execution of code. At the moment it is only
implemented for platforms that have a native concept of Timer like Swf and JavaScript or c++/Neko
with OpenFL or NME.

All of the Timer methods return a function with signature Void -> Void that can be used to cancel
the timer.

```haxe
// set the execution delayed by 200ms
var cancel = Timer.delay(doSomethingLater, 200);

// cancel immediately (doSomethingLater will never be executed)
cancel();
```

Note that calling the cancel function multiple times have no effect after the first execution.]]></haxe_doc>
	</class>
	<class path="thx._Timer.TimerTask" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Timer.hx" private="1" module="thx.Timer">
		<extends path="java.util.TimerTask"/>
		<callback><f a=""><x path="Void"/></f></callback>
		<run public="1" set="method" line="341" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<new public="1" set="method" line="336"><f a="callback">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></new>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<abstract path="thx.Timestamp" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Timestamp.hx">
		<from>
			<icast><x path="Float"/></icast>
			<icast field="fromDate"><c path="Date"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="toDate"><c path="Date"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<haxe_doc>`Timestamp` provides additional methods on top of the `Float` as well as
automatic casting from and to Date/String.

```
import thx.Timestamp;
```

@author Jason O'Neil
@author Franco Ponticelli</haxe_doc>
		<impl><class path="thx._Timestamp.Timestamp_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Timestamp.hx" private="1" module="thx.Timestamp">
	<create public="1" get="inline" set="null" line="23" static="1">
		<f a="year:?month:?day:?hour:?minute:?second">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="thx.Timestamp"/>
		</f>
		<haxe_doc>Creates a timestamp by using the passed year, month, day, hour, minute, second.

Note that each argument can overflow its normal boundaries (e.g. a month value of `-33` is perfectly valid)
and the method will normalize that value by offsetting the other arguments by the right amount.</haxe_doc>
	</create>
	<now public="1" get="inline" set="null" line="26" static="1"><f a=""><x path="thx.Timestamp"/></f></now>
	<fromDate public="1" get="inline" set="null" line="29" static="1">
		<f a="d">
			<c path="Date"/>
			<x path="thx.Timestamp"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromDate>
	<fromString public="1" get="inline" set="null" line="32" static="1">
		<f a="s">
			<c path="String"/>
			<x path="thx.Timestamp"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toDate public="1" get="inline" set="null" line="35" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="Date"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toDate>
	<toString public="1" get="inline" set="null" line="38" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
	<snapNext public="1" set="method" line="48" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="thx.TimePeriod"/>
			<x path="thx.Timestamp"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Snaps a time to the next second, minute, hour, day, week, month or year.

@param time The unix time in milliseconds.  See date.getTime()
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The unix time of the snapped date (In milliseconds).</haxe_doc>
	</snapNext>
	<snapPrev public="1" set="method" line="78" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="thx.TimePeriod"/>
			<x path="thx.Timestamp"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Snaps a time to the previous second, minute, hour, day, week, month or year.

@param time The unix time in milliseconds.  See date.getTime()
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The unix time of the snapped date (In milliseconds).</haxe_doc>
	</snapPrev>
	<snapTo public="1" set="method" line="106" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="thx.TimePeriod"/>
			<x path="thx.Timestamp"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Snaps a time to the nearest second, minute, hour, day, week, month or year.

@param period Either: Second, Minute, Hour, Day, Week, Month or Year</haxe_doc>
	</snapTo>
	<r get="inline" set="null" line="133" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></r>
	<f get="inline" set="null" line="135" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></f>
	<c get="inline" set="null" line="137" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></c>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Timestamp.Timestamp_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Timestamp.hx" private="1" module="thx.Timestamp">
		<create public="1" get="inline" set="null" line="23" static="1">
			<f a="year:?month:?day:?hour:?minute:?second">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="thx.Timestamp"/>
			</f>
			<haxe_doc>Creates a timestamp by using the passed year, month, day, hour, minute, second.

Note that each argument can overflow its normal boundaries (e.g. a month value of `-33` is perfectly valid)
and the method will normalize that value by offsetting the other arguments by the right amount.</haxe_doc>
		</create>
		<now public="1" get="inline" set="null" line="26" static="1"><f a=""><x path="thx.Timestamp"/></f></now>
		<fromDate public="1" get="inline" set="null" line="29" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="thx.Timestamp"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromDate>
		<fromString public="1" get="inline" set="null" line="32" static="1">
			<f a="s">
				<c path="String"/>
				<x path="thx.Timestamp"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toDate public="1" get="inline" set="null" line="35" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toDate>
		<toString public="1" get="inline" set="null" line="38" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
		<snapNext public="1" set="method" line="48" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="thx.TimePeriod"/>
				<x path="thx.Timestamp"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Snaps a time to the next second, minute, hour, day, week, month or year.

@param time The unix time in milliseconds.  See date.getTime()
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The unix time of the snapped date (In milliseconds).</haxe_doc>
		</snapNext>
		<snapPrev public="1" set="method" line="78" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="thx.TimePeriod"/>
				<x path="thx.Timestamp"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Snaps a time to the previous second, minute, hour, day, week, month or year.

@param time The unix time in milliseconds.  See date.getTime()
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The unix time of the snapped date (In milliseconds).</haxe_doc>
		</snapPrev>
		<snapTo public="1" set="method" line="106" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="thx.TimePeriod"/>
				<x path="thx.Timestamp"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Snaps a time to the nearest second, minute, hour, day, week, month or year.

@param period Either: Second, Minute, Hour, Day, Week, Month or Year</haxe_doc>
		</snapTo>
		<r get="inline" set="null" line="133" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></r>
		<f get="inline" set="null" line="135" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></f>
		<c get="inline" set="null" line="137" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></c>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="thx.Tuple" params="T0:T1" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx"><x path="thx.Tuple2">
	<c path="thx.Tuple.T0"/>
	<c path="thx.Tuple.T1"/>
</x></typedef>
	<abstract path="thx.Tuple0" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from><icast field="nilToTuple"><e path="thx.Nil"/></icast></from>
		<this><e path="thx.Nil"/></this>
		<to><icast field="toNil"><e path="thx.Nil"/></icast></to>
		<haxe_doc>`Tuple0` is a tuple with no values. It maps directly to `Nil.nil`.</haxe_doc>
		<impl><class path="thx._Tuple.Tuple0_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<_new public="1" get="inline" set="null" line="12" static="1">
		<f a=""><x path="thx.Tuple0"/></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple0`.</haxe_doc>
	</_new>
	<with public="1" params="T0" get="inline" set="null" line="19" static="1">
		<f a="this:v">
			<e path="thx.Nil"/>
			<c path="with.T0"/>
			<x path="thx.Tuple1"><c path="with.T0"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="25" static="1">
		<f a="this">
			<e path="thx.Nil"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<toNil public="1" get="inline" set="null" line="31" static="1">
		<f a="this">
			<e path="thx.Nil"/>
			<e path="thx.Nil"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Cast to `Nil`.</haxe_doc>
	</toNil>
	<nilToTuple public="1" get="inline" set="null" line="37" static="1">
		<f a="v">
			<e path="thx.Nil"/>
			<x path="thx.Tuple0"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Creates `Tuple0` from `Nil`.</haxe_doc>
	</nilToTuple>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple0_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<_new public="1" get="inline" set="null" line="12" static="1">
			<f a=""><x path="thx.Tuple0"/></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple0`.</haxe_doc>
		</_new>
		<with public="1" params="T0" get="inline" set="null" line="19" static="1">
			<f a="this:v">
				<e path="thx.Nil"/>
				<c path="with.T0"/>
				<x path="thx.Tuple1"><c path="with.T0"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="25" static="1">
			<f a="this">
				<e path="thx.Nil"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<toNil public="1" get="inline" set="null" line="31" static="1">
			<f a="this">
				<e path="thx.Nil"/>
				<e path="thx.Nil"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Cast to `Nil`.</haxe_doc>
		</toNil>
		<nilToTuple public="1" get="inline" set="null" line="37" static="1">
			<f a="v">
				<e path="thx.Nil"/>
				<x path="thx.Tuple0"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Creates `Tuple0` from `Nil`.</haxe_doc>
		</nilToTuple>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple1" params="T0" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><c path="thx.Tuple1.T0"/></icast>
			<icast field="arrayToTuple"><c path="Array"><c path="arrayToTuple.T"/></c></icast>
		</from>
		<this><c path="thx.Tuple1.T0"/></this>
		<to><icast><c path="thx.Tuple1.T0"/></icast></to>
		<haxe_doc>`Tuple1` is a tuple with one value. It maps directly to its own T0 types.</haxe_doc>
		<impl><class path="thx._Tuple.Tuple1_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<_new public="1" get="inline" set="null" line="48" static="1">
		<f a="_0">
			<c path="thx.Tuple1.T0"/>
			<x path="thx.Tuple1"><c path="thx.Tuple1.T0"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple1` passing a value T as an argument.</haxe_doc>
	</_new>
	<_0 public="1" get="accessor" set="null" static="1">
		<c path="thx.Tuple1.T0"/>
		<meta><m n=":impl"/></meta>
	</_0>
	<get__0 get="inline" set="null" line="51" static="1">
		<f a="this">
			<c path="thx.Tuple1.T0"/>
			<c path="thx.Tuple1.T0"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get__0>
	<with public="1" params="T1" get="inline" set="null" line="57" static="1">
		<f a="this:v">
			<c path="thx.Tuple1.T0"/>
			<c path="with.T1"/>
			<x path="thx.Tuple2">
				<c path="thx.Tuple1.T0"/>
				<c path="with.T1"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="63" static="1">
		<f a="this">
			<c path="thx.Tuple1.T0"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<arrayToTuple public="1" params="T" get="inline" set="null" line="66" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple.T"/></c>
			<x path="thx.Tuple1"><c path="arrayToTuple.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple1_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<_new public="1" get="inline" set="null" line="48" static="1">
			<f a="_0">
				<c path="thx.Tuple1.T0"/>
				<x path="thx.Tuple1"><c path="thx.Tuple1.T0"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple1` passing a value T as an argument.</haxe_doc>
		</_new>
		<_0 public="1" get="accessor" set="null" static="1">
			<c path="thx.Tuple1.T0"/>
			<meta><m n=":impl"/></meta>
		</_0>
		<get__0 get="inline" set="null" line="51" static="1">
			<f a="this">
				<c path="thx.Tuple1.T0"/>
				<c path="thx.Tuple1.T0"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get__0>
		<with public="1" params="T1" get="inline" set="null" line="57" static="1">
			<f a="this:v">
				<c path="thx.Tuple1.T0"/>
				<c path="with.T1"/>
				<x path="thx.Tuple2">
					<c path="thx.Tuple1.T0"/>
					<c path="with.T1"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="63" static="1">
			<f a="this">
				<c path="thx.Tuple1.T0"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<arrayToTuple public="1" params="T" get="inline" set="null" line="66" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple.T"/></c>
				<x path="thx.Tuple1"><c path="arrayToTuple.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple2" params="T0:T1" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><a>
	<_1><c path="thx.Tuple2.T1"/></_1>
	<_0><c path="thx.Tuple2.T0"/></_0>
</a></icast>
			<icast field="arrayToTuple2"><c path="Array"><c path="arrayToTuple2.T"/></c></icast>
		</from>
		<this><a>
	<_1><c path="thx.Tuple2.T1"/></_1>
	<_0><c path="thx.Tuple2.T0"/></_0>
</a></this>
		<to><icast><a>
	<_1><c path="thx.Tuple2.T1"/></_1>
	<_0><c path="thx.Tuple2.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple2` is a tuple with two values. It maps to an anonymous object with fields `_0` and `_1`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
</m></meta>
		<impl><class path="thx._Tuple.Tuple2_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<of public="1" params="A:B" get="inline" set="null" line="79" static="1">
		<f a="_0:_1">
			<c path="of.A"/>
			<c path="of.B"/>
			<x path="thx.Tuple2">
				<c path="of.A"/>
				<c path="of.B"/>
			</x>
		</f>
		<haxe_doc>Constructs an instance of `Tuple2` the 2 required value. This is required
because Tuple2.new.bind(...) crashes the compiler.</haxe_doc>
	</of>
	<_new public="1" get="inline" set="null" line="85" static="1">
		<f a="_0:_1">
			<c path="thx.Tuple2.T0"/>
			<c path="thx.Tuple2.T1"/>
			<x path="thx.Tuple2">
				<c path="thx.Tuple2.T0"/>
				<c path="thx.Tuple2.T1"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple2` the 2 required value.</haxe_doc>
	</_new>
	<left public="1" get="accessor" set="null" static="1">
		<c path="thx.Tuple2.T0"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Alias for `_0`.</haxe_doc>
	</left>
	<right public="1" get="accessor" set="null" static="1">
		<c path="thx.Tuple2.T1"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Alias for `_1`.</haxe_doc>
	</right>
	<get_left get="inline" set="null" line="98" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<c path="thx.Tuple2.T0"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_left>
	<get_right get="inline" set="null" line="99" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<c path="thx.Tuple2.T1"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<flip public="1" get="inline" set="null" line="104" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<x path="thx.Tuple2">
				<c path="thx.Tuple2.T1"/>
				<c path="thx.Tuple2.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="111" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<x path="thx.Tuple1"><c path="thx.Tuple2.T1"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="118" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<x path="thx.Tuple1"><c path="thx.Tuple2.T0"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T2" get="inline" set="null" line="125" static="1">
		<f a="this:v">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<c path="with.T2"/>
			<x path="thx.Tuple3">
				<c path="thx.Tuple2.T0"/>
				<c path="thx.Tuple2.T1"/>
				<c path="with.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="131" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<map public="1" params="T2" set="method" line="134" static="1">
		<f a="this:f">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<f a="">
				<c path="thx.Tuple2.T1"/>
				<c path="map.T2"/>
			</f>
			<x path="thx.Tuple2">
				<c path="thx.Tuple2.T0"/>
				<c path="map.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<squeeze public="1" params="T1:T2:R" set="method" line="137" static="1"><f a="f">
	<f a=":">
		<c path="squeeze.T1"/>
		<c path="squeeze.T2"/>
		<c path="squeeze.R"/>
	</f>
	<f a="">
		<x path="thx.Tuple2">
			<c path="squeeze.T1"/>
			<c path="squeeze.T2"/>
		</x>
		<c path="squeeze.R"/>
	</f>
</f></squeeze>
	<arrayToTuple2 public="1" params="T" get="inline" set="null" line="143" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple2.T"/></c>
			<x path="thx.Tuple2">
				<c path="arrayToTuple2.T"/>
				<c path="arrayToTuple2.T"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple2>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple2_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<of public="1" params="A:B" get="inline" set="null" line="79" static="1">
			<f a="_0:_1">
				<c path="of.A"/>
				<c path="of.B"/>
				<x path="thx.Tuple2">
					<c path="of.A"/>
					<c path="of.B"/>
				</x>
			</f>
			<haxe_doc>Constructs an instance of `Tuple2` the 2 required value. This is required
because Tuple2.new.bind(...) crashes the compiler.</haxe_doc>
		</of>
		<_new public="1" get="inline" set="null" line="85" static="1">
			<f a="_0:_1">
				<c path="thx.Tuple2.T0"/>
				<c path="thx.Tuple2.T1"/>
				<x path="thx.Tuple2">
					<c path="thx.Tuple2.T0"/>
					<c path="thx.Tuple2.T1"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple2` the 2 required value.</haxe_doc>
		</_new>
		<left public="1" get="accessor" set="null" static="1">
			<c path="thx.Tuple2.T0"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Alias for `_0`.</haxe_doc>
		</left>
		<right public="1" get="accessor" set="null" static="1">
			<c path="thx.Tuple2.T1"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Alias for `_1`.</haxe_doc>
		</right>
		<get_left get="inline" set="null" line="98" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<c path="thx.Tuple2.T0"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_left>
		<get_right get="inline" set="null" line="99" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<c path="thx.Tuple2.T1"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<flip public="1" get="inline" set="null" line="104" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<x path="thx.Tuple2">
					<c path="thx.Tuple2.T1"/>
					<c path="thx.Tuple2.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="111" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<x path="thx.Tuple1"><c path="thx.Tuple2.T1"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="118" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<x path="thx.Tuple1"><c path="thx.Tuple2.T0"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T2" get="inline" set="null" line="125" static="1">
			<f a="this:v">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<c path="with.T2"/>
				<x path="thx.Tuple3">
					<c path="thx.Tuple2.T0"/>
					<c path="thx.Tuple2.T1"/>
					<c path="with.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="131" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<map public="1" params="T2" set="method" line="134" static="1">
			<f a="this:f">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<f a="">
					<c path="thx.Tuple2.T1"/>
					<c path="map.T2"/>
				</f>
				<x path="thx.Tuple2">
					<c path="thx.Tuple2.T0"/>
					<c path="map.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<squeeze public="1" params="T1:T2:R" set="method" line="137" static="1"><f a="f">
	<f a=":">
		<c path="squeeze.T1"/>
		<c path="squeeze.T2"/>
		<c path="squeeze.R"/>
	</f>
	<f a="">
		<x path="thx.Tuple2">
			<c path="squeeze.T1"/>
			<c path="squeeze.T2"/>
		</x>
		<c path="squeeze.R"/>
	</f>
</f></squeeze>
		<arrayToTuple2 public="1" params="T" get="inline" set="null" line="143" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple2.T"/></c>
				<x path="thx.Tuple2">
					<c path="arrayToTuple2.T"/>
					<c path="arrayToTuple2.T"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple2>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple3" params="T0:T1:T2" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><a>
	<_2><c path="thx.Tuple3.T2"/></_2>
	<_1><c path="thx.Tuple3.T1"/></_1>
	<_0><c path="thx.Tuple3.T0"/></_0>
</a></icast>
			<icast field="arrayToTuple3"><c path="Array"><c path="arrayToTuple3.T"/></c></icast>
		</from>
		<this><a>
	<_2><c path="thx.Tuple3.T2"/></_2>
	<_1><c path="thx.Tuple3.T1"/></_1>
	<_0><c path="thx.Tuple3.T0"/></_0>
</a></this>
		<to><icast><a>
	<_2><c path="thx.Tuple3.T2"/></_2>
	<_1><c path="thx.Tuple3.T1"/></_1>
	<_0><c path="thx.Tuple3.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple3` is a tuple with three values. It maps to an anonymous object with fields `_0`, `_1`, and `_2`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
</m></meta>
		<impl><class path="thx._Tuple.Tuple3_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<of public="1" params="T0:T1:T2" get="inline" set="null" line="155" static="1">
		<f a="_0:_1:_2">
			<c path="of.T0"/>
			<c path="of.T1"/>
			<c path="of.T2"/>
			<x path="thx.Tuple3">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
			</x>
		</f>
		<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
	</of>
	<_new public="1" get="inline" set="null" line="161" static="1">
		<f a="_0:_1:_2">
			<c path="thx.Tuple3.T0"/>
			<c path="thx.Tuple3.T1"/>
			<c path="thx.Tuple3.T2"/>
			<x path="thx.Tuple3">
				<c path="thx.Tuple3.T0"/>
				<c path="thx.Tuple3.T1"/>
				<c path="thx.Tuple3.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple3` the 3 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="167" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<x path="thx.Tuple3">
				<c path="thx.Tuple3.T2"/>
				<c path="thx.Tuple3.T1"/>
				<c path="thx.Tuple3.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="174" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<x path="thx.Tuple2">
				<c path="thx.Tuple3.T1"/>
				<c path="thx.Tuple3.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="181" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<x path="thx.Tuple2">
				<c path="thx.Tuple3.T0"/>
				<c path="thx.Tuple3.T1"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T3" get="inline" set="null" line="188" static="1">
		<f a="this:v">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<c path="with.T3"/>
			<x path="thx.Tuple4">
				<c path="thx.Tuple3.T0"/>
				<c path="thx.Tuple3.T1"/>
				<c path="thx.Tuple3.T2"/>
				<c path="with.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="194" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<arrayToTuple3 public="1" params="T" get="inline" set="null" line="197" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple3.T"/></c>
			<x path="thx.Tuple3">
				<c path="arrayToTuple3.T"/>
				<c path="arrayToTuple3.T"/>
				<c path="arrayToTuple3.T"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple3>
	<map public="1" params="T3" set="method" line="200" static="1">
		<f a="this:f">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<f a="">
				<c path="thx.Tuple3.T2"/>
				<c path="map.T3"/>
			</f>
			<x path="thx.Tuple3">
				<c path="thx.Tuple3.T0"/>
				<c path="thx.Tuple3.T1"/>
				<c path="map.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple3_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<of public="1" params="T0:T1:T2" get="inline" set="null" line="155" static="1">
			<f a="_0:_1:_2">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<x path="thx.Tuple3">
					<c path="of.T0"/>
					<c path="of.T1"/>
					<c path="of.T2"/>
				</x>
			</f>
			<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
		</of>
		<_new public="1" get="inline" set="null" line="161" static="1">
			<f a="_0:_1:_2">
				<c path="thx.Tuple3.T0"/>
				<c path="thx.Tuple3.T1"/>
				<c path="thx.Tuple3.T2"/>
				<x path="thx.Tuple3">
					<c path="thx.Tuple3.T0"/>
					<c path="thx.Tuple3.T1"/>
					<c path="thx.Tuple3.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple3` the 3 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="167" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<x path="thx.Tuple3">
					<c path="thx.Tuple3.T2"/>
					<c path="thx.Tuple3.T1"/>
					<c path="thx.Tuple3.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="174" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<x path="thx.Tuple2">
					<c path="thx.Tuple3.T1"/>
					<c path="thx.Tuple3.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="181" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<x path="thx.Tuple2">
					<c path="thx.Tuple3.T0"/>
					<c path="thx.Tuple3.T1"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T3" get="inline" set="null" line="188" static="1">
			<f a="this:v">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<c path="with.T3"/>
				<x path="thx.Tuple4">
					<c path="thx.Tuple3.T0"/>
					<c path="thx.Tuple3.T1"/>
					<c path="thx.Tuple3.T2"/>
					<c path="with.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="194" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<arrayToTuple3 public="1" params="T" get="inline" set="null" line="197" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple3.T"/></c>
				<x path="thx.Tuple3">
					<c path="arrayToTuple3.T"/>
					<c path="arrayToTuple3.T"/>
					<c path="arrayToTuple3.T"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple3>
		<map public="1" params="T3" set="method" line="200" static="1">
			<f a="this:f">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<f a="">
					<c path="thx.Tuple3.T2"/>
					<c path="map.T3"/>
				</f>
				<x path="thx.Tuple3">
					<c path="thx.Tuple3.T0"/>
					<c path="thx.Tuple3.T1"/>
					<c path="map.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple4" params="T0:T1:T2:T3" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><a>
	<_3><c path="thx.Tuple4.T3"/></_3>
	<_2><c path="thx.Tuple4.T2"/></_2>
	<_1><c path="thx.Tuple4.T1"/></_1>
	<_0><c path="thx.Tuple4.T0"/></_0>
</a></icast>
			<icast field="arrayToTuple4"><c path="Array"><c path="arrayToTuple4.T"/></c></icast>
		</from>
		<this><a>
	<_3><c path="thx.Tuple4.T3"/></_3>
	<_2><c path="thx.Tuple4.T2"/></_2>
	<_1><c path="thx.Tuple4.T1"/></_1>
	<_0><c path="thx.Tuple4.T0"/></_0>
</a></this>
		<to><icast><a>
	<_3><c path="thx.Tuple4.T3"/></_3>
	<_2><c path="thx.Tuple4.T2"/></_2>
	<_1><c path="thx.Tuple4.T1"/></_1>
	<_0><c path="thx.Tuple4.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple4` is a tuple with four values. It maps to an anonymous object with fields `_0`, `_1`, `_2`, and `_3`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
	<e>_3</e>
</m></meta>
		<impl><class path="thx._Tuple.Tuple4_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<of public="1" params="T0:T1:T2:T3" get="inline" set="null" line="212" static="1">
		<f a="_0:_1:_2:_3">
			<c path="of.T0"/>
			<c path="of.T1"/>
			<c path="of.T2"/>
			<c path="of.T3"/>
			<x path="thx.Tuple4">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
			</x>
		</f>
		<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
	</of>
	<_new public="1" get="inline" set="null" line="218" static="1">
		<f a="_0:_1:_2:_3">
			<c path="thx.Tuple4.T0"/>
			<c path="thx.Tuple4.T1"/>
			<c path="thx.Tuple4.T2"/>
			<c path="thx.Tuple4.T3"/>
			<x path="thx.Tuple4">
				<c path="thx.Tuple4.T0"/>
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T2"/>
				<c path="thx.Tuple4.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple4` the 4 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="224" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.Tuple4.T3"/></_3>
				<_2><c path="thx.Tuple4.T2"/></_2>
				<_1><c path="thx.Tuple4.T1"/></_1>
				<_0><c path="thx.Tuple4.T0"/></_0>
			</a>
			<x path="thx.Tuple4">
				<c path="thx.Tuple4.T3"/>
				<c path="thx.Tuple4.T2"/>
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="231" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.Tuple4.T3"/></_3>
				<_2><c path="thx.Tuple4.T2"/></_2>
				<_1><c path="thx.Tuple4.T1"/></_1>
				<_0><c path="thx.Tuple4.T0"/></_0>
			</a>
			<x path="thx.Tuple3">
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T2"/>
				<c path="thx.Tuple4.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="238" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.Tuple4.T3"/></_3>
				<_2><c path="thx.Tuple4.T2"/></_2>
				<_1><c path="thx.Tuple4.T1"/></_1>
				<_0><c path="thx.Tuple4.T0"/></_0>
			</a>
			<x path="thx.Tuple3">
				<c path="thx.Tuple4.T0"/>
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T4" get="inline" set="null" line="245" static="1">
		<f a="this:v">
			<a>
				<_3><c path="thx.Tuple4.T3"/></_3>
				<_2><c path="thx.Tuple4.T2"/></_2>
				<_1><c path="thx.Tuple4.T1"/></_1>
				<_0><c path="thx.Tuple4.T0"/></_0>
			</a>
			<c path="with.T4"/>
			<x path="thx.Tuple5">
				<c path="thx.Tuple4.T0"/>
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T2"/>
				<c path="thx.Tuple4.T3"/>
				<c path="with.T4"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="251" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.Tuple4.T3"/></_3>
				<_2><c path="thx.Tuple4.T2"/></_2>
				<_1><c path="thx.Tuple4.T1"/></_1>
				<_0><c path="thx.Tuple4.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<arrayToTuple4 public="1" params="T" get="inline" set="null" line="254" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple4.T"/></c>
			<x path="thx.Tuple4">
				<c path="arrayToTuple4.T"/>
				<c path="arrayToTuple4.T"/>
				<c path="arrayToTuple4.T"/>
				<c path="arrayToTuple4.T"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple4>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple4_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<of public="1" params="T0:T1:T2:T3" get="inline" set="null" line="212" static="1">
			<f a="_0:_1:_2:_3">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
				<x path="thx.Tuple4">
					<c path="of.T0"/>
					<c path="of.T1"/>
					<c path="of.T2"/>
					<c path="of.T3"/>
				</x>
			</f>
			<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
		</of>
		<_new public="1" get="inline" set="null" line="218" static="1">
			<f a="_0:_1:_2:_3">
				<c path="thx.Tuple4.T0"/>
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T2"/>
				<c path="thx.Tuple4.T3"/>
				<x path="thx.Tuple4">
					<c path="thx.Tuple4.T0"/>
					<c path="thx.Tuple4.T1"/>
					<c path="thx.Tuple4.T2"/>
					<c path="thx.Tuple4.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple4` the 4 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="224" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.Tuple4.T3"/></_3>
					<_2><c path="thx.Tuple4.T2"/></_2>
					<_1><c path="thx.Tuple4.T1"/></_1>
					<_0><c path="thx.Tuple4.T0"/></_0>
				</a>
				<x path="thx.Tuple4">
					<c path="thx.Tuple4.T3"/>
					<c path="thx.Tuple4.T2"/>
					<c path="thx.Tuple4.T1"/>
					<c path="thx.Tuple4.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="231" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.Tuple4.T3"/></_3>
					<_2><c path="thx.Tuple4.T2"/></_2>
					<_1><c path="thx.Tuple4.T1"/></_1>
					<_0><c path="thx.Tuple4.T0"/></_0>
				</a>
				<x path="thx.Tuple3">
					<c path="thx.Tuple4.T1"/>
					<c path="thx.Tuple4.T2"/>
					<c path="thx.Tuple4.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="238" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.Tuple4.T3"/></_3>
					<_2><c path="thx.Tuple4.T2"/></_2>
					<_1><c path="thx.Tuple4.T1"/></_1>
					<_0><c path="thx.Tuple4.T0"/></_0>
				</a>
				<x path="thx.Tuple3">
					<c path="thx.Tuple4.T0"/>
					<c path="thx.Tuple4.T1"/>
					<c path="thx.Tuple4.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T4" get="inline" set="null" line="245" static="1">
			<f a="this:v">
				<a>
					<_3><c path="thx.Tuple4.T3"/></_3>
					<_2><c path="thx.Tuple4.T2"/></_2>
					<_1><c path="thx.Tuple4.T1"/></_1>
					<_0><c path="thx.Tuple4.T0"/></_0>
				</a>
				<c path="with.T4"/>
				<x path="thx.Tuple5">
					<c path="thx.Tuple4.T0"/>
					<c path="thx.Tuple4.T1"/>
					<c path="thx.Tuple4.T2"/>
					<c path="thx.Tuple4.T3"/>
					<c path="with.T4"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="251" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.Tuple4.T3"/></_3>
					<_2><c path="thx.Tuple4.T2"/></_2>
					<_1><c path="thx.Tuple4.T1"/></_1>
					<_0><c path="thx.Tuple4.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<arrayToTuple4 public="1" params="T" get="inline" set="null" line="254" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple4.T"/></c>
				<x path="thx.Tuple4">
					<c path="arrayToTuple4.T"/>
					<c path="arrayToTuple4.T"/>
					<c path="arrayToTuple4.T"/>
					<c path="arrayToTuple4.T"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple4>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple5" params="T0:T1:T2:T3:T4" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><a>
	<_4><c path="thx.Tuple5.T4"/></_4>
	<_3><c path="thx.Tuple5.T3"/></_3>
	<_2><c path="thx.Tuple5.T2"/></_2>
	<_1><c path="thx.Tuple5.T1"/></_1>
	<_0><c path="thx.Tuple5.T0"/></_0>
</a></icast>
			<icast field="arrayToTuple5"><c path="Array"><c path="arrayToTuple5.T"/></c></icast>
		</from>
		<this><a>
	<_4><c path="thx.Tuple5.T4"/></_4>
	<_3><c path="thx.Tuple5.T3"/></_3>
	<_2><c path="thx.Tuple5.T2"/></_2>
	<_1><c path="thx.Tuple5.T1"/></_1>
	<_0><c path="thx.Tuple5.T0"/></_0>
</a></this>
		<to><icast><a>
	<_4><c path="thx.Tuple5.T4"/></_4>
	<_3><c path="thx.Tuple5.T3"/></_3>
	<_2><c path="thx.Tuple5.T2"/></_2>
	<_1><c path="thx.Tuple5.T1"/></_1>
	<_0><c path="thx.Tuple5.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple5` is a tuple with five values. It maps to an anonymous object with fields `_0`, `_1`, `_2`, `_4`, and `_5`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
	<e>_3</e>
	<e>_4</e>
</m></meta>
		<impl><class path="thx._Tuple.Tuple5_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<of public="1" params="T0:T1:T2:T3:T4" get="inline" set="null" line="266" static="1">
		<f a="_0:_1:_2:_3:_4">
			<c path="of.T0"/>
			<c path="of.T1"/>
			<c path="of.T2"/>
			<c path="of.T3"/>
			<c path="of.T4"/>
			<x path="thx.Tuple5">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
				<c path="of.T4"/>
			</x>
		</f>
		<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
	</of>
	<_new public="1" get="inline" set="null" line="272" static="1">
		<f a="_0:_1:_2:_3:_4">
			<c path="thx.Tuple5.T0"/>
			<c path="thx.Tuple5.T1"/>
			<c path="thx.Tuple5.T2"/>
			<c path="thx.Tuple5.T3"/>
			<c path="thx.Tuple5.T4"/>
			<x path="thx.Tuple5">
				<c path="thx.Tuple5.T0"/>
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T3"/>
				<c path="thx.Tuple5.T4"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple5` the 5 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="278" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.Tuple5.T4"/></_4>
				<_3><c path="thx.Tuple5.T3"/></_3>
				<_2><c path="thx.Tuple5.T2"/></_2>
				<_1><c path="thx.Tuple5.T1"/></_1>
				<_0><c path="thx.Tuple5.T0"/></_0>
			</a>
			<x path="thx.Tuple5">
				<c path="thx.Tuple5.T4"/>
				<c path="thx.Tuple5.T3"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="285" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.Tuple5.T4"/></_4>
				<_3><c path="thx.Tuple5.T3"/></_3>
				<_2><c path="thx.Tuple5.T2"/></_2>
				<_1><c path="thx.Tuple5.T1"/></_1>
				<_0><c path="thx.Tuple5.T0"/></_0>
			</a>
			<x path="thx.Tuple4">
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T3"/>
				<c path="thx.Tuple5.T4"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="292" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.Tuple5.T4"/></_4>
				<_3><c path="thx.Tuple5.T3"/></_3>
				<_2><c path="thx.Tuple5.T2"/></_2>
				<_1><c path="thx.Tuple5.T1"/></_1>
				<_0><c path="thx.Tuple5.T0"/></_0>
			</a>
			<x path="thx.Tuple4">
				<c path="thx.Tuple5.T0"/>
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T5" get="inline" set="null" line="299" static="1">
		<f a="this:v">
			<a>
				<_4><c path="thx.Tuple5.T4"/></_4>
				<_3><c path="thx.Tuple5.T3"/></_3>
				<_2><c path="thx.Tuple5.T2"/></_2>
				<_1><c path="thx.Tuple5.T1"/></_1>
				<_0><c path="thx.Tuple5.T0"/></_0>
			</a>
			<c path="with.T5"/>
			<x path="thx.Tuple6">
				<c path="thx.Tuple5.T0"/>
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T3"/>
				<c path="thx.Tuple5.T4"/>
				<c path="with.T5"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="305" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.Tuple5.T4"/></_4>
				<_3><c path="thx.Tuple5.T3"/></_3>
				<_2><c path="thx.Tuple5.T2"/></_2>
				<_1><c path="thx.Tuple5.T1"/></_1>
				<_0><c path="thx.Tuple5.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<arrayToTuple5 public="1" params="T" get="inline" set="null" line="308" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple5.T"/></c>
			<x path="thx.Tuple5">
				<c path="arrayToTuple5.T"/>
				<c path="arrayToTuple5.T"/>
				<c path="arrayToTuple5.T"/>
				<c path="arrayToTuple5.T"/>
				<c path="arrayToTuple5.T"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple5>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple5_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<of public="1" params="T0:T1:T2:T3:T4" get="inline" set="null" line="266" static="1">
			<f a="_0:_1:_2:_3:_4">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
				<c path="of.T4"/>
				<x path="thx.Tuple5">
					<c path="of.T0"/>
					<c path="of.T1"/>
					<c path="of.T2"/>
					<c path="of.T3"/>
					<c path="of.T4"/>
				</x>
			</f>
			<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
		</of>
		<_new public="1" get="inline" set="null" line="272" static="1">
			<f a="_0:_1:_2:_3:_4">
				<c path="thx.Tuple5.T0"/>
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T3"/>
				<c path="thx.Tuple5.T4"/>
				<x path="thx.Tuple5">
					<c path="thx.Tuple5.T0"/>
					<c path="thx.Tuple5.T1"/>
					<c path="thx.Tuple5.T2"/>
					<c path="thx.Tuple5.T3"/>
					<c path="thx.Tuple5.T4"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple5` the 5 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="278" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.Tuple5.T4"/></_4>
					<_3><c path="thx.Tuple5.T3"/></_3>
					<_2><c path="thx.Tuple5.T2"/></_2>
					<_1><c path="thx.Tuple5.T1"/></_1>
					<_0><c path="thx.Tuple5.T0"/></_0>
				</a>
				<x path="thx.Tuple5">
					<c path="thx.Tuple5.T4"/>
					<c path="thx.Tuple5.T3"/>
					<c path="thx.Tuple5.T2"/>
					<c path="thx.Tuple5.T1"/>
					<c path="thx.Tuple5.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="285" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.Tuple5.T4"/></_4>
					<_3><c path="thx.Tuple5.T3"/></_3>
					<_2><c path="thx.Tuple5.T2"/></_2>
					<_1><c path="thx.Tuple5.T1"/></_1>
					<_0><c path="thx.Tuple5.T0"/></_0>
				</a>
				<x path="thx.Tuple4">
					<c path="thx.Tuple5.T1"/>
					<c path="thx.Tuple5.T2"/>
					<c path="thx.Tuple5.T3"/>
					<c path="thx.Tuple5.T4"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="292" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.Tuple5.T4"/></_4>
					<_3><c path="thx.Tuple5.T3"/></_3>
					<_2><c path="thx.Tuple5.T2"/></_2>
					<_1><c path="thx.Tuple5.T1"/></_1>
					<_0><c path="thx.Tuple5.T0"/></_0>
				</a>
				<x path="thx.Tuple4">
					<c path="thx.Tuple5.T0"/>
					<c path="thx.Tuple5.T1"/>
					<c path="thx.Tuple5.T2"/>
					<c path="thx.Tuple5.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T5" get="inline" set="null" line="299" static="1">
			<f a="this:v">
				<a>
					<_4><c path="thx.Tuple5.T4"/></_4>
					<_3><c path="thx.Tuple5.T3"/></_3>
					<_2><c path="thx.Tuple5.T2"/></_2>
					<_1><c path="thx.Tuple5.T1"/></_1>
					<_0><c path="thx.Tuple5.T0"/></_0>
				</a>
				<c path="with.T5"/>
				<x path="thx.Tuple6">
					<c path="thx.Tuple5.T0"/>
					<c path="thx.Tuple5.T1"/>
					<c path="thx.Tuple5.T2"/>
					<c path="thx.Tuple5.T3"/>
					<c path="thx.Tuple5.T4"/>
					<c path="with.T5"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="305" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.Tuple5.T4"/></_4>
					<_3><c path="thx.Tuple5.T3"/></_3>
					<_2><c path="thx.Tuple5.T2"/></_2>
					<_1><c path="thx.Tuple5.T1"/></_1>
					<_0><c path="thx.Tuple5.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<arrayToTuple5 public="1" params="T" get="inline" set="null" line="308" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple5.T"/></c>
				<x path="thx.Tuple5">
					<c path="arrayToTuple5.T"/>
					<c path="arrayToTuple5.T"/>
					<c path="arrayToTuple5.T"/>
					<c path="arrayToTuple5.T"/>
					<c path="arrayToTuple5.T"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple5>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple6" params="T0:T1:T2:T3:T4:T5" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><a>
	<_5><c path="thx.Tuple6.T5"/></_5>
	<_4><c path="thx.Tuple6.T4"/></_4>
	<_3><c path="thx.Tuple6.T3"/></_3>
	<_2><c path="thx.Tuple6.T2"/></_2>
	<_1><c path="thx.Tuple6.T1"/></_1>
	<_0><c path="thx.Tuple6.T0"/></_0>
</a></icast>
			<icast field="arrayToTuple6"><c path="Array"><c path="arrayToTuple6.T"/></c></icast>
		</from>
		<this><a>
	<_5><c path="thx.Tuple6.T5"/></_5>
	<_4><c path="thx.Tuple6.T4"/></_4>
	<_3><c path="thx.Tuple6.T3"/></_3>
	<_2><c path="thx.Tuple6.T2"/></_2>
	<_1><c path="thx.Tuple6.T1"/></_1>
	<_0><c path="thx.Tuple6.T0"/></_0>
</a></this>
		<to><icast><a>
	<_5><c path="thx.Tuple6.T5"/></_5>
	<_4><c path="thx.Tuple6.T4"/></_4>
	<_3><c path="thx.Tuple6.T3"/></_3>
	<_2><c path="thx.Tuple6.T2"/></_2>
	<_1><c path="thx.Tuple6.T1"/></_1>
	<_0><c path="thx.Tuple6.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple6` is a tuple with size values. It maps to an anonymous object with fields `_0`, `_1`, `_2`, `_4`, `_5`, and `_6`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
	<e>_3</e>
	<e>_4</e>
	<e>_5</e>
</m></meta>
		<impl><class path="thx._Tuple.Tuple6_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<of public="1" params="T0:T1:T2:T3:T4:T5" get="inline" set="null" line="320" static="1">
		<f a="_0:_1:_2:_3:_4:_5">
			<c path="of.T0"/>
			<c path="of.T1"/>
			<c path="of.T2"/>
			<c path="of.T3"/>
			<c path="of.T4"/>
			<c path="of.T5"/>
			<x path="thx.Tuple6">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
				<c path="of.T4"/>
				<c path="of.T5"/>
			</x>
		</f>
		<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
	</of>
	<_new public="1" get="inline" set="null" line="326" static="1">
		<f a="_0:_1:_2:_3:_4:_5">
			<c path="thx.Tuple6.T0"/>
			<c path="thx.Tuple6.T1"/>
			<c path="thx.Tuple6.T2"/>
			<c path="thx.Tuple6.T3"/>
			<c path="thx.Tuple6.T4"/>
			<c path="thx.Tuple6.T5"/>
			<x path="thx.Tuple6">
				<c path="thx.Tuple6.T0"/>
				<c path="thx.Tuple6.T1"/>
				<c path="thx.Tuple6.T2"/>
				<c path="thx.Tuple6.T3"/>
				<c path="thx.Tuple6.T4"/>
				<c path="thx.Tuple6.T5"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple6` the 6 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="332" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.Tuple6.T5"/></_5>
				<_4><c path="thx.Tuple6.T4"/></_4>
				<_3><c path="thx.Tuple6.T3"/></_3>
				<_2><c path="thx.Tuple6.T2"/></_2>
				<_1><c path="thx.Tuple6.T1"/></_1>
				<_0><c path="thx.Tuple6.T0"/></_0>
			</a>
			<x path="thx.Tuple6">
				<c path="thx.Tuple6.T5"/>
				<c path="thx.Tuple6.T4"/>
				<c path="thx.Tuple6.T3"/>
				<c path="thx.Tuple6.T2"/>
				<c path="thx.Tuple6.T1"/>
				<c path="thx.Tuple6.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="339" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.Tuple6.T5"/></_5>
				<_4><c path="thx.Tuple6.T4"/></_4>
				<_3><c path="thx.Tuple6.T3"/></_3>
				<_2><c path="thx.Tuple6.T2"/></_2>
				<_1><c path="thx.Tuple6.T1"/></_1>
				<_0><c path="thx.Tuple6.T0"/></_0>
			</a>
			<x path="thx.Tuple5">
				<c path="thx.Tuple6.T1"/>
				<c path="thx.Tuple6.T2"/>
				<c path="thx.Tuple6.T3"/>
				<c path="thx.Tuple6.T4"/>
				<c path="thx.Tuple6.T5"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="346" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.Tuple6.T5"/></_5>
				<_4><c path="thx.Tuple6.T4"/></_4>
				<_3><c path="thx.Tuple6.T3"/></_3>
				<_2><c path="thx.Tuple6.T2"/></_2>
				<_1><c path="thx.Tuple6.T1"/></_1>
				<_0><c path="thx.Tuple6.T0"/></_0>
			</a>
			<x path="thx.Tuple5">
				<c path="thx.Tuple6.T0"/>
				<c path="thx.Tuple6.T1"/>
				<c path="thx.Tuple6.T2"/>
				<c path="thx.Tuple6.T3"/>
				<c path="thx.Tuple6.T4"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<toString public="1" get="inline" set="null" line="352" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.Tuple6.T5"/></_5>
				<_4><c path="thx.Tuple6.T4"/></_4>
				<_3><c path="thx.Tuple6.T3"/></_3>
				<_2><c path="thx.Tuple6.T2"/></_2>
				<_1><c path="thx.Tuple6.T1"/></_1>
				<_0><c path="thx.Tuple6.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<arrayToTuple6 public="1" params="T" get="inline" set="null" line="355" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple6.T"/></c>
			<x path="thx.Tuple6">
				<c path="arrayToTuple6.T"/>
				<c path="arrayToTuple6.T"/>
				<c path="arrayToTuple6.T"/>
				<c path="arrayToTuple6.T"/>
				<c path="arrayToTuple6.T"/>
				<c path="arrayToTuple6.T"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple6>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple6_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<of public="1" params="T0:T1:T2:T3:T4:T5" get="inline" set="null" line="320" static="1">
			<f a="_0:_1:_2:_3:_4:_5">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
				<c path="of.T4"/>
				<c path="of.T5"/>
				<x path="thx.Tuple6">
					<c path="of.T0"/>
					<c path="of.T1"/>
					<c path="of.T2"/>
					<c path="of.T3"/>
					<c path="of.T4"/>
					<c path="of.T5"/>
				</x>
			</f>
			<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
		</of>
		<_new public="1" get="inline" set="null" line="326" static="1">
			<f a="_0:_1:_2:_3:_4:_5">
				<c path="thx.Tuple6.T0"/>
				<c path="thx.Tuple6.T1"/>
				<c path="thx.Tuple6.T2"/>
				<c path="thx.Tuple6.T3"/>
				<c path="thx.Tuple6.T4"/>
				<c path="thx.Tuple6.T5"/>
				<x path="thx.Tuple6">
					<c path="thx.Tuple6.T0"/>
					<c path="thx.Tuple6.T1"/>
					<c path="thx.Tuple6.T2"/>
					<c path="thx.Tuple6.T3"/>
					<c path="thx.Tuple6.T4"/>
					<c path="thx.Tuple6.T5"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple6` the 6 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="332" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.Tuple6.T5"/></_5>
					<_4><c path="thx.Tuple6.T4"/></_4>
					<_3><c path="thx.Tuple6.T3"/></_3>
					<_2><c path="thx.Tuple6.T2"/></_2>
					<_1><c path="thx.Tuple6.T1"/></_1>
					<_0><c path="thx.Tuple6.T0"/></_0>
				</a>
				<x path="thx.Tuple6">
					<c path="thx.Tuple6.T5"/>
					<c path="thx.Tuple6.T4"/>
					<c path="thx.Tuple6.T3"/>
					<c path="thx.Tuple6.T2"/>
					<c path="thx.Tuple6.T1"/>
					<c path="thx.Tuple6.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="339" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.Tuple6.T5"/></_5>
					<_4><c path="thx.Tuple6.T4"/></_4>
					<_3><c path="thx.Tuple6.T3"/></_3>
					<_2><c path="thx.Tuple6.T2"/></_2>
					<_1><c path="thx.Tuple6.T1"/></_1>
					<_0><c path="thx.Tuple6.T0"/></_0>
				</a>
				<x path="thx.Tuple5">
					<c path="thx.Tuple6.T1"/>
					<c path="thx.Tuple6.T2"/>
					<c path="thx.Tuple6.T3"/>
					<c path="thx.Tuple6.T4"/>
					<c path="thx.Tuple6.T5"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="346" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.Tuple6.T5"/></_5>
					<_4><c path="thx.Tuple6.T4"/></_4>
					<_3><c path="thx.Tuple6.T3"/></_3>
					<_2><c path="thx.Tuple6.T2"/></_2>
					<_1><c path="thx.Tuple6.T1"/></_1>
					<_0><c path="thx.Tuple6.T0"/></_0>
				</a>
				<x path="thx.Tuple5">
					<c path="thx.Tuple6.T0"/>
					<c path="thx.Tuple6.T1"/>
					<c path="thx.Tuple6.T2"/>
					<c path="thx.Tuple6.T3"/>
					<c path="thx.Tuple6.T4"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<toString public="1" get="inline" set="null" line="352" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.Tuple6.T5"/></_5>
					<_4><c path="thx.Tuple6.T4"/></_4>
					<_3><c path="thx.Tuple6.T3"/></_3>
					<_2><c path="thx.Tuple6.T2"/></_2>
					<_1><c path="thx.Tuple6.T1"/></_1>
					<_0><c path="thx.Tuple6.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<arrayToTuple6 public="1" params="T" get="inline" set="null" line="355" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple6.T"/></c>
				<x path="thx.Tuple6">
					<c path="arrayToTuple6.T"/>
					<c path="arrayToTuple6.T"/>
					<c path="arrayToTuple6.T"/>
					<c path="arrayToTuple6.T"/>
					<c path="arrayToTuple6.T"/>
					<c path="arrayToTuple6.T"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple6>
		<meta><m n=":final"/></meta>
	</class>
	<class path="thx.Types" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Types.hx">
		<isAnonymousObject public="1" get="inline" set="null" line="10" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isAnonymousObject` returns true if `v` is an object and it is not an instance of any custom class.</haxe_doc>
		</isAnonymousObject>
		<isObject public="1" set="method" line="16" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed value is an anonymous object or class instance but it is not any of the primitive types.</haxe_doc>
		</isObject>
		<isPrimitive public="1" set="method" line="22" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `v` is any of the following types: Int, Float, Bool, Date or String.</haxe_doc>
		</isPrimitive>
		<isEnumValue public="1" set="method" line="34" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `v` is an instance of any Enum type.</haxe_doc>
		</isEnumValue>
		<hasSuperClass public="1" set="method" line="45" static="1">
			<f a="cls:sup">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `cls` extends `sup` or one of its children.

It also returns `true` if `cls` and `sup` are the same.</haxe_doc>
		</hasSuperClass>
		<sameType public="1" params="A:B" set="method" line="57" static="1">
			<f a="a:b">
				<c path="sameType.A"/>
				<c path="sameType.B"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`sameType` returns true if the arguments `a` and `b` share exactly the same type.</haxe_doc>
		</sameType>
		<typeInheritance public="1" set="method" line="64" static="1">
			<f a="type">
				<e path="ValueType"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>`typeInheritance` returns an array of string describing the entire inheritance
chain of the passed `ValueType`.</haxe_doc>
		</typeInheritance>
		<toString public="1" set="method" line="86" static="1">
			<f a="type">
				<e path="ValueType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of a `ValueType`.</haxe_doc>
		</toString>
		<valueTypeInheritance public="1" params="T" get="inline" set="null" line="104" static="1">
			<f a="value">
				<c path="valueTypeInheritance.T"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>`valueTypeInheritance` returns an array of string describing the entire inheritance
chain of the passed `value`.</haxe_doc>
		</valueTypeInheritance>
		<valueTypeToString public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="value">
				<c path="valueTypeToString.T"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string describing the type of any `value`.</haxe_doc>
		</valueTypeToString>
		<anyValueToString public="1" get="inline" set="null" line="116" static="1">
			<f a="value">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string describing the type of any `value`.</haxe_doc>
		</anyValueToString>
		<haxe_doc>Helper methods to use on values, types and classes.</haxe_doc>
	</class>
	<typedef path="thx.VNel" params="E:A" file="/Users/francoponticelli/projects/thx.core/src/thx/Validation.hx" module="thx.Validation"><x path="thx.Validation">
	<x path="thx.Nel"><c path="thx.VNel.E"/></x>
	<c path="thx.VNel.A"/>
</x></typedef>
	<abstract path="thx.Validation" params="E:A" file="/Users/francoponticelli/projects/thx.core/src/thx/Validation.hx">
		<from><icast><e path="thx.Either">
	<c path="thx.Validation.E"/>
	<c path="thx.Validation.A"/>
</e></icast></from>
		<this><e path="thx.Either">
	<c path="thx.Validation.E"/>
	<c path="thx.Validation.A"/>
</e></this>
		<haxe_doc>* A right-biased disjunctive type with applicative functor requiring a semigroup
 * on the left type. This is useful for composing validation functions.</haxe_doc>
		<impl><class path="thx._Validation.Validation_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Validation.hx" private="1" module="thx.Validation">
	<validation public="1" params="E:A" get="inline" set="null" line="16" static="1"><f a="e">
	<e path="thx.Either">
		<c path="validation.E"/>
		<c path="validation.A"/>
	</e>
	<x path="thx.Validation">
		<c path="validation.E"/>
		<c path="validation.A"/>
	</x>
</f></validation>
	<vnel public="1" params="E:A" get="inline" set="null" line="19" static="1"><f a="e">
	<e path="thx.Either">
		<x path="thx.Nel"><c path="vnel.E"/></x>
		<c path="vnel.A"/>
	</e>
	<t path="thx.VNel">
		<c path="vnel.E"/>
		<c path="vnel.A"/>
	</t>
</f></vnel>
	<liftVNel public="1" params="E:A" set="method" line="22" static="1"><f a="e">
	<e path="thx.Either">
		<c path="liftVNel.E"/>
		<c path="liftVNel.A"/>
	</e>
	<t path="thx.VNel">
		<c path="liftVNel.E"/>
		<c path="liftVNel.A"/>
	</t>
</f></liftVNel>
	<pure public="1" params="E:A" get="inline" set="null" line="25" static="1"><f a="a">
	<c path="pure.A"/>
	<x path="thx.Validation">
		<c path="pure.E"/>
		<c path="pure.A"/>
	</x>
</f></pure>
	<success public="1" params="E:A" get="inline" set="null" line="28" static="1"><f a="a">
	<c path="success.A"/>
	<x path="thx.Validation">
		<c path="success.E"/>
		<c path="success.A"/>
	</x>
</f></success>
	<failure public="1" params="E:A" get="inline" set="null" line="31" static="1"><f a="e">
	<c path="failure.E"/>
	<x path="thx.Validation">
		<c path="failure.E"/>
		<c path="failure.A"/>
	</x>
</f></failure>
	<nn public="1" params="E:A" get="inline" set="null" line="35" static="1"><f a="a:e">
	<t path="Null"><c path="nn.A"/></t>
	<c path="nn.E"/>
	<x path="thx.Validation">
		<c path="nn.E"/>
		<c path="nn.A"/>
	</x>
</f></nn>
	<successNel public="1" params="E:A" get="inline" set="null" line="38" static="1"><f a="a">
	<c path="successNel.A"/>
	<t path="thx.VNel">
		<c path="successNel.E"/>
		<c path="successNel.A"/>
	</t>
</f></successNel>
	<failureNel public="1" params="E:A" get="inline" set="null" line="41" static="1"><f a="e">
	<c path="failureNel.E"/>
	<t path="thx.VNel">
		<c path="failureNel.E"/>
		<c path="failureNel.A"/>
	</t>
</f></failureNel>
	<nnNel public="1" params="E:A" get="inline" set="null" line="45" static="1"><f a="a:e">
	<t path="Null"><c path="nnNel.A"/></t>
	<c path="nnNel.E"/>
	<t path="thx.VNel">
		<c path="nnNel.E"/>
		<c path="nnNel.A"/>
	</t>
</f></nnNel>
	<either public="1" get="accessor" set="null" static="1">
		<e path="thx.Either">
			<c path="thx.Validation.E"/>
			<c path="thx.Validation.A"/>
		</e>
		<meta><m n=":impl"/></meta>
	</either>
	<get_either public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
		</f>
		<meta><m n=":impl"/></meta>
	</get_either>
	<map public="1" params="B" set="method" line="52" static="1">
		<f a="this:f">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<f a="">
				<c path="thx.Validation.A"/>
				<c path="map.B"/>
			</f>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<c path="map.B"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<foldLeft public="1" params="B" set="method" line="55" static="1">
		<f a="this:b:f">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<c path="foldLeft.B"/>
			<f a=":">
				<c path="foldLeft.B"/>
				<c path="thx.Validation.A"/>
				<c path="foldLeft.B"/>
			</f>
			<c path="foldLeft.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</foldLeft>
	<foldMap public="1" params="B" set="method" line="64" static="1">
		<f a="this:f:m">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<f a="">
				<c path="thx.Validation.A"/>
				<c path="foldMap.B"/>
			</f>
			<x path="thx.Monoid"><c path="foldMap.B"/></x>
			<c path="foldMap.B"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Fold by mapping the contained value into some monoidal type and reducing with that monoid.</haxe_doc>
	</foldMap>
	<ap public="1" params="B" set="method" line="67" static="1">
		<f a="this:v:s">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<f a="">
					<c path="thx.Validation.A"/>
					<c path="ap.B"/>
				</f>
			</x>
			<x path="thx.Semigroup"><c path="thx.Validation.E"/></x>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<c path="ap.B"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</ap>
	<zip public="1" params="B" get="inline" set="null" line="81" static="1">
		<f a="this:v:s">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<c path="zip.B"/>
			</x>
			<x path="thx.Semigroup"><c path="thx.Validation.E"/></x>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<x path="thx.Tuple2">
					<c path="thx.Validation.A"/>
					<c path="zip.B"/>
				</x>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</zip>
	<leftMap public="1" params="E0" get="inline" set="null" line="84" static="1">
		<f a="this:f">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<f a="">
				<c path="thx.Validation.E"/>
				<c path="leftMap.E0"/>
			</f>
			<x path="thx.Validation">
				<c path="leftMap.E0"/>
				<c path="thx.Validation.A"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</leftMap>
	<wrapNel public="1" get="inline" set="null" line="87" static="1">
		<f a="this">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<t path="thx.VNel">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
	</wrapNel>
	<ensure public="1" set="method" line="90" static="1">
		<f a="this:p:error">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<f a="">
				<c path="thx.Validation.A"/>
				<x path="Bool"/>
			</f>
			<c path="thx.Validation.E"/>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</ensure>
	<flatMapV public="1" params="B" get="inline" set="null" line="99" static="1">
		<f a="this:f">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<f a="">
				<c path="thx.Validation.A"/>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="flatMapV.B"/>
				</x>
			</f>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<c path="flatMapV.B"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</flatMapV>
	<val2 public="1" params="X:A:B:C" get="inline" set="null" line="106" static="1"><f a="f:v1:v2:s">
	<f a=":">
		<c path="val2.A"/>
		<c path="val2.B"/>
		<c path="val2.C"/>
	</f>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.B"/>
	</x>
	<x path="thx.Semigroup"><c path="val2.X"/></x>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.C"/>
	</x>
</f></val2>
	<val3 public="1" params="X:A:B:C:D" get="inline" set="null" line="109" static="1"><f a="f:v1:v2:v3:s">
	<f a="::">
		<c path="val3.A"/>
		<c path="val3.B"/>
		<c path="val3.C"/>
		<c path="val3.D"/>
	</f>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.C"/>
	</x>
	<x path="thx.Semigroup"><c path="val3.X"/></x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.D"/>
	</x>
</f></val3>
	<val4 public="1" params="X:A:B:C:D:E" get="inline" set="null" line="112" static="1"><f a="f:v1:v2:v3:v4:s">
	<f a=":::">
		<c path="val4.A"/>
		<c path="val4.B"/>
		<c path="val4.C"/>
		<c path="val4.D"/>
		<c path="val4.E"/>
	</f>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.D"/>
	</x>
	<x path="thx.Semigroup"><c path="val4.X"/></x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.E"/>
	</x>
</f></val4>
	<val5 public="1" params="X:A:B:C:D:E:F" get="inline" set="null" line="118" static="1"><f a="f:v1:v2:v3:v4:v5:s">
	<f a="::::">
		<c path="val5.A"/>
		<c path="val5.B"/>
		<c path="val5.C"/>
		<c path="val5.D"/>
		<c path="val5.E"/>
		<c path="val5.F"/>
	</f>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.E"/>
	</x>
	<x path="thx.Semigroup"><c path="val5.X"/></x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.F"/>
	</x>
</f></val5>
	<val6 public="1" params="X:A:B:C:D:E:F:G" get="inline" set="null" line="124" static="1"><f a="f:v1:v2:v3:v4:v5:v6:s">
	<f a=":::::">
		<c path="val6.A"/>
		<c path="val6.B"/>
		<c path="val6.C"/>
		<c path="val6.D"/>
		<c path="val6.E"/>
		<c path="val6.F"/>
		<c path="val6.G"/>
	</f>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.F"/>
	</x>
	<x path="thx.Semigroup"><c path="val6.X"/></x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.G"/>
	</x>
</f></val6>
	<val7 public="1" params="X:A:B:C:D:E:F:G:H" get="inline" set="null" line="130" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:s">
	<f a="::::::">
		<c path="val7.A"/>
		<c path="val7.B"/>
		<c path="val7.C"/>
		<c path="val7.D"/>
		<c path="val7.E"/>
		<c path="val7.F"/>
		<c path="val7.G"/>
		<c path="val7.H"/>
	</f>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.G"/>
	</x>
	<x path="thx.Semigroup"><c path="val7.X"/></x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.H"/>
	</x>
</f></val7>
	<val8 public="1" params="X:A:B:C:D:E:F:G:H:I" get="inline" set="null" line="136" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:s">
	<f a=":::::::">
		<c path="val8.A"/>
		<c path="val8.B"/>
		<c path="val8.C"/>
		<c path="val8.D"/>
		<c path="val8.E"/>
		<c path="val8.F"/>
		<c path="val8.G"/>
		<c path="val8.H"/>
		<c path="val8.I"/>
	</f>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.H"/>
	</x>
	<x path="thx.Semigroup"><c path="val8.X"/></x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.I"/>
	</x>
</f></val8>
	<val9 public="1" params="X:A:B:C:D:E:F:G:H:I:J" get="inline" set="null" line="142" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:s">
	<f a="::::::::">
		<c path="val9.A"/>
		<c path="val9.B"/>
		<c path="val9.C"/>
		<c path="val9.D"/>
		<c path="val9.E"/>
		<c path="val9.F"/>
		<c path="val9.G"/>
		<c path="val9.H"/>
		<c path="val9.I"/>
		<c path="val9.J"/>
	</f>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.I"/>
	</x>
	<x path="thx.Semigroup"><c path="val9.X"/></x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.J"/>
	</x>
</f></val9>
	<val10 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K" get="inline" set="null" line="148" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:s">
	<f a=":::::::::">
		<c path="val10.A"/>
		<c path="val10.B"/>
		<c path="val10.C"/>
		<c path="val10.D"/>
		<c path="val10.E"/>
		<c path="val10.F"/>
		<c path="val10.G"/>
		<c path="val10.H"/>
		<c path="val10.I"/>
		<c path="val10.J"/>
		<c path="val10.K"/>
	</f>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.J"/>
	</x>
	<x path="thx.Semigroup"><c path="val10.X"/></x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.K"/>
	</x>
</f></val10>
	<val11 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K:L" get="inline" set="null" line="154" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:v11:s">
	<f a="::::::::::">
		<c path="val11.A"/>
		<c path="val11.B"/>
		<c path="val11.C"/>
		<c path="val11.D"/>
		<c path="val11.E"/>
		<c path="val11.F"/>
		<c path="val11.G"/>
		<c path="val11.H"/>
		<c path="val11.I"/>
		<c path="val11.J"/>
		<c path="val11.K"/>
		<c path="val11.L"/>
	</f>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.J"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.K"/>
	</x>
	<x path="thx.Semigroup"><c path="val11.X"/></x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.L"/>
	</x>
</f></val11>
	<val12 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K:L:M" get="inline" set="null" line="160" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:v11:v12:s">
	<f a=":::::::::::">
		<c path="val12.A"/>
		<c path="val12.B"/>
		<c path="val12.C"/>
		<c path="val12.D"/>
		<c path="val12.E"/>
		<c path="val12.F"/>
		<c path="val12.G"/>
		<c path="val12.H"/>
		<c path="val12.I"/>
		<c path="val12.J"/>
		<c path="val12.K"/>
		<c path="val12.L"/>
		<c path="val12.M"/>
	</f>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.J"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.K"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.L"/>
	</x>
	<x path="thx.Semigroup"><c path="val12.X"/></x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.M"/>
	</x>
</f></val12>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Validation.Validation_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Validation.hx" private="1" module="thx.Validation">
		<validation public="1" params="E:A" get="inline" set="null" line="16" static="1"><f a="e">
	<e path="thx.Either">
		<c path="validation.E"/>
		<c path="validation.A"/>
	</e>
	<x path="thx.Validation">
		<c path="validation.E"/>
		<c path="validation.A"/>
	</x>
</f></validation>
		<vnel public="1" params="E:A" get="inline" set="null" line="19" static="1"><f a="e">
	<e path="thx.Either">
		<x path="thx.Nel"><c path="vnel.E"/></x>
		<c path="vnel.A"/>
	</e>
	<t path="thx.VNel">
		<c path="vnel.E"/>
		<c path="vnel.A"/>
	</t>
</f></vnel>
		<liftVNel public="1" params="E:A" set="method" line="22" static="1"><f a="e">
	<e path="thx.Either">
		<c path="liftVNel.E"/>
		<c path="liftVNel.A"/>
	</e>
	<t path="thx.VNel">
		<c path="liftVNel.E"/>
		<c path="liftVNel.A"/>
	</t>
</f></liftVNel>
		<pure public="1" params="E:A" get="inline" set="null" line="25" static="1"><f a="a">
	<c path="pure.A"/>
	<x path="thx.Validation">
		<c path="pure.E"/>
		<c path="pure.A"/>
	</x>
</f></pure>
		<success public="1" params="E:A" get="inline" set="null" line="28" static="1"><f a="a">
	<c path="success.A"/>
	<x path="thx.Validation">
		<c path="success.E"/>
		<c path="success.A"/>
	</x>
</f></success>
		<failure public="1" params="E:A" get="inline" set="null" line="31" static="1"><f a="e">
	<c path="failure.E"/>
	<x path="thx.Validation">
		<c path="failure.E"/>
		<c path="failure.A"/>
	</x>
</f></failure>
		<nn public="1" params="E:A" get="inline" set="null" line="35" static="1"><f a="a:e">
	<t path="Null"><c path="nn.A"/></t>
	<c path="nn.E"/>
	<x path="thx.Validation">
		<c path="nn.E"/>
		<c path="nn.A"/>
	</x>
</f></nn>
		<successNel public="1" params="E:A" get="inline" set="null" line="38" static="1"><f a="a">
	<c path="successNel.A"/>
	<t path="thx.VNel">
		<c path="successNel.E"/>
		<c path="successNel.A"/>
	</t>
</f></successNel>
		<failureNel public="1" params="E:A" get="inline" set="null" line="41" static="1"><f a="e">
	<c path="failureNel.E"/>
	<t path="thx.VNel">
		<c path="failureNel.E"/>
		<c path="failureNel.A"/>
	</t>
</f></failureNel>
		<nnNel public="1" params="E:A" get="inline" set="null" line="45" static="1"><f a="a:e">
	<t path="Null"><c path="nnNel.A"/></t>
	<c path="nnNel.E"/>
	<t path="thx.VNel">
		<c path="nnNel.E"/>
		<c path="nnNel.A"/>
	</t>
</f></nnNel>
		<either public="1" get="accessor" set="null" static="1">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<meta><m n=":impl"/></meta>
		</either>
		<get_either public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
			</f>
			<meta><m n=":impl"/></meta>
		</get_either>
		<map public="1" params="B" set="method" line="52" static="1">
			<f a="this:f">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<f a="">
					<c path="thx.Validation.A"/>
					<c path="map.B"/>
				</f>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="map.B"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<foldLeft public="1" params="B" set="method" line="55" static="1">
			<f a="this:b:f">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<c path="foldLeft.B"/>
				<f a=":">
					<c path="foldLeft.B"/>
					<c path="thx.Validation.A"/>
					<c path="foldLeft.B"/>
				</f>
				<c path="foldLeft.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</foldLeft>
		<foldMap public="1" params="B" set="method" line="64" static="1">
			<f a="this:f:m">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<f a="">
					<c path="thx.Validation.A"/>
					<c path="foldMap.B"/>
				</f>
				<x path="thx.Monoid"><c path="foldMap.B"/></x>
				<c path="foldMap.B"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Fold by mapping the contained value into some monoidal type and reducing with that monoid.</haxe_doc>
		</foldMap>
		<ap public="1" params="B" set="method" line="67" static="1">
			<f a="this:v:s">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<f a="">
						<c path="thx.Validation.A"/>
						<c path="ap.B"/>
					</f>
				</x>
				<x path="thx.Semigroup"><c path="thx.Validation.E"/></x>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="ap.B"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</ap>
		<zip public="1" params="B" get="inline" set="null" line="81" static="1">
			<f a="this:v:s">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="zip.B"/>
				</x>
				<x path="thx.Semigroup"><c path="thx.Validation.E"/></x>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<x path="thx.Tuple2">
						<c path="thx.Validation.A"/>
						<c path="zip.B"/>
					</x>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</zip>
		<leftMap public="1" params="E0" get="inline" set="null" line="84" static="1">
			<f a="this:f">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<f a="">
					<c path="thx.Validation.E"/>
					<c path="leftMap.E0"/>
				</f>
				<x path="thx.Validation">
					<c path="leftMap.E0"/>
					<c path="thx.Validation.A"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</leftMap>
		<wrapNel public="1" get="inline" set="null" line="87" static="1">
			<f a="this">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<t path="thx.VNel">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
		</wrapNel>
		<ensure public="1" set="method" line="90" static="1">
			<f a="this:p:error">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<f a="">
					<c path="thx.Validation.A"/>
					<x path="Bool"/>
				</f>
				<c path="thx.Validation.E"/>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</ensure>
		<flatMapV public="1" params="B" get="inline" set="null" line="99" static="1">
			<f a="this:f">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<f a="">
					<c path="thx.Validation.A"/>
					<x path="thx.Validation">
						<c path="thx.Validation.E"/>
						<c path="flatMapV.B"/>
					</x>
				</f>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="flatMapV.B"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</flatMapV>
		<val2 public="1" params="X:A:B:C" get="inline" set="null" line="106" static="1"><f a="f:v1:v2:s">
	<f a=":">
		<c path="val2.A"/>
		<c path="val2.B"/>
		<c path="val2.C"/>
	</f>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.B"/>
	</x>
	<x path="thx.Semigroup"><c path="val2.X"/></x>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.C"/>
	</x>
</f></val2>
		<val3 public="1" params="X:A:B:C:D" get="inline" set="null" line="109" static="1"><f a="f:v1:v2:v3:s">
	<f a="::">
		<c path="val3.A"/>
		<c path="val3.B"/>
		<c path="val3.C"/>
		<c path="val3.D"/>
	</f>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.C"/>
	</x>
	<x path="thx.Semigroup"><c path="val3.X"/></x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.D"/>
	</x>
</f></val3>
		<val4 public="1" params="X:A:B:C:D:E" get="inline" set="null" line="112" static="1"><f a="f:v1:v2:v3:v4:s">
	<f a=":::">
		<c path="val4.A"/>
		<c path="val4.B"/>
		<c path="val4.C"/>
		<c path="val4.D"/>
		<c path="val4.E"/>
	</f>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.D"/>
	</x>
	<x path="thx.Semigroup"><c path="val4.X"/></x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.E"/>
	</x>
</f></val4>
		<val5 public="1" params="X:A:B:C:D:E:F" get="inline" set="null" line="118" static="1"><f a="f:v1:v2:v3:v4:v5:s">
	<f a="::::">
		<c path="val5.A"/>
		<c path="val5.B"/>
		<c path="val5.C"/>
		<c path="val5.D"/>
		<c path="val5.E"/>
		<c path="val5.F"/>
	</f>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.E"/>
	</x>
	<x path="thx.Semigroup"><c path="val5.X"/></x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.F"/>
	</x>
</f></val5>
		<val6 public="1" params="X:A:B:C:D:E:F:G" get="inline" set="null" line="124" static="1"><f a="f:v1:v2:v3:v4:v5:v6:s">
	<f a=":::::">
		<c path="val6.A"/>
		<c path="val6.B"/>
		<c path="val6.C"/>
		<c path="val6.D"/>
		<c path="val6.E"/>
		<c path="val6.F"/>
		<c path="val6.G"/>
	</f>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.F"/>
	</x>
	<x path="thx.Semigroup"><c path="val6.X"/></x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.G"/>
	</x>
</f></val6>
		<val7 public="1" params="X:A:B:C:D:E:F:G:H" get="inline" set="null" line="130" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:s">
	<f a="::::::">
		<c path="val7.A"/>
		<c path="val7.B"/>
		<c path="val7.C"/>
		<c path="val7.D"/>
		<c path="val7.E"/>
		<c path="val7.F"/>
		<c path="val7.G"/>
		<c path="val7.H"/>
	</f>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.G"/>
	</x>
	<x path="thx.Semigroup"><c path="val7.X"/></x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.H"/>
	</x>
</f></val7>
		<val8 public="1" params="X:A:B:C:D:E:F:G:H:I" get="inline" set="null" line="136" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:s">
	<f a=":::::::">
		<c path="val8.A"/>
		<c path="val8.B"/>
		<c path="val8.C"/>
		<c path="val8.D"/>
		<c path="val8.E"/>
		<c path="val8.F"/>
		<c path="val8.G"/>
		<c path="val8.H"/>
		<c path="val8.I"/>
	</f>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.H"/>
	</x>
	<x path="thx.Semigroup"><c path="val8.X"/></x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.I"/>
	</x>
</f></val8>
		<val9 public="1" params="X:A:B:C:D:E:F:G:H:I:J" get="inline" set="null" line="142" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:s">
	<f a="::::::::">
		<c path="val9.A"/>
		<c path="val9.B"/>
		<c path="val9.C"/>
		<c path="val9.D"/>
		<c path="val9.E"/>
		<c path="val9.F"/>
		<c path="val9.G"/>
		<c path="val9.H"/>
		<c path="val9.I"/>
		<c path="val9.J"/>
	</f>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.I"/>
	</x>
	<x path="thx.Semigroup"><c path="val9.X"/></x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.J"/>
	</x>
</f></val9>
		<val10 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K" get="inline" set="null" line="148" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:s">
	<f a=":::::::::">
		<c path="val10.A"/>
		<c path="val10.B"/>
		<c path="val10.C"/>
		<c path="val10.D"/>
		<c path="val10.E"/>
		<c path="val10.F"/>
		<c path="val10.G"/>
		<c path="val10.H"/>
		<c path="val10.I"/>
		<c path="val10.J"/>
		<c path="val10.K"/>
	</f>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.J"/>
	</x>
	<x path="thx.Semigroup"><c path="val10.X"/></x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.K"/>
	</x>
</f></val10>
		<val11 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K:L" get="inline" set="null" line="154" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:v11:s">
	<f a="::::::::::">
		<c path="val11.A"/>
		<c path="val11.B"/>
		<c path="val11.C"/>
		<c path="val11.D"/>
		<c path="val11.E"/>
		<c path="val11.F"/>
		<c path="val11.G"/>
		<c path="val11.H"/>
		<c path="val11.I"/>
		<c path="val11.J"/>
		<c path="val11.K"/>
		<c path="val11.L"/>
	</f>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.J"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.K"/>
	</x>
	<x path="thx.Semigroup"><c path="val11.X"/></x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.L"/>
	</x>
</f></val11>
		<val12 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K:L:M" get="inline" set="null" line="160" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:v11:v12:s">
	<f a=":::::::::::">
		<c path="val12.A"/>
		<c path="val12.B"/>
		<c path="val12.C"/>
		<c path="val12.D"/>
		<c path="val12.E"/>
		<c path="val12.F"/>
		<c path="val12.G"/>
		<c path="val12.H"/>
		<c path="val12.I"/>
		<c path="val12.J"/>
		<c path="val12.K"/>
		<c path="val12.L"/>
		<c path="val12.M"/>
	</f>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.J"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.K"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.L"/>
	</x>
	<x path="thx.Semigroup"><c path="val12.X"/></x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.M"/>
	</x>
</f></val12>
		<meta><m n=":final"/></meta>
	</class>
	<class path="thx.ValidationExtensions" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Validation.hx" module="thx.Validation">
		<leftMapNel public="1" params="E:E0:A" get="inline" set="null" line="168" static="1"><f a="n:f">
	<t path="thx.VNel">
		<c path="leftMapNel.E"/>
		<c path="leftMapNel.A"/>
	</t>
	<f a="">
		<c path="leftMapNel.E"/>
		<c path="leftMapNel.E0"/>
	</f>
	<t path="thx.VNel">
		<c path="leftMapNel.E0"/>
		<c path="leftMapNel.A"/>
	</t>
</f></leftMapNel>
		<ensureNel public="1" params="E:A" set="method" line="171" static="1"><f a="v:p:error">
	<t path="thx.VNel">
		<c path="ensureNel.E"/>
		<c path="ensureNel.A"/>
	</t>
	<f a="">
		<c path="ensureNel.A"/>
		<x path="Bool"/>
	</f>
	<c path="ensureNel.E"/>
	<t path="thx.VNel">
		<c path="ensureNel.E"/>
		<c path="ensureNel.A"/>
	</t>
</f></ensureNel>
		<appendVNel public="1" params="E:A" set="method" line="177" static="1"><f a="target:item">
	<t path="thx.VNel">
		<c path="appendVNel.E"/>
		<c path="Array"><c path="appendVNel.A"/></c>
	</t>
	<t path="thx.VNel">
		<c path="appendVNel.E"/>
		<c path="appendVNel.A"/>
	</t>
	<t path="thx.VNel">
		<c path="appendVNel.E"/>
		<c path="Array"><c path="appendVNel.A"/></c>
	</t>
</f></appendVNel>
		<appendValidation public="1" params="E:A" set="method" line="186" static="1"><f a="target:item">
	<t path="thx.VNel">
		<c path="appendValidation.E"/>
		<c path="Array"><c path="appendValidation.A"/></c>
	</t>
	<x path="thx.Validation">
		<c path="appendValidation.E"/>
		<c path="appendValidation.A"/>
	</x>
	<t path="thx.VNel">
		<c path="appendValidation.E"/>
		<c path="Array"><c path="appendValidation.A"/></c>
	</t>
</f></appendValidation>
		<appendVNels public="1" params="E:A" set="method" line="190" static="1"><f a="target:items">
	<t path="thx.VNel">
		<c path="appendVNels.E"/>
		<c path="Array"><c path="appendVNels.A"/></c>
	</t>
	<c path="Array"><t path="thx.VNel">
	<c path="appendVNels.E"/>
	<c path="appendVNels.A"/>
</t></c>
	<t path="thx.VNel">
		<c path="appendVNels.E"/>
		<c path="Array"><c path="appendVNels.A"/></c>
	</t>
</f></appendVNels>
		<appendValidations public="1" params="E:A" set="method" line="194" static="1"><f a="target:items">
	<t path="thx.VNel">
		<c path="appendValidations.E"/>
		<c path="Array"><c path="appendValidations.A"/></c>
	</t>
	<c path="Array"><x path="thx.Validation">
	<c path="appendValidations.E"/>
	<c path="appendValidations.A"/>
</x></c>
	<t path="thx.VNel">
		<c path="appendValidations.E"/>
		<c path="Array"><c path="appendValidations.A"/></c>
	</t>
</f></appendValidations>
	</class>
	<abstract path="thx.Weekday" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Weekday.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>Named weekdays mapped to integer values from 0 to 6 where 0 is Sunday and 6 is
Saturday.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="thx._Weekday.Weekday_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Weekday.hx" private="1" module="thx.Weekday" extern="1">
	<Sunday public="1" get="inline" set="null" expr="cast 0" line="9" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Sunday>
	<Monday public="1" get="inline" set="null" expr="cast 1" line="10" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Monday>
	<Tuesday public="1" get="inline" set="null" expr="cast 2" line="11" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Tuesday>
	<Wednesday public="1" get="inline" set="null" expr="cast 3" line="12" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Wednesday>
	<Thursday public="1" get="inline" set="null" expr="cast 4" line="13" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Thursday>
	<Friday public="1" get="inline" set="null" expr="cast 5" line="14" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Friday>
	<Saturday public="1" get="inline" set="null" expr="cast 6" line="15" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Saturday>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="thx._Weekday.Weekday_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Weekday.hx" private="1" module="thx.Weekday" extern="1">
		<Sunday public="1" get="inline" set="null" expr="cast 0" line="9" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Sunday>
		<Monday public="1" get="inline" set="null" expr="cast 1" line="10" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Monday>
		<Tuesday public="1" get="inline" set="null" expr="cast 2" line="11" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Tuesday>
		<Wednesday public="1" get="inline" set="null" expr="cast 3" line="12" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Wednesday>
		<Thursday public="1" get="inline" set="null" expr="cast 4" line="13" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Thursday>
		<Friday public="1" get="inline" set="null" expr="cast 5" line="14" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Friday>
		<Saturday public="1" get="inline" set="null" expr="cast 6" line="15" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Saturday>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="thx.benchmark.measure.Stopwatch" params="" file="../src/thx/benchmark/measure/Stopwatch.hx">
		<go public="1" set="method" line="4" static="1"><f a=""><c path="thx.benchmark.measure.Stopwatch"/></f></go>
		<elapsed public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>Elapsed time in milliseconds.</haxe_doc>
		</elapsed>
		<elapsedSeconds public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>Elapsed time in seconds.</haxe_doc>
		</elapsedSeconds>
		<isRunning public="1" set="null"><x path="Bool"/></isRunning>
		<_elapsed><x path="Float"/></_elapsed>
		<startTime><x path="Float"/></startTime>
		<endTime><t path="Null"><x path="Float"/></t></endTime>
		<endTemp><x path="Float"/></endTemp>
		<timer><f a=""><x path="Float"/></f></timer>
		<start public="1" set="method" line="33"><f a=""><x path="Void"/></f></start>
		<stop public="1" set="method" line="39"><f a=""><x path="Void"/></f></stop>
		<reset public="1" set="method" line="47"><f a=""><x path="Void"/></f></reset>
		<restart public="1" set="method" line="51"><f a=""><x path="Void"/></f></restart>
		<get_elapsed set="method" line="56"><f a=""><x path="Float"/></f></get_elapsed>
		<get_elapsedSeconds set="method" line="60"><f a=""><x path="Float"/></f></get_elapsedSeconds>
		<new public="1" set="method" line="27"><f a="?timer">
	<f a=""><x path="Float"/></f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.benchmark.measure.Tracker" params="" file="../src/thx/benchmark/measure/Tracker.hx">
		<instance public="1" set="null" expr="new Tracker()" line="6" static="1">
			<c path="thx.benchmark.measure.Tracker"/>
			<meta><m n=":value"><e>new Tracker()</e></m></meta>
		</instance>
		<getTimer public="1" get="inline" set="null" line="8" static="1"><f a="name">
	<c path="String"/>
	<t path="Null"><c path="thx.benchmark.measure.Stopwatch"/></t>
</f></getTimer>
		<startTimer public="1" get="inline" set="null" line="11" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></startTimer>
		<stopTimer public="1" get="inline" set="null" line="14" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></stopTimer>
		<resetTimer public="1" get="inline" set="null" line="17" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></resetTimer>
		<restartTimer public="1" get="inline" set="null" line="20" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></restartTimer>
		<elapsedForTimer public="1" get="inline" set="null" line="23" static="1"><f a="name">
	<c path="String"/>
	<x path="Float"/>
</f></elapsedForTimer>
		<elapsedSecondsForTimer public="1" get="inline" set="null" line="26" static="1"><f a="name">
	<c path="String"/>
	<x path="Float"/>
</f></elapsedSecondsForTimer>
		<timers public="1" get="inline" set="null" line="29" static="1"><f a=""><c path="Array"><x path="thx.Tuple2">
	<c path="String"/>
	<c path="thx.benchmark.measure.Stopwatch"/>
</x></c></f></timers>
		<wrap public="1" get="inline" set="null" line="33" static="1"><f a="f:name">
	<f a=""><x path="Void"/></f>
	<c path="String"/>
	<x path="Void"/>
</f></wrap>
		<watches><x path="Map">
	<c path="String"/>
	<c path="thx.benchmark.measure.Stopwatch"/>
</x></watches>
		<timer><f a=""><x path="Float"/></f></timer>
		<get public="1" set="method" line="46"><f a="name">
	<c path="String"/>
	<t path="Null"><c path="thx.benchmark.measure.Stopwatch"/></t>
</f></get>
		<start public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></start>
		<stop public="1" set="method" line="52"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></stop>
		<reset public="1" set="method" line="55"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></reset>
		<restart public="1" set="method" line="58"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></restart>
		<iterator public="1" set="method" line="61"><f a=""><c path="Array"><x path="thx.Tuple2">
	<c path="String"/>
	<c path="thx.benchmark.measure.Stopwatch"/>
</x></c></f></iterator>
		<elapsed public="1" set="method" line="64"><f a="name">
	<c path="String"/>
	<x path="Float"/>
</f></elapsed>
		<elapsedSeconds public="1" set="method" line="67"><f a="name">
	<c path="String"/>
	<x path="Float"/>
</f></elapsedSeconds>
		<ensureStopwatch set="method" line="70"><f a="name">
	<c path="String"/>
	<t path="Null"><c path="thx.benchmark.measure.Stopwatch"/></t>
</f></ensureStopwatch>
		<new public="1" set="method" line="41"><f a="?timer">
	<f a=""><x path="Float"/></f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.benchmark.speed.SpeedCase" params="" file="../src/thx/benchmark/speed/SpeedCase.hx">
		<execute public="1" set="method" static="1"><f a="expr:?minSamples:?maxTime:?maxSamples">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></execute>
		<desiredUncertainty expr="0.01" line="11" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</desiredUncertainty>
		<minResolution expr="1.0" line="12" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</minResolution>
		<threshold expr="1073741824" line="13" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1073741824</e></m></meta>
		</threshold>
		<max expr="2147483647" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2147483647</e></m></meta>
		</max>
		<f><f a="">
	<x path="Int"/>
	<x path="Float"/>
</f></f>
		<run public="1" set="method" line="20">
			<f a="?minSamples:?maxTime:?maxSamples" v="5:5000.0:100000">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.benchmark.speed.Stats"/>
			</f>
			<meta><m n=":value"><e>{ maxSamples : 100000, maxTime : 5000.0, minSamples : 5 }</e></m></meta>
		</run>
		<new public="1" set="method" line="16"><f a="f">
	<f a="">
		<x path="Int"/>
		<x path="Float"/>
	</f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.benchmark.speed.Stats" params="" file="../src/thx/benchmark/speed/Stats.hx">
		<compare public="1" set="method" line="7" static="1"><f a="a:b">
	<c path="thx.benchmark.speed.Stats"/>
	<c path="thx.benchmark.speed.Stats"/>
	<x path="Int"/>
</f></compare>
		<tTable_infinity expr="1.96" line="78" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1.96</e></m></meta>
		</tTable_infinity>
		<tTable expr="[1 =&gt; 12.706, 2 =&gt; 4.303, 3 =&gt; 3.182, 4 =&gt; 2.776, 5 =&gt; 2.571, 6 =&gt; 2.447, 7 =&gt; 2.365, 8 =&gt; 2.306, 9 =&gt; 2.262, 10 =&gt; 2.228, 11 =&gt; 2.201, 12 =&gt; 2.179, 13 =&gt; 2.16, 14 =&gt; 2.145, 15 =&gt; 2.131, 16 =&gt; 2.12, 17 =&gt; 2.11, 18 =&gt; 2.101, 19 =&gt; 2.093, 20 =&gt; 2.086, 21 =&gt; 2.08, 22 =&gt; 2.074, 23 =&gt; 2.069, 24 =&gt; 2.064, 25 =&gt; 2.06, 26 =&gt; 2.056, 27 =&gt; 2.052, 28 =&gt; 2.048, 29 =&gt; 2.045, 30 =&gt; 2.042]" line="79" static="1">
			<x path="Map">
				<x path="Int"/>
				<x path="Float"/>
			</x>
			<meta><m n=":value"><e><![CDATA[[1 => 12.706, 2 => 4.303, 3 => 3.182, 4 => 2.776, 5 => 2.571, 6 => 2.447, 7 => 2.365, 8 => 2.306, 9 => 2.262, 10 => 2.228, 11 => 2.201, 12 => 2.179, 13 => 2.16, 14 => 2.145, 15 => 2.131, 16 => 2.12, 17 => 2.11, 18 => 2.101, 19 => 2.093, 20 => 2.086, 21 => 2.08, 22 => 2.074, 23 => 2.069, 24 => 2.064, 25 => 2.06, 26 => 2.056, 27 => 2.052, 28 => 2.048, 29 => 2.045, 30 => 2.042]]]></e></m></meta>
		</tTable>
		<count public="1" set="null"><x path="Int"/></count>
		<samples public="1" set="null"><c path="Array"><x path="Float"/></c></samples>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
		<ms public="1" get="accessor" set="null"><x path="Float"/></ms>
		<standardDeviation public="1" get="accessor" set="null"><x path="Float"/></standardDeviation>
		<standardErrorOfMean public="1" get="accessor" set="null"><x path="Float"/></standardErrorOfMean>
		<seconds public="1" get="accessor" set="null"><x path="Float"/></seconds>
		<period public="1" get="accessor" set="null"><x path="Float"/></period>
		<cycles public="1" get="accessor" set="null"><x path="Float"/></cycles>
		<criticalValue public="1" get="accessor" set="null"><x path="Float"/></criticalValue>
		<marginOfError public="1" get="accessor" set="null"><x path="Float"/></marginOfError>
		<relativeMarginOfError public="1" get="accessor" set="null"><x path="Float"/></relativeMarginOfError>
		<compareTo public="1" set="method" line="27"><f a="that">
	<c path="thx.benchmark.speed.Stats"/>
	<x path="Int"/>
</f></compareTo>
		<get_size get="inline" set="null" line="30"><f a=""><x path="Int"/></f></get_size>
		<_ms expr="-1" line="33">
			<x path="Float"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</_ms>
		<get_ms set="method" line="34"><f a=""><x path="Float"/></f></get_ms>
		<_standardDeviation expr="-1" line="40">
			<x path="Float"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</_standardDeviation>
		<get_standardDeviation set="method" line="41"><f a=""><x path="Float"/></f></get_standardDeviation>
		<get_standardErrorOfMean set="method" line="47"><f a=""><x path="Float"/></f></get_standardErrorOfMean>
		<get_seconds set="method" line="50"><f a=""><x path="Float"/></f></get_seconds>
		<get_period set="method" line="53"><f a=""><x path="Float"/></f></get_period>
		<get_cycles set="method" line="56"><f a=""><x path="Float"/></f></get_cycles>
		<get_criticalValue set="method" line="60"><f a=""><x path="Float"/></f></get_criticalValue>
		<get_marginOfError set="method" line="69"><f a=""><x path="Float"/></f></get_marginOfError>
		<get_relativeMarginOfError set="method" line="72"><f a=""><x path="Float"/></f></get_relativeMarginOfError>
		<toString public="1" set="method" line="75"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="22"><f a="samples:count">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.benchmark.speed.Suite" params="" file="../src/thx/benchmark/speed/Suite.hx">
		<tests><x path="thx.OrderedMap">
	<c path="String"/>
	<c path="thx.benchmark.speed.SpeedCase"/>
</x></tests>
		<maxExecutionTime public="1"><x path="Float"/></maxExecutionTime>
		<minSamples public="1"><x path="Int"/></minSamples>
		<addCase public="1" set="method" line="20"><f a="description:f">
	<c path="String"/>
	<f a="">
		<x path="Int"/>
		<x path="Float"/>
	</f>
	<x path="Void"/>
</f></addCase>
		<run public="1" set="method" line="24"><f a=""><c path="thx.benchmark.speed.SuiteReport"/></f></run>
		<add public="1" set="method"><f a="description:f">
	<d/>
	<x path="haxe.Function"/>
	<d/>
</f></add>
		<new public="1" set="method" line="14">
			<f a="?minSamples:?maxExecutionTime" v="5:5000.0">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ maxExecutionTime : 5000.0, minSamples : 5 }</e></m></meta>
		</new>
	</class>
	<class path="thx.benchmark.speed.SuiteReport" params="" file="../src/thx/benchmark/speed/SuiteReport.hx">
		<tests><x path="thx.OrderedMap">
	<c path="String"/>
	<c path="thx.benchmark.speed.Stats"/>
</x></tests>
		<toString public="1" set="method" line="17"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="13"><f a="tests">
	<x path="thx.OrderedMap">
		<c path="String"/>
		<c path="thx.benchmark.speed.Stats"/>
	</x>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.benchmark.speed.macro.SpeedCaseBuilder" params="" file="../src/thx/benchmark/speed/macro/SpeedCaseBuilder.hx"><create public="1" set="method" static="1"><f a="f">
	<d/>
	<d/>
</f></create></class>
	<class path="thx.culture.DateFormatInfo" params="" file="/Users/francoponticelli/projects/thx.culture/src/thx/culture/DateFormatInfo.hx">
		<invariant public="1" set="null" expr="new DateFormatInfo(0, &quot;FirstDay&quot;, &quot;AM&quot;, &quot;PM&quot;, 0, &quot;Sunday&quot;, &quot;Gregorian&quot;, null, [&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;], [&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;], [&quot;Su&quot;, &quot;Mo&quot;, &quot;Tu&quot;, &quot;We&quot;, &quot;Th&quot;, &quot;Fr&quot;, &quot;Sa&quot;], [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;, &quot;&quot;], [&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;, &quot;&quot;], [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;, &quot;&quot;], [&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;, &quot;&quot;], &quot;dddd, dd MMMM yyyy&quot;, &quot;MM/dd/yyyy&quot;, &quot;dddd, dd MMMM yyyy HH:mm:ss&quot;, &quot;yyyy&apos;-&apos;MM&apos;-&apos;dd&apos;T&apos;HH&apos;:&apos;mm&apos;:&apos;ss&quot;, &quot;MMMM dd&quot;, &quot;ddd, dd MMM yyyy HH&apos;:&apos;mm&apos;:&apos;ss &apos;GMT&apos;&quot;, &quot;HH:mm:ss&quot;, &quot;HH:mm&quot;, &quot;yyyy&apos;-&apos;MM&apos;-&apos;dd HH&apos;:&apos;mm&apos;:&apos;ss&apos;Z&apos;&quot;, &quot;yyyy MMMM&quot;, &quot;/&quot;, &quot;:&quot;)" line="4" static="1">
			<c path="thx.culture.DateFormatInfo"/>
			<meta><m n=":value"><e>new DateFormatInfo(0, "FirstDay", "AM", "PM", 0, "Sunday", "Gregorian", null, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""], "dddd, dd MMMM yyyy", "MM/dd/yyyy", "dddd, dd MMMM yyyy HH:mm:ss", "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "MMMM dd", "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "HH:mm:ss", "HH:mm", "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "yyyy MMMM", "/", ":")</e></m></meta>
		</invariant>
		<fromObject public="1" get="inline" set="null" line="151" static="1"><f a="o">
	<d/>
	<c path="thx.culture.DateFormatInfo"/>
</f></fromObject>
		<calendarWeekRuleIndex public="1" set="null"><x path="Int"/></calendarWeekRuleIndex>
		<calendarWeekRuleName public="1" set="null"><c path="String"/></calendarWeekRuleName>
		<designatorAm public="1" set="null"><c path="String"/></designatorAm>
		<designatorPm public="1" set="null"><c path="String"/></designatorPm>
		<firstDayOfWeekIndex public="1" set="null"><x path="Int"/></firstDayOfWeekIndex>
		<firstDayOfWeekName public="1" set="null"><c path="String"/></firstDayOfWeekName>
		<nameCalendar public="1" set="null"><c path="String"/></nameCalendar>
		<nameCalendarNative public="1" set="null"><t path="Null"><c path="String"/></t></nameCalendarNative>
		<nameDays public="1" set="null"><c path="Array"><c path="String"/></c></nameDays>
		<nameDaysAbbreviated public="1" set="null"><c path="Array"><c path="String"/></c></nameDaysAbbreviated>
		<nameDaysShortest public="1" set="null"><c path="Array"><c path="String"/></c></nameDaysShortest>
		<nameMonths public="1" set="null"><c path="Array"><c path="String"/></c></nameMonths>
		<nameMonthsAbbreviated public="1" set="null"><c path="Array"><c path="String"/></c></nameMonthsAbbreviated>
		<nameMonthGenitives public="1" set="null"><c path="Array"><c path="String"/></c></nameMonthGenitives>
		<nameMonthGenitivesAbbreviated public="1" set="null"><c path="Array"><c path="String"/></c></nameMonthGenitivesAbbreviated>
		<patternDateLong public="1" set="null"><c path="String"/></patternDateLong>
		<patternDateShort public="1" set="null"><c path="String"/></patternDateShort>
		<patternDateTimeFull public="1" set="null"><c path="String"/></patternDateTimeFull>
		<patternDateTimeSortable public="1" set="null"><c path="String"/></patternDateTimeSortable>
		<patternMonthDay public="1" set="null"><c path="String"/></patternMonthDay>
		<patternRfc1123 public="1" set="null"><c path="String"/></patternRfc1123>
		<patternTimeLong public="1" set="null"><c path="String"/></patternTimeLong>
		<patternTimeShort public="1" set="null"><c path="String"/></patternTimeShort>
		<patternUniversalSortable public="1" set="null"><c path="String"/></patternUniversalSortable>
		<patternYearMonth public="1" set="null"><c path="String"/></patternYearMonth>
		<separatorDate public="1" set="null"><c path="String"/></separatorDate>
		<separatorTime public="1" set="null"><c path="String"/></separatorTime>
		<toObject public="1" set="method" line="120"><f a=""><a>
	<separatorTime><c path="String"/></separatorTime>
	<separatorDate><c path="String"/></separatorDate>
	<patternYearMonth><c path="String"/></patternYearMonth>
	<patternUniversalSortable><c path="String"/></patternUniversalSortable>
	<patternTimeShort><c path="String"/></patternTimeShort>
	<patternTimeLong><c path="String"/></patternTimeLong>
	<patternRfc1123><c path="String"/></patternRfc1123>
	<patternMonthDay><c path="String"/></patternMonthDay>
	<patternDateTimeSortable><c path="String"/></patternDateTimeSortable>
	<patternDateTimeFull><c path="String"/></patternDateTimeFull>
	<patternDateShort><c path="String"/></patternDateShort>
	<patternDateLong><c path="String"/></patternDateLong>
	<nameMonthsAbbreviated><c path="Array"><c path="String"/></c></nameMonthsAbbreviated>
	<nameMonths><c path="Array"><c path="String"/></c></nameMonths>
	<nameMonthGenitivesAbbreviated><c path="Array"><c path="String"/></c></nameMonthGenitivesAbbreviated>
	<nameMonthGenitives><c path="Array"><c path="String"/></c></nameMonthGenitives>
	<nameDaysShortest><c path="Array"><c path="String"/></c></nameDaysShortest>
	<nameDaysAbbreviated><c path="Array"><c path="String"/></c></nameDaysAbbreviated>
	<nameDays><c path="Array"><c path="String"/></c></nameDays>
	<nameCalendarNative><t path="Null"><c path="String"/></t></nameCalendarNative>
	<nameCalendar><c path="String"/></nameCalendar>
	<firstDayOfWeekName><c path="String"/></firstDayOfWeekName>
	<firstDayOfWeekIndex><x path="Int"/></firstDayOfWeekIndex>
	<designatorPm><c path="String"/></designatorPm>
	<designatorAm><c path="String"/></designatorAm>
	<calendarWeekRuleName><c path="String"/></calendarWeekRuleName>
	<calendarWeekRuleIndex><x path="Int"/></calendarWeekRuleIndex>
</a></f></toObject>
		<new public="1" set="method" line="62"><f a="calendarWeekRuleIndex:calendarWeekRuleName:designatorAm:designatorPm:firstDayOfWeekIndex:firstDayOfWeekName:nameCalendar:nameCalendarNative:nameDays:nameDaysAbbreviated:nameDaysShortest:nameMonths:nameMonthsAbbreviated:nameMonthGenitives:nameMonthGenitivesAbbreviated:patternDateLong:patternDateShort:patternDateTimeFull:patternDateTimeSortable:patternMonthDay:patternRfc1123:patternTimeLong:patternTimeShort:patternUniversalSortable:patternYearMonth:separatorDate:separatorTime">
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<t path="Null"><c path="String"/></t>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.culture.NumberFormatInfo" params="" file="/Users/francoponticelli/projects/thx.culture/src/thx/culture/NumberFormatInfo.hx">
		<invariant public="1" set="null" expr="new NumberFormatInfo(2, 2, 2, [3], [3], [3], 0, 1, 0, 0, 0, &quot;.&quot;, &quot;.&quot;, &quot;.&quot;, &quot;,&quot;, &quot;,&quot;, &quot;,&quot;, &quot;-&quot;, &quot;+&quot;, &quot;¤&quot;, &quot;NaN&quot;, &quot;-Infinity&quot;, &quot;%&quot;, &quot;‰&quot;, &quot;Infinity&quot;)" line="4" static="1">
			<c path="thx.culture.NumberFormatInfo"/>
			<meta><m n=":value"><e>new NumberFormatInfo(2, 2, 2, [3], [3], [3], 0, 1, 0, 0, 0, ".", ".", ".", ",", ",", ",", "-", "+", "¤", "NaN", "-Infinity", "%", "‰", "Infinity")</e></m></meta>
		</invariant>
		<fromObject public="1" get="inline" set="null" line="115" static="1"><f a="o">
	<d/>
	<c path="thx.culture.NumberFormatInfo"/>
</f></fromObject>
		<decimalDigitsCurrency public="1" set="null"><x path="Int"/></decimalDigitsCurrency>
		<decimalDigitsNumber public="1" set="null"><x path="Int"/></decimalDigitsNumber>
		<decimalDigitsPercent public="1" set="null"><x path="Int"/></decimalDigitsPercent>
		<groupSizesCurrency public="1" set="null"><c path="Array"><x path="Int"/></c></groupSizesCurrency>
		<groupSizesNumber public="1" set="null"><c path="Array"><x path="Int"/></c></groupSizesNumber>
		<groupSizesPercent public="1" set="null"><c path="Array"><x path="Int"/></c></groupSizesPercent>
		<patternNegativeCurrency public="1" set="null"><x path="Int"/></patternNegativeCurrency>
		<patternNegativeNumber public="1" set="null"><x path="Int"/></patternNegativeNumber>
		<patternNegativePercent public="1" set="null"><x path="Int"/></patternNegativePercent>
		<patternPositiveCurrency public="1" set="null"><x path="Int"/></patternPositiveCurrency>
		<patternPositivePercent public="1" set="null"><x path="Int"/></patternPositivePercent>
		<separatorDecimalCurrency public="1" set="null"><c path="String"/></separatorDecimalCurrency>
		<separatorDecimalNumber public="1" set="null"><c path="String"/></separatorDecimalNumber>
		<separatorDecimalPercent public="1" set="null"><c path="String"/></separatorDecimalPercent>
		<separatorGroupCurrency public="1" set="null"><c path="String"/></separatorGroupCurrency>
		<separatorGroupNumber public="1" set="null"><c path="String"/></separatorGroupNumber>
		<separatorGroupPercent public="1" set="null"><c path="String"/></separatorGroupPercent>
		<signNegative public="1" set="null"><c path="String"/></signNegative>
		<signPositive public="1" set="null"><c path="String"/></signPositive>
		<symbolCurrency public="1" set="null"><c path="String"/></symbolCurrency>
		<symbolNaN public="1" set="null"><c path="String"/></symbolNaN>
		<symbolNegativeInfinity public="1" set="null"><c path="String"/></symbolNegativeInfinity>
		<symbolPercent public="1" set="null"><c path="String"/></symbolPercent>
		<symbolPermille public="1" set="null"><c path="String"/></symbolPermille>
		<symbolPositiveInfinity public="1" set="null"><c path="String"/></symbolPositiveInfinity>
		<toObject public="1" set="method" line="86"><f a=""><a>
	<symbolPositiveInfinity><c path="String"/></symbolPositiveInfinity>
	<symbolPermille><c path="String"/></symbolPermille>
	<symbolPercent><c path="String"/></symbolPercent>
	<symbolNegativeInfinity><c path="String"/></symbolNegativeInfinity>
	<symbolNaN><c path="String"/></symbolNaN>
	<symbolCurrency><c path="String"/></symbolCurrency>
	<signPositive><c path="String"/></signPositive>
	<signNegative><c path="String"/></signNegative>
	<separatorGroupPercent><c path="String"/></separatorGroupPercent>
	<separatorGroupNumber><c path="String"/></separatorGroupNumber>
	<separatorGroupCurrency><c path="String"/></separatorGroupCurrency>
	<separatorDecimalPercent><c path="String"/></separatorDecimalPercent>
	<separatorDecimalNumber><c path="String"/></separatorDecimalNumber>
	<separatorDecimalCurrency><c path="String"/></separatorDecimalCurrency>
	<patternPositivePercent><x path="Int"/></patternPositivePercent>
	<patternPositiveCurrency><x path="Int"/></patternPositiveCurrency>
	<patternNegativePercent><x path="Int"/></patternNegativePercent>
	<patternNegativeNumber><x path="Int"/></patternNegativeNumber>
	<patternNegativeCurrency><x path="Int"/></patternNegativeCurrency>
	<groupSizesPercent><c path="Array"><x path="Int"/></c></groupSizesPercent>
	<groupSizesNumber><c path="Array"><x path="Int"/></c></groupSizesNumber>
	<groupSizesCurrency><c path="Array"><x path="Int"/></c></groupSizesCurrency>
	<decimalDigitsPercent><x path="Int"/></decimalDigitsPercent>
	<decimalDigitsNumber><x path="Int"/></decimalDigitsNumber>
	<decimalDigitsCurrency><x path="Int"/></decimalDigitsCurrency>
</a></f></toObject>
		<new public="1" set="method" line="32"><f a="decimalDigitsCurrency:decimalDigitsNumber:decimalDigitsPercent:groupSizesCurrency:groupSizesNumber:groupSizesPercent:patternNegativeCurrency:patternNegativeNumber:patternNegativePercent:patternPositiveCurrency:patternPositivePercent:separatorDecimalCurrency:separatorDecimalNumber:separatorDecimalPercent:separatorGroupCurrency:separatorGroupNumber:separatorGroupPercent:signNegative:signPositive:symbolCurrency:symbolNaN:symbolNegativeInfinity:symbolPercent:symbolPermille:symbolPositiveInfinity">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.culture.Culture" params="" file="/Users/francoponticelli/projects/thx.culture/src/thx/culture/Culture.hx">
		<invariant public="1" set="null" expr="new Culture(&quot;&quot;, DateFormatInfo.invariant, &quot;&quot;, false, &quot;iv&quot;, &quot;IVL&quot;, false, 127, &quot;Gregorian&quot;, &quot;Invariant Language&quot;, &quot;Invariant Language&quot;, &quot;Invariant Country&quot;, &quot;Invariant Country&quot;, NumberFormatInfo.invariant, &quot;,&quot;, &quot;IVL&quot;)" line="4" static="1">
			<c path="thx.culture.Culture"/>
			<meta><m n=":value"><e>new Culture("", DateFormatInfo.invariant, "", false, "iv", "IVL", false, 127, "Gregorian", "Invariant Language", "Invariant Language", "Invariant Country", "Invariant Country", NumberFormatInfo.invariant, ",", "IVL")</e></m></meta>
		</invariant>
		<fromObject public="1" get="inline" set="null" line="81" static="1"><f a="o">
	<d/>
	<c path="thx.culture.Culture"/>
</f></fromObject>
		<cultures static="1"><x path="Map">
	<c path="String"/>
	<c path="thx.culture.Culture"/>
</x></cultures>
		<list static="1"><c path="Array"><c path="thx.culture.Culture"/></c></list>
		<register public="1" set="method" line="112" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<t path="Null"><c path="thx.culture.Culture"/></t>
</f></register>
		<getByCode public="1" set="method" line="124" static="1"><f a="code">
	<c path="String"/>
	<t path="Null"><c path="thx.culture.Culture"/></t>
</f></getByCode>
		<getByIso2 public="1" set="method" line="126" static="1"><f a="iso2">
	<c path="String"/>
	<t path="Null"><c path="thx.culture.Culture"/></t>
</f></getByIso2>
		<getByIso3 public="1" set="method" line="128" static="1"><f a="iso3">
	<c path="String"/>
	<t path="Null"><c path="thx.culture.Culture"/></t>
</f></getByIso3>
		<iterator public="1" set="method" line="130" static="1"><f a=""><t path="Iterator"><c path="thx.culture.Culture"/></t></f></iterator>
		<getCodeKey get="inline" set="null" line="133" static="1"><f a="key">
	<c path="String"/>
	<c path="String"/>
</f></getCodeKey>
		<getIso2Key get="inline" set="null" line="135" static="1"><f a="key">
	<c path="String"/>
	<c path="String"/>
</f></getIso2Key>
		<getIso3Key get="inline" set="null" line="137" static="1"><f a="key">
	<c path="String"/>
	<c path="String"/>
</f></getIso3Key>
		<code public="1" set="null"><c path="String"/></code>
		<dateTime public="1" set="null"><c path="thx.culture.DateFormatInfo"/></dateTime>
		<ietf public="1" set="null"><c path="String"/></ietf>
		<isNeutral public="1" set="null"><x path="Bool"/></isNeutral>
		<iso2 public="1" set="null"><c path="String"/></iso2>
		<iso3 public="1" set="null"><c path="String"/></iso3>
		<isRightToLeft public="1" set="null"><x path="Bool"/></isRightToLeft>
		<lcid public="1" set="null"><x path="Int"/></lcid>
		<nameCalendar public="1" set="null"><c path="String"/></nameCalendar>
		<nameDisplayEnglish public="1" get="accessor" set="null"><c path="String"/></nameDisplayEnglish>
		<nameDisplayNative public="1" get="accessor" set="null"><c path="String"/></nameDisplayNative>
		<nameEnglish public="1" set="null"><c path="String"/></nameEnglish>
		<nameNative public="1" set="null"><c path="String"/></nameNative>
		<nameRegionEnglish public="1" set="null"><c path="String"/></nameRegionEnglish>
		<nameRegionNative public="1" set="null"><c path="String"/></nameRegionNative>
		<number public="1" set="null"><c path="thx.culture.NumberFormatInfo"/></number>
		<separatorList public="1" set="null"><c path="String"/></separatorList>
		<win3 public="1" set="null"><c path="String"/></win3>
		<toObject public="1" set="method" line="61"><f a=""><a>
	<win3><c path="String"/></win3>
	<separatorList><c path="String"/></separatorList>
	<number><t path="Null"><a>
	<symbolPositiveInfinity><c path="String"/></symbolPositiveInfinity>
	<symbolPermille><c path="String"/></symbolPermille>
	<symbolPercent><c path="String"/></symbolPercent>
	<symbolNegativeInfinity><c path="String"/></symbolNegativeInfinity>
	<symbolNaN><c path="String"/></symbolNaN>
	<symbolCurrency><c path="String"/></symbolCurrency>
	<signPositive><c path="String"/></signPositive>
	<signNegative><c path="String"/></signNegative>
	<separatorGroupPercent><c path="String"/></separatorGroupPercent>
	<separatorGroupNumber><c path="String"/></separatorGroupNumber>
	<separatorGroupCurrency><c path="String"/></separatorGroupCurrency>
	<separatorDecimalPercent><c path="String"/></separatorDecimalPercent>
	<separatorDecimalNumber><c path="String"/></separatorDecimalNumber>
	<separatorDecimalCurrency><c path="String"/></separatorDecimalCurrency>
	<patternPositivePercent><x path="Int"/></patternPositivePercent>
	<patternPositiveCurrency><x path="Int"/></patternPositiveCurrency>
	<patternNegativePercent><x path="Int"/></patternNegativePercent>
	<patternNegativeNumber><x path="Int"/></patternNegativeNumber>
	<patternNegativeCurrency><x path="Int"/></patternNegativeCurrency>
	<groupSizesPercent><c path="Array"><x path="Int"/></c></groupSizesPercent>
	<groupSizesNumber><c path="Array"><x path="Int"/></c></groupSizesNumber>
	<groupSizesCurrency><c path="Array"><x path="Int"/></c></groupSizesCurrency>
	<decimalDigitsPercent><x path="Int"/></decimalDigitsPercent>
	<decimalDigitsNumber><x path="Int"/></decimalDigitsNumber>
	<decimalDigitsCurrency><x path="Int"/></decimalDigitsCurrency>
</a></t></number>
	<nameRegionNative><c path="String"/></nameRegionNative>
	<nameRegionEnglish><c path="String"/></nameRegionEnglish>
	<nameNative><c path="String"/></nameNative>
	<nameEnglish><c path="String"/></nameEnglish>
	<nameCalendar><c path="String"/></nameCalendar>
	<lcid><x path="Int"/></lcid>
	<iso3><c path="String"/></iso3>
	<iso2><c path="String"/></iso2>
	<isRightToLeft><x path="Bool"/></isRightToLeft>
	<isNeutral><x path="Bool"/></isNeutral>
	<ietf><c path="String"/></ietf>
	<dateTime><t path="Null"><a>
	<separatorTime><c path="String"/></separatorTime>
	<separatorDate><c path="String"/></separatorDate>
	<patternYearMonth><c path="String"/></patternYearMonth>
	<patternUniversalSortable><c path="String"/></patternUniversalSortable>
	<patternTimeShort><c path="String"/></patternTimeShort>
	<patternTimeLong><c path="String"/></patternTimeLong>
	<patternRfc1123><c path="String"/></patternRfc1123>
	<patternMonthDay><c path="String"/></patternMonthDay>
	<patternDateTimeSortable><c path="String"/></patternDateTimeSortable>
	<patternDateTimeFull><c path="String"/></patternDateTimeFull>
	<patternDateShort><c path="String"/></patternDateShort>
	<patternDateLong><c path="String"/></patternDateLong>
	<nameMonthsAbbreviated><c path="Array"><c path="String"/></c></nameMonthsAbbreviated>
	<nameMonths><c path="Array"><c path="String"/></c></nameMonths>
	<nameMonthGenitivesAbbreviated><c path="Array"><c path="String"/></c></nameMonthGenitivesAbbreviated>
	<nameMonthGenitives><c path="Array"><c path="String"/></c></nameMonthGenitives>
	<nameDaysShortest><c path="Array"><c path="String"/></c></nameDaysShortest>
	<nameDaysAbbreviated><c path="Array"><c path="String"/></c></nameDaysAbbreviated>
	<nameDays><c path="Array"><c path="String"/></c></nameDays>
	<nameCalendarNative><t path="Null"><c path="String"/></t></nameCalendarNative>
	<nameCalendar><c path="String"/></nameCalendar>
	<firstDayOfWeekName><c path="String"/></firstDayOfWeekName>
	<firstDayOfWeekIndex><x path="Int"/></firstDayOfWeekIndex>
	<designatorPm><c path="String"/></designatorPm>
	<designatorAm><c path="String"/></designatorAm>
	<calendarWeekRuleName><c path="String"/></calendarWeekRuleName>
	<calendarWeekRuleIndex><x path="Int"/></calendarWeekRuleIndex>
</a></t></dateTime>
	<code><c path="String"/></code>
</a></f></toObject>
		<get_nameDisplayEnglish get="inline" set="null" line="101"><f a=""><c path="String"/></f></get_nameDisplayEnglish>
		<get_nameDisplayNative get="inline" set="null" line="104"><f a=""><c path="String"/></f></get_nameDisplayNative>
		<toString public="1" get="inline" set="null" line="107"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="25"><f a="code:dateTime:ietf:isNeutral:iso2:iso3:isRightToLeft:lcid:nameCalendar:nameEnglish:nameNative:nameRegionEnglish:nameRegionNative:number:separatorList:win3">
	<c path="String"/>
	<c path="thx.culture.DateFormatInfo"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.NumberFormatInfo"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.culture.Pattern" params="" file="/Users/francoponticelli/projects/thx.culture/src/thx/culture/Pattern.hx">
		<currencyNegatives public="1" set="null" expr="[&quot;($n)&quot;, &quot;-$n&quot;, &quot;$-n&quot;, &quot;$n-&quot;, &quot;(n$)&quot;, &quot;-n$&quot;, &quot;n-$&quot;, &quot;n$-&quot;, &quot;-n $&quot;, &quot;-$ n&quot;, &quot;n $-&quot;, &quot;$ n-&quot;, &quot;$ -n&quot;, &quot;n- $&quot;, &quot;($ n)&quot;, &quot;(n $)&quot;]" line="4" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["($n)", "-$n", "$-n", "$n-", "(n$)", "-n$", "n-$", "n$-", "-n $", "-$ n", "n $-", "$ n-", "$ -n", "n- $", "($ n)", "(n $)"]</e></m></meta>
		</currencyNegatives>
		<currencyPositives public="1" set="null" expr="[&quot;$n&quot;, &quot;n$&quot;, &quot;$ n&quot;, &quot;n $&quot;]" line="5" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["$n", "n$", "$ n", "n $"]</e></m></meta>
		</currencyPositives>
		<numberNegatives public="1" set="null" expr="[&quot;(n)&quot;, &quot;-n&quot;, &quot;- n&quot;, &quot;n-&quot;, &quot;n -&quot;]" line="6" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["(n)", "-n", "- n", "n-", "n -"]</e></m></meta>
		</numberNegatives>
		<percentNegatives public="1" set="null" expr="[&quot;-n %&quot;, &quot;-n%&quot;, &quot;-%n&quot;, &quot;%-n&quot;, &quot;%n-&quot;, &quot;n-%&quot;, &quot;n%-&quot;, &quot;-%n&quot;, &quot;n %-&quot;, &quot;% n-&quot;, &quot;% -n&quot;, &quot;n- %&quot;]" line="7" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["-n %", "-n%", "-%n", "%-n", "%n-", "n-%", "n%-", "-%n", "n %-", "% n-", "% -n", "n- %"]</e></m></meta>
		</percentNegatives>
		<percentPositives public="1" set="null" expr="[&quot;n %&quot;, &quot;n%&quot;, &quot;%n&quot;, &quot;% n&quot;]" line="8" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["n %", "n%", "%n", "% n"]</e></m></meta>
		</percentPositives>
	</class>
	<class path="thx.error.AbstractMethod" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/error/AbstractMethod.hx">
		<extends path="thx.Error"/>
		<new public="1" set="method" line="19"><f a="?posInfo">
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>`AbstractMethod` extends `Error` and it is intended to be used inside those methods
that are considered abstract. Abstract methods are methods that needs to be implemented
in a sub-class.

The error message brings the class name/method name that is abstract.

```haxe
function abstractMethod() {
  throw new AbstractMethod();
}
```</haxe_doc>
	</class>
	<class path="thx.error.ErrorWrapper" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/error/ErrorWrapper.hx">
		<extends path="thx.Error"/>
		<innerError public="1"><d/></innerError>
		<new public="1" set="method" line="13"><f a="message:innerError:?stack:?pos">
	<c path="String"/>
	<d/>
	<c path="Array"><e path="haxe.StackItem"/></c>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An error that keeps a reference to an internal error.

The internal error is stored as Dynamic to keep its usage flexible.</haxe_doc>
	</class>
	<class path="thx.format.Format" params="" file="/Users/francoponticelli/projects/thx.format/src/thx/format/Format.hx">
		<defaultCulture public="1" get="accessor" set="accessor" static="1">
			<c path="thx.culture.Culture"/>
			<meta><m n=":isVar"/></meta>
		</defaultCulture>
		<get_defaultCulture set="method" line="11" static="1"><f a=""><c path="thx.culture.Culture"/></f></get_defaultCulture>
		<set_defaultCulture set="method" line="14" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<c path="thx.culture.Culture"/>
</f></set_defaultCulture>
		<f public="1" set="method" static="1">
			<f a="subject:pattern:?culture">
				<d/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<d/>
			</f>
			<haxe_doc>Applies the right format according to the type of subject.

```haxe
Date.now().f("D"); // returns the date in long format
12345.f("n", it);  // returns a number formatted using the provided culture
```</haxe_doc>
		</f>
	</class>
	<class path="thx.format.NumberFormat" params="" file="/Users/francoponticelli/projects/thx.format/src/thx/format/NumberFormat.hx">
		<binary public="1" set="method" line="18" static="1">
			<f a="f:?significantDigits:?culture" v=":1:">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ significantDigits : 1 }</e></m></meta>
			<haxe_doc>Binary format. The result is prefixed with leading `0` up to `significantDigits`. Default is one.</haxe_doc>
		</binary>
		<currency public="1" set="method" line="31" static="1">
			<f a="f:?precision:?symbol:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a currency value. By default the currency symbol is extracted from the applied culture but it can be optionally
provided using setting the `symbol` argument.</haxe_doc>
		</currency>
		<customFormat public="1" set="method" line="59" static="1">
			<f a="f:pattern:?culture">
				<x path="Float"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Custom format uses a pattern composed of the format options described below.

format    | description
--------- | ------------------------
`0`       | Zero placeholder is replaced with a corresponding digits if present, otherwise a `0` is printed.
`#`       | Digit placeholder is replaced with a corresponding digits if present or nothing.
`.`       | Localized decimal separator.
`,`       | Localized group separator. If added to the end of the pattern it multiplies the number by 1000 for every comma.
`%`       | Includes the percentage symbol and multiplies the number by 100.
`‰`       | Includes the permille symbol and multiplies the number by 1000.
`E0`, `E+0`, `E-0`, `e0`, `e+0`, `e-0` | Exponential notation.
`\`       | Escapes the following character.
`'...'`, `"..."` | Escape an entire sequence of characters.
`;`       | Section separator. There are three possible sections (positive, negative, zero). If two are specified zero numbers use the format from the first section.
`...`     | Anything else is left untouched and put in the output as it is.</haxe_doc>
		</customFormat>
		<decimal public="1" set="method" line="87" static="1">
			<f a="f:?significantDigits:?culture" v=":1:">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ significantDigits : 1 }</e></m></meta>
			<haxe_doc>Formats a decimal (integer) value.</haxe_doc>
		</decimal>
		<exponential public="1" set="method" line="100" static="1">
			<f a="f:?precision:?digits:?symbol:?culture" v=":6:3:&quot;e&quot;:">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ symbol : "e", digits : 3, precision : 6 }</e></m></meta>
			<haxe_doc>Formats a number using the exponential (scientific) format.</haxe_doc>
		</exponential>
		<fixed public="1" set="method" line="116" static="1">
			<f a="f:?precision:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a fixed point float number with an assigned precision.</haxe_doc>
		</fixed>
		<format public="1" set="method" line="153" static="1">
			<f a="f:pattern:?culture">
				<x path="Float"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number using the specified pattern.

A `printf` format is formatted using the rules described for `NumberFormat.printf`.

A multi character format uses the formatting rules described for `NumberFormat.customFormat`.

A single character format adopts the following options:

format     | description
---------- | ---------------------------------------
`C` or `c` | Currency format.
`D` or `d` | Decimal format.
`e`        | Exponential (scientific) format.
`E`        | Like `e` but with capitalized `E` symbol
`F` or `f` | Fixed decimal format (no thousand separators).
`g`        | General format (shortest between `e` and `f`).
`G`        | Like `g` but if format is exponential uses the upper case `E` symbol
`N` or `n` | Number format (uses thousand separators if required).
`P` or `p` | Percent format.
`R` or `r` | Roundtrip format.
`x`        | Hexadecimal format.
`X`        | Same as `x` but prefixed with `0X`.
`%`...     | Delegates to `printf`
...        | Delegates to `customFormat`</haxe_doc>
		</format>
		<general public="1" set="method" line="191" static="1">
			<f a="f:?significantDigits:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number using either the shortest result between `fixed` and `exponential`.</haxe_doc>
		</general>
		<hex public="1" set="method" line="200" static="1">
			<f a="f:?significantDigits:?culture" v=":1:">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ significantDigits : 1 }</e></m></meta>
			<haxe_doc>Formats a number to hexadecimal format.</haxe_doc>
		</hex>
		<integer public="1" set="method" line="212" static="1">
			<f a="f:?culture">
				<x path="Float"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats the integer part of a number.</haxe_doc>
		</integer>
		<number public="1" set="method" line="224" static="1">
			<f a="f:?precision:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number with group separators (eg: thousands separators).</haxe_doc>
		</number>
		<octal public="1" set="method" line="238" static="1">
			<f a="f:?significantDigits:?culture" v=":1:">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ significantDigits : 1 }</e></m></meta>
			<haxe_doc>Formats a number to octals.</haxe_doc>
		</octal>
		<percent public="1" set="method" line="250" static="1">
			<f a="f:?decimals:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number as a percent value. The output result is multiplied by 100. So `0.1` will result in `10%`.</haxe_doc>
		</percent>
		<permille public="1" set="method" line="262" static="1">
			<f a="f:?decimals:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number as a percent value. The output result is multiplied by 1000. So `0.1` will result in `100‰`.</haxe_doc>
		</permille>
		<printf public="1" set="method" line="325" static="1">
			<f a="f:pattern:?culture">
				<x path="Float"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a single number in a `String` using the `printf` conventions.

The `printf` format uses the following pattern:

```
%[flags][width][.precision]specifier
```

specifier   | Output
----------- | ---------------------------------------------------------
`b`         | an unsigned integer, in binary
`B`         | like %b, but using an upper-case "B" with the # flag
`c`         | Character.
`d`         | Signed decimal integer
`e`         | Scientific notation (mantissa/exponent) using e character
`E`         | Like %e, but using an upper-case "E"
`f`         | Decimal floating point
`g`         | Use the shorter of %e or %f.
`G`         | Like %g, but with an upper-case "E" (if applicable)
`i`         | Same as `d`
`o`         | Signed octal
`u`         | Unsigned decimal integer
`x`         | Unsigned hexadecimal integer
`X`         | Like %x, but using upper-case letters
`%`         | `%` Character

http://perldoc.perl.org/functions/sprintf.html

flags         | Description
------------- | ------------------------------------------------------------------------------------------------------
`-`           | Left-justify within the given field width; Right justification is the default (see width sub-specifier).
`+`           | Forces to preceed the result with a plus or minus sign (+ or -) even for positive numbers. By default, only negative numbers are preceded with a - sign..
` ` (space)   | If no sign is going to be written, a blank space is inserted before the value.
`#`           | Used with o, x or X specifiers the value is preceeded with 0, 0x or 0X respectively for values different than zero. If b or B prefixes the output with either.
`0`           | Left-pads the number with zeroes (0) instead of spaces, where padding is specified (see width sub-specifier).

width       | Description
----------- | ------------------------------------------------------------------------------------------------------
(number)    | Minimum number of characters to be printed. If the value to be printed is shorter than this number, the result is padded with blank spaces. The value is not truncated even if the result is larger.

.precision  | Description
----------- | ------------------------------------------------------------------------------------------------------
.number     | For integer specifiers (d, i, o, u, x, X): precision specifies the minimum number of digits to be written. If the value to be written is shorter than this number, the result is padded with leading zeros. The value is not truncated even if the result is longer. A precision of 0 means that no character is written for the value 0. For e, E and f specifiers: this is the number of digits to be printed after de decimal point. For g and G specifiers: This is the maximum number of significant digits to be printed. By default all characters are printed until the ending null character is encountered. For c type: it has no effect. When no precision is specified, the default is 1. If the period is specified without an explicit value for precision, 0 is assumed.

Differences with classic printf:

  * `length` parameter is not supported to set the type of the integer argument (eg. short or unsigned)
  * `*` width is not supported
  * `.*` precision is not supported
  * `%p` pointer address is not supported
  * `%n` is not supported
  * `%s` is not supported since this function is to format numeric values only</haxe_doc>
		</printf>
		<toBase public="1" set="method" line="407" static="1">
			<f a="value:base:?culture">
				<x path="Int"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Transform an `Int` value to a `String` using the specified `base`. A negative sign can be provided optionally.</haxe_doc>
		</toBase>
		<unit public="1" set="method" line="432" static="1">
			<f a="f:decimals:unitSymbol:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number with a specified `unitSymbol` and a specified number of decimals.</haxe_doc>
		</unit>
		<BASE expr="&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;" line="444" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"0123456789abcdefghijklmnopqrstuvwxyz"</e></m></meta>
		</BASE>
		<countSymbols set="method" line="446" static="1"><f a="pattern:symbols">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
</f></countSymbols>
		<customFormatDecimalFraction set="method" line="465" static="1"><f a="d:pattern:nf">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.NumberFormatInfo"/>
	<c path="String"/>
</f></customFormatDecimalFraction>
		<customFormatF set="method" line="507" static="1"><f a="f:pattern:nf:isCurrency:isPercent">
	<x path="Float"/>
	<c path="String"/>
	<c path="thx.culture.NumberFormatInfo"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
</f></customFormatF>
		<customFormatInteger set="method" line="527" static="1"><f a="v:pattern:nf:isCurrency:isPercent">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.NumberFormatInfo"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
</f></customFormatInteger>
		<customIntegerAndFraction set="method" line="617" static="1"><f a="f:pattern:nf:isCurrency:isPercent">
	<x path="Float"/>
	<c path="String"/>
	<c path="thx.culture.NumberFormatInfo"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
</f></customIntegerAndFraction>
		<exponentialInfo set="method" line="636" static="1"><f a="f">
	<x path="Float"/>
	<a>
		<f><x path="Float"/></f>
		<e><t path="Null"><x path="Int"/></t></e>
	</a>
</f></exponentialInfo>
		<hasSymbols set="method" line="664" static="1"><f a="pattern:symbols">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasSymbols>
		<intPart set="method" line="682" static="1"><f a="s:groupSizes:groupSeparator">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
	<c path="String"/>
</f></intPart>
		<numberFormat set="method" line="705" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<c path="thx.culture.NumberFormatInfo"/>
</f></numberFormat>
		<pad set="method" line="708" static="1"><f a="s:len:round">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="String"/>
</f></pad>
		<paramOrNull set="method" line="721" static="1"><f a="param">
	<c path="String"/>
	<t path="Null"><x path="Int"/></t>
</f></paramOrNull>
		<splitOnDecimalSeparator set="method" line="724" static="1"><f a="f">
	<x path="Float"/>
	<c path="Array"><c path="String"/></c>
</f></splitOnDecimalSeparator>
		<splitPattern set="method" line="749" static="1"><f a="pattern:separator">
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></splitPattern>
		<value set="method" line="776" static="1"><f a="f:precision:groupSizes:groupSeparator:decimalSeparator">
	<x path="Float"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></value>
	</class>
	<enum path="thx.format._NumberFormat.CustomFormat" params="" file="/Users/francoponticelli/projects/thx.format/src/thx/format/NumberFormat.hx" private="1" module="thx.format.NumberFormat">
		<Literal a="s"><c path="String"/></Literal>
		<Hash a="first"><x path="Bool"/></Hash>
		<Zero a="first"><x path="Bool"/></Zero>
	</enum>
	<typedef path="thx.fp.Comparable" params="T" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/Comparable.hx"><a><compareTo set="method"><f a="that">
	<c path="thx.fp.Comparable.T"/>
	<x path="Int"/>
</f></compareTo></a></typedef>
	<typedef path="thx.fp.ComparableOrd" params="T" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/ComparableOrd.hx"><a><compareTo set="method"><f a="that">
	<c path="thx.fp.ComparableOrd.T"/>
	<x path="thx.Ordering"/>
</f></compareTo></a></typedef>
	<abstract path="thx.fp.Map" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/Map.hx">
		<from><icast><e path="thx.fp.MapImpl">
	<c path="thx.fp.Map.K"/>
	<c path="thx.fp.Map.V"/>
</e></icast></from>
		<this><e path="thx.fp.MapImpl">
	<c path="thx.fp.Map.K"/>
	<c path="thx.fp.Map.V"/>
</e></this>
		<to><icast><e path="thx.fp.MapImpl">
	<c path="thx.fp.Map.K"/>
	<c path="thx.fp.Map.V"/>
</e></icast></to>
		<impl><class path="thx.fp._Map.Map_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/Map.hx" private="1" module="thx.fp.Map">
	<empty public="1" params="K:V" get="inline" set="null" line="12" static="1"><f a=""><x path="thx.fp.Map">
	<c path="empty.K"/>
	<c path="empty.V"/>
</x></f></empty>
	<singleton public="1" params="K:V" get="inline" set="null" line="14" static="1"><f a="k:v">
	<c path="singleton.K"/>
	<c path="singleton.V"/>
	<x path="thx.fp.Map">
		<c path="singleton.K"/>
		<c path="singleton.V"/>
	</x>
</f></singleton>
	<bin public="1" params="K:V" get="inline" set="null" line="16" static="1"><f a="k:v:lhs:rhs">
	<c path="bin.K"/>
	<c path="bin.V"/>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
</f></bin>
	<fromNative public="1" params="K:V" set="method" line="19" static="1"><f a="map:comparator">
	<c path="haxe.IMap">
		<c path="fromNative.K"/>
		<c path="fromNative.V"/>
	</c>
	<x path="thx.Ord"><c path="fromNative.K"/></x>
	<x path="thx.fp.Map">
		<c path="fromNative.K"/>
		<c path="fromNative.V"/>
	</x>
</f></fromNative>
	<lookup public="1" set="method" line="26" static="1">
		<f a="this:key:comparator">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="thx.fp.Map.K"/>
			<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
			<e path="haxe.ds.Option"><c path="thx.fp.Map.V"/></e>
		</f>
		<meta><m n=":impl"/></meta>
	</lookup>
	<lookupTuple public="1" set="method" line="43" static="1">
		<f a="this:key:comparator">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="thx.fp.Map.K"/>
			<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
			<e path="haxe.ds.Option"><t path="thx.Tuple">
	<c path="thx.fp.Map.K"/>
	<c path="thx.fp.Map.V"/>
</t></e>
		</f>
		<meta><m n=":impl"/></meta>
	</lookupTuple>
	<delete public="1" set="method" line="58" static="1">
		<f a="this:key:comparator">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="thx.fp.Map.K"/>
			<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
			<x path="thx.fp.Map">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</delete>
	<insert public="1" set="method" line="69" static="1">
		<f a="this:kx:x:comparator">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="thx.fp.Map.K"/>
			<c path="thx.fp.Map.V"/>
			<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
			<x path="thx.fp.Map">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</insert>
	<foldLeft public="1" params="B" set="method" line="80" static="1">
		<f a="this:b:f">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="foldLeft.B"/>
			<f a=":">
				<c path="foldLeft.B"/>
				<c path="thx.fp.Map.V"/>
				<c path="foldLeft.B"/>
			</f>
			<c path="foldLeft.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</foldLeft>
	<map public="1" params="B" set="method" line="88" static="1">
		<f a="this:f">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<f a="">
				<c path="thx.fp.Map.V"/>
				<c path="map.B"/>
			</f>
			<x path="thx.fp.Map">
				<c path="thx.fp.Map.K"/>
				<c path="map.B"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<values public="1" set="method" line="93" static="1">
		<f a="this">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="Array"><c path="thx.fp.Map.V"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</values>
	<foldLeftKeys public="1" params="B" set="method" line="96" static="1">
		<f a="this:b:f">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="foldLeftKeys.B"/>
			<f a=":">
				<c path="foldLeftKeys.B"/>
				<c path="thx.fp.Map.K"/>
				<c path="foldLeftKeys.B"/>
			</f>
			<c path="foldLeftKeys.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</foldLeftKeys>
	<foldLeftAll public="1" params="B" set="method" line="104" static="1">
		<f a="this:b:f">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="foldLeftAll.B"/>
			<f a="::">
				<c path="foldLeftAll.B"/>
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
				<c path="foldLeftAll.B"/>
			</f>
			<c path="foldLeftAll.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</foldLeftAll>
	<foldLeftTuples public="1" params="B" set="method" line="112" static="1">
		<f a="this:b:f">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="foldLeftTuples.B"/>
			<f a=":">
				<c path="foldLeftTuples.B"/>
				<t path="thx.Tuple">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</t>
				<c path="foldLeftTuples.B"/>
			</f>
			<c path="foldLeftTuples.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</foldLeftTuples>
	<size public="1" set="method" line="120" static="1">
		<f a="this">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</size>
	<delta get="inline" set="null" expr="5" line="127" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>5</e></m></meta>
	</delta>
	<ratio get="inline" set="null" expr="2" line="128" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</ratio>
	<balance params="K:V" set="method" line="129" static="1"><f a="k:x:lhs:rhs">
	<c path="balance.K"/>
	<c path="balance.V"/>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
</f></balance>
	<glue set="method" line="143" static="1">
		<f a="this:that">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<x path="thx.fp.Map">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</x>
			<x path="thx.fp.Map">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</glue>
	<deleteFindMin params="K:V" set="method" line="154" static="1"><f a="map">
	<x path="thx.fp.Map">
		<c path="deleteFindMin.K"/>
		<c path="deleteFindMin.V"/>
	</x>
	<a>
		<x set="null"><c path="deleteFindMin.V"/></x>
		<t set="null"><x path="thx.fp.Map">
	<c path="deleteFindMin.K"/>
	<c path="deleteFindMin.V"/>
</x></t>
		<k set="null"><c path="deleteFindMin.K"/></k>
	</a>
</f></deleteFindMin>
	<deleteFindMax params="K:V" set="method" line="164" static="1"><f a="map">
	<x path="thx.fp.Map">
		<c path="deleteFindMax.K"/>
		<c path="deleteFindMax.V"/>
	</x>
	<a>
		<x set="null"><c path="deleteFindMax.V"/></x>
		<t set="null"><x path="thx.fp.Map">
	<c path="deleteFindMax.K"/>
	<c path="deleteFindMax.V"/>
</x></t>
		<k set="null"><c path="deleteFindMax.K"/></k>
	</a>
</f></deleteFindMax>
	<rotateLeft params="K:V" set="method" line="174" static="1"><f a="k:x:lhs:rhs">
	<c path="rotateLeft.K"/>
	<c path="rotateLeft.V"/>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
</f></rotateLeft>
	<rotateRight params="K:V" set="method" line="182" static="1"><f a="k:x:lhs:rhs">
	<c path="rotateRight.K"/>
	<c path="rotateRight.V"/>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
</f></rotateRight>
	<singleLeft params="K:V" set="method" line="190" static="1"><f a="k1:x1:t1:rhs">
	<c path="singleLeft.K"/>
	<c path="singleLeft.V"/>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
</f></singleLeft>
	<singleRight params="K:V" set="method" line="196" static="1"><f a="k1:x1:lhs:t3">
	<c path="singleRight.K"/>
	<c path="singleRight.V"/>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
</f></singleRight>
	<doubleLeft params="K:V" set="method" line="202" static="1"><f a="k1:x1:t1:rhs">
	<c path="doubleLeft.K"/>
	<c path="doubleLeft.V"/>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
</f></doubleLeft>
	<doubleRight params="K:V" set="method" line="209" static="1"><f a="k1:x1:lhs:t4">
	<c path="doubleRight.K"/>
	<c path="doubleRight.V"/>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
</f></doubleRight>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx.fp._Map.Map_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/Map.hx" private="1" module="thx.fp.Map">
		<empty public="1" params="K:V" get="inline" set="null" line="12" static="1"><f a=""><x path="thx.fp.Map">
	<c path="empty.K"/>
	<c path="empty.V"/>
</x></f></empty>
		<singleton public="1" params="K:V" get="inline" set="null" line="14" static="1"><f a="k:v">
	<c path="singleton.K"/>
	<c path="singleton.V"/>
	<x path="thx.fp.Map">
		<c path="singleton.K"/>
		<c path="singleton.V"/>
	</x>
</f></singleton>
		<bin public="1" params="K:V" get="inline" set="null" line="16" static="1"><f a="k:v:lhs:rhs">
	<c path="bin.K"/>
	<c path="bin.V"/>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
</f></bin>
		<fromNative public="1" params="K:V" set="method" line="19" static="1"><f a="map:comparator">
	<c path="haxe.IMap">
		<c path="fromNative.K"/>
		<c path="fromNative.V"/>
	</c>
	<x path="thx.Ord"><c path="fromNative.K"/></x>
	<x path="thx.fp.Map">
		<c path="fromNative.K"/>
		<c path="fromNative.V"/>
	</x>
</f></fromNative>
		<lookup public="1" set="method" line="26" static="1">
			<f a="this:key:comparator">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="thx.fp.Map.K"/>
				<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
				<e path="haxe.ds.Option"><c path="thx.fp.Map.V"/></e>
			</f>
			<meta><m n=":impl"/></meta>
		</lookup>
		<lookupTuple public="1" set="method" line="43" static="1">
			<f a="this:key:comparator">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="thx.fp.Map.K"/>
				<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
				<e path="haxe.ds.Option"><t path="thx.Tuple">
	<c path="thx.fp.Map.K"/>
	<c path="thx.fp.Map.V"/>
</t></e>
			</f>
			<meta><m n=":impl"/></meta>
		</lookupTuple>
		<delete public="1" set="method" line="58" static="1">
			<f a="this:key:comparator">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="thx.fp.Map.K"/>
				<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
				<x path="thx.fp.Map">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</delete>
		<insert public="1" set="method" line="69" static="1">
			<f a="this:kx:x:comparator">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
				<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
				<x path="thx.fp.Map">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</insert>
		<foldLeft public="1" params="B" set="method" line="80" static="1">
			<f a="this:b:f">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="foldLeft.B"/>
				<f a=":">
					<c path="foldLeft.B"/>
					<c path="thx.fp.Map.V"/>
					<c path="foldLeft.B"/>
				</f>
				<c path="foldLeft.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</foldLeft>
		<map public="1" params="B" set="method" line="88" static="1">
			<f a="this:f">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<f a="">
					<c path="thx.fp.Map.V"/>
					<c path="map.B"/>
				</f>
				<x path="thx.fp.Map">
					<c path="thx.fp.Map.K"/>
					<c path="map.B"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<values public="1" set="method" line="93" static="1">
			<f a="this">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="Array"><c path="thx.fp.Map.V"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</values>
		<foldLeftKeys public="1" params="B" set="method" line="96" static="1">
			<f a="this:b:f">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="foldLeftKeys.B"/>
				<f a=":">
					<c path="foldLeftKeys.B"/>
					<c path="thx.fp.Map.K"/>
					<c path="foldLeftKeys.B"/>
				</f>
				<c path="foldLeftKeys.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</foldLeftKeys>
		<foldLeftAll public="1" params="B" set="method" line="104" static="1">
			<f a="this:b:f">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="foldLeftAll.B"/>
				<f a="::">
					<c path="foldLeftAll.B"/>
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
					<c path="foldLeftAll.B"/>
				</f>
				<c path="foldLeftAll.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</foldLeftAll>
		<foldLeftTuples public="1" params="B" set="method" line="112" static="1">
			<f a="this:b:f">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="foldLeftTuples.B"/>
				<f a=":">
					<c path="foldLeftTuples.B"/>
					<t path="thx.Tuple">
						<c path="thx.fp.Map.K"/>
						<c path="thx.fp.Map.V"/>
					</t>
					<c path="foldLeftTuples.B"/>
				</f>
				<c path="foldLeftTuples.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</foldLeftTuples>
		<size public="1" set="method" line="120" static="1">
			<f a="this">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</size>
		<delta get="inline" set="null" expr="5" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</delta>
		<ratio get="inline" set="null" expr="2" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</ratio>
		<balance params="K:V" set="method" line="129" static="1"><f a="k:x:lhs:rhs">
	<c path="balance.K"/>
	<c path="balance.V"/>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
</f></balance>
		<glue set="method" line="143" static="1">
			<f a="this:that">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<x path="thx.fp.Map">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</x>
				<x path="thx.fp.Map">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</glue>
		<deleteFindMin params="K:V" set="method" line="154" static="1"><f a="map">
	<x path="thx.fp.Map">
		<c path="deleteFindMin.K"/>
		<c path="deleteFindMin.V"/>
	</x>
	<a>
		<x set="null"><c path="deleteFindMin.V"/></x>
		<t set="null"><x path="thx.fp.Map">
	<c path="deleteFindMin.K"/>
	<c path="deleteFindMin.V"/>
</x></t>
		<k set="null"><c path="deleteFindMin.K"/></k>
	</a>
</f></deleteFindMin>
		<deleteFindMax params="K:V" set="method" line="164" static="1"><f a="map">
	<x path="thx.fp.Map">
		<c path="deleteFindMax.K"/>
		<c path="deleteFindMax.V"/>
	</x>
	<a>
		<x set="null"><c path="deleteFindMax.V"/></x>
		<t set="null"><x path="thx.fp.Map">
	<c path="deleteFindMax.K"/>
	<c path="deleteFindMax.V"/>
</x></t>
		<k set="null"><c path="deleteFindMax.K"/></k>
	</a>
</f></deleteFindMax>
		<rotateLeft params="K:V" set="method" line="174" static="1"><f a="k:x:lhs:rhs">
	<c path="rotateLeft.K"/>
	<c path="rotateLeft.V"/>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
</f></rotateLeft>
		<rotateRight params="K:V" set="method" line="182" static="1"><f a="k:x:lhs:rhs">
	<c path="rotateRight.K"/>
	<c path="rotateRight.V"/>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
</f></rotateRight>
		<singleLeft params="K:V" set="method" line="190" static="1"><f a="k1:x1:t1:rhs">
	<c path="singleLeft.K"/>
	<c path="singleLeft.V"/>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
</f></singleLeft>
		<singleRight params="K:V" set="method" line="196" static="1"><f a="k1:x1:lhs:t3">
	<c path="singleRight.K"/>
	<c path="singleRight.V"/>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
</f></singleRight>
		<doubleLeft params="K:V" set="method" line="202" static="1"><f a="k1:x1:t1:rhs">
	<c path="doubleLeft.K"/>
	<c path="doubleLeft.V"/>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
</f></doubleLeft>
		<doubleRight params="K:V" set="method" line="209" static="1"><f a="k1:x1:lhs:t4">
	<c path="doubleRight.K"/>
	<c path="doubleRight.V"/>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
</f></doubleRight>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="thx.fp.MapImpl" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/Map.hx" module="thx.fp.Map">
		<Tip/>
		<Bin a="size:key:value:lhs:rhs">
			<x path="Int"/>
			<c path="thx.fp.MapImpl.K"/>
			<c path="thx.fp.MapImpl.V"/>
			<x path="thx.fp.Map">
				<c path="thx.fp.MapImpl.K"/>
				<c path="thx.fp.MapImpl.V"/>
			</x>
			<x path="thx.fp.Map">
				<c path="thx.fp.MapImpl.K"/>
				<c path="thx.fp.MapImpl.V"/>
			</x>
		</Bin>
	</enum>
</haxe>