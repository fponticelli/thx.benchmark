<haxe>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/local/lib/haxe/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of the date. It might
		only have a per-second precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range) where `0` is Sunday.</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="DateTools" params="" file="/usr/local/lib/haxe/std/DateTools.hx">
		<DAY_SHORT_NAMES expr="[&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]" line="36" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]</e></m></meta>
		</DAY_SHORT_NAMES>
		<DAY_NAMES expr="[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]" line="37" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</e></m></meta>
		</DAY_NAMES>
		<MONTH_SHORT_NAMES expr="[&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]" line="38" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</e></m></meta>
		</MONTH_SHORT_NAMES>
		<MONTH_NAMES expr="[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]" line="39" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</e></m></meta>
		</MONTH_NAMES>
		<__format_get set="method" line="41" static="1">
			<f a="d:e">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__format_get>
		<__format set="method" line="104" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="143" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.

		```haxe
		var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
		// 2016-07-08_14:44:05

		var t = DateTools.format(Date.now(), "%r");
		// 02:44:05 PM

		var t = DateTools.format(Date.now(), "%T");
		// 14:44:05

		var t = DateTools.format(Date.now(), "%F");
		// 2016-07-08
		```</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="159" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]" line="163" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="170" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="184" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="191" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="198" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="205" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="212" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="228" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<makeUtc public="1" get="inline" set="null" line="236" static="1">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Retrieve Unix timestamp value from Date components. Takes same argument sequence as the Date constructor.</haxe_doc>
		</makeUtc>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="/usr/local/lib/haxe/std/flash/_std/EReg.hx">
		<r><c path="flash.utils.RegExp"/></r>
		<result><d/></result>
		<match public="1" set="method" line="31">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="37">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="41">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="47">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="54">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="59">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ len : -1 }</e></m>
			</meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="78">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" set="method" line="85">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="89">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="27">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="/usr/local/lib/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="54">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="63">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="46">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/usr/local/lib/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="44" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="56" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="70" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new List by applying function `f` to all elements of `it`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="84" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<flatten public="1" params="A" set="method" line="97" static="1">
			<f a="it">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<c path="List"><c path="flatten.A"/></c>
			</f>
			<haxe_doc>Concatenate a list of lists.

		The order of elements is preserved.</haxe_doc>
		</flatten>
		<flatMap public="1" params="A:B" set="method" line="112" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="List"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc>A composition of map and flatten.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</flatMap>
		<has public="1" params="A" set="method" line="124" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="141" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="160" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="172" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="185" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a List containing those elements of `it` for which `f` returned
		true.

		If `it` is empty, the result is the empty List even if `f` is null.

		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="205" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="217" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="232" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="243" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="263" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<concat public="1" params="T" set="method" line="276" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new List containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
	</class>
	<class path="List" params="T" file="/usr/local/lib/haxe/std/List.hx">
		<h><c path="_List.ListNode"><c path="List.T"/></c></h>
		<q><c path="_List.ListNode"><c path="List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="52">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="67">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="89">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="99">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="113">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="160">
			<f a=""><c path="_List.ListIterator"><c path="List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="170">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="191">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="210">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="226">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="43">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
	</class>
	<class path="_List.ListNode" params="T" file="/usr/local/lib/haxe/std/List.hx" private="1" module="List">
		<create public="1" params="T" get="inline" set="null" line="259" static="1">
			<f a="item:next">
				<c path="create.T"/>
				<c path="_List.ListNode"><c path="create.T"/></c>
				<c path="_List.ListNode"><c path="create.T"/></c>
			</f>
			<meta><m n=":extern"/></meta>
		</create>
		<item public="1"><c path="_List.ListNode.T"/></item>
		<next public="1"><c path="_List.ListNode"><c path="_List.ListNode.T"/></c></next>
		<new public="1" set="method" line="255"><f a="item:next">
	<c path="_List.ListNode.T"/>
	<c path="_List.ListNode"><c path="_List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="_List.ListIterator" params="T" file="/usr/local/lib/haxe/std/List.hx" private="1" module="List">
		<head><c path="_List.ListNode"><c path="_List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="272"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="276"><f a=""><c path="_List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="268"><f a="head">
	<c path="_List.ListNode"><c path="_List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="Map" params="K:V" file="/usr/local/lib/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><t path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</t></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/Map.hx" private="1" module="Map">
	<_new public="1" set="method" static="1">
		<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
		<meta>
			<m n=":extern"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="73" static="1">
		<f a="this:key:value">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="90" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<t path="Null"><c path="Map.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="97" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="105" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="112" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="121" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<toString public="1" get="inline" set="null" line="130" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<arrayWrite public="1" get="inline" set="null" line="134" static="1">
		<f a="this:k:v">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<c path="Map.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="139" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</t>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="143" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</t>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="147" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</t>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="151" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</t>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="155" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="159" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="163" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="_Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/Map.hx" private="1" module="Map">
		<_new public="1" set="method" static="1">
			<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
			<meta>
				<m n=":extern"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="73" static="1">
			<f a="this:key:value">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="90" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<t path="Null"><c path="Map.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="97" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="105" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="112" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="121" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<toString public="1" get="inline" set="null" line="130" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<arrayWrite public="1" get="inline" set="null" line="134" static="1">
			<f a="this:k:v">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<c path="Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="139" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</t>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="143" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</t>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="147" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</t>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="151" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</t>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="155" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="159" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="163" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="IMap" params="K:V" file="/usr/local/lib/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with `NaN` on Windows,
		see <https://bugs.php.net/bug.php?id=42143>]]></haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
	</class>
	<class path="Reflect" params="" file="/usr/local/lib/haxe/std/flash/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="33" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="47" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="55" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="59" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="82" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="86" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="92" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="96" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="106" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="114" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="120" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="128" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/flash/_std/Std.hx">
		<is public="1" set="method" line="26" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" get="inline" set="null" line="30" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as `String`, `Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<string public="1" set="method" line="34" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="38" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="42" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="49" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="53" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accept or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be `null` and others that
	can't.

	@see https://haxe.org/manual/types-nullability.html</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.
	
	@see https://haxe.org/manual/std-String.html</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="/usr/local/lib/haxe/std/StringBuf.hx">
		<b><c path="String"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="51"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" get="inline" set="null" line="64">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addChar public="1" get="inline" set="null" line="74">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<addSub public="1" get="inline" set="null" line="90">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<toString public="1" get="inline" set="null" line="99">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
	</class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<urlEncode public="1" get="inline" set="null" line="37" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" get="inline" set="null" line="107" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="153" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="172" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="183" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="211" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="245" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="262" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="287" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="309" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="331" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="353" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="374" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s`. If `by` is also the empty String `""`, `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="396" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="438" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<isEof public="1" get="inline" set="null" line="465" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isEof>
		<quoteUnixArg public="1" set="method" line="488" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code, &quot;,&quot;.code, &quot;;&quot;.code]" line="506" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="521" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="/usr/local/lib/haxe/std/flash/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="/usr/local/lib/haxe/std/flash/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="37" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="49" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="63" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="70" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="86" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="90" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="114" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="131" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="152" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="165" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="177" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<describe set="method" line="183" static="1">
			<f a="t:fact">
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</describe>
		<getInstanceFields public="1" set="method" line="200" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="204" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="211" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="216" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="248" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="265" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="269" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="274" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="278" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="UInt" params="" file="/usr/local/lib/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/usr/local/lib/haxe/std/UInt.hx" private="1" module="UInt">
	<add get="inline" set="null" line="104" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<div get="inline" set="null" line="108" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</div>
	<mul get="inline" set="null" line="112" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<sub get="inline" set="null" line="116" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<gt get="inline" set="null" line="120" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="128" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="136" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="140" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<and get="inline" set="null" line="144" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</and>
	<or get="inline" set="null" line="148" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</or>
	<xor get="inline" set="null" line="152" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</xor>
	<shl get="inline" set="null" line="156" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</shl>
	<shr get="inline" set="null" line="160" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</shr>
	<ushr get="inline" set="null" line="164" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</ushr>
	<mod get="inline" set="null" line="168" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</mod>
	<addWithFloat get="inline" set="null" line="172" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addWithFloat>
	<mulWithFloat get="inline" set="null" line="176" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulWithFloat>
	<divFloat get="inline" set="null" line="180" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divFloat>
	<floatDiv get="inline" set="null" line="184" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</floatDiv>
	<subFloat get="inline" set="null" line="188" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="192" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</floatSub>
	<gtFloat get="inline" set="null" line="196" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtFloat>
	<equalsInt params="T" get="inline" set="null" line="200" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsInt>
	<notEqualsInt params="T" get="inline" set="null" line="204" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsInt>
	<equalsFloat params="T" get="inline" set="null" line="208" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsFloat>
	<notEqualsFloat params="T" get="inline" set="null" line="212" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsFloat>
	<gteFloat get="inline" set="null" line="216" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteFloat>
	<floatGt get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</floatGt>
	<floatGte get="inline" set="null" line="225" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</floatGte>
	<ltFloat get="inline" set="null" line="229" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltFloat>
	<lteFloat get="inline" set="null" line="233" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteFloat>
	<floatLt get="inline" set="null" line="237" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</floatLt>
	<floatLte get="inline" set="null" line="241" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</floatLte>
	<modFloat get="inline" set="null" line="245" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modFloat>
	<floatMod get="inline" set="null" line="249" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</floatMod>
	<negBits get="inline" set="null" line="253" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</negBits>
	<prefixIncrement get="inline" set="null" line="257" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</prefixIncrement>
	<postfixIncrement get="inline" set="null" line="261" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postfixIncrement>
	<prefixDecrement get="inline" set="null" line="265" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</prefixDecrement>
	<postfixDecrement get="inline" set="null" line="269" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postfixDecrement>
	<toString get="inline" set="null" line="274" static="1">
		<f a="this:?radix">
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<toInt get="inline" set="null" line="278" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toInt>
	<toFloat get="inline" set="null" line="282" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="/usr/local/lib/haxe/std/UInt.hx" private="1" module="UInt">
		<add get="inline" set="null" line="104" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<div get="inline" set="null" line="108" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</div>
		<mul get="inline" set="null" line="112" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<sub get="inline" set="null" line="116" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<gt get="inline" set="null" line="120" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="128" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="136" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="140" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<and get="inline" set="null" line="144" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</and>
		<or get="inline" set="null" line="148" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</or>
		<xor get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</xor>
		<shl get="inline" set="null" line="156" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</shl>
		<shr get="inline" set="null" line="160" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</shr>
		<ushr get="inline" set="null" line="164" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</ushr>
		<mod get="inline" set="null" line="168" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</mod>
		<addWithFloat get="inline" set="null" line="172" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addWithFloat>
		<mulWithFloat get="inline" set="null" line="176" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulWithFloat>
		<divFloat get="inline" set="null" line="180" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divFloat>
		<floatDiv get="inline" set="null" line="184" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</floatDiv>
		<subFloat get="inline" set="null" line="188" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="192" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</floatSub>
		<gtFloat get="inline" set="null" line="196" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtFloat>
		<equalsInt params="T" get="inline" set="null" line="200" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsInt>
		<notEqualsInt params="T" get="inline" set="null" line="204" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsInt>
		<equalsFloat params="T" get="inline" set="null" line="208" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsFloat>
		<notEqualsFloat params="T" get="inline" set="null" line="212" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsFloat>
		<gteFloat get="inline" set="null" line="216" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteFloat>
		<floatGt get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</floatGt>
		<floatGte get="inline" set="null" line="225" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</floatGte>
		<ltFloat get="inline" set="null" line="229" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltFloat>
		<lteFloat get="inline" set="null" line="233" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteFloat>
		<floatLt get="inline" set="null" line="237" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</floatLt>
		<floatLte get="inline" set="null" line="241" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</floatLte>
		<modFloat get="inline" set="null" line="245" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modFloat>
		<floatMod get="inline" set="null" line="249" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</floatMod>
		<negBits get="inline" set="null" line="253" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</negBits>
		<prefixIncrement get="inline" set="null" line="257" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</prefixIncrement>
		<postfixIncrement get="inline" set="null" line="261" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postfixIncrement>
		<prefixDecrement get="inline" set="null" line="265" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</prefixDecrement>
		<postfixDecrement get="inline" set="null" line="269" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postfixDecrement>
		<toString get="inline" set="null" line="274" static="1">
			<f a="this:?radix">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<toInt get="inline" set="null" line="278" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toInt>
		<toFloat get="inline" set="null" line="282" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.events.IEventDispatcher" params="" file="/usr/local/lib/haxe/std/flash/events/IEventDispatcher.hx" extern="1" interface="1">
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useWeakReference : false, priority : 0, useCapture : false }</e></m></meta>
		</addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture" v="::false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useCapture : false }</e></m></meta>
		</removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="/usr/local/lib/haxe/std/flash/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useWeakReference : false, priority : 0, useCapture : false }</e></m></meta>
		</addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture" v="::false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useCapture : false }</e></m></meta>
		</removeEventListener>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="/usr/local/lib/haxe/std/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.DisplayObject" params="" file="/usr/local/lib/haxe/std/flash/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<accessibilityProperties public="1"><c path="flash.accessibility.AccessibilityProperties"/></accessibilityProperties>
		<alpha public="1"><x path="Float"/></alpha>
		<blendMode public="1"><e path="flash.display.BlendMode"/></blendMode>
		<blendShader public="1" get="null">
			<c path="flash.display.Shader"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</blendShader>
		<cacheAsBitmap public="1"><x path="Bool"/></cacheAsBitmap>
		<filters public="1"><c path="Array"><c path="flash.filters.BitmapFilter"/></c></filters>
		<height public="1"><x path="Float"/></height>
		<loaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></loaderInfo>
		<mask public="1"><c path="flash.display.DisplayObject"/></mask>
		<mouseX public="1" set="null"><x path="Float"/></mouseX>
		<mouseY public="1" set="null"><x path="Float"/></mouseY>
		<name public="1"><c path="String"/></name>
		<opaqueBackground public="1"><t path="Null"><x path="UInt"/></t></opaqueBackground>
		<parent public="1" set="null"><c path="flash.display.DisplayObjectContainer"/></parent>
		<root public="1" set="null"><c path="flash.display.DisplayObject"/></root>
		<rotation public="1"><x path="Float"/></rotation>
		<rotationX public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationX>
		<rotationY public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationY>
		<rotationZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationZ>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"/></scale9Grid>
		<scaleX public="1"><x path="Float"/></scaleX>
		<scaleY public="1"><x path="Float"/></scaleY>
		<scaleZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</scaleZ>
		<scrollRect public="1"><c path="flash.geom.Rectangle"/></scrollRect>
		<stage public="1" set="null"><c path="flash.display.Stage"/></stage>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<visible public="1"><x path="Bool"/></visible>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</z>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<globalToLocal3D public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Vector3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</globalToLocal3D>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></hitTestObject>
		<hitTestPoint public="1" set="method">
			<f a="x:y:?shapeFlag" v="::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ shapeFlag : false }</e></m></meta>
		</hitTestPoint>
		<local3DToGlobal public="1" set="method">
			<f a="point3d">
				<c path="flash.geom.Vector3D"/>
				<c path="flash.geom.Point"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</local3DToGlobal>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="/usr/local/lib/haxe/std/flash/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<accessibilityImplementation public="1"><c path="flash.accessibility.AccessibilityImplementation"/></accessibilityImplementation>
		<contextMenu public="1"><c path="flash.ui.ContextMenu"/></contextMenu>
		<doubleClickEnabled public="1"><x path="Bool"/></doubleClickEnabled>
		<focusRect public="1"><d/></focusRect>
		<mouseEnabled public="1"><x path="Bool"/></mouseEnabled>
		<needsSoftKeyboard public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</needsSoftKeyboard>
		<softKeyboardInputAreaOfInterest public="1">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardInputAreaOfInterest>
		<tabEnabled public="1"><x path="Bool"/></tabEnabled>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<requestSoftKeyboard public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestSoftKeyboard>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="/usr/local/lib/haxe/std/flash/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<mouseChildren public="1"><x path="Bool"/></mouseChildren>
		<numChildren public="1" set="null"><x path="Int"/></numChildren>
		<tabChildren public="1"><x path="Bool"/></tabChildren>
		<textSnapshot public="1" set="null"><c path="flash.text.TextSnapshot"/></textSnapshot>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<getChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
</f></getChildIndex>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChildren public="1" set="method">
			<f a="?beginIndex:?endIndex" v="0:2147483647">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ endIndex : 2147483647, beginIndex : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</removeChildren>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<stopAllMovieClips public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</stopAllMovieClips>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></swapChildren>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapChildrenAt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.Sprite" params="" file="/usr/local/lib/haxe/std/flash/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<buttonMode public="1"><x path="Bool"/></buttonMode>
		<dropTarget public="1" set="null"><c path="flash.display.DisplayObject"/></dropTarget>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<hitArea public="1"><c path="flash.display.Sprite"/></hitArea>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useHandCursor public="1"><x path="Bool"/></useHandCursor>
		<startDrag public="1" set="method">
			<f a="?lockCenter:?bounds" v="false:">
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ lockCenter : false }</e></m></meta>
		</startDrag>
		<startTouchDrag public="1" set="method">
			<f a="touchPointID:?lockCenter:?bounds" v=":false:">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ lockCenter : false }</e></m>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</startTouchDrag>
		<stopDrag public="1" set="method"><f a=""><x path="Void"/></f></stopDrag>
		<stopTouchDrag public="1" set="method">
			<f a="touchPointID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</stopTouchDrag>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.MovieClip" params="" file="/usr/local/lib/haxe/std/flash/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<currentFrame public="1" set="null"><x path="Int"/></currentFrame>
		<currentFrameLabel public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</currentFrameLabel>
		<currentLabel public="1" set="null"><c path="String"/></currentLabel>
		<currentLabels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></currentLabels>
		<currentScene public="1" set="null"><c path="flash.display.Scene"/></currentScene>
		<enabled public="1"><x path="Bool"/></enabled>
		<framesLoaded public="1" set="null"><x path="Int"/></framesLoaded>
		<isPlaying public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</isPlaying>
		<scenes public="1" set="null"><c path="Array"><c path="flash.display.Scene"/></c></scenes>
		<totalFrames public="1" set="null"><x path="Int"/></totalFrames>
		<trackAsMenu public="1"><x path="Bool"/></trackAsMenu>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></addFrameScript>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndStop>
		<nextFrame public="1" set="method"><f a=""><x path="Void"/></f></nextFrame>
		<nextScene public="1" set="method"><f a=""><x path="Void"/></f></nextScene>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<prevFrame public="1" set="method"><f a=""><x path="Void"/></f></prevFrame>
		<prevScene public="1" set="method"><f a=""><x path="Void"/></f></prevScene>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Boot" params="" file="/usr/local/lib/haxe/std/flash/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1"><c path="flash.text.TextField"/></tf>
		<lines static="1"><c path="Array"><c path="String"/></c></lines>
		<lastError static="1"><c path="flash.errors.Error"/></lastError>
		<skip_constructor public="1" expr="false" line="52" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</skip_constructor>
		<IN_E expr="0" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</IN_E>
		<enum_to_string public="1" set="method" line="84" static="1"><f a="e">
	<a>
		<tag><c path="String"/></tag>
		<params><c path="Array"><d/></c></params>
	</a>
	<c path="String"/>
</f></enum_to_string>
		<__instanceof public="1" set="method" line="99" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__instanceof>
		<__clear_trace public="1" set="method" line="109" static="1"><f a=""><x path="Void"/></f></__clear_trace>
		<__set_trace_color public="1" set="method" line="117" static="1"><f a="rgb">
	<x path="UInt"/>
	<x path="Void"/>
</f></__set_trace_color>
		<getTrace public="1" set="method" line="123" static="1"><f a=""><c path="flash.text.TextField"/></f></getTrace>
		<__trace public="1" set="method" line="151" static="1"><f a="v:pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></__trace>
		<__string_rec public="1" set="method" line="170" static="1">
			<f a="v:str">
				<d/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__string_rec>
		<__unprotect__ set="method" line="215" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unprotect__>
		<mapDynamic public="1" set="method" line="219" static="1">
			<f a="d:f">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</mapDynamic>
		<filterDynamic public="1" set="method" line="227" static="1">
			<f a="d:f">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</filterDynamic>
		<start set="method" line="54">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</start>
		<doInitDelay set="method" line="74"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></doInitDelay>
		<init set="method" line="79"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="46"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="/usr/local/lib/haxe/std/flash/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<new set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Lib" params="" file="/usr/local/lib/haxe/std/flash/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<getTimer public="1" get="inline" set="null" line="32" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getTimer>
		<eval public="1" set="method" line="36" static="1">
			<f a="path">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</eval>
		<getURL public="1" set="method" line="56" static="1">
			<f a="url:?target">
				<c path="flash.net.URLRequest"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getURL>
		<fscommand public="1" set="method" line="64" static="1">
			<f a="cmd:?param">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fscommand>
		<trace public="1" set="method" line="68" static="1">
			<f a="arg">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</trace>
		<describeType public="1" set="method" line="72" static="1">
			<f a="value">
				<d/>
				<c path="flash.xml.XML"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</describeType>
		<attach public="1" set="method" line="76" static="1">
			<f a="name">
				<c path="String"/>
				<c path="flash.display.MovieClip"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</attach>
		<as public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="v:c">
				<d/>
				<x path="Class"><c path="as.T"/></x>
				<t path="Null"><c path="as.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</as>
		<redirectTraces public="1" set="method" line="85" static="1"><f a=""><x path="Void"/></f></redirectTraces>
		<traceToConsole set="method" line="90" static="1"><f a="v:?inf">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></traceToConsole>
		<haxe_doc>Platform-specific Flash Library. Provides some platform-specific 
	functions for the Flash target.</haxe_doc>
	</class>
	<class path="flash.Vector" params="T" file="/usr/local/lib/haxe/std/flash/Vector.hx" extern="1">
		<ofArray public="1" params="T" get="inline" set="null" line="47" static="1">
			<f a="v">
				<c path="Array"><c path="ofArray.T"/></c>
				<c path="flash.Vector"><c path="ofArray.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="51" static="1">
			<f a="v">
				<c path="flash.Vector"><c path="convert.T"/></c>
				<c path="flash.Vector"><c path="convert.U"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</convert>
		<length public="1"><x path="Int"/></length>
		<fixed public="1"><x path="Bool"/></fixed>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></shift>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></unshift>
		<slice public="1" set="method"><f a="?pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<new public="1" set="method"><f a="?length:?fixed">
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="/usr/local/lib/haxe/std/flash/accessibility/AccessibilityImplementation.hx" extern="1">
		<errno public="1"><x path="UInt"/></errno>
		<stub public="1"><x path="Bool"/></stub>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="Void"/>
</f></accDoDefaultAction>
		<accLocation public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<d/>
</f></accLocation>
		<accSelect public="1" set="method"><f a="operation:childID">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></accSelect>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<get_accFocus public="1" set="method"><f a=""><x path="UInt"/></f></get_accFocus>
		<get_accName public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accRole public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accRole>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accState public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accState>
		<get_accValue public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<get_selectionActiveIndex public="1" set="method"><f a=""><d/></f></get_selectionActiveIndex>
		<get_selectionAnchorIndex public="1" set="method"><f a=""><d/></f></get_selectionAnchorIndex>
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></isLabeledBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="/usr/local/lib/haxe/std/flash/accessibility/AccessibilityProperties.hx" extern="1">
		<description public="1"><c path="String"/></description>
		<forceSimple public="1"><x path="Bool"/></forceSimple>
		<name public="1"><c path="String"/></name>
		<noAutoLabeling public="1"><x path="Bool"/></noAutoLabeling>
		<shortcut public="1"><c path="String"/></shortcut>
		<silent public="1"><x path="Bool"/></silent>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.display.ActionScriptVersion" params="" file="/usr/local/lib/haxe/std/flash/display/ActionScriptVersion.hx">
		<ACTIONSCRIPT2/>
		<ACTIONSCRIPT3/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.display.BitmapData" params="" file="/usr/local/lib/haxe/std/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<height public="1" set="null"><x path="Int"/></height>
		<rect public="1" set="null"><c path="flash.geom.Rectangle"/></rect>
		<transparent public="1" set="null"><x path="Bool"/></transparent>
		<width public="1" set="null"><x path="Int"/></width>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Void"/>
</f></applyFilter>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<t path="flash.utils.Object"/>
</f></compare>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha" v=":::::false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Point"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mergeAlpha : false }</e></m></meta>
		</copyPixels>
		<copyPixelsToByteArray public="1" set="method">
			<f a="rect:data">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyPixelsToByteArray>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<draw public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing" v=":::::false">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<e path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smoothing : false }</e></m></meta>
		</draw>
		<drawWithQuality public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing:?quality" v=":::::false:">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<e path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<e path="flash.display.StageQuality"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ smoothing : false }</e></m>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</drawWithQuality>
		<encode public="1" set="method">
			<f a="rect:compressor:?byteArray">
				<c path="flash.geom.Rectangle"/>
				<t path="flash.utils.Object"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</encode>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></floodFill>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method">
			<f a="mask:color:?findColor" v="::true">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<meta><m n=":value"><e>{ findColor : true }</e></m></meta>
		</getColorBoundsRect>
		<getPixel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel32>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1" set="method">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getVector>
		<histogram public="1" set="method">
			<f a="?hRect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><c path="flash.Vector"><x path="Float"/></c></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</histogram>
		<hitTest public="1" set="method">
			<f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold" v="::::1">
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<t path="flash.utils.Object"/>
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ secondAlphaThreshold : 1 }</e></m></meta>
		</hitTest>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></merge>
		<noise public="1" set="method">
			<f a="randomSeed:?low:?high:?channelOptions:?grayScale" v=":0:255:7:false">
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grayScale : false, channelOptions : 7, high : 255, low : 0 }</e></m></meta>
		</noise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></paletteMap>
		<perlinNoise public="1" set="method">
			<f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets" v="::::::7:false:">
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="Array"><c path="flash.geom.Point"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grayScale : false, channelOptions : 7 }</e></m></meta>
		</perlinNoise>
		<pixelDissolve public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor" v=":::0:0:0">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ fillColor : 0, numPixels : 0, randomSeed : 0 }</e></m></meta>
		</pixelDissolve>
		<scroll public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<setPixel public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setPixels>
		<setVector public="1" set="method">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</setVector>
		<threshold public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource" v=":::::0:0xFFFFFFFF:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="String"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":value"><e>{ copySource : false, mask : 0xFFFFFFFF, color : 0 }</e></m></meta>
		</threshold>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></unlock>
		<new public="1" set="method">
			<f a="width:height:?transparent:?fillColor" v="::true:0xFFFFFFFF">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ fillColor : 0xFFFFFFFF, transparent : true }</e></m></meta>
		</new>
	</class>
	<enum path="flash.display.BlendMode" params="" file="/usr/local/lib/haxe/std/flash/display/BlendMode.hx">
		<ADD/>
		<ALPHA/>
		<DARKEN/>
		<DIFFERENCE/>
		<ERASE/>
		<HARDLIGHT/>
		<INVERT/>
		<LAYER/>
		<LIGHTEN/>
		<MULTIPLY/>
		<NORMAL/>
		<OVERLAY/>
		<SCREEN/>
		<SHADER/>
		<SUBTRACT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.CapsStyle" params="" file="/usr/local/lib/haxe/std/flash/display/CapsStyle.hx">
		<NONE/>
		<ROUND/>
		<SQUARE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrection" params="" file="/usr/local/lib/haxe/std/flash/display/ColorCorrection.hx">
		<DEFAULT/>
		<OFF/>
		<ON/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrectionSupport" params="" file="/usr/local/lib/haxe/std/flash/display/ColorCorrectionSupport.hx">
		<DEFAULT_OFF/>
		<DEFAULT_ON/>
		<UNSUPPORTED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<class path="flash.display.FrameLabel" params="" file="/usr/local/lib/haxe/std/flash/display/FrameLabel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<frame public="1" set="null"><x path="Int"/></frame>
		<name public="1" set="null"><c path="String"/></name>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GradientType" params="" file="/usr/local/lib/haxe/std/flash/display/GradientType.hx">
		<LINEAR/>
		<RADIAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Graphics" params="" file="/usr/local/lib/haxe/std/flash/display/Graphics.hx" extern="1">
		<beginBitmapFill public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : false, repeat : true }</e></m></meta>
		</beginBitmapFill>
		<beginFill public="1" set="method">
			<f a="color:?alpha" v=":1">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1 }</e></m></meta>
		</beginFill>
		<beginGradientFill public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<e path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<e path="flash.display.SpreadMethod"/>
				<e path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ focalPointRatio : 0 }</e></m></meta>
		</beginGradientFill>
		<beginShaderFill public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</beginShaderFill>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<copyFrom public="1" set="method">
			<f a="sourceGraphics">
				<c path="flash.display.Graphics"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</copyFrom>
		<cubicCurveTo public="1" set="method">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1" set="method">
			<f a="graphicsData">
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawGraphicsData>
		<drawPath public="1" set="method">
			<f a="commands:data:?winding">
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.GraphicsPathWinding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawPath>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method">
			<f a="x:y:width:height:ellipseWidth:?ellipseHeight" v=":::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ellipseHeight : 0 }</e></m></meta>
		</drawRoundRect>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRectComplex>
		<drawTriangles public="1" set="method">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><x path="Float"/></c>
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.TriangleCulling"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawTriangles>
		<endFill public="1" set="method"><f a=""><x path="Void"/></f></endFill>
		<lineBitmapStyle public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ smooth : false, repeat : true }</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</lineBitmapStyle>
		<lineGradientStyle public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<e path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<e path="flash.display.SpreadMethod"/>
				<e path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ focalPointRatio : 0 }</e></m></meta>
		</lineGradientStyle>
		<lineShaderStyle public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineShaderStyle>
		<lineStyle public="1" set="method">
			<f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit" v="0:0:1:false::::3">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
				<e path="flash.display.LineScaleMode"/>
				<e path="flash.display.CapsStyle"/>
				<e path="flash.display.JointStyle"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miterLimit : 3, pixelHinting : false, alpha : 1, color : 0, thickness : 0 }</e></m></meta>
		</lineStyle>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<readGraphicsData public="1" expr="{ recurse : true }">
			<f a="?recurse">
				<x path="Bool"/>
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
			</f>
			<meta>
				<m n=":value"><e>{ recurse : true }</e></m>
				<m n=":require"><e>flash11_6</e></m>
			</meta>
		</readGraphicsData>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GraphicsPathWinding" params="" file="/usr/local/lib/haxe/std/flash/display/GraphicsPathWinding.hx">
		<EVEN_ODD/>
		<NON_ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.IGraphicsData" params="" file="/usr/local/lib/haxe/std/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<enum path="flash.display.InterpolationMethod" params="" file="/usr/local/lib/haxe/std/flash/display/InterpolationMethod.hx">
		<LINEAR_RGB/>
		<RGB/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.JointStyle" params="" file="/usr/local/lib/haxe/std/flash/display/JointStyle.hx">
		<BEVEL/>
		<MITER/>
		<ROUND/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.LineScaleMode" params="" file="/usr/local/lib/haxe/std/flash/display/LineScaleMode.hx">
		<HORIZONTAL/>
		<NONE/>
		<NORMAL/>
		<VERTICAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Loader" params="" file="/usr/local/lib/haxe/std/flash/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentLoaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></contentLoaderInfo>
		<uncaughtErrorEvents public="1" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></load>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></loadBytes>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<unloadAndStop public="1" set="method">
			<f a="?gc" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ gc : true }</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</unloadAndStop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="/usr/local/lib/haxe/std/flash/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<actionScriptVersion public="1" set="null"><e path="flash.display.ActionScriptVersion"/></actionScriptVersion>
		<applicationDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<bytes public="1" set="null"><c path="flash.utils.ByteArray"/></bytes>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<childAllowsParent public="1" set="null"><x path="Bool"/></childAllowsParent>
		<childSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</childSandboxBridge>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentType public="1" set="null"><c path="String"/></contentType>
		<frameRate public="1" set="null"><x path="Float"/></frameRate>
		<height public="1" set="null"><x path="Int"/></height>
		<isURLInaccessible public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isURLInaccessible>
		<loader public="1" set="null"><c path="flash.display.Loader"/></loader>
		<loaderURL public="1" set="null"><c path="String"/></loaderURL>
		<parameters public="1" set="null"><d><c path="String"/></d></parameters>
		<parentAllowsChild public="1" set="null"><x path="Bool"/></parentAllowsChild>
		<parentSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</parentSandboxBridge>
		<sameDomain public="1" set="null"><x path="Bool"/></sameDomain>
		<sharedEvents public="1" set="null"><c path="flash.events.EventDispatcher"/></sharedEvents>
		<swfVersion public="1" set="null"><x path="UInt"/></swfVersion>
		<uncaughtErrorEvents public="1" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<url public="1" set="null"><c path="String"/></url>
		<width public="1" set="null"><x path="Int"/></width>
	</class>
	<class path="flash.display.NativeMenu" params="" file="/usr/local/lib/haxe/std/flash/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.display.Scene" params="" file="/usr/local/lib/haxe/std/flash/display/Scene.hx" extern="1">
		<labels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></labels>
		<name public="1" set="null"><c path="String"/></name>
		<numFrames public="1" set="null"><x path="Int"/></numFrames>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.Shader" params="" file="/usr/local/lib/haxe/std/flash/display/Shader.hx" extern="1">
		<byteCode public="1" get="null"><c path="flash.utils.ByteArray"/></byteCode>
		<data public="1"><c path="flash.display.ShaderData"/></data>
		<precisionHint public="1"><e path="flash.display.ShaderPrecision"/></precisionHint>
		<new public="1" set="method"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.ShaderData" params="" file="/usr/local/lib/haxe/std/flash/display/ShaderData.hx" extern="1">
		<new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.display.ShaderPrecision" params="" file="/usr/local/lib/haxe/std/flash/display/ShaderPrecision.hx">
		<FAST/>
		<FULL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.SpreadMethod" params="" file="/usr/local/lib/haxe/std/flash/display/SpreadMethod.hx">
		<PAD/>
		<REFLECT/>
		<REPEAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Stage" params="" file="/usr/local/lib/haxe/std/flash/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<align public="1"><e path="flash.display.StageAlign"/></align>
		<allowsFullScreen public="1" set="null"><x path="Bool"/></allowsFullScreen>
		<allowsFullScreenInteractive public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</allowsFullScreenInteractive>
		<browserZoomFactor public="1" set="null"><x path="Float"/></browserZoomFactor>
		<color public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</color>
		<colorCorrection public="1">
			<e path="flash.display.ColorCorrection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrection>
		<colorCorrectionSupport public="1" set="null">
			<e path="flash.display.ColorCorrectionSupport"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrectionSupport>
		<contentsScaleFactor public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</contentsScaleFactor>
		<displayContextInfo public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</displayContextInfo>
		<displayState public="1"><e path="flash.display.StageDisplayState"/></displayState>
		<focus public="1"><c path="flash.display.InteractiveObject"/></focus>
		<frameRate public="1"><x path="Float"/></frameRate>
		<fullScreenHeight public="1" set="null"><x path="UInt"/></fullScreenHeight>
		<fullScreenSourceRect public="1"><c path="flash.geom.Rectangle"/></fullScreenSourceRect>
		<fullScreenWidth public="1" set="null"><x path="UInt"/></fullScreenWidth>
		<mouseLock public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</mouseLock>
		<quality public="1"><e path="flash.display.StageQuality"/></quality>
		<scaleMode public="1"><e path="flash.display.StageScaleMode"/></scaleMode>
		<showDefaultContextMenu public="1"><x path="Bool"/></showDefaultContextMenu>
		<softKeyboardRect public="1" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardRect>
		<stage3Ds public="1" set="null">
			<c path="flash.Vector"><c path="flash.display.Stage3D"/></c>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</stage3Ds>
		<stageFocusRect public="1"><x path="Bool"/></stageFocusRect>
		<stageHeight public="1"><x path="Int"/></stageHeight>
		<stageVideos public="1" set="null">
			<c path="flash.Vector"><c path="flash.media.StageVideo"/></c>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</stageVideos>
		<stageWidth public="1"><x path="Int"/></stageWidth>
		<wmodeGPU public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</wmodeGPU>
		<invalidate public="1" set="method"><f a=""><x path="Void"/></f></invalidate>
		<isFocusInaccessible public="1" set="method"><f a=""><x path="Bool"/></f></isFocusInaccessible>
	</class>
	<class path="flash.display.Stage3D" params="" file="/usr/local/lib/haxe/std/flash/display/Stage3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<context3D public="1" set="null"><c path="flash.display3D.Context3D"/></context3D>
		<visible public="1"><x path="Bool"/></visible>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<requestContext3D public="1" set="method"><f a="?context3DRenderMode:?profile">
	<c path="String"/>
	<e path="flash.display3D.Context3DProfile"/>
	<x path="Void"/>
</f></requestContext3D>
		<requestContext3DMatchingProfiles public="1">
			<f a="profiles">
				<c path="flash.Vector"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash12</e></m></meta>
		</requestContext3DMatchingProfiles>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<enum path="flash.display.StageAlign" params="" file="/usr/local/lib/haxe/std/flash/display/StageAlign.hx">
		<BOTTOM/>
		<BOTTOM_LEFT/>
		<BOTTOM_RIGHT/>
		<LEFT/>
		<RIGHT/>
		<TOP/>
		<TOP_LEFT/>
		<TOP_RIGHT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageDisplayState" params="" file="/usr/local/lib/haxe/std/flash/display/StageDisplayState.hx">
		<FULL_SCREEN/>
		<FULL_SCREEN_INTERACTIVE/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageQuality" params="" file="/usr/local/lib/haxe/std/flash/display/StageQuality.hx">
		<BEST/>
		<HIGH/>
		<HIGH_16X16/>
		<HIGH_16X16_LINEAR/>
		<HIGH_8X8/>
		<HIGH_8X8_LINEAR/>
		<LOW/>
		<MEDIUM/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageScaleMode" params="" file="/usr/local/lib/haxe/std/flash/display/StageScaleMode.hx">
		<EXACT_FIT/>
		<NO_BORDER/>
		<NO_SCALE/>
		<SHOW_ALL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.TriangleCulling" params="" file="/usr/local/lib/haxe/std/flash/display/TriangleCulling.hx">
		<NEGATIVE/>
		<NONE/>
		<POSITIVE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display3D.Context3D" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<supportsVideoTexture public="1" set="null" static="1"><x path="Bool"/></supportsVideoTexture>
		<backBufferHeight public="1" set="null"><x path="Int"/></backBufferHeight>
		<backBufferWidth public="1" set="null"><x path="Int"/></backBufferWidth>
		<driverInfo public="1" set="null"><c path="String"/></driverInfo>
		<enableErrorChecking public="1"><x path="Bool"/></enableErrorChecking>
		<maxBackBufferHeight public="1"><x path="Int"/></maxBackBufferHeight>
		<maxBackBufferWidth public="1"><x path="Int"/></maxBackBufferWidth>
		<profile public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash12</e></m></meta>
		</profile>
		<totalGPUMemory public="1" set="null"><x path="Float"/></totalGPUMemory>
		<clear public="1" set="method">
			<f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask" v="0:0:0:1:1:0:0xFFFFFFFF">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mask : 0xFFFFFFFF, stencil : 0, depth : 1, alpha : 1, blue : 0, green : 0, red : 0 }</e></m></meta>
		</clear>
		<configureBackBuffer public="1" set="method">
			<f a="width:height:antiAlias:?enableDepthAndStencil:?wantsBestResolution:?wantsBestResolutionOnBrowserZoom" v=":::true:false:false">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ wantsBestResolutionOnBrowserZoom : false, wantsBestResolution : false, enableDepthAndStencil : true }</e></m></meta>
		</configureBackBuffer>
		<createCubeTexture public="1" set="method">
			<f a="size:format:optimizeForRenderToTexture:?streamingLevels" v=":::0">
				<x path="Int"/>
				<e path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="flash.display3D.textures.CubeTexture"/>
			</f>
			<meta><m n=":value"><e>{ streamingLevels : 0 }</e></m></meta>
		</createCubeTexture>
		<createIndexBuffer public="1" set="method"><f a="numIndices:?bufferUsage">
	<x path="Int"/>
	<e path="flash.display3D.Context3DBufferUsage"/>
	<c path="flash.display3D.IndexBuffer3D"/>
</f></createIndexBuffer>
		<createProgram public="1" set="method"><f a=""><c path="flash.display3D.Program3D"/></f></createProgram>
		<createRectangleTexture public="1">
			<f a="width:height:format:optimizeForRenderToTexture">
				<x path="Int"/>
				<x path="Int"/>
				<e path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<c path="flash.display3D.textures.RectangleTexture"/>
			</f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</createRectangleTexture>
		<createTexture public="1" set="method">
			<f a="width:height:format:optimizeForRenderToTexture:?streamingLevels" v="::::0">
				<x path="Int"/>
				<x path="Int"/>
				<e path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="flash.display3D.textures.Texture"/>
			</f>
			<meta><m n=":value"><e>{ streamingLevels : 0 }</e></m></meta>
		</createTexture>
		<createVertexBuffer public="1" set="method"><f a="numVertices:data32PerVertex:?bufferUsage">
	<x path="Int"/>
	<x path="Int"/>
	<e path="flash.display3D.Context3DBufferUsage"/>
	<c path="flash.display3D.VertexBuffer3D"/>
</f></createVertexBuffer>
		<createVideoTexture public="1" set="method"><f a=""><c path="flash.display3D.textures.VideoTexture"/></f></createVideoTexture>
		<dispose public="1" set="method">
			<f a="?recreate" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ recreate : true }</e></m></meta>
		</dispose>
		<drawToBitmapData public="1" set="method"><f a="destination">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></drawToBitmapData>
		<drawTriangles public="1" set="method">
			<f a="indexBuffer:?firstIndex:?numTriangles" v=":0:-1">
				<c path="flash.display3D.IndexBuffer3D"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ numTriangles : -1, firstIndex : 0 }</e></m></meta>
		</drawTriangles>
		<present public="1" set="method"><f a=""><x path="Void"/></f></present>
		<setBlendFactors public="1" set="method"><f a="sourceFactor:destinationFactor">
	<e path="flash.display3D.Context3DBlendFactor"/>
	<e path="flash.display3D.Context3DBlendFactor"/>
	<x path="Void"/>
</f></setBlendFactors>
		<setColorMask public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setColorMask>
		<setCulling public="1" set="method"><f a="triangleFaceToCull">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<x path="Void"/>
</f></setCulling>
		<setDepthTest public="1" set="method"><f a="depthMask:passCompareMode">
	<x path="Bool"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<x path="Void"/>
</f></setDepthTest>
		<setProgram public="1" set="method"><f a="program">
	<c path="flash.display3D.Program3D"/>
	<x path="Void"/>
</f></setProgram>
		<setProgramConstantsFromByteArray public="1" set="method">
			<f a="programType:firstRegister:numRegisters:data:byteArrayOffset">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</setProgramConstantsFromByteArray>
		<setProgramConstantsFromMatrix public="1" set="method">
			<f a="programType:firstRegister:matrix:?transposedMatrix" v=":::false">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<c path="flash.geom.Matrix3D"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ transposedMatrix : false }</e></m></meta>
		</setProgramConstantsFromMatrix>
		<setProgramConstantsFromVector public="1" set="method">
			<f a="programType:firstRegister:data:?numRegisters" v=":::-1">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ numRegisters : -1 }</e></m></meta>
		</setProgramConstantsFromVector>
		<setRenderToBackBuffer public="1" set="method"><f a=""><x path="Void"/></f></setRenderToBackBuffer>
		<setRenderToTexture public="1" set="method">
			<f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector:?colorOutputIndex" v=":false:0:0:0">
				<c path="flash.display3D.textures.TextureBase"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ colorOutputIndex : 0, surfaceSelector : 0, antiAlias : 0, enableDepthAndStencil : false }</e></m></meta>
		</setRenderToTexture>
		<setSamplerStateAt public="1">
			<f a="sampler:wrap:filter:mipfilter">
				<x path="Int"/>
				<e path="flash.display3D.Context3DWrapMode"/>
				<e path="flash.display3D.Context3DTextureFilter"/>
				<e path="flash.display3D.Context3DMipFilter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_6</e></m></meta>
		</setSamplerStateAt>
		<setScissorRectangle public="1" set="method"><f a="rectangle">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></setScissorRectangle>
		<setStencilActions public="1" set="method"><f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<x path="Void"/>
</f></setStencilActions>
		<setStencilReferenceValue public="1" set="method">
			<f a="referenceValue:?readMask:?writeMask" v=":255:255">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ writeMask : 255, readMask : 255 }</e></m></meta>
		</setStencilReferenceValue>
		<setTextureAt public="1" set="method"><f a="sampler:texture">
	<x path="Int"/>
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Void"/>
</f></setTextureAt>
		<setVertexBufferAt public="1" set="method">
			<f a="index:buffer:?bufferOffset:?format" v="::0:">
				<x path="Int"/>
				<c path="flash.display3D.VertexBuffer3D"/>
				<x path="Int"/>
				<e path="flash.display3D.Context3DVertexBufferFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ bufferOffset : 0 }</e></m></meta>
		</setVertexBufferAt>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display3D.Context3DBlendFactor" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DBlendFactor.hx">
		<DESTINATION_ALPHA/>
		<DESTINATION_COLOR/>
		<ONE/>
		<ONE_MINUS_DESTINATION_ALPHA/>
		<ONE_MINUS_DESTINATION_COLOR/>
		<ONE_MINUS_SOURCE_ALPHA/>
		<ONE_MINUS_SOURCE_COLOR/>
		<SOURCE_ALPHA/>
		<SOURCE_COLOR/>
		<ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DBufferUsage" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DBufferUsage.hx">
		<DYNAMIC_DRAW/>
		<STATIC_DRAW/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash12</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DCompareMode" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DCompareMode.hx">
		<ALWAYS/>
		<EQUAL/>
		<GREATER/>
		<GREATER_EQUAL/>
		<LESS/>
		<LESS_EQUAL/>
		<NEVER/>
		<NOT_EQUAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DMipFilter" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DMipFilter.hx">
		<MIPLINEAR/>
		<MIPNEAREST/>
		<MIPNONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DProfile" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DProfile.hx">
		<BASELINE/>
		<BASELINE_CONSTRAINED/>
		<BASELINE_EXTENDED/>
		<STANDARD/>
		<STANDARD_CONSTRAINED/>
		<STANDARD_EXTENDED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DProgramType" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DProgramType.hx">
		<FRAGMENT/>
		<VERTEX/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DStencilAction" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DStencilAction.hx">
		<DECREMENT_SATURATE/>
		<DECREMENT_WRAP/>
		<INCREMENT_SATURATE/>
		<INCREMENT_WRAP/>
		<INVERT/>
		<KEEP/>
		<SET/>
		<ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFilter" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTextureFilter.hx">
		<ANISOTROPIC16X/>
		<ANISOTROPIC2X/>
		<ANISOTROPIC4X/>
		<ANISOTROPIC8X/>
		<LINEAR/>
		<NEAREST/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFormat" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTextureFormat.hx">
		<BGRA/>
		<BGRA_PACKED/>
		<BGR_PACKED/>
		<COMPRESSED/>
		<COMPRESSED_ALPHA/>
		<RGBA_HALF_FLOAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTriangleFace" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTriangleFace.hx">
		<BACK/>
		<FRONT/>
		<FRONT_AND_BACK/>
		<NONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DVertexBufferFormat" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DVertexBufferFormat.hx">
		<BYTES_4/>
		<FLOAT_1/>
		<FLOAT_2/>
		<FLOAT_3/>
		<FLOAT_4/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DWrapMode" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DWrapMode.hx">
		<CLAMP/>
		<CLAMP_U_REPEAT_V/>
		<REPEAT/>
		<REPEAT_U_CLAMP_V/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display3D.IndexBuffer3D" params="" file="/usr/local/lib/haxe/std/flash/display3D/IndexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startOffset:count">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startOffset:count">
	<c path="flash.Vector"><x path="UInt"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.Program3D" params="" file="/usr/local/lib/haxe/std/flash/display3D/Program3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<upload public="1" set="method"><f a="vertexProgram:fragmentProgram">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></upload>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.VertexBuffer3D" params="" file="/usr/local/lib/haxe/std/flash/display3D/VertexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startVertex:numVertices">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startVertex:numVertices">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
	</class>
	<class path="flash.display3D.textures.TextureBase" params="" file="/usr/local/lib/haxe/std/flash/display3D/textures/TextureBase.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.CubeTexture" params="" file="/usr/local/lib/haxe/std/flash/display3D/textures/CubeTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?async" v="::false">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ async : false }</e></m></meta>
		</uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method">
			<f a="source:side:?miplevel" v="::0">
				<c path="flash.display.BitmapData"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:side:?miplevel" v=":::0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.RectangleTexture" params="" file="/usr/local/lib/haxe/std/flash/display3D/textures/RectangleTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromBitmapData public="1" set="method"><f a="source">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.Texture" params="" file="/usr/local/lib/haxe/std/flash/display3D/textures/Texture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?async" v="::false">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ async : false }</e></m></meta>
		</uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method">
			<f a="source:?miplevel" v=":0">
				<c path="flash.display.BitmapData"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?miplevel" v="::0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.VideoTexture" params="" file="/usr/local/lib/haxe/std/flash/display3D/textures/VideoTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<attachCamera public="1" set="method"><f a="theCamera">
	<c path="flash.media.Camera"/>
	<x path="Void"/>
</f></attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.errors.Error" params="" file="/usr/local/lib/haxe/std/flash/errors/Error.hx" extern="1">
		<length public="1" set="null" static="1"><x path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<x path="Class"><d/></x>
	<x path="UInt"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<errorID public="1" set="null"><x path="Int"/></errorID>
		<message public="1"><d/></message>
		<name public="1"><d/></name>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0 }</e></m></meta>
		</new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.events.Event" params="" file="/usr/local/lib/haxe/std/flash/events/Event.hx" extern="1">
		<ACTIVATE public="1" set="null" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" set="null" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" set="null" static="1"><c path="String"/></ADDED_TO_STAGE>
		<BROWSER_ZOOM_CHANGE public="1" set="null" static="1"><c path="String"/></BROWSER_ZOOM_CHANGE>
		<CANCEL public="1" set="null" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" set="null" static="1"><c path="String"/></CHANGE>
		<CHANNEL_MESSAGE public="1" set="null" static="1"><c path="String"/></CHANNEL_MESSAGE>
		<CHANNEL_STATE public="1" set="null" static="1"><c path="String"/></CHANNEL_STATE>
		<CLEAR public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CLEAR>
		<CLOSE public="1" set="null" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" set="null" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" set="null" static="1"><c path="String"/></CONNECT>
		<CONTEXT3D_CREATE public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</CONTEXT3D_CREATE>
		<COPY public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</COPY>
		<CUT public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CUT>
		<DEACTIVATE public="1" set="null" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" set="null" static="1"><c path="String"/></ENTER_FRAME>
		<EXIT_FRAME public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</EXIT_FRAME>
		<FRAME_CONSTRUCTED public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</FRAME_CONSTRUCTED>
		<FRAME_LABEL public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</FRAME_LABEL>
		<FULLSCREEN public="1" set="null" static="1"><c path="String"/></FULLSCREEN>
		<ID3 public="1" set="null" static="1"><c path="String"/></ID3>
		<INIT public="1" set="null" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE public="1" set="null" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" set="null" static="1"><c path="String"/></OPEN>
		<PASTE public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</PASTE>
		<REMOVED public="1" set="null" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" set="null" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" set="null" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" set="null" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" set="null" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" set="null" static="1"><c path="String"/></SELECT>
		<SELECT_ALL public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</SELECT_ALL>
		<SOUND_COMPLETE public="1" set="null" static="1"><c path="String"/></SOUND_COMPLETE>
		<SUSPEND public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</SUSPEND>
		<TAB_CHILDREN_CHANGE public="1" set="null" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" set="null" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" set="null" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<TEXTURE_READY public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</TEXTURE_READY>
		<TEXT_INTERACTION_MODE_CHANGE public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD public="1" set="null" static="1"><c path="String"/></UNLOAD>
		<VIDEO_FRAME public="1" set="null" static="1"><c path="String"/></VIDEO_FRAME>
		<WORKER_STATE public="1" set="null" static="1"><c path="String"/></WORKER_STATE>
		<bubbles public="1" set="null"><x path="Bool"/></bubbles>
		<cancelable public="1" set="null"><x path="Bool"/></cancelable>
		<currentTarget public="1" set="null"><d/></currentTarget>
		<eventPhase public="1" set="null"><e path="flash.events.EventPhase"/></eventPhase>
		<target public="1" set="null"><d/></target>
		<type public="1" set="null"><c path="String"/></type>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<formatToString public="1" set="method"><f a="className:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></formatToString>
		<isDefaultPrevented public="1" set="method"><f a=""><x path="Bool"/></f></isDefaultPrevented>
		<preventDefault public="1" set="method"><f a=""><x path="Void"/></f></preventDefault>
		<stopImmediatePropagation public="1" set="method"><f a=""><x path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method"><f a=""><x path="Void"/></f></stopPropagation>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<enum path="flash.events.EventPhase" params="" file="/usr/local/lib/haxe/std/flash/events/EventPhase.hx">
		<AT_TARGET/>
		<BUBBLING_PHASE/>
		<CAPTURING_PHASE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.events.UncaughtErrorEvents" params="" file="/usr/local/lib/haxe/std/flash/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.external.ExternalInterface" params="" file="/usr/local/lib/haxe/std/flash/external/ExternalInterface.hx" extern="1">
		<available public="1" set="null" static="1"><x path="Bool"/></available>
		<marshallExceptions public="1" static="1"><x path="Bool"/></marshallExceptions>
		<objectID public="1" set="null" static="1"><c path="String"/></objectID>
		<addCallback public="1" set="method" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="/usr/local/lib/haxe/std/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.filters.GlowFilter" params="" file="/usr/local/lib/haxe/std/flash/filters/GlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><x path="Float"/></alpha>
		<blurX public="1"><x path="Float"/></blurX>
		<blurY public="1"><x path="Float"/></blurY>
		<color public="1"><x path="UInt"/></color>
		<inner public="1"><x path="Bool"/></inner>
		<knockout public="1"><x path="Bool"/></knockout>
		<quality public="1"><x path="Int"/></quality>
		<strength public="1"><x path="Float"/></strength>
		<new public="1" set="method">
			<f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout" v="16711680:1:6:6:2:1:false:false">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ knockout : false, inner : false, quality : 1, strength : 2, blurY : 6, blurX : 6, alpha : 1, color : 16711680 }</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="/usr/local/lib/haxe/std/flash/geom/ColorTransform.hx" extern="1">
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<color public="1"><x path="UInt"/></color>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<redOffset public="1"><x path="Float"/></redOffset>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset" v="1:1:1:1:0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alphaOffset : 0, blueOffset : 0, greenOffset : 0, redOffset : 0, alphaMultiplier : 1, blueMultiplier : 1, greenMultiplier : 1, redMultiplier : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Matrix" params="" file="/usr/local/lib/haxe/std/flash/geom/Matrix.hx" extern="1">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<tx public="1"><x path="Float"/></tx>
		<ty public="1"><x path="Float"/></ty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<createBox public="1" set="method">
			<f a="scaleX:scaleY:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
		</createBox>
		<createGradientBox public="1" set="method">
			<f a="width:height:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
		</createGradientBox>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><x path="Void"/></f></invert>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<setTo public="1" set="method">
			<f a="aa:ba:ca:da:txa:tya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<new public="1" set="method">
			<f a="?a:?b:?c:?d:?tx:?ty" v="1:0:0:1:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, d : 1, c : 0, b : 0, a : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Matrix3D" params="" file="/usr/local/lib/haxe/std/flash/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" set="method" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<determinant public="1" set="null"><x path="Float"/></determinant>
		<position public="1"><c path="flash.geom.Vector3D"/></position>
		<rawData public="1"><c path="flash.Vector"><x path="Float"/></c></rawData>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></append>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></appendRotation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendScale>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendTranslation>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix3D">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRawDataFrom public="1" set="method">
			<f a="vector:?index:?transpose" v=":0:false">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ transpose : false, index : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</copyRawDataFrom>
		<copyRawDataTo public="1" set="method">
			<f a="vector:?index:?transpose" v=":0:false">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ transpose : false, index : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</copyRawDataTo>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyToMatrix3D public="1" set="method">
			<f a="dest">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyToMatrix3D>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<e path="flash.geom.Orientation3D"/>
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
</f></decompose>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<x path="Void"/>
</f></interpolateTo>
		<invert public="1" set="method"><f a=""><x path="Bool"/></f></invert>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></pointAt>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></prepend>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></prependRotation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependScale>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependTranslation>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
	<e path="flash.geom.Orientation3D"/>
	<x path="Bool"/>
</f></recompose>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></transformVectors>
		<transpose public="1" set="method"><f a=""><x path="Void"/></f></transpose>
		<new public="1" set="method"><f a="?v">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<enum path="flash.geom.Orientation3D" params="" file="/usr/local/lib/haxe/std/flash/geom/Orientation3D.hx">
		<AXIS_ANGLE/>
		<EULER_ANGLES/>
		<QUATERNION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.geom.PerspectiveProjection" params="" file="/usr/local/lib/haxe/std/flash/geom/PerspectiveProjection.hx" extern="1">
		<fieldOfView public="1"><x path="Float"/></fieldOfView>
		<focalLength public="1"><x path="Float"/></focalLength>
		<projectionCenter public="1"><c path="flash.geom.Point"/></projectionCenter>
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Point" params="" file="/usr/local/lib/haxe/std/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<length public="1" set="null"><x path="Float"/></length>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<copyFrom public="1" set="method">
			<f a="sourcePoint">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></equals>
		<normalize public="1" set="method"><f a="thickness">
	<x path="Float"/>
	<x path="Void"/>
</f></normalize>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<setTo public="1" set="method">
			<f a="xa:ya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="/usr/local/lib/haxe/std/flash/geom/Rectangle.hx" extern="1">
		<bottom public="1"><x path="Float"/></bottom>
		<bottomRight public="1"><c path="flash.geom.Point"/></bottomRight>
		<height public="1"><x path="Float"/></height>
		<left public="1"><x path="Float"/></left>
		<right public="1"><x path="Float"/></right>
		<size public="1"><c path="flash.geom.Point"/></size>
		<top public="1"><x path="Float"/></top>
		<topLeft public="1"><c path="flash.geom.Point"/></topLeft>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<contains public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></containsRect>
		<copyFrom public="1" set="method">
			<f a="sourceRect">
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></equals>
		<inflate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method"><f a=""><x path="Void"/></f></setEmpty>
		<setTo public="1" set="method">
			<f a="xa:ya:widtha:heighta">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0, width : 0, y : 0, x : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Transform" params="" file="/usr/local/lib/haxe/std/flash/geom/Transform.hx" extern="1">
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<concatenatedColorTransform public="1" set="null"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<concatenatedMatrix public="1" set="null"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<matrix3D public="1">
			<c path="flash.geom.Matrix3D"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</matrix3D>
		<perspectiveProjection public="1">
			<c path="flash.geom.PerspectiveProjection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</perspectiveProjection>
		<pixelBounds public="1" set="null"><c path="flash.geom.Rectangle"/></pixelBounds>
		<getRelativeMatrix3D public="1" set="method">
			<f a="relativeTo">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Matrix3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getRelativeMatrix3D>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Vector3D" params="" file="/usr/local/lib/haxe/std/flash/geom/Vector3D.hx" extern="1">
		<X_AXIS public="1" set="null" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" set="null" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" set="null" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" set="method" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></angleBetween>
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></distance>
		<length public="1" set="null"><x path="Float"/></length>
		<lengthSquared public="1" set="null"><x path="Float"/></lengthSquared>
		<w public="1"><x path="Float"/></w>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<copyFrom public="1" set="method">
			<f a="sourceVector3D">
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<equals public="1" set="method">
			<f a="toCompare:?allFour" v=":false">
				<c path="flash.geom.Vector3D"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
		</equals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<nearEquals public="1" set="method">
			<f a="toCompare:tolerance:?allFour" v="::false">
				<c path="flash.geom.Vector3D"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
		</nearEquals>
		<negate public="1" set="method"><f a=""><x path="Void"/></f></negate>
		<normalize public="1" set="method"><f a=""><x path="Float"/></f></normalize>
		<project public="1" set="method"><f a=""><x path="Void"/></f></project>
		<scaleBy public="1" set="method"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<setTo public="1" set="method">
			<f a="xa:ya:za">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 0, z : 0, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.media.AVCaptionStyle" params="" file="/usr/local/lib/haxe/std/flash/media/AVCaptionStyle.hx" extern="1">
		<BLACK public="1" set="null" static="1"><c path="String"/></BLACK>
		<BLUE public="1" set="null" static="1"><c path="String"/></BLUE>
		<BRIGHT_BLUE public="1" set="null" static="1"><c path="String"/></BRIGHT_BLUE>
		<BRIGHT_CYAN public="1" set="null" static="1"><c path="String"/></BRIGHT_CYAN>
		<BRIGHT_GREEN public="1" set="null" static="1"><c path="String"/></BRIGHT_GREEN>
		<BRIGHT_MAGENTA public="1" set="null" static="1"><c path="String"/></BRIGHT_MAGENTA>
		<BRIGHT_RED public="1" set="null" static="1"><c path="String"/></BRIGHT_RED>
		<BRIGHT_WHITE public="1" set="null" static="1"><c path="String"/></BRIGHT_WHITE>
		<BRIGHT_YELLOW public="1" set="null" static="1"><c path="String"/></BRIGHT_YELLOW>
		<CASUAL public="1" set="null" static="1"><c path="String"/></CASUAL>
		<CURSIVE public="1" set="null" static="1"><c path="String"/></CURSIVE>
		<CYAN public="1" set="null" static="1"><c path="String"/></CYAN>
		<DARK_BLUE public="1" set="null" static="1"><c path="String"/></DARK_BLUE>
		<DARK_CYAN public="1" set="null" static="1"><c path="String"/></DARK_CYAN>
		<DARK_GREEN public="1" set="null" static="1"><c path="String"/></DARK_GREEN>
		<DARK_MAGENTA public="1" set="null" static="1"><c path="String"/></DARK_MAGENTA>
		<DARK_RED public="1" set="null" static="1"><c path="String"/></DARK_RED>
		<DARK_YELLOW public="1" set="null" static="1"><c path="String"/></DARK_YELLOW>
		<DEFAULT public="1" set="null" static="1"><c path="String"/></DEFAULT>
		<DEPRESSED public="1" set="null" static="1"><c path="String"/></DEPRESSED>
		<GRAY public="1" set="null" static="1"><c path="String"/></GRAY>
		<GREEN public="1" set="null" static="1"><c path="String"/></GREEN>
		<LARGE public="1" set="null" static="1"><c path="String"/></LARGE>
		<LEFT_DROP_SHADOW public="1" set="null" static="1"><c path="String"/></LEFT_DROP_SHADOW>
		<MAGENTA public="1" set="null" static="1"><c path="String"/></MAGENTA>
		<MEDIUM public="1" set="null" static="1"><c path="String"/></MEDIUM>
		<MONOSPACED_WITHOUT_SERIFS public="1" set="null" static="1"><c path="String"/></MONOSPACED_WITHOUT_SERIFS>
		<MONOSPACE_WITH_SERIFS public="1" set="null" static="1"><c path="String"/></MONOSPACE_WITH_SERIFS>
		<NONE public="1" set="null" static="1"><c path="String"/></NONE>
		<PROPORTIONAL_WITHOUT_SERIFS public="1" set="null" static="1"><c path="String"/></PROPORTIONAL_WITHOUT_SERIFS>
		<PROPORTIONAL_WITH_SERIFS public="1" set="null" static="1"><c path="String"/></PROPORTIONAL_WITH_SERIFS>
		<RAISED public="1" set="null" static="1"><c path="String"/></RAISED>
		<RED public="1" set="null" static="1"><c path="String"/></RED>
		<RIGHT_DROP_SHADOW public="1" set="null" static="1"><c path="String"/></RIGHT_DROP_SHADOW>
		<SMALL public="1" set="null" static="1"><c path="String"/></SMALL>
		<SMALL_CAPITALS public="1" set="null" static="1"><c path="String"/></SMALL_CAPITALS>
		<UNIFORM public="1" set="null" static="1"><c path="String"/></UNIFORM>
		<WHITE public="1" set="null" static="1"><c path="String"/></WHITE>
		<YELLOW public="1" set="null" static="1"><c path="String"/></YELLOW>
		<backgroundColor public="1"><c path="String"/></backgroundColor>
		<backgroundOpacity public="1"><c path="String"/></backgroundOpacity>
		<bottomInset public="1"><c path="String"/></bottomInset>
		<edgeColor public="1"><c path="String"/></edgeColor>
		<fillColor public="1"><c path="String"/></fillColor>
		<fillOpacity public="1"><c path="String"/></fillOpacity>
		<font public="1"><c path="String"/></font>
		<fontColor public="1"><c path="String"/></fontColor>
		<fontEdge public="1"><c path="String"/></fontEdge>
		<fontOpacity public="1"><c path="String"/></fontOpacity>
		<size public="1"><c path="String"/></size>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVPlayState" params="" file="/usr/local/lib/haxe/std/flash/media/AVPlayState.hx" extern="1">
		<BUFFERING public="1" set="null" static="1"><x path="Int"/></BUFFERING>
		<EOF public="1" set="null" static="1"><x path="Int"/></EOF>
		<PAUSED public="1" set="null" static="1"><x path="Int"/></PAUSED>
		<PLAYING public="1" set="null" static="1"><x path="Int"/></PLAYING>
		<READY public="1" set="null" static="1"><x path="Int"/></READY>
		<SUSPENDED public="1" set="null" static="1"><x path="Int"/></SUSPENDED>
		<TRICK_PLAY public="1" set="null" static="1"><x path="Int"/></TRICK_PLAY>
		<UNINITIALIZED public="1" set="null" static="1"><x path="Int"/></UNINITIALIZED>
		<UNRECOVERABLE_ERROR public="1" set="null" static="1"><x path="Int"/></UNRECOVERABLE_ERROR>
		<state public="1" set="null"><x path="Int"/></state>
		<new public="1" set="method"><f a="state">
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVResult" params="" file="/usr/local/lib/haxe/std/flash/media/AVResult.hx" extern="1">
		<ASYNC_OPERATION_IN_PROGRESS public="1" set="null" static="1"><x path="Int"/></ASYNC_OPERATION_IN_PROGRESS>
		<AUDIO_ONLY_STREAM_END public="1" set="null" static="1"><x path="Int"/></AUDIO_ONLY_STREAM_END>
		<AUDIO_ONLY_STREAM_START public="1" set="null" static="1"><x path="Int"/></AUDIO_ONLY_STREAM_START>
		<AUDIO_START_ERROR public="1" set="null" static="1"><x path="Int"/></AUDIO_START_ERROR>
		<BAD_MANIFEST_SIGNATURE public="1" set="null" static="1"><x path="Int"/></BAD_MANIFEST_SIGNATURE>
		<BAD_MEDIASAMPLE_FOUND public="1" set="null" static="1"><x path="Int"/></BAD_MEDIASAMPLE_FOUND>
		<BAD_MEDIA_INTERLEAVING public="1" set="null" static="1"><x path="Int"/></BAD_MEDIA_INTERLEAVING>
		<CALLED_FROM_WRONG_THREAD public="1" set="null" static="1"><x path="Int"/></CALLED_FROM_WRONG_THREAD>
		<CANNOT_ERASE_TIMELINE public="1" set="null" static="1"><x path="Int"/></CANNOT_ERASE_TIMELINE>
		<CANNOT_FAIL_OVER public="1" set="null" static="1"><x path="Int"/></CANNOT_FAIL_OVER>
		<CANNOT_HANDLE_MAIN_MANIFEST_UPDATE public="1" set="null" static="1"><x path="Int"/></CANNOT_HANDLE_MAIN_MANIFEST_UPDATE>
		<CANNOT_LOAD_PLAY_LIST public="1" set="null" static="1"><x path="Int"/></CANNOT_LOAD_PLAY_LIST>
		<CANNOT_SPLIT_TIMELINE public="1" set="null" static="1"><x path="Int"/></CANNOT_SPLIT_TIMELINE>
		<CODEC_NOT_SUPPORTED public="1" set="null" static="1"><x path="Int"/></CODEC_NOT_SUPPORTED>
		<COMPONENT_CREATION_FAILURE public="1" set="null" static="1"><x path="Int"/></COMPONENT_CREATION_FAILURE>
		<CONTAINER_NOT_SUPPORTED public="1" set="null" static="1"><x path="Int"/></CONTAINER_NOT_SUPPORTED>
		<CONTENT_LENGTH_MISMATCH public="1" set="null" static="1"><x path="Int"/></CONTENT_LENGTH_MISMATCH>
		<CRYPTO_ALGORITHM_NOT_SUPPORTED public="1" set="null" static="1"><x path="Int"/></CRYPTO_ALGORITHM_NOT_SUPPORTED>
		<CRYPTO_ERROR_BAD_CERTIFICATE public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BAD_CERTIFICATE>
		<CRYPTO_ERROR_BAD_PARAMETER public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BAD_PARAMETER>
		<CRYPTO_ERROR_BUFFER_TOO_SMALL public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BUFFER_TOO_SMALL>
		<CRYPTO_ERROR_CORRUPTED_DATA public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_CORRUPTED_DATA>
		<CRYPTO_ERROR_DIGEST_FINISH public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_DIGEST_FINISH>
		<CRYPTO_ERROR_DIGEST_UPDATE public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_DIGEST_UPDATE>
		<CRYPTO_ERROR_UNKNOWN public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_UNKNOWN>
		<CURRENT_PERIOD_EXPIRED public="1" set="null" static="1"><x path="Int"/></CURRENT_PERIOD_EXPIRED>
		<DECODER_FAILED public="1" set="null" static="1"><x path="Int"/></DECODER_FAILED>
		<DEVICE_OPEN_ERROR public="1" set="null" static="1"><x path="Int"/></DEVICE_OPEN_ERROR>
		<DID_NOT_GET_NEXT_FRAGMENT public="1" set="null" static="1"><x path="Int"/></DID_NOT_GET_NEXT_FRAGMENT>
		<DRM_INIT_ERROR public="1" set="null" static="1"><x path="Int"/></DRM_INIT_ERROR>
		<DRM_NOT_AVAILABLE public="1" set="null" static="1"><x path="Int"/></DRM_NOT_AVAILABLE>
		<END_OF_PERIOD public="1" set="null" static="1"><x path="Int"/></END_OF_PERIOD>
		<EOF public="1" set="null" static="1"><x path="Int"/></EOF>
		<FILE_NOT_FOUND public="1" set="null" static="1"><x path="Int"/></FILE_NOT_FOUND>
		<FILE_OPEN_ERROR public="1" set="null" static="1"><x path="Int"/></FILE_OPEN_ERROR>
		<FILE_READ_ERROR public="1" set="null" static="1"><x path="Int"/></FILE_READ_ERROR>
		<FILE_STRUCTURE_INVALID public="1" set="null" static="1"><x path="Int"/></FILE_STRUCTURE_INVALID>
		<FILE_WRITE_ERROR public="1" set="null" static="1"><x path="Int"/></FILE_WRITE_ERROR>
		<FRAGMENT_READ_ERROR public="1" set="null" static="1"><x path="Int"/></FRAGMENT_READ_ERROR>
		<GENERIC_ERROR public="1" set="null" static="1"><x path="Int"/></GENERIC_ERROR>
		<HTTP_TIME_OUT public="1" set="null" static="1"><x path="Int"/></HTTP_TIME_OUT>
		<ID3_PARSE_ERROR public="1" set="null" static="1"><x path="Int"/></ID3_PARSE_ERROR>
		<INCOMPATIBLE_RENDER_MODE public="1" set="null" static="1"><x path="Int"/></INCOMPATIBLE_RENDER_MODE>
		<INCOMPATIBLE_VERSION public="1" set="null" static="1"><x path="Int"/></INCOMPATIBLE_VERSION>
		<INTERNAL_ERROR public="1" set="null" static="1"><x path="Int"/></INTERNAL_ERROR>
		<INVALID_KEY public="1" set="null" static="1"><x path="Int"/></INVALID_KEY>
		<INVALID_OPERATION public="1" set="null" static="1"><x path="Int"/></INVALID_OPERATION>
		<INVALID_PARAMETER public="1" set="null" static="1"><x path="Int"/></INVALID_PARAMETER>
		<INVALID_REPLACE_DURATION public="1" set="null" static="1"><x path="Int"/></INVALID_REPLACE_DURATION>
		<INVALID_SEEK_TIME public="1" set="null" static="1"><x path="Int"/></INVALID_SEEK_TIME>
		<INVALID_WITH_AUDIO_ONLY_FILE public="1" set="null" static="1"><x path="Int"/></INVALID_WITH_AUDIO_ONLY_FILE>
		<IRRECOVERABLE_ERROR public="1" set="null" static="1"><x path="Int"/></IRRECOVERABLE_ERROR>
		<KEY_NOT_FOUND public="1" set="null" static="1"><x path="Int"/></KEY_NOT_FOUND>
		<KEY_SERVER_NOT_FOUND public="1" set="null" static="1"><x path="Int"/></KEY_SERVER_NOT_FOUND>
		<LISTENER_NOT_FOUND public="1" set="null" static="1"><x path="Int"/></LISTENER_NOT_FOUND>
		<LIVE_HOLD public="1" set="null" static="1"><x path="Int"/></LIVE_HOLD>
		<LIVE_WINDOW_MOVED_BACKWARD public="1" set="null" static="1"><x path="Int"/></LIVE_WINDOW_MOVED_BACKWARD>
		<LOST_CONNECTION_RECOVERABLE public="1" set="null" static="1"><x path="Int"/></LOST_CONNECTION_RECOVERABLE>
		<MAIN_MANIFEST_UPDATE_TO_BE_HANDLED public="1" set="null" static="1"><x path="Int"/></MAIN_MANIFEST_UPDATE_TO_BE_HANDLED>
		<MANIFEST_FILE_UNEXPECTEDLY_CHANGED public="1" set="null" static="1"><x path="Int"/></MANIFEST_FILE_UNEXPECTEDLY_CHANGED>
		<NETWORK_DOWN public="1" set="null" static="1"><x path="Int"/></NETWORK_DOWN>
		<NETWORK_ERROR public="1" set="null" static="1"><x path="Int"/></NETWORK_ERROR>
		<NETWORK_UNAVAILABLE public="1" set="null" static="1"><x path="Int"/></NETWORK_UNAVAILABLE>
		<NOT_IMPLEMENTED public="1" set="null" static="1"><x path="Int"/></NOT_IMPLEMENTED>
		<NO_AUDIO_SINK public="1" set="null" static="1"><x path="Int"/></NO_AUDIO_SINK>
		<NO_FIXED_SIZE public="1" set="null" static="1"><x path="Int"/></NO_FIXED_SIZE>
		<NO_TIMELINE public="1" set="null" static="1"><x path="Int"/></NO_TIMELINE>
		<NO_USEABLE_BITRATE_PROFILE public="1" set="null" static="1"><x path="Int"/></NO_USEABLE_BITRATE_PROFILE>
		<NULL_OPERATION public="1" set="null" static="1"><x path="Int"/></NULL_OPERATION>
		<ONLY_ALLOWED_IN_PAUSED_STATE public="1" set="null" static="1"><x path="Int"/></ONLY_ALLOWED_IN_PAUSED_STATE>
		<OPERATION_ABORTED public="1" set="null" static="1"><x path="Int"/></OPERATION_ABORTED>
		<OUT_OF_MEMORY public="1" set="null" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<OVERFLOW public="1" set="null" static="1"><x path="Int"/></OVERFLOW>
		<PARSE_ERROR public="1" set="null" static="1"><x path="Int"/></PARSE_ERROR>
		<PARTIAL_REPLACEMENT public="1" set="null" static="1"><x path="Int"/></PARTIAL_REPLACEMENT>
		<PERIOD_HOLD public="1" set="null" static="1"><x path="Int"/></PERIOD_HOLD>
		<PERIOD_NOT_LOADED public="1" set="null" static="1"><x path="Int"/></PERIOD_NOT_LOADED>
		<PLAYBACK_NOT_ENABLED public="1" set="null" static="1"><x path="Int"/></PLAYBACK_NOT_ENABLED>
		<POSTROLL_WITH_LIVE_NOT_ALLOWED public="1" set="null" static="1"><x path="Int"/></POSTROLL_WITH_LIVE_NOT_ALLOWED>
		<PREVIOUS_STEP_SEEK_IN_PROGRESS public="1" set="null" static="1"><x path="Int"/></PREVIOUS_STEP_SEEK_IN_PROGRESS>
		<PROTOCOL_NOT_SUPPORTED public="1" set="null" static="1"><x path="Int"/></PROTOCOL_NOT_SUPPORTED>
		<RANGE_ERROR public="1" set="null" static="1"><x path="Int"/></RANGE_ERROR>
		<RANGE_SPANS_READHEAD public="1" set="null" static="1"><x path="Int"/></RANGE_SPANS_READHEAD>
		<RENDITION_M3U8_ERROR public="1" set="null" static="1"><x path="Int"/></RENDITION_M3U8_ERROR>
		<REPLACEMENT_FAILED public="1" set="null" static="1"><x path="Int"/></REPLACEMENT_FAILED>
		<RESOURCE_NOT_SPECIFIED public="1" set="null" static="1"><x path="Int"/></RESOURCE_NOT_SPECIFIED>
		<SECURITY_ERROR public="1" set="null" static="1"><x path="Int"/></SECURITY_ERROR>
		<SEEK_FAILED public="1" set="null" static="1"><x path="Int"/></SEEK_FAILED>
		<SEGMENT_SKIPPED_ON_FAILURE public="1" set="null" static="1"><x path="Int"/></SEGMENT_SKIPPED_ON_FAILURE>
		<SIZE_UNKNOWN public="1" set="null" static="1"><x path="Int"/></SIZE_UNKNOWN>
		<SPS_PPS_FOUND_OUTSIDE_AVCC public="1" set="null" static="1"><x path="Int"/></SPS_PPS_FOUND_OUTSIDE_AVCC>
		<SUCCESS public="1" set="null" static="1"><x path="Int"/></SUCCESS>
		<SWITCH_TO_ASYMMETRIC_PROFILE public="1" set="null" static="1"><x path="Int"/></SWITCH_TO_ASYMMETRIC_PROFILE>
		<TIMELINE_TOO_SHORT public="1" set="null" static="1"><x path="Int"/></TIMELINE_TOO_SHORT>
		<UNDERFLOW public="1" set="null" static="1"><x path="Int"/></UNDERFLOW>
		<UNREPORTED_TIME_DISCONTINUITY_FOUND public="1" set="null" static="1"><x path="Int"/></UNREPORTED_TIME_DISCONTINUITY_FOUND>
		<UNSUPPORTED_CONFIGURATION public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_CONFIGURATION>
		<UNSUPPORTED_HLS_VERSION public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_HLS_VERSION>
		<UNSUPPORTED_OPERATION public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_OPERATION>
		<VIDEO_PROFILE_NOT_SUPPORTED public="1" set="null" static="1"><x path="Int"/></VIDEO_PROFILE_NOT_SUPPORTED>
		<WAITING_FOR_INIT public="1" set="null" static="1"><x path="Int"/></WAITING_FOR_INIT>
		<result public="1" set="null"><x path="Int"/></result>
		<new public="1" set="method"><f a="inResult">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVSource" params="" file="/usr/local/lib/haxe/std/flash/media/AVSource.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVStream" params="" file="/usr/local/lib/haxe/std/flash/media/AVStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<HARDWARE public="1" set="null" static="1"><c path="String"/></HARDWARE>
		<SOFTWARE public="1" set="null" static="1"><c path="String"/></SOFTWARE>
		<UNDEFINED public="1" set="null" static="1"><c path="String"/></UNDEFINED>
		<backBufferLength public="1" set="null"><x path="Float"/></backBufferLength>
		<backBufferTime public="1" get="null"><x path="Float"/></backBufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<bufferTime public="1" get="null"><x path="Float"/></bufferTime>
		<captionStyle public="1" get="null"><c path="flash.media.AVCaptionStyle"/></captionStyle>
		<captionsEnabled public="1"><x path="Bool"/></captionsEnabled>
		<clientLivePoint public="1" set="null"><x path="Float"/></clientLivePoint>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<decoderType public="1" set="null"><c path="String"/></decoderType>
		<droppedFrames public="1" set="null"><x path="Int"/></droppedFrames>
		<frameTime public="1" set="null"><x path="Float"/></frameTime>
		<initialBufferTime public="1" get="null"><x path="Float"/></initialBufferTime>
		<playState public="1" set="null"><c path="flash.media.AVPlayState"/></playState>
		<renderType public="1" set="null"><c path="String"/></renderType>
		<time public="1" set="null"><x path="Float"/></time>
		<useHardwareDecoder public="1"><x path="Bool"/></useHardwareDecoder>
		<volume public="1"><x path="Float"/></volume>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<fastForward public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></fastForward>
		<pause public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></pause>
		<play public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></play>
		<resume public="1" set="method"><f a=""><x path="Bool"/></f></resume>
		<rewind public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></rewind>
		<seek public="1" set="method">
			<f a="offset:?inBufferSeek" v=":true">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{ inBufferSeek : true }</e></m></meta>
		</seek>
		<seekToKeyFrame public="1" set="method">
			<f a="offset:?inBufferSeek" v=":true">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{ inBufferSeek : true }</e></m></meta>
		</seekToKeyFrame>
		<seekToLivePoint public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></seekToLivePoint>
		<seekToLocalTime public="1" set="method"><f a="periodIndex:time">
	<x path="Int"/>
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></seekToLocalTime>
		<setPlaySpeed public="1" set="method"><f a="speed:reserved">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setPlaySpeed>
		<step public="1" set="method"><f a="frames">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></step>
		<new public="1" set="method"><f a="source">
	<c path="flash.media.AVSource"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.Camera" params="" file="/usr/local/lib/haxe/std/flash/media/Camera.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<_scanHardware public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<fps public="1" set="null"><x path="Float"/></fps>
		<height public="1" set="null"><x path="Int"/></height>
		<index public="1" set="null"><x path="Int"/></index>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<loopback public="1" set="null"><x path="Bool"/></loopback>
		<motionLevel public="1" set="null"><x path="Int"/></motionLevel>
		<motionTimeout public="1" set="null"><x path="Int"/></motionTimeout>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<position public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</position>
		<quality public="1" set="null"><x path="Int"/></quality>
		<width public="1" set="null"><x path="Int"/></width>
		<copyToByteArray public="1" set="method">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToByteArray>
		<copyToVector public="1" set="method">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToVector>
		<drawToBitmapData public="1" set="method">
			<f a="destination">
				<c path="flash.display.BitmapData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</drawToBitmapData>
		<setCursor public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></setCursor>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setLoopback public="1" set="method">
			<f a="?compress" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ compress : false }</e></m></meta>
		</setLoopback>
		<setMode public="1" set="method">
			<f a="width:height:fps:?favorArea" v=":::true">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ favorArea : true }</e></m></meta>
		</setMode>
		<setMotionLevel public="1" set="method">
			<f a="motionLevel:?timeout" v=":2000">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 2000 }</e></m></meta>
		</setMotionLevel>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.Microphone" params="" file="/usr/local/lib/haxe/std/flash/media/Microphone.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<getEnhancedMicrophone public="1" set="method" static="1">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta>
				<m n=":value"><e>{ index : -1 }</e></m>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
		</getMicrophone>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<codec public="1">
			<e path="flash.media.SoundCodec"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</codec>
		<enableVAD public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</enableVAD>
		<encodeQuality public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</encodeQuality>
		<enhancedOptions public="1">
			<c path="flash.media.MicrophoneEnhancedOptions"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</enhancedOptions>
		<framesPerPacket public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</framesPerPacket>
		<gain public="1"><x path="Float"/></gain>
		<index public="1" set="null"><x path="Int"/></index>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<noiseSuppressionLevel public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</noiseSuppressionLevel>
		<rate public="1"><x path="Int"/></rate>
		<silenceLevel public="1" set="null"><x path="Float"/></silenceLevel>
		<silenceTimeout public="1" set="null"><x path="Int"/></silenceTimeout>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useEchoSuppression public="1" set="null"><x path="Bool"/></useEchoSuppression>
		<setLoopBack public="1" set="method">
			<f a="?state" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ state : true }</e></m></meta>
		</setLoopBack>
		<setSilenceLevel public="1" set="method">
			<f a="silenceLevel:?timeout" v=":-1">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ timeout : -1 }</e></m></meta>
		</setSilenceLevel>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<x path="Bool"/>
	<x path="Void"/>
</f></setUseEchoSuppression>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.media.MicrophoneEnhancedMode" params="" file="/usr/local/lib/haxe/std/flash/media/MicrophoneEnhancedMode.hx">
		<FULL_DUPLEX/>
		<HALF_DUPLEX/>
		<HEADSET/>
		<OFF/>
		<SPEAKER_MUTE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</enum>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="/usr/local/lib/haxe/std/flash/media/MicrophoneEnhancedOptions.hx" extern="1">
		<autoGain public="1"><x path="Bool"/></autoGain>
		<echoPath public="1"><x path="Int"/></echoPath>
		<isVoiceDetected public="1"><x path="Int"/></isVoiceDetected>
		<mode public="1"><e path="flash.media.MicrophoneEnhancedMode"/></mode>
		<nonLinearProcessing public="1"><x path="Bool"/></nonLinearProcessing>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</class>
	<enum path="flash.media.SoundCodec" params="" file="/usr/local/lib/haxe/std/flash/media/SoundCodec.hx">
		<NELLYMOSER/>
		<PCMA/>
		<PCMU/>
		<SPEEX/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.media.SoundTransform" params="" file="/usr/local/lib/haxe/std/flash/media/SoundTransform.hx" extern="1">
		<leftToLeft public="1"><x path="Float"/></leftToLeft>
		<leftToRight public="1"><x path="Float"/></leftToRight>
		<pan public="1"><x path="Float"/></pan>
		<rightToLeft public="1"><x path="Float"/></rightToLeft>
		<rightToRight public="1"><x path="Float"/></rightToRight>
		<volume public="1"><x path="Float"/></volume>
		<new public="1" set="method">
			<f a="?vol:?panning" v="1:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ panning : 0, vol : 1 }</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.StageVideo" params="" file="/usr/local/lib/haxe/std/flash/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<colorSpaces public="1" set="null"><c path="flash.Vector"><c path="String"/></c></colorSpaces>
		<depth public="1"><x path="Int"/></depth>
		<pan public="1"><c path="flash.geom.Point"/></pan>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<viewPort public="1"><c path="flash.geom.Rectangle"/></viewPort>
		<zoom public="1"><c path="flash.geom.Point"/></zoom>
		<attachAVStream public="1">
			<f a="avStream">
				<c path="flash.media.AVStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</attachAVStream>
		<attachCamera public="1" set="method">
			<f a="theCamera">
				<c path="flash.media.Camera"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.media.VideoStreamSettings" params="" file="/usr/local/lib/haxe/std/flash/media/VideoStreamSettings.hx" extern="1">
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<codec public="1" set="null"><c path="String"/></codec>
		<fps public="1" set="null"><x path="Float"/></fps>
		<height public="1" set="null"><x path="Int"/></height>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<quality public="1" set="null"><x path="Int"/></quality>
		<width public="1" set="null"><x path="Int"/></width>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setMode public="1" set="method"><f a="width:height:fps">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setMode>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetConnection" params="" file="/usr/local/lib/haxe/std/flash/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<client public="1"><d/></client>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<connectedProxyType public="1" set="null"><c path="String"/></connectedProxyType>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<maxPeerConnections public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPeerConnections>
		<nearID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearID>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<protocol public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</protocol>
		<proxyType public="1"><c path="String"/></proxyType>
		<unconnectedPeerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unconnectedPeerStreams>
		<uri public="1" set="null"><c path="String"/></uri>
		<usingTLS public="1" set="null"><x path="Bool"/></usingTLS>
		<addHeader public="1" set="method">
			<f a="operation:?mustUnderstand:?param" v=":false:">
				<c path="String"/>
				<x path="Bool"/>
				<t path="flash.utils.Object"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mustUnderstand : false }</e></m></meta>
		</addHeader>
		<call public="1" set="method"><f a="command:responder:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></call>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="command:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></connect>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStream" params="" file="/usr/local/lib/haxe/std/flash/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</DIRECT_CONNECTIONS>
		<resetDRMVouchers public="1" set="method" static="1"><f a=""><x path="Void"/></f></resetDRMVouchers>
		<audioCodec public="1" set="null"><x path="UInt"/></audioCodec>
		<audioReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioReliable>
		<audioSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioSampleAccess>
		<backBufferLength public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferLength>
		<backBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<bufferTime public="1"><x path="Float"/></bufferTime>
		<bufferTimeMax public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</bufferTimeMax>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<client public="1"><d/></client>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<dataReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</dataReliable>
		<decodedFrames public="1" set="null"><x path="UInt"/></decodedFrames>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<inBufferSeek public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</inBufferSeek>
		<info public="1" set="null">
			<c path="flash.net.NetStreamInfo"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</info>
		<liveDelay public="1" set="null"><x path="Float"/></liveDelay>
		<maxPauseBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPauseBufferTime>
		<multicastAvailabilitySendToAll public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilitySendToAll>
		<multicastAvailabilityUpdatePeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilityUpdatePeriod>
		<multicastFetchPeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastFetchPeriod>
		<multicastInfo public="1" set="null">
			<c path="flash.net.NetStreamMulticastInfo"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastInfo>
		<multicastPushNeighborLimit public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastPushNeighborLimit>
		<multicastRelayMarginDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastRelayMarginDuration>
		<multicastWindowDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastWindowDuration>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<objectEncoding public="1" set="null"><x path="UInt"/></objectEncoding>
		<peerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</peerStreams>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<time public="1" set="null"><x path="Float"/></time>
		<useHardwareDecoder public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</useHardwareDecoder>
		<useJitterBuffer public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</useJitterBuffer>
		<videoCodec public="1" set="null"><x path="UInt"/></videoCodec>
		<videoReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoReliable>
		<videoSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoSampleAccess>
		<videoStreamSettings public="1">
			<c path="flash.media.VideoStreamSettings"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</videoStreamSettings>
		<appendBytes public="1" set="method">
			<f a="bytes">
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytes>
		<appendBytesAction public="1" set="method">
			<f a="netStreamAppendBytesAction">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytesAction>
		<attach public="1" set="method">
			<f a="connection">
				<c path="flash.net.NetConnection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</attach>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<x path="Void"/>
</f></attachAudio>
		<attachCamera public="1" set="method">
			<f a="theCamera:?snapshotMilliseconds" v=":-1">
				<c path="flash.media.Camera"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ snapshotMilliseconds : -1 }</e></m></meta>
		</attachCamera>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</dispose>
		<onPeerConnect public="1" set="method">
			<f a="subscriber">
				<c path="flash.net.NetStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</onPeerConnect>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<play public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></play>
		<play2 public="1" set="method">
			<f a="param">
				<c path="flash.net.NetStreamPlayOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</play2>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></publish>
		<receiveAudio public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveAudio>
		<receiveVideo public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveVideo>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<x path="Float"/>
	<x path="Void"/>
</f></receiveVideoFPS>
		<resume public="1" set="method"><f a=""><x path="Void"/></f></resume>
		<seek public="1" set="method"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></seek>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></send>
		<step public="1" set="method">
			<f a="frames">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</step>
		<togglePause public="1" set="method"><f a=""><x path="Void"/></f></togglePause>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.NetStreamInfo" params="" file="/usr/local/lib/haxe/std/flash/net/NetStreamInfo.hx" extern="1">
		<SRTT public="1" set="null"><x path="Float"/></SRTT>
		<audioBufferByteLength public="1" set="null"><x path="Float"/></audioBufferByteLength>
		<audioBufferLength public="1" set="null"><x path="Float"/></audioBufferLength>
		<audioByteCount public="1" set="null"><x path="Float"/></audioByteCount>
		<audioBytesPerSecond public="1" set="null"><x path="Float"/></audioBytesPerSecond>
		<audioLossRate public="1" set="null"><x path="Float"/></audioLossRate>
		<byteCount public="1" set="null"><x path="Float"/></byteCount>
		<currentBytesPerSecond public="1" set="null"><x path="Float"/></currentBytesPerSecond>
		<dataBufferByteLength public="1" set="null"><x path="Float"/></dataBufferByteLength>
		<dataBufferLength public="1" set="null"><x path="Float"/></dataBufferLength>
		<dataByteCount public="1" set="null"><x path="Float"/></dataByteCount>
		<dataBytesPerSecond public="1" set="null"><x path="Float"/></dataBytesPerSecond>
		<droppedFrames public="1" set="null"><x path="Float"/></droppedFrames>
		<isLive public="1" set="null"><x path="Bool"/></isLive>
		<maxBytesPerSecond public="1" set="null"><x path="Float"/></maxBytesPerSecond>
		<metaData public="1" set="null"><d/></metaData>
		<playbackBytesPerSecond public="1" set="null"><x path="Float"/></playbackBytesPerSecond>
		<resourceName public="1" set="null"><c path="String"/></resourceName>
		<uri public="1" set="null"><c path="String"/></uri>
		<videoBufferByteLength public="1" set="null"><x path="Float"/></videoBufferByteLength>
		<videoBufferLength public="1" set="null"><x path="Float"/></videoBufferLength>
		<videoByteCount public="1" set="null"><x path="Float"/></videoByteCount>
		<videoBytesPerSecond public="1" set="null"><x path="Float"/></videoBytesPerSecond>
		<videoLossRate public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoLossRate>
		<xmpData public="1" set="null"><d/></xmpData>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive" v="::::::::::::::::::::::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ isLive : true }</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="/usr/local/lib/haxe/std/flash/net/NetStreamMulticastInfo.hx" extern="1">
		<bytesPushedFromPeers public="1" set="null"><x path="Float"/></bytesPushedFromPeers>
		<bytesPushedToPeers public="1" set="null"><x path="Float"/></bytesPushedToPeers>
		<bytesReceivedFromIPMulticast public="1" set="null"><x path="Float"/></bytesReceivedFromIPMulticast>
		<bytesReceivedFromServer public="1" set="null"><x path="Float"/></bytesReceivedFromServer>
		<bytesRequestedByPeers public="1" set="null"><x path="Float"/></bytesRequestedByPeers>
		<bytesRequestedFromPeers public="1" set="null"><x path="Float"/></bytesRequestedFromPeers>
		<fragmentsPushedFromPeers public="1" set="null"><x path="Float"/></fragmentsPushedFromPeers>
		<fragmentsPushedToPeers public="1" set="null"><x path="Float"/></fragmentsPushedToPeers>
		<fragmentsReceivedFromIPMulticast public="1" set="null"><x path="Float"/></fragmentsReceivedFromIPMulticast>
		<fragmentsReceivedFromServer public="1" set="null"><x path="Float"/></fragmentsReceivedFromServer>
		<fragmentsRequestedByPeers public="1" set="null"><x path="Float"/></fragmentsRequestedByPeers>
		<fragmentsRequestedFromPeers public="1" set="null"><x path="Float"/></fragmentsRequestedFromPeers>
		<receiveControlBytesPerSecond public="1" set="null"><x path="Float"/></receiveControlBytesPerSecond>
		<receiveDataBytesPerSecond public="1" set="null"><x path="Float"/></receiveDataBytesPerSecond>
		<receiveDataBytesPerSecondFromIPMulticast public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecondFromServer public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromServer>
		<sendControlBytesPerSecond public="1" set="null"><x path="Float"/></sendControlBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" set="null"><x path="Float"/></sendControlBytesPerSecondToServer>
		<sendDataBytesPerSecond public="1" set="null"><x path="Float"/></sendDataBytesPerSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="/usr/local/lib/haxe/std/flash/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<len public="1"><x path="Float"/></len>
		<offset public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</offset>
		<oldStreamName public="1"><c path="String"/></oldStreamName>
		<start public="1"><x path="Float"/></start>
		<streamName public="1"><c path="String"/></streamName>
		<transition public="1"><c path="String"/></transition>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.net.Responder" params="" file="/usr/local/lib/haxe/std/flash/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<x path="Void"/>
</f></new></class>
	<class path="flash.net.URLRequest" params="" file="/usr/local/lib/haxe/std/flash/net/URLRequest.hx" extern="1">
		<contentType public="1"><c path="String"/></contentType>
		<data public="1"><d/></data>
		<digest public="1"><c path="String"/></digest>
		<method public="1"><c path="String"/></method>
		<requestHeaders public="1"><c path="Array"><c path="flash.net.URLRequestHeader"/></c></requestHeaders>
		<url public="1"><c path="String"/></url>
		<useRedirectedURL public="1" set="method">
			<f a="sourceRequest:?wholeURL:?pattern:?replace" v=":false::">
				<c path="flash.net.URLRequest"/>
				<x path="Bool"/>
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ wholeURL : false }</e></m></meta>
		</useRedirectedURL>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="/usr/local/lib/haxe/std/flash/net/URLRequestHeader.hx" extern="1">
		<name public="1"><c path="String"/></name>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="/usr/local/lib/haxe/std/flash/system/ApplicationDomain.hx" extern="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" set="null" static="1"><c path="flash.system.ApplicationDomain"/></currentDomain>
		<domainMemory public="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</domainMemory>
		<parentDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></parentDomain>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getDefinition>
		<getQualifiedDefinitionNames public="1" set="method">
			<f a=""><c path="flash.Vector"><c path="String"/></c></f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</getQualifiedDefinitionNames>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDefinition>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.system.ImageDecodingPolicy" params="" file="/usr/local/lib/haxe/std/flash/system/ImageDecodingPolicy.hx">
		<ON_DEMAND/>
		<ON_LOAD/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.system.LoaderContext" params="" file="/usr/local/lib/haxe/std/flash/system/LoaderContext.hx" extern="1">
		<allowCodeImport public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowCodeImport>
		<allowLoadBytesCodeExecution public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowLoadBytesCodeExecution>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<imageDecodingPolicy public="1">
			<e path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</imageDecodingPolicy>
		<parameters public="1">
			<d/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</parameters>
		<requestedContentParent public="1">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestedContentParent>
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<new public="1" set="method">
			<f a="?checkPolicyFile:?applicationDomain:?securityDomain" v="false::">
				<x path="Bool"/>
				<c path="flash.system.ApplicationDomain"/>
				<c path="flash.system.SecurityDomain"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ checkPolicyFile : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="/usr/local/lib/haxe/std/flash/system/SecurityDomain.hx" extern="1">
		<currentDomain public="1" set="null" static="1"><c path="flash.system.SecurityDomain"/></currentDomain>
		<domainID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</domainID>
	</class>
	<enum path="flash.text.AntiAliasType" params="" file="/usr/local/lib/haxe/std/flash/text/AntiAliasType.hx">
		<ADVANCED/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.GridFitType" params="" file="/usr/local/lib/haxe/std/flash/text/GridFitType.hx">
		<NONE/>
		<PIXEL/>
		<SUBPIXEL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.StyleSheet" params="" file="/usr/local/lib/haxe/std/flash/text/StyleSheet.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<styleNames public="1" set="null"><c path="Array"><d/></c></styleNames>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<getStyle public="1" set="method"><f a="styleName">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getStyle>
		<parseCSS public="1" set="method"><f a="CSSText">
	<c path="String"/>
	<x path="Void"/>
</f></parseCSS>
		<setStyle public="1" set="method"><f a="styleName:styleObject">
	<c path="String"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></setStyle>
		<transform public="1" set="method"><f a="formatObject">
	<t path="flash.utils.Object"/>
	<c path="flash.text.TextFormat"/>
</f></transform>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.text.TextField" params="" file="/usr/local/lib/haxe/std/flash/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<isFontCompatible public="1" set="method" static="1">
			<f a="fontName:fontStyle">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isFontCompatible>
		<alwaysShowSelection public="1"><x path="Bool"/></alwaysShowSelection>
		<antiAliasType public="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<autoSize public="1"><e path="flash.text.TextFieldAutoSize"/></autoSize>
		<background public="1"><x path="Bool"/></background>
		<backgroundColor public="1"><x path="UInt"/></backgroundColor>
		<border public="1"><x path="Bool"/></border>
		<borderColor public="1"><x path="UInt"/></borderColor>
		<bottomScrollV public="1" set="null"><x path="Int"/></bottomScrollV>
		<caretIndex public="1" set="null"><x path="Int"/></caretIndex>
		<condenseWhite public="1"><x path="Bool"/></condenseWhite>
		<defaultTextFormat public="1"><c path="flash.text.TextFormat"/></defaultTextFormat>
		<displayAsPassword public="1"><x path="Bool"/></displayAsPassword>
		<embedFonts public="1"><x path="Bool"/></embedFonts>
		<gridFitType public="1"><e path="flash.text.GridFitType"/></gridFitType>
		<htmlText public="1"><c path="String"/></htmlText>
		<length public="1" set="null"><x path="Int"/></length>
		<maxChars public="1"><x path="Int"/></maxChars>
		<maxScrollH public="1" set="null"><x path="Int"/></maxScrollH>
		<maxScrollV public="1" set="null"><x path="Int"/></maxScrollV>
		<mouseWheelEnabled public="1"><x path="Bool"/></mouseWheelEnabled>
		<multiline public="1"><x path="Bool"/></multiline>
		<numLines public="1" set="null"><x path="Int"/></numLines>
		<restrict public="1"><c path="String"/></restrict>
		<scrollH public="1"><x path="Int"/></scrollH>
		<scrollV public="1"><x path="Int"/></scrollV>
		<selectable public="1"><x path="Bool"/></selectable>
		<selectedText public="1" set="null"><c path="String"/></selectedText>
		<selectionBeginIndex public="1" set="null"><x path="Int"/></selectionBeginIndex>
		<selectionEndIndex public="1" set="null"><x path="Int"/></selectionEndIndex>
		<sharpness public="1"><x path="Float"/></sharpness>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<text public="1"><c path="String"/></text>
		<textColor public="1"><x path="UInt"/></textColor>
		<textHeight public="1" set="null"><x path="Float"/></textHeight>
		<textInteractionMode public="1" set="null">
			<e path="flash.text.TextInteractionMode"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</textInteractionMode>
		<textWidth public="1" set="null"><x path="Float"/></textWidth>
		<thickness public="1"><x path="Float"/></thickness>
		<type public="1"><e path="flash.text.TextFieldType"/></type>
		<useRichTextClipboard public="1"><x path="Bool"/></useRichTextClipboard>
		<wordWrap public="1"><x path="Bool"/></wordWrap>
		<appendText public="1" set="method"><f a="newText">
	<c path="String"/>
	<x path="Void"/>
</f></appendText>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<getCharBoundaries public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getCharBoundaries>
		<getCharIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getCharIndexAtPoint>
		<getFirstCharInParagraph public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getFirstCharInParagraph>
		<getImageReference public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getImageReference>
		<getLineIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getLineIndexAtPoint>
		<getLineIndexOfChar public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineIndexOfChar>
		<getLineLength public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineLength>
		<getLineMetrics public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineOffset public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineOffset>
		<getLineText public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getParagraphLength public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getParagraphLength>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getTextFormat public="1" set="method">
			<f a="?beginIndex:?endIndex" v="-1:-1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.text.TextFormat"/>
			</f>
			<meta><m n=":value"><e>{ endIndex : -1, beginIndex : -1 }</e></m></meta>
		</getTextFormat>
		<getTextRuns public="1" set="method">
			<f a="?beginIndex:?endIndex" v="0:2147483647">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":value"><e>{ endIndex : 2147483647, beginIndex : 0 }</e></m></meta>
		</getTextRuns>
		<getXMLText public="1" set="method">
			<f a="?beginIndex:?endIndex" v="0:2147483647">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ endIndex : 2147483647, beginIndex : 0 }</e></m></meta>
		</getXMLText>
		<insertXMLText public="1" set="method">
			<f a="beginIndex:endIndex:richText:?pasting" v=":::false">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pasting : false }</e></m></meta>
		</insertXMLText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<x path="Bool"/>
</f></pasteRichText>
		<replaceSelectedText public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></replaceSelectedText>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceText>
		<setSelection public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSelection>
		<setTextFormat public="1" set="method">
			<f a="format:?beginIndex:?endIndex" v=":-1:-1">
				<c path="flash.text.TextFormat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endIndex : -1, beginIndex : -1 }</e></m></meta>
		</setTextFormat>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.text.TextFieldAutoSize" params="" file="/usr/local/lib/haxe/std/flash/text/TextFieldAutoSize.hx">
		<CENTER/>
		<LEFT/>
		<NONE/>
		<RIGHT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextFieldType" params="" file="/usr/local/lib/haxe/std/flash/text/TextFieldType.hx">
		<DYNAMIC/>
		<INPUT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextFormat" params="" file="/usr/local/lib/haxe/std/flash/text/TextFormat.hx" extern="1">
		<align public="1"><e path="flash.text.TextFormatAlign"/></align>
		<blockIndent public="1"><t path="Null"><x path="Float"/></t></blockIndent>
		<bold public="1"><t path="Null"><x path="Bool"/></t></bold>
		<bullet public="1"><t path="Null"><x path="Bool"/></t></bullet>
		<color public="1"><t path="Null"><x path="UInt"/></t></color>
		<display public="1"><e path="flash.text.TextFormatDisplay"/></display>
		<font public="1"><c path="String"/></font>
		<indent public="1"><t path="Null"><x path="Float"/></t></indent>
		<italic public="1"><t path="Null"><x path="Bool"/></t></italic>
		<kerning public="1"><t path="Null"><x path="Bool"/></t></kerning>
		<leading public="1"><t path="Null"><x path="Float"/></t></leading>
		<leftMargin public="1"><t path="Null"><x path="Float"/></t></leftMargin>
		<letterSpacing public="1"><t path="Null"><x path="Float"/></t></letterSpacing>
		<rightMargin public="1"><t path="Null"><x path="Float"/></t></rightMargin>
		<size public="1"><t path="Null"><x path="Float"/></t></size>
		<tabStops public="1"><c path="Array"><x path="UInt"/></c></tabStops>
		<target public="1"><c path="String"/></target>
		<underline public="1"><t path="Null"><x path="Bool"/></t></underline>
		<url public="1"><c path="String"/></url>
		<new public="1" set="method">
			<f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading" v=":0:0:false:false:false::::0:0:0:0">
				<c path="String"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<e path="flash.text.TextFormatAlign"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ leading : 0, indent : 0, rightMargin : 0, leftMargin : 0, underline : false, italic : false, bold : false, color : 0, size : 0 }</e></m></meta>
		</new>
	</class>
	<enum path="flash.text.TextFormatAlign" params="" file="/usr/local/lib/haxe/std/flash/text/TextFormatAlign.hx">
		<CENTER/>
		<END/>
		<JUSTIFY/>
		<LEFT/>
		<RIGHT/>
		<START/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextFormatDisplay" params="" file="/usr/local/lib/haxe/std/flash/text/TextFormatDisplay.hx">
		<BLOCK/>
		<INLINE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextInteractionMode" params="" file="/usr/local/lib/haxe/std/flash/text/TextInteractionMode.hx">
		<NORMAL/>
		<SELECTION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextLineMetrics" params="" file="/usr/local/lib/haxe/std/flash/text/TextLineMetrics.hx" extern="1">
		<ascent public="1"><x path="Float"/></ascent>
		<descent public="1"><x path="Float"/></descent>
		<height public="1"><x path="Float"/></height>
		<leading public="1"><x path="Float"/></leading>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<new public="1" set="method"><f a="x:width:height:ascent:descent:leading">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="/usr/local/lib/haxe/std/flash/text/TextSnapshot.hx" extern="1">
		<charCount public="1" set="null"><x path="Int"/></charCount>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></findText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></getSelected>
		<getSelectedText public="1" set="method">
			<f a="?includeLineEndings" v="false">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ includeLineEndings : false }</e></m></meta>
		</getSelectedText>
		<getText public="1" set="method">
			<f a="beginIndex:endIndex:?includeLineEndings" v="::false">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ includeLineEndings : false }</e></m></meta>
		</getText>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<hitTestTextNearPos public="1" set="method">
			<f a="x:y:?maxDistance" v="::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ maxDistance : 0 }</e></m></meta>
		</hitTestTextNearPos>
		<setSelectColor public="1" set="method">
			<f a="?hexColor" v="16776960">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hexColor : 16776960 }</e></m></meta>
		</setSelectColor>
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setSelected>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenu" params="" file="/usr/local/lib/haxe/std/flash/ui/ContextMenu.hx" extern="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<builtInItems public="1"><c path="flash.ui.ContextMenuBuiltInItems"/></builtInItems>
		<clipboardItems public="1">
			<c path="flash.ui.ContextMenuClipboardItems"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardItems>
		<clipboardMenu public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardMenu>
		<customItems public="1"><c path="Array"><d/></c></customItems>
		<link public="1">
			<c path="flash.net.URLRequest"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</link>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<hideBuiltInItems public="1" set="method"><f a=""><x path="Void"/></f></hideBuiltInItems>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="/usr/local/lib/haxe/std/flash/ui/ContextMenuBuiltInItems.hx" extern="1">
		<forwardAndBack public="1"><x path="Bool"/></forwardAndBack>
		<loop public="1"><x path="Bool"/></loop>
		<play public="1"><x path="Bool"/></play>
		<print public="1"><x path="Bool"/></print>
		<quality public="1"><x path="Bool"/></quality>
		<rewind public="1"><x path="Bool"/></rewind>
		<save public="1"><x path="Bool"/></save>
		<zoom public="1"><x path="Bool"/></zoom>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="/usr/local/lib/haxe/std/flash/ui/ContextMenuClipboardItems.hx" extern="1">
		<clear public="1"><x path="Bool"/></clear>
		<copy public="1"><x path="Bool"/></copy>
		<cut public="1"><x path="Bool"/></cut>
		<paste public="1"><x path="Bool"/></paste>
		<selectAll public="1"><x path="Bool"/></selectAll>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.utils.IDataInput" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataInput.hx" extern="1" interface="1">
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
	</class>
	<class path="flash.utils.IDataInput2" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataInput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataInput"/></class>
	<class path="flash.utils.IDataOutput" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataOutput.hx" extern="1" interface="1">
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
	</class>
	<class path="flash.utils.IDataOutput2" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataOutput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataOutput"/></class>
	<class path="flash.utils.ByteArray" params="" file="/usr/local/lib/haxe/std/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput2"/>
		<implements path="flash.utils.IDataOutput2"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<length public="1"><x path="UInt"/></length>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<position public="1"><x path="UInt"/></position>
		<shareable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</shareable>
		<atomicCompareAndSwapIntAt public="1" set="method">
			<f a="byteIndex:expectedValue:newValue">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapIntAt>
		<atomicCompareAndSwapLength public="1" set="method">
			<f a="expectedLength:newLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapLength>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clear>
		<compress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></compress>
		<deflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</deflate>
		<inflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</inflate>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<uncompress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></uncompress>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.utils.CompressionAlgorithm" params="" file="/usr/local/lib/haxe/std/flash/utils/CompressionAlgorithm.hx">
		<DEFLATE/>
		<LZMA/>
		<ZLIB/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
	</enum>
	<class path="flash.utils.Dictionary" params="" file="/usr/local/lib/haxe/std/flash/utils/Dictionary.hx" extern="1"><new public="1" set="method">
	<f a="?weakKeys" v="false">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ weakKeys : false }</e></m></meta>
</new></class>
	<enum path="flash.utils.Endian" params="" file="/usr/local/lib/haxe/std/flash/utils/Endian.hx">
		<BIG_ENDIAN/>
		<LITTLE_ENDIAN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<typedef path="flash.utils.Function" params="" file="/usr/local/lib/haxe/std/flash/utils/Function.hx"><d/></typedef>
	<class path="flash.utils.Namespace" params="" file="/usr/local/lib/haxe/std/flash/utils/Namespace.hx" extern="1">
		<prefix public="1" set="null"><d/></prefix>
		<uri public="1" set="null"><c path="String"/></uri>
		<new public="1" set="method"><f a="?prefix:?uri">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="flash.utils.Object" params="" file="/usr/local/lib/haxe/std/flash/utils/Object.hx"><d/></typedef>
	<class path="flash.utils.RegExp" params="" file="/usr/local/lib/haxe/std/flash/utils/RegExp.hx" extern="1">
		<dotall public="1" set="null"><x path="Bool"/></dotall>
		<extended public="1" set="null"><x path="Bool"/></extended>
		<global public="1" set="null"><x path="Bool"/></global>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<source public="1" set="null"><c path="String"/></source>
		<exec public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</exec>
		<test public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</test>
		<new public="1" set="method"><f a="?pattern:?options">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.xml.XML" params="" file="/usr/local/lib/haxe/std/flash/xml/XML.hx" extern="1">
		<ignoreComments public="1" static="1"><x path="Bool"/></ignoreComments>
		<ignoreProcessingInstructions public="1" static="1"><x path="Bool"/></ignoreProcessingInstructions>
		<ignoreWhitespace public="1" static="1"><x path="Bool"/></ignoreWhitespace>
		<prettyIndent public="1" static="1"><x path="Int"/></prettyIndent>
		<prettyPrinting public="1" static="1"><x path="Bool"/></prettyPrinting>
		<defaultSettings public="1" set="method" static="1"><f a=""><d/></f></defaultSettings>
		<setSettings public="1" set="method" static="1"><f a="?o">
	<d/>
	<x path="Void"/>
</f></setSettings>
		<settings public="1" set="method" static="1"><f a=""><d/></f></settings>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></normalize>
		<notification public="1" set="method"><f a=""><t path="flash.utils.Function"/></f></notification>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setNotification public="1" set="method"><f a="f">
	<t path="flash.utils.Function"/>
	<d/>
</f></setNotification>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><c path="flash.xml.XMLList"/></haxe_dynamic>
	</class>
	<class path="flash.xml.XMLList" params="" file="/usr/local/lib/haxe/std/flash/xml/XMLList.hx" extern="1">
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></normalize>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="haxe.StackItem" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="77" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="156" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="224" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="233" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="260" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>Get informations about the call stack.</haxe_doc>
	</class>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which
		* is public and
		* unifies with the type used for type parameter `T`.

	If a type parameter A is assigned to a type parameter B which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<class path="haxe.IMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<t path="Null"><c path="haxe.IMap.V"/></t>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
	</class>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="50" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="63" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="96" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="108" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `enum` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="143" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="157" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="169" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `EnumValue` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
 	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
	<preIncrement get="inline" set="null" line="31" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="34" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="43" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add get="inline" set="null" line="49" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="52" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="57" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="60" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="63" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<toFloat get="inline" set="null" line="216" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<ucompare public="1" set="method" line="222" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="233" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
		<preIncrement get="inline" set="null" line="31" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="34" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="43" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add get="inline" set="null" line="49" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="52" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="60" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="63" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<toFloat get="inline" set="null" line="216" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<ucompare public="1" set="method" line="222" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="233" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<meta><m n=":notNull"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<_new get="inline" set="null" line="35" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<copy public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<make public="1" get="inline" set="null" line="47" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<ofInt public="1" get="inline" set="null" line="54" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="65" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="75" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</is>
	<getHigh public="1" get="inline" set="null" line="82" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="89" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="95" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="101" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="109" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="120" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="128" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<toString set="method" line="131" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<parseString public="1" get="inline" set="null" line="157" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" get="inline" set="null" line="161" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<divMod public="1" set="method" line="169" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<neg public="1" get="inline" set="null" line="216" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="224" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="231" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="237" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="244" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="253" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="260" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="266" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="273" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="276" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="282" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="302" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="308" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="311" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="314" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="320" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="323" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="326" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="332" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="335" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="341" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="344" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="347" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="350" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="353" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="356" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="359" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="362" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="365" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="368" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="371" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="374" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="377" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="380" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="386" static="1">
		<f a="a">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
	</complement>
	<and public="1" get="inline" set="null" line="392" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="398" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="404" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="410" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="421" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="432" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<get_high get="inline" set="null" line="440" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_high>
	<set_high get="inline" set="null" line="441" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<get_low get="inline" set="null" line="444" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_low>
	<set_low get="inline" set="null" line="445" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_low>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<_new get="inline" set="null" line="35" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<copy public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<make public="1" get="inline" set="null" line="47" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<ofInt public="1" get="inline" set="null" line="54" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="65" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="75" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</is>
		<getHigh public="1" get="inline" set="null" line="82" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="89" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="95" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="101" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="109" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="120" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="128" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<toString set="method" line="131" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<parseString public="1" get="inline" set="null" line="157" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" get="inline" set="null" line="161" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<divMod public="1" set="method" line="169" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<neg public="1" get="inline" set="null" line="216" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="224" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="231" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="237" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="244" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="253" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="260" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="266" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="273" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="276" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="282" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="302" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="308" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="311" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="314" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="320" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="323" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="326" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="332" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="335" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="341" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="344" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="347" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="350" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="353" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="356" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="359" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="362" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="365" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="368" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="371" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="374" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="377" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="380" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="386" static="1">
			<f a="a">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
		</complement>
		<and public="1" get="inline" set="null" line="392" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="398" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="404" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="410" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="421" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="432" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<high public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</high>
		<get_high get="inline" set="null" line="440" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_high>
		<set_high get="inline" set="null" line="441" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_high>
		<low public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</low>
		<get_low get="inline" set="null" line="444" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_low>
		<set_low get="inline" set="null" line="445" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_low>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>* This typedef will fool @:coreApi into thinking that we are using
  * the same underlying type, even though it might be different on
  * specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<toString public="1" set="method" line="469">
			<f a=""><c path="String"/></f>
			<haxe_doc>We also define toString here to ensure we always get a pretty string
		when tracing or calling Std.string. This tends not to happen when
		toString is only in the abstract.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="459"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.Int64Helper" params="" file="/usr/local/lib/haxe/std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="35" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="75" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="/usr/local/lib/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="47" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<clear public="1" set="dynamic" line="126" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Clears the trace output.</haxe_doc>
		</clear>
		<setColor public="1" set="dynamic" line="139" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the color of the trace output to `rgb`.</haxe_doc>
		</setColor>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/local/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<t path="Null"><c path="Array"><d/></c></t>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Utf8" params="" file="/usr/local/lib/haxe/std/haxe/Utf8.hx">
		<iter public="1" set="method" line="56" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="64" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="72" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="79" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="86" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="94" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="101" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="108" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<__b><c path="String"/></__b>
		<addChar public="1" get="inline" set="null" line="42">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="49">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
	can use this crossplatform API to perform operations on such strings.</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="/usr/local/lib/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="462" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="490" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="551" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<fastGet public="1" get="inline" set="null" line="569" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="41"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="59"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method" line="79"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="114"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method" line="133"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="161"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<getDouble public="1" get="inline" set="null" line="213">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getDouble>
		<getFloat public="1" get="inline" set="null" line="232">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getFloat>
		<setDouble public="1" get="inline" set="null" line="252">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE double precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" get="inline" set="null" line="275">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE single precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="294">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="305">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="317">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="334">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="341">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="355">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="360"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<readString public="1" get="inline" set="null" line="419">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="423"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="444"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="458"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/usr/local/lib/haxe/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<encode public="1" set="method" line="32" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="45" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<haxe_doc>Allows to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/usr/local/lib/haxe/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/BalancedTree.hx">
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="82">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="99">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="115">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="126">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<setLoop set="method" line="132"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="145"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<iteratorLoop set="method" line="153"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<keysLoop set="method" line="161"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="169"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="176"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="182"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="187"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="201"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="205"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="234">
			<f a=""><x path="Int"/></f>
			<meta><m n=":extern"/></meta>
		</get_height>
		<toString public="1" set="method" line="236"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="223">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
	</class>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="33" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="42"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="52"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
	<_new public="1" get="inline" set="null" line="35" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new HashMap.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="42" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.set`</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="50" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.get`</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="57" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.exists`</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="64" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.remove`</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="72" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.keys`</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="79" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.iterator`</haxe_doc>
	</iterator>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<_new public="1" get="inline" set="null" line="35" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new HashMap.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="42" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="50" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="57" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="64" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="72" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="79" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="87"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" get="inline" set="null" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="69">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="73">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="79">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._IntMap.IntMapKeysIterator" params="" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/IntMap.hx" private="1" module="haxe.ds.IntMap">
		<h><c path="flash.utils.Dictionary"/></h>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<hasNext public="1" get="inline" set="null" line="111">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="118">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="105"><f a="h">
	<c path="flash.utils.Dictionary"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>haxe.ds.IntMap</e></m></meta>
	</class>
	<class path="haxe.ds._IntMap.IntMapValuesIterator" params="T" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/IntMap.hx" private="1" module="haxe.ds.IntMap">
		<h><c path="flash.utils.Dictionary"/></h>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<hasNext public="1" get="inline" set="null" line="138">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="145">
			<f a=""><c path="haxe.ds._IntMap.IntMapValuesIterator.T"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="132"><f a="h">
	<c path="flash.utils.Dictionary"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>haxe.ds.IntMap</e></m></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/ObjectMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<get public="1" get="inline" set="null" line="31">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="35">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="39">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="43">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="63">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="67">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="73">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._ObjectMap.NativePropertyIterator" params="" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<iterator public="1" get="inline" set="null" line="89" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._ObjectMap.NativePropertyIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="97">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="106">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="95"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds._ObjectMap.NativeValueIterator" params="" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<iterator public="1" get="inline" set="null" line="118" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._ObjectMap.NativeValueIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="126">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="135">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="124"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="haxe.ds.Option" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
	</enum>
	<class path="haxe.ds.StringMap" params="T" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<reserved expr="{ }" line="28" static="1">
			<a/>
			<meta><m n=":value"><e>{ }</e></m></meta>
		</reserved>
		<h><d/></h>
		<rh><d/></rh>
		<isReserved get="inline" set="null" line="34">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isReserved>
		<set public="1" get="inline" set="null" line="38">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="45">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="51">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<setReserved set="method" line="57">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setReserved>
		<getReserved set="method" line="62">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getReserved>
		<existsReserved set="method" line="66">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</existsReserved>
		<remove public="1" set="method" line="71">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="105">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="109">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="115">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="30">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._StringMap.StringMapKeysIterator" params="" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<h><d/></h>
		<rh><d/></rh>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<isReserved><x path="Bool"/></isReserved>
		<hasNext public="1" get="inline" set="null" line="152">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="166">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="144"><f a="h:rh">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>haxe.ds.StringMap</e></m></meta>
	</class>
	<class path="haxe.ds._StringMap.StringMapValuesIterator" params="T" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<h><d/></h>
		<rh><d/></rh>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<hasNext public="1" get="inline" set="null" line="189">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="202">
			<f a=""><c path="haxe.ds._StringMap.StringMapValuesIterator.T"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="182"><f a="h:rh">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>haxe.ds.StringMap</e></m></meta>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/WeakMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<get public="1" get="inline" set="null" line="31">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<t path="Null"><c path="haxe.ds.WeakMap.V"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="35">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="39">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="43">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="63">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="67">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="73">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._WeakMap.NativePropertyIterator" params="" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<iterator public="1" get="inline" set="null" line="89" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._WeakMap.NativePropertyIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="97">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="106">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="95"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds._WeakMap.NativeValueIterator" params="" file="/usr/local/lib/haxe/std/flash/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<iterator public="1" get="inline" set="null" line="118" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._WeakMap.NativeValueIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="126">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="135">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="124"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="flash.utils.ByteArray"/></typedef>
	<enum path="haxe.io.Error" params="" file="/usr/local/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<typedef path="haxe.macro.Position" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Constant" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v">
			<c path="String"/>
			<haxe_doc>Represents an integer literal.</haxe_doc>
		</CInt>
		<CFloat a="f">
			<c path="String"/>
			<haxe_doc>Represents a float literal.</haxe_doc>
		</CFloat>
		<CString a="s">
			<c path="String"/>
			<haxe_doc>Represents a string literal.</haxe_doc>
		</CString>
		<CIdent a="s">
			<c path="String"/>
			<haxe_doc>Represents an indentifier.</haxe_doc>
		</CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a regular expression literal.

		Example: `~/haxe/i`
		 * The first argument _haxe_ is a string with regular expression pattern.
		 * The second argument _i_ is a string with regular expression flags.

		@see https://haxe.org/manual/std-regex.html</haxe_doc>
		</CRegexp>
		<haxe_doc>Represents a constant.
	@see https://haxe.org/manual/expression-constants.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=`
		`-=`
		`/=`
		`*=`
		`<<=`
		`>>=`
		`>>>=`
		`|=`
		`&=`
		`^=`
		`%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<haxe_doc>A binary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<haxe_doc>A unary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<e path="haxe.macro.ComplexType"/>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ExprDef" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c">
			<e path="haxe.macro.Constant"/>
			<haxe_doc>A constant.</haxe_doc>
		</EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
			<haxe_doc>Field access on `e.field`.</haxe_doc>
		</EField>
		<EParenthesis a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</EParenthesis>
		<EObjectDecl a="fields">
			<c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</EObjectDecl>
		<EArrayDecl a="values">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A call `e(params)`.</haxe_doc>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A constructor call `new t(params)`.</haxe_doc>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</EUnop>
		<EVars a="vars">
			<c path="Array"><t path="haxe.macro.Var"/></c>
			<haxe_doc>Variable declarations.</haxe_doc>
		</EVars>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</EFunction>
		<EBlock a="exprs">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A block of expressions `{exprs}`.</haxe_doc>
		</EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</EFor>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(e1 in e2)` expression.</haxe_doc>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
			<haxe_doc>Represents a `switch` expression with related cases and an optional.
		`default` case if edef != null.</haxe_doc>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</ETry>
		<EReturn a="?e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</EReturn>
		<EBreak><haxe_doc>A `break` expression.</haxe_doc></EBreak>
		<EContinue><haxe_doc>A `continue` expression.</haxe_doc></EContinue>
		<EUntyped a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An `untyped e` source code.</haxe_doc>
		</EUntyped>
		<EThrow a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</ECast>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplay>
		<EDisplayNew a="t">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(econd) ? eif : eelse` expression.</haxe_doc>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>A `(e:t)` expression.</haxe_doc>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `@m e` expression.</haxe_doc>
		</EMeta>
		<haxe_doc>Represents the kind of a node in the AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Represents the type path.</haxe_doc>
		</TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a function type.
		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFunction>
		<TAnonymous a="fields">
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc>Represents an anonymous structure type.
		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TParent a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc><![CDATA[Represents parentheses around a type, e.g. the `(Int -> Void)` part in
		`(Int -> Void) -> String`.]]></haxe_doc>
		</TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc><![CDATA[Represents typedef extensions `> Iterable<T>`.
		The array `p` holds the type paths to the given types.
		@see https://haxe.org/manual/type-system-extensions.html]]></haxe_doc>
		</TExtend>
		<TOptional a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an optional type.</haxe_doc>
		</TOptional>
		<haxe_doc>Represents a type syntax in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has name = Module, sub = Type, if available.</haxe_doc>
			</sub>
			<params>
				<t path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc></haxe_doc>
		</TPType>
		<TPExpr a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc></haxe_doc>
		</TPExpr>
		<haxe_doc><![CDATA[Represents a concrete type parameter in the AST.

	Haxe allows expressions in concrete type parameters, e.g.
	`new YourType<["hello", "world"]>`. In that case the value is `TPExpr` while
	in the normal case it's `TPType`.]]></haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<t path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<t path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Access" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic><haxe_doc>Public access modifier, grants access from anywhere.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APublic>
		<APrivate><haxe_doc>Private access modifier, grants access to class and its sub-classes
		only.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APrivate>
		<AStatic><haxe_doc>Static access modifier.</haxe_doc></AStatic>
		<AOverride><haxe_doc>Override access modifier.
		@see https://haxe.org/manual/class-field-override.html</haxe_doc></AOverride>
		<ADynamic><haxe_doc>Dynamic (re-)bindable access modifier.
		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></ADynamic>
		<AInline><haxe_doc>Inline access modifier. Allows expressions to be directly inserted in
		place of calls to them.
		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></AInline>
		<AMacro><haxe_doc>Macros access modifier. Allows expression macro functions. These are
		normal functions which are executed as soon as they are typed.</haxe_doc></AMacro>
		<haxe_doc>Represents an access modifier.
	@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a variable field type.</haxe_doc>
		</FVar>
		<FFun a="f">
			<t path="haxe.macro.Function"/>
			<haxe_doc>Represents a function field type.</haxe_doc>
		</FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a property with getter and setter field type.</haxe_doc>
		</FProp>
		<haxe_doc>Represents the field type in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The paramater type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum><haxe_doc>Represents an enum kind.</haxe_doc></TDEnum>
		<TDStructure><haxe_doc>Represents a structure kind.</haxe_doc></TDStructure>
		<TDClass a="?superClass:?interfaces:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
			<haxe_doc>Represents a class kind.</haxe_doc>
		</TDClass>
		<TDAlias a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an alias/typedef kind.</haxe_doc>
		</TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc>Represents an abstract kind.</haxe_doc>
		</TDAbstract>
		<haxe_doc>Represents a type definition kind.</haxe_doc>
	</enum>
	<class path="haxe.macro.Error" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<message public="1">
			<c path="String"/>
			<haxe_doc>The error message.</haxe_doc>
		</message>
		<pos public="1">
			<t path="haxe.macro.Position"/>
			<haxe_doc>The position of the error.</haxe_doc>
		</pos>
		<toString set="method" line="898">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the string representation of the error.</haxe_doc>
		</toString>
		<new public="1" set="method" line="890">
			<f a="m:p">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal><haxe_doc>Represents a default import `import c`.</haxe_doc></INormal>
		<IAsName a="alias">
			<c path="String"/>
			<haxe_doc>Represents the alias import `import c as alias`.</haxe_doc>
		</IAsName>
		<IAll><haxe_doc>Represents the wildcard import `import *`.</haxe_doc></IAll>
		<haxe_doc>Represents the import mode.
	@see https://haxe.org/manual/type-system-import.html</haxe_doc>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<class path="haxe.macro.ExprTools" params="" file="/usr/local/lib/haxe/std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="44" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression `e` to a human-readable String representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="71" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		If `e` has no sub-expressions, this operation has no effect.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}
		```</haxe_doc>
		</iter>
		<map public="1" set="method" line="158" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		If `e` has no sub-expressions, this operation returns `e` unchanged.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}
		```haxe</haxe_doc>
		</map>
		<getValue public="1" set="method" line="233" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:

		 - `Int`, `Float` and `String` literals
		 - identifiers `true`, `false` and `null`
		 - structure declarations if all their fields are values
		 - array declarations if all their elements are values
		 - unary operators `-`, `!` and `~` if the operand is a value
		 - binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="293" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="296" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="/usr/local/lib/haxe/std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="305" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="312" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Printer" params="" file="/usr/local/lib/haxe/std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="42"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="50"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="78"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="82"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="86"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="90"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="99"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="104"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="111"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="125"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="129"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="139"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="149"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="154"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="160"><f a="func">
	<t path="haxe.macro.Function"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="166"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printExpr public="1" set="method" line="172"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="234"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="238"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="243"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="248">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ printPackage : true }</e></m></meta>
		</printTypeDefinition>
		<printFieldWithDelimiter set="method" line="307"><f a="f">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printFieldWithDelimiter>
		<opt params="T" set="method" line="318">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ prefix : "" }</e></m></meta>
		</opt>
		<new public="1" set="method" line="37">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tabString : "\t" }</e></m></meta>
		</new>
		<haxe_doc>This class provides some utility methods to convert elements from the
	macro context to a human-readable String representation.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Ref" params="T" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Type" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t>
			<haxe_doc>Represents a monomorph.

		@see https://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see https://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<t path="Null"><e path="haxe.macro.Type"/></t>
			<haxe_doc>Represents Dynamic.

		@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see https://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed><haxe_doc>A closed structure is considered complete. That is, no further fields
		can be added to it.</haxe_doc></AClosed>
		<AOpened><haxe_doc>An open structure allows having additional fields added to it, which is
		used during type inference. It is closed upon unification.</haxe_doc></AOpened>
		<AConst><haxe_doc>A const structure is one that appears directly in syntax. It cannot be
		assigned to a smaller structure type (that is, it does not allow
		structural sub-typing).</haxe_doc></AConst>
		<AExtend a="tl">
			<t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t>
			<haxe_doc>Represents a structure which extends one or multiple structures defined
		in `tl`.

		@see https://haxe.org/manual/type-system-extensions.html</haxe_doc>
		</AExtend>
		<AClassStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A structure that represents the static fields of a class.</haxe_doc>
		</AClassStatics>
		<AEnumStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>A structure that represents the constructors of an enum.</haxe_doc>
		</AEnumStatics>
		<AAbstractStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>A structure that represents the static fields of an abstract.</haxe_doc>
		</AAbstractStatics>
		<haxe_doc>Represents the kind of the anonymous structure type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<expr set="method">
				<f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ClassKind" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal><haxe_doc>A normal class.</haxe_doc></KNormal>
		<KTypeParameter a="constraints">
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A type parameter class with a set of constraints.</haxe_doc>
		</KTypeParameter>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A structurally extended class.

		@deprecated</haxe_doc>
		</KExtension>
		<KExpr a="expr">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A special kind of class to encode expressions into type parameters.</haxe_doc>
		</KExpr>
		<KGeneric><haxe_doc>A `@:generic` base class.</haxe_doc></KGeneric>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A concrete `@:generic` instance, referencing the original class and the
		applied type parameters.</haxe_doc>
		</KGenericInstance>
		<KMacroType><haxe_doc>A special class for `haxe.macro.MacroType`.

		@deprecated</haxe_doc></KMacroType>
		<KAbstractImpl a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An implementation class of an abstract, i.e. where all its run-time code
		is.</haxe_doc>
		</KAbstractImpl>
		<KGenericBuild><haxe_doc>A `@:genericBuild` class</haxe_doc></KGenericBuild>
		<haxe_doc>Represents the kind of a class.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.BaseType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<x path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</x>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolve>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
				<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.3]]></e></m></meta>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
			<haxe_doc>A variable of property, depending on the `read` and `write` values.</haxe_doc>
		</FVar>
		<FMethod a="k">
			<e path="haxe.macro.MethodKind"/>
			<haxe_doc>A method</haxe_doc>
		</FMethod>
		<haxe_doc>Represents a field kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal><haxe_doc>Normal access (`default`).</haxe_doc></AccNormal>
		<AccNo><haxe_doc>Private access (`null`).</haxe_doc></AccNo>
		<AccNever><haxe_doc>No access (`never`).</haxe_doc></AccNever>
		<AccResolve><haxe_doc>Unused.</haxe_doc></AccResolve>
		<AccCall><haxe_doc>Access through accessor function (`get`, `set`, `dynamic`).</haxe_doc></AccCall>
		<AccInline><haxe_doc>Inline access (`inline`).</haxe_doc></AccInline>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Failed access due to a `@:require` metadata.</haxe_doc>
		</AccRequire>
		<haxe_doc>Represents the variable accessor.</haxe_doc>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal><haxe_doc>A normal method.</haxe_doc></MethNormal>
		<MethInline><haxe_doc>An inline method.

		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></MethInline>
		<MethDynamic><haxe_doc>A dynamic, rebindable method.

		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></MethDynamic>
		<MethMacro><haxe_doc>A macro method.</haxe_doc></MethMacro>
		<haxe_doc>Represents the method kind.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i">
			<x path="Int"/>
			<haxe_doc>An `Int` literal.</haxe_doc>
		</TInt>
		<TFloat a="s">
			<c path="String"/>
			<haxe_doc>A `Float` literal, represented as String to avoid precision loss.</haxe_doc>
		</TFloat>
		<TString a="s">
			<c path="String"/>
			<haxe_doc>A `String` literal.</haxe_doc>
		</TString>
		<TBool a="b">
			<x path="Bool"/>
			<haxe_doc>A `Bool` literal.</haxe_doc>
		</TBool>
		<TNull><haxe_doc>The constant `null`.</haxe_doc></TNull>
		<TThis><haxe_doc>The constant `this`.</haxe_doc></TThis>
		<TSuper><haxe_doc>The constant `super`.</haxe_doc></TSuper>
		<haxe_doc>Represents typed constant.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<t path="Null"><t path="haxe.macro.MetaAccess"/></t>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ModuleType" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A class.</haxe_doc>
		</TClassDecl>
		<TEnumDecl a="e">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>An enum.</haxe_doc>
		</TEnumDecl>
		<TTypeDecl a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<haxe_doc>A typedef.</haxe_doc>
		</TTypeDecl>
		<TAbstract a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An abstract.</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a module type. These are the types that can be declared in a Haxe
	module and which are passed to the generators (except `TTypeDecl`).</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on a class instance `c` with type parameters
		`params`.</haxe_doc>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Static access of a field `cf` on a class `c`.</haxe_doc>
		</FStatic>
		<FAnon a="cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on an anonymous structure.</haxe_doc>
		</FAnon>
		<FDynamic a="s">
			<c path="String"/>
			<haxe_doc>Dynamic field access of a field named `s`.</haxe_doc>
		</FDynamic>
		<FClosure a="c:cf">
			<t path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Closure field access of field `cf` on a class instance `c` with type
		parameters `params`.</haxe_doc>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
			<haxe_doc>Field access to an enum constructor `ef` of enum `e`.</haxe_doc>
		</FEnum>
		<haxe_doc>Represents the kind of field access in the typed AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c">
			<e path="haxe.macro.TConstant"/>
			<haxe_doc>A constant.</haxe_doc>
		</TConst>
		<TLocal a="v">
			<t path="haxe.macro.TVar"/>
			<haxe_doc>Reference to a local variable `v`.</haxe_doc>
		</TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
			<haxe_doc>Field access on `e` according to `fa`.</haxe_doc>
		</TField>
		<TTypeExpr a="m">
			<e path="haxe.macro.ModuleType"/>
			<haxe_doc>Reference to a module type `m`.</haxe_doc>
		</TTypeExpr>
		<TParenthesis a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</TParenthesis>
		<TObjectDecl a="fields">
			<c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</TObjectDecl>
		<TArrayDecl a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A call `e(el)`.</haxe_doc>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc><![CDATA[A constructor call `new c<params>(el)`.]]></haxe_doc>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</TUnop>
		<TFunction a="tfunc">
			<t path="haxe.macro.TFunc"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>A variable declaration `var v` or `var v = expr`.</haxe_doc>
		</TVar>
		<TBlock a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A block declaration `{el}`.</haxe_doc>
		</TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>Represents a `switch` expression with related cases and an optional
		`default` case if edef != null.</haxe_doc>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</TTry>
		<TReturn a="e">
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</TReturn>
		<TBreak><haxe_doc>A `break` expression.</haxe_doc></TBreak>
		<TContinue><haxe_doc>A `continue` expression.</haxe_doc></TContinue>
		<TThrow a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><e path="haxe.macro.ModuleType"/></t>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `@m e1` expression.</haxe_doc>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
			<haxe_doc>Access to an enum parameter (generated by the pattern matcher).</haxe_doc>
		</TEnumParameter>
		<haxe_doc>Represents kind of a node in the typed AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypedExpr" params="" file="/usr/local/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="haxe.macro.TypeTools" params="" file="/usr/local/lib/haxe/std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="41" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="43" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="98" static="1">
			<f a="type">
				<t path="Null"><e path="haxe.macro.Type"/></t>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypePath set="method" line="145" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="367" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
			</f>
			<meta><m n=":value"><e>{ isStatic : false }</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
	</class>
	<class path="thx.Arrays" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Arrays.hx">
		<append public="1" params="T" set="method" line="30" static="1">
			<f a="array:element">
				<c path="Array"><c path="append.T"/></c>
				<c path="append.T"/>
				<c path="Array"><c path="append.T"/></c>
			</f>
			<haxe_doc>Arrays.add pushes an element at the end of the `array` and returns it. Practical
for chaining push operations.</haxe_doc>
		</append>
		<appendIf public="1" params="T" set="method" line="39" static="1">
			<f a="array:cond:element">
				<c path="Array"><c path="appendIf.T"/></c>
				<x path="Bool"/>
				<c path="appendIf.T"/>
				<c path="Array"><c path="appendIf.T"/></c>
			</f>
			<haxe_doc>Arrays.addIf conditionaly pushes an element at the end of the `array` and returns it.
Practical for chaining push operations.</haxe_doc>
		</appendIf>
		<applyIndexes public="1" params="T" set="method" line="53" static="1">
			<f a="array:indexes:?incrementDuplicates" v="::false">
				<x path="thx.ReadonlyArray"><c path="applyIndexes.T"/></x>
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
				<c path="Array"><c path="applyIndexes.T"/></c>
			</f>
			<meta><m n=":value"><e>{ incrementDuplicates : false }</e></m></meta>
			<haxe_doc>Arrays.applyIndexes takes an `array` and returns a copy of it with its elements rearranged according to `indexes`.

If the `indexes` array does not contain continuous values, you may want to set `incrementDuplicates` to `true`.

var result = Arrays.applyIndexes(["B", "C", "A"], [1, 2, 0]);
trace(result); // output ["A", "B", "C"]</haxe_doc>
		</applyIndexes>
		<monoid public="1" params="A" set="method" line="77" static="1">
			<f a=""><x path="thx.Monoid"><c path="Array"><c path="monoid.A"/></c></x></f>
			<haxe_doc>* The concatenation monoid for arrays.</haxe_doc>
		</monoid>
		<after public="1" params="T" get="inline" set="null" line="86" static="1">
			<f a="array:element">
				<x path="thx.ReadonlyArray"><c path="after.T"/></x>
				<c path="after.T"/>
				<c path="Array"><c path="after.T"/></c>
			</f>
			<haxe_doc>Finds the first occurrance of `element` and returns all the elements after it.</haxe_doc>
		</after>
		<atIndex public="1" params="T" set="method" line="93" static="1">
			<f a="array:i">
				<x path="thx.ReadonlyArray"><c path="atIndex.T"/></x>
				<x path="Int"/>
				<e path="haxe.ds.Option"><c path="atIndex.T"/></e>
			</f>
			<meta><m n=":deprecated"><e>"atIndex is deprecated, use getOption instead"</e></m></meta>
			<haxe_doc>Safe indexed access to array elements. Deprecated in favor of `getOption`.</haxe_doc>
		</atIndex>
		<getOption public="1" params="T" set="method" line="100" static="1">
			<f a="array:i">
				<x path="thx.ReadonlyArray"><c path="getOption.T"/></x>
				<x path="Int"/>
				<e path="haxe.ds.Option"><c path="getOption.T"/></e>
			</f>
			<haxe_doc>Safe indexed access to array elements.
Null values within `array` will also return `None` instead of `Some(null)`.</haxe_doc>
		</getOption>
		<each public="1" params="T" set="method" line="106" static="1">
			<f a="arr:effect">
				<x path="thx.ReadonlyArray"><c path="each.T"/></x>
				<f a="">
					<c path="each.T"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies a side-effect function to all elements in the array.</haxe_doc>
		</each>
		<eachi public="1" params="T" set="method" line="113" static="1">
			<f a="arr:effect">
				<x path="thx.ReadonlyArray"><c path="eachi.T"/></x>
				<f a=":">
					<c path="eachi.T"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies a side-effect function to all elements in the array.</haxe_doc>
		</eachi>
		<all public="1" params="T" set="method" line="120" static="1">
			<f a="arr:predicate">
				<x path="thx.ReadonlyArray"><c path="all.T"/></x>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for all elements in the array.</haxe_doc>
		</all>
		<any public="1" params="T" set="method" line="130" static="1">
			<f a="arr:predicate">
				<x path="thx.ReadonlyArray"><c path="any.T"/></x>
				<f a="">
					<c path="any.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for at least one element in the array.</haxe_doc>
		</any>
		<at public="1" params="T" set="method" line="140" static="1">
			<f a="arr:indexes">
				<x path="thx.ReadonlyArray"><c path="at.T"/></x>
				<x path="thx.ReadonlyArray"><x path="Int"/></x>
				<c path="Array"><c path="at.T"/></c>
			</f>
			<haxe_doc>Creates an array of elements from the specified indexes.</haxe_doc>
		</at>
		<before public="1" params="T" get="inline" set="null" line="146" static="1">
			<f a="array:element">
				<x path="thx.ReadonlyArray"><c path="before.T"/></x>
				<c path="before.T"/>
				<c path="Array"><c path="before.T"/></c>
			</f>
			<haxe_doc>Finds the first occurrance of `element` and returns all the elements before it.</haxe_doc>
		</before>
		<commonsFromStart public="1" params="T" set="method" line="153" static="1">
			<f a="self:other:?equality">
				<x path="thx.ReadonlyArray"><c path="commonsFromStart.T"/></x>
				<x path="thx.ReadonlyArray"><c path="commonsFromStart.T"/></x>
				<f a=":">
					<c path="commonsFromStart.T"/>
					<c path="commonsFromStart.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="commonsFromStart.T"/></c>
			</f>
			<haxe_doc>Traverse both arrays from the beginning and collect the elements that are the
same. It stops as soon as the arrays differ.</haxe_doc>
		</commonsFromStart>
		<compact public="1" params="T" set="method" line="167" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><t path="Null"><c path="compact.T"/></t></x>
				<c path="Array"><c path="compact.T"/></c>
			</f>
			<meta><m n=":deprecated"><e>"Arrays.compact is deprecated, use Arrays.filterNull instead."</e></m></meta>
			<haxe_doc>Filters out all null elements in the array</haxe_doc>
		</compact>
		<compare public="1" params="T" set="method" line="187" static="1">
			<f a="a:b">
				<x path="thx.ReadonlyArray"><c path="compare.T"/></x>
				<x path="thx.ReadonlyArray"><c path="compare.T"/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares two arrays returning a negative integer, zero or a positive integer.

The first comparison is made on the array length.

If they match each pair of elements is compared using `thx.Dynamics.compare`.</haxe_doc>
		</compare>
		<count public="1" params="T" set="method" line="202" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="count.T"/></x>
				<x path="Map">
					<c path="count.T"/>
					<x path="Int"/>
				</x>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns a Map containing the number of occurrances for each value in the array.</haxe_doc>
		</count>
		<contains public="1" params="T" set="method" line="215" static="1">
			<f a="array:element:?eq">
				<x path="thx.ReadonlyArray"><c path="contains.T"/></x>
				<c path="contains.T"/>
				<f a=":">
					<c path="contains.T"/>
					<c path="contains.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `element` is found in the array.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</contains>
		<containsAll public="1" params="T" set="method" line="231" static="1">
			<f a="array:elements:?eq">
				<c path="Array"><c path="containsAll.T"/></c>
				<t path="Iterable"><c path="containsAll.T"/></t>
				<f a=":">
					<c path="containsAll.T"/>
					<c path="containsAll.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if all elements in `elements` are found in the array.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</containsAll>
		<containsAny public="1" params="T" set="method" line="243" static="1">
			<f a="array:elements:?eq">
				<x path="thx.ReadonlyArray"><c path="containsAny.T"/></x>
				<t path="Iterable"><c path="containsAny.T"/></t>
				<f a=":">
					<c path="containsAny.T"/>
					<c path="containsAny.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if any element in `elements` is found in the array.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</containsAny>
		<create public="1" params="T" set="method" line="253" static="1">
			<f a="length:fillWith">
				<x path="Int"/>
				<c path="create.T"/>
				<c path="Array"><c path="create.T"/></c>
			</f>
			<haxe_doc>Creates a new `Array` with `length` elements all set to `fillWith`.</haxe_doc>
		</create>
		<fromItem public="1" params="T" set="method" line="263" static="1">
			<f a="t">
				<c path="fromItem.T"/>
				<c path="Array"><c path="fromItem.T"/></c>
			</f>
			<haxe_doc><![CDATA[Creates an `Array<T>` containing the given item]]></haxe_doc>
		</fromItem>
		<cross public="1" params="T" set="method" line="274" static="1">
			<f a="a:b">
				<x path="thx.ReadonlyArray"><c path="cross.T"/></x>
				<x path="thx.ReadonlyArray"><c path="cross.T"/></x>
				<c path="Array"><c path="Array"><c path="cross.T"/></c></c>
			</f>
			<haxe_doc>It returns the cross product between two arrays.

```haxe
var r = [1,2,3].cross([4,5,6]);
trace(r); // [[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]
```</haxe_doc>
		</cross>
		<crossMulti public="1" params="T" set="method" line="290" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="thx.ReadonlyArray"><c path="crossMulti.T"/></x></x>
				<c path="Array"><c path="Array"><c path="crossMulti.T"/></c></c>
			</f>
			<haxe_doc>It produces the cross product of each array element.

```haxe
var r = [[1,2],[3,4],[5,6]].crossMulti();
trace(r); // [[1,3,5],[2,3,5],[1,4,5],[2,4,5],[1,3,6],[2,3,6],[1,4,6],[2,4,6]]
```</haxe_doc>
		</crossMulti>
		<distinct public="1" params="T" set="method" line="314" static="1">
			<f a="array:?predicate">
				<x path="thx.ReadonlyArray"><c path="distinct.T"/></x>
				<f a=":">
					<c path="distinct.T"/>
					<c path="distinct.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="distinct.T"/></c>
			</f>
			<haxe_doc>Returns a new array containing only unique values from the input array.
Input array does not need to be sorted.
A predicate comparison function can be provided for comparing values.  Default
comparison is ==.</haxe_doc>
		</distinct>
		<eachPair public="1" params="TIn:TOut" set="method" line="338" static="1">
			<f a="array:callback">
				<x path="thx.ReadonlyArray"><c path="eachPair.TIn"/></x>
				<f a=":">
					<c path="eachPair.TIn"/>
					<c path="eachPair.TIn"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>It allows to iterate an array pairing each element with every other element in the array.

The iteration ends as soon as the `callback` returns `false`.</haxe_doc>
		</eachPair>
		<equals public="1" params="T" set="method" line="349" static="1">
			<f a="a:b:?equality">
				<x path="thx.ReadonlyArray"><c path="equals.T"/></x>
				<x path="thx.ReadonlyArray"><c path="equals.T"/></x>
				<f a=":">
					<c path="equals.T"/>
					<c path="equals.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>It compares the lengths and elements of two given arrays and returns `true` if they match.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</equals>
		<extract public="1" params="T" set="method" line="364" static="1">
			<f a="a:predicate">
				<c path="Array"><c path="extract.T"/></c>
				<f a="">
					<c path="extract.T"/>
					<x path="Bool"/>
				</f>
				<c path="extract.T"/>
			</f>
			<haxe_doc>It finds an element in the array using `predicate` and returns it. The element is also
removed from the original array.

If no element satisfies `predicate` the array is left unmodified and `null` is returned.</haxe_doc>
		</extract>
		<filterNull public="1" params="T" set="method" line="374" static="1">
			<f a="a">
				<x path="thx.ReadonlyArray"><t path="Null"><c path="filterNull.T"/></t></x>
				<c path="Array"><c path="filterNull.T"/></c>
			</f>
			<haxe_doc>Filters out all `null` values from an array.</haxe_doc>
		</filterNull>
		<filterOption public="1" params="T" set="method" line="384" static="1">
			<f a="a">
				<x path="thx.ReadonlyArray"><e path="haxe.ds.Option"><c path="filterOption.T"/></e></x>
				<c path="Array"><c path="filterOption.T"/></c>
			</f>
			<haxe_doc>Filters out all `None` values from an array and extracts `Some(value)` to `value`.</haxe_doc>
		</filterOption>
		<flattenOptions public="1" params="T" set="method" line="398" static="1">
			<f a="a">
				<x path="thx.ReadonlyArray"><e path="haxe.ds.Option"><c path="flattenOptions.T"/></e></x>
				<e path="haxe.ds.Option"><c path="Array"><c path="flattenOptions.T"/></c></e>
			</f>
			<haxe_doc><![CDATA[Converts an `Array<Option<T>>` to `Option<Array<T>>` only if all elements in the input
array contain a `Some` value. The input and the output array (if any) will have
the same length.]]></haxe_doc>
		</flattenOptions>
		<find public="1" params="T" set="method" line="411" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="find.T"/></x>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>It returns the first element of the array that matches the predicate function.
If none is found it returns null.</haxe_doc>
		</find>
		<findi public="1" params="T" set="method" line="421" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="findi.T"/></x>
				<f a=":">
					<c path="findi.T"/>
					<x path="Int"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="findi.T"/></t>
			</f>
			<haxe_doc>Like `find`, but each item's index is also passed to the predicate.</haxe_doc>
		</findi>
		<findiOption public="1" params="T" set="method" line="431" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="findiOption.T"/></x>
				<f a=":">
					<c path="findiOption.T"/>
					<x path="Int"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="findiOption.T"/></e>
			</f>
			<haxe_doc>Like `findOption`, but each item's index is also passed to the predicate.</haxe_doc>
		</findiOption>
		<findOption public="1" params="T" set="method" line="443" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="findOption.T"/></x>
				<f a="">
					<c path="findOption.T"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="findOption.T"/></e>
			</f>
			<haxe_doc>It returns the first element of the array that matches the predicate function.
If none is found it returns null.</haxe_doc>
		</findOption>
		<findMap public="1" params="TIn:TOut" set="method" line="454" static="1">
			<f a="values:f">
				<c path="Array"><c path="findMap.TIn"/></c>
				<f a="">
					<c path="findMap.TIn"/>
					<e path="haxe.ds.Option"><c path="findMap.TOut"/></e>
				</f>
				<e path="haxe.ds.Option"><c path="findMap.TOut"/></e>
			</f>
			<haxe_doc>Finds the first item in an array where the given function `f` returns a `Option.Some` value.
If no items map to `Some`, `None` is returned.</haxe_doc>
		</findMap>
		<filterMap public="1" params="TIn:TOut" set="method" line="466" static="1">
			<f a="values:f">
				<c path="Array"><c path="filterMap.TIn"/></c>
				<f a="">
					<c path="filterMap.TIn"/>
					<e path="haxe.ds.Option"><c path="filterMap.TOut"/></e>
				</f>
				<c path="Array"><c path="filterMap.TOut"/></c>
			</f>
			<haxe_doc>Performs a `filter` and `map` operation at once. It uses predicate to get either
`None` or a transformed value `Some` of `TOut`.</haxe_doc>
		</filterMap>
		<findSome public="1" params="T" set="method" line="480" static="1">
			<f a="options">
				<c path="Array"><e path="haxe.ds.Option"><c path="findSome.T"/></e></c>
				<e path="haxe.ds.Option"><c path="findSome.T"/></e>
			</f>
			<haxe_doc><![CDATA[Finds the first item in an `Array<Option<T>>` that is `Some`, otherwise `None`.]]></haxe_doc>
		</findSome>
		<findIndex public="1" params="T" set="method" line="491" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="findIndex.T"/></x>
				<f a="">
					<c path="findIndex.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>It returns the index of the first element of the array that matches the predicate function.
If none is found it returns `-1`.</haxe_doc>
		</findIndex>
		<findLast public="1" params="T" set="method" line="502" static="1">
			<f a="array:predicate">
				<x path="thx.ReadonlyArray"><c path="findLast.T"/></x>
				<f a="">
					<c path="findLast.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="findLast.T"/></t>
			</f>
			<haxe_doc>It returns the last element of the array that matches the provided predicate function.
If none is found it returns null.</haxe_doc>
		</findLast>
		<first public="1" params="T" get="inline" set="null" line="516" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="first.T"/></x>
				<t path="Null"><c path="first.T"/></t>
			</f>
			<haxe_doc>It returns the first element of the array or null if the array is empty.</haxe_doc>
		</first>
		<firstOption public="1" params="T" get="inline" set="null" line="523" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="firstOption.T"/></x>
				<e path="haxe.ds.Option"><c path="firstOption.T"/></e>
			</f>
			<haxe_doc>It returns an option of the first element or None if the array is empty.</haxe_doc>
		</firstOption>
		<flatMap public="1" params="TIn:TOut" get="inline" set="null" line="534" static="1">
			<f a="array:callback">
				<x path="thx.ReadonlyArray"><c path="flatMap.TIn"/></x>
				<f a="">
					<c path="flatMap.TIn"/>
					<c path="Array"><c path="flatMap.TOut"/></c>
				</f>
				<c path="Array"><c path="flatMap.TOut"/></c>
			</f>
			<haxe_doc>It traverses an array of elements. Each element is split using the `callback` function and a 'flattened' array is returned.

```haxe
var chars = ['Hello', 'World'].flatMap(function(s) return s.split(''));
trace(chars); // ['H','e','l','l','o','W','o','r','l','d']
```</haxe_doc>
		</flatMap>
		<flatten public="1" params="T" set="method" line="546" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="Array"><c path="flatten.T"/></c></x>
				<c path="Array"><c path="flatten.T"/></c>
			</f>
			<haxe_doc>It takes an array of arrays and 'flattens' it into an array.

```haxe
var arr = [[1,2,3],[4,5,6],[7,8,9]];
trace(arr); // [1,2,3,4,5,6,7,8,9]
```</haxe_doc>
		</flatten>
		<from public="1" params="T" get="inline" set="null" line="556" static="1">
			<f a="array:element">
				<x path="thx.ReadonlyArray"><c path="from.T"/></x>
				<c path="from.T"/>
				<c path="Array"><c path="from.T"/></c>
			</f>
			<haxe_doc>Finds the first occurrance of `element` and returns all the elements from that point on.</haxe_doc>
		</from>
		<groupBy public="1" params="TKey:TValue" set="method" line="568" static="1">
			<f a="arr:resolver">
				<x path="thx.ReadonlyArray"><c path="groupBy.TValue"/></x>
				<f a="">
					<c path="groupBy.TValue"/>
					<c path="groupBy.TKey"/>
				</f>
				<x path="Map">
					<c path="groupBy.TKey"/>
					<c path="Array"><c path="groupBy.TValue"/></c>
				</x>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns a Map of arrays. Each value in the array is passed to `resolver` that returns a key to use
to group such element.

This method is tagged with `@:generic` and needs a compatible type to be used (ex: no anonymous objects).

In case you have to use a type that is not supported by `@:generic`, please use `groupByAppend`.</haxe_doc>
		</groupBy>
		<groupByAppend public="1" params="TKey:TValue" set="method" line="591" static="1">
			<f a="arr:resolver:map">
				<x path="thx.ReadonlyArray"><c path="groupByAppend.TValue"/></x>
				<f a="">
					<c path="groupByAppend.TValue"/>
					<c path="groupByAppend.TKey"/>
				</f>
				<x path="Map">
					<c path="groupByAppend.TKey"/>
					<c path="Array"><c path="groupByAppend.TValue"/></c>
				</x>
				<x path="Map">
					<c path="groupByAppend.TKey"/>
					<c path="Array"><c path="groupByAppend.TValue"/></c>
				</x>
			</f>
			<haxe_doc>Each value in the array is passed to `resolver` that returns a key to use to group such element.
  Groups are appended to the passed map.</haxe_doc>
		</groupByAppend>
		<groupByIndex public="1" params="A:K" set="method" line="612" static="1">
			<f a="arr:groupKey">
				<x path="thx.ReadonlyArray"><c path="groupByIndex.A"/></x>
				<f a="">
					<x path="Int"/>
					<c path="groupByIndex.K"/>
				</f>
				<x path="Map">
					<c path="groupByIndex.K"/>
					<c path="Array"><c path="groupByIndex.A"/></c>
				</x>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>* Group the array by a function of the index.</haxe_doc>
		</groupByIndex>
		<spanByIndex public="1" params="A:K" set="method" line="627" static="1"><f a="arr:spanKey">
	<x path="thx.ReadonlyArray"><c path="spanByIndex.A"/></x>
	<f a="">
		<x path="Int"/>
		<c path="spanByIndex.K"/>
	</f>
	<c path="Array"><c path="Array"><c path="spanByIndex.A"/></c></c>
</f></spanByIndex>
		<hasElements public="1" params="T" get="inline" set="null" line="648" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="hasElements.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the array contains at least one element.</haxe_doc>
		</hasElements>
		<head public="1" params="T" get="inline" set="null" line="654" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="head.T"/></x>
				<t path="Null"><c path="head.T"/></t>
			</f>
			<haxe_doc>It returns the first element of the array or null if the array is empty. Same as `first`.</haxe_doc>
		</head>
		<ifEmpty public="1" params="T" get="inline" set="null" line="660" static="1">
			<f a="array:alt">
				<c path="Array"><c path="ifEmpty.T"/></c>
				<c path="Array"><c path="ifEmpty.T"/></c>
				<c path="Array"><c path="ifEmpty.T"/></c>
			</f>
			<haxe_doc>`ifEmpty` returns `array` if it is neither `null` or empty, otherwise it returns `alt`</haxe_doc>
		</ifEmpty>
		<initial public="1" params="T" get="inline" set="null" line="666" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="initial.T"/></x>
				<c path="Array"><c path="initial.T"/></c>
			</f>
			<haxe_doc>Get all the elements from `array` except for the last one.</haxe_doc>
		</initial>
		<intersperse public="1" params="T" set="method" line="672" static="1">
			<f a="array:value">
				<x path="thx.ReadonlyArray"><c path="intersperse.T"/></x>
				<c path="intersperse.T"/>
				<c path="Array"><c path="intersperse.T"/></c>
			</f>
			<haxe_doc>Creates a new array that alternates the values in `array` with `value`.</haxe_doc>
		</intersperse>
		<interspersef public="1" params="T" set="method" line="681" static="1">
			<f a="array:f">
				<x path="thx.ReadonlyArray"><c path="interspersef.T"/></x>
				<f a=""><c path="interspersef.T"/></f>
				<c path="Array"><c path="interspersef.T"/></c>
			</f>
			<haxe_doc>Lazy version of `intersperse`. It creates a new array that alternates the values in `array` with the result of `f`.</haxe_doc>
		</interspersef>
		<isEmpty public="1" params="T" get="inline" set="null" line="695" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="isEmpty.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>It returns `true` if the array contains zero elements.</haxe_doc>
		</isEmpty>
		<last public="1" params="T" get="inline" set="null" line="701" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="last.T"/></x>
				<t path="Null"><c path="last.T"/></t>
			</f>
			<haxe_doc>It returns the last element of the array or null if the array is empty.</haxe_doc>
		</last>
		<lastOption public="1" params="T" get="inline" set="null" line="707" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="lastOption.T"/></x>
				<e path="haxe.ds.Option"><c path="lastOption.T"/></e>
			</f>
			<haxe_doc>It returns an option of the last element, `None` if the array is empty.</haxe_doc>
		</lastOption>
		<map public="1" params="TIn:TOut" set="method" line="714" static="1">
			<f a="array:callback">
				<x path="thx.ReadonlyArray"><c path="map.TIn"/></x>
				<f a="">
					<c path="map.TIn"/>
					<c path="map.TOut"/>
				</f>
				<c path="Array"><c path="map.TOut"/></c>
			</f>
			<haxe_doc>Static wrapper for `Array` `map` function.</haxe_doc>
		</map>
		<mapi public="1" params="TIn:TOut" set="method" line="725" static="1">
			<f a="array:callback">
				<x path="thx.ReadonlyArray"><c path="mapi.TIn"/></x>
				<f a=":">
					<c path="mapi.TIn"/>
					<x path="Int"/>
					<c path="mapi.TOut"/>
				</f>
				<c path="Array"><c path="mapi.TOut"/></c>
			</f>
			<haxe_doc>Same as `Array.map` but it adds a second argument to the `callback` function with the current index value.</haxe_doc>
		</mapi>
		<mapRight public="1" params="TIn:TOut" set="method" line="735" static="1">
			<f a="array:callback">
				<x path="thx.ReadonlyArray"><c path="mapRight.TIn"/></x>
				<f a="">
					<c path="mapRight.TIn"/>
					<c path="mapRight.TOut"/>
				</f>
				<c path="Array"><c path="mapRight.TOut"/></c>
			</f>
			<haxe_doc>Same as `Array.map` but traverses the array from the last to the first element.</haxe_doc>
		</mapRight>
		<order public="1" params="T" set="method" line="746" static="1">
			<f a="array:sort">
				<x path="thx.ReadonlyArray"><c path="order.T"/></x>
				<f a=":">
					<c path="order.T"/>
					<c path="order.T"/>
					<x path="Int"/>
				</f>
				<c path="Array"><c path="order.T"/></c>
			</f>
			<haxe_doc>It works the same as `Array.sort()` but doesn't change the original array and returns a sorted copy it.</haxe_doc>
		</order>
		<pull public="1" params="T" set="method" line="756" static="1">
			<f a="array:toRemove:?equality">
				<c path="Array"><c path="pull.T"/></c>
				<x path="thx.ReadonlyArray"><c path="pull.T"/></x>
				<f a=":">
					<c path="pull.T"/>
					<c path="pull.T"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Pulls from `array` all occurrences of all the elements in `toRemove`. Optionally takes
an `equality` function.</haxe_doc>
		</pull>
		<pushIf public="1" params="T" set="method" line="763" static="1">
			<f a="array:condition:value">
				<c path="Array"><c path="pushIf.T"/></c>
				<x path="Bool"/>
				<c path="pushIf.T"/>
				<c path="Array"><c path="pushIf.T"/></c>
			</f>
			<haxe_doc>It pushes `value` onto the array if `condition` is true. Also returns the array for easy method chaining.</haxe_doc>
		</pushIf>
		<rank public="1" params="T" set="method" line="780" static="1">
			<f a="array:compare:?incrementDuplicates" v="::true">
				<x path="thx.ReadonlyArray"><c path="rank.T"/></x>
				<f a=":">
					<c path="rank.T"/>
					<c path="rank.T"/>
					<x path="Int"/>
				</f>
				<x path="Bool"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ incrementDuplicates : true }</e></m></meta>
			<haxe_doc>Given an array of values, it returns an array of indexes permutated applying the function `compare`.

By default `rank` will return continuous values. If you know that your set does not contain duplicates you might want to turn off that feature by setting `incrementDuplicates` to `false`.

```
var arr = ["C","A","B"];
var indexes = Arrays.rank(arr, Strings.compare);
trace(indexes); // output [2,0,1]
```</haxe_doc>
		</rank>
		<reduce public="1" params="A:B" set="method" line="805" static="1">
			<f a="array:f:initial">
				<x path="thx.ReadonlyArray"><c path="reduce.A"/></x>
				<f a=":">
					<c path="reduce.B"/>
					<c path="reduce.A"/>
					<c path="reduce.B"/>
				</f>
				<c path="reduce.B"/>
				<c path="reduce.B"/>
			</f>
			<haxe_doc>It applies a function against an accumulator and each value of the array (from left-to-right) has to reduce it to a single value.</haxe_doc>
		</reduce>
		<foldLeft public="1" params="A:B" get="inline" set="null" line="814" static="1">
			<f a="array:init:f">
				<x path="thx.ReadonlyArray"><c path="foldLeft.A"/></x>
				<c path="foldLeft.B"/>
				<f a=":">
					<c path="foldLeft.B"/>
					<c path="foldLeft.A"/>
					<c path="foldLeft.B"/>
				</f>
				<c path="foldLeft.B"/>
			</f>
			<haxe_doc>* Alias for reduce that puts the arguments in the proper order.</haxe_doc>
		</foldLeft>
		<foldLeft1 public="1" params="A:B" get="inline" set="null" line="820" static="1">
			<f a="array:f">
				<x path="thx.ReadonlyArray"><c path="foldLeft1.A"/></x>
				<f a=":">
					<c path="foldLeft1.A"/>
					<c path="foldLeft1.A"/>
					<c path="foldLeft1.A"/>
				</f>
				<e path="haxe.ds.Option"><c path="foldLeft1.A"/></e>
			</f>
			<haxe_doc>* As with foldLeft, but uses first element as Init.</haxe_doc>
		</foldLeft1>
		<foldLeftEither public="1" params="A:E:B" set="method" line="831" static="1"><f a="array:init:f">
	<x path="thx.ReadonlyArray"><c path="foldLeftEither.A"/></x>
	<c path="foldLeftEither.B"/>
	<f a=":">
		<c path="foldLeftEither.B"/>
		<c path="foldLeftEither.A"/>
		<e path="thx.Either">
			<c path="foldLeftEither.E"/>
			<c path="foldLeftEither.B"/>
		</e>
	</f>
	<e path="thx.Either">
		<c path="foldLeftEither.E"/>
		<c path="foldLeftEither.B"/>
	</e>
</f></foldLeftEither>
		<foldMap public="1" params="A:B" set="method" line="846" static="1">
			<f a="array:f:m">
				<x path="thx.ReadonlyArray"><c path="foldMap.A"/></x>
				<f a="">
					<c path="foldMap.A"/>
					<c path="foldMap.B"/>
				</f>
				<x path="thx.Monoid"><c path="foldMap.B"/></x>
				<c path="foldMap.B"/>
			</f>
			<haxe_doc>* Fold by mapping the contained values into some monoidal type and reducing with that monoid.</haxe_doc>
		</foldMap>
		<fold public="1" params="A" set="method" line="852" static="1">
			<f a="array:m">
				<x path="thx.ReadonlyArray"><c path="fold.A"/></x>
				<x path="thx.Monoid"><c path="fold.A"/></x>
				<c path="fold.A"/>
			</f>
			<haxe_doc>* Reduce with a monoid</haxe_doc>
		</fold>
		<nel public="1" params="A" set="method" line="858" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="nel.A"/></x>
				<e path="haxe.ds.Option"><x path="thx.Nel"><c path="nel.A"/></x></e>
			</f>
			<haxe_doc>* Safely convert to a non-empty list.</haxe_doc>
		</nel>
		<foldS public="1" params="A" set="method" line="864" static="1">
			<f a="array:s">
				<x path="thx.ReadonlyArray"><c path="foldS.A"/></x>
				<x path="thx.Semigroup"><c path="foldS.A"/></x>
				<e path="haxe.ds.Option"><c path="foldS.A"/></e>
			</f>
			<haxe_doc>* Reduce with a semigroup, returning None if the array is empty.</haxe_doc>
		</foldS>
		<resize public="1" params="T" set="method" line="873" static="1">
			<f a="array:length:fill">
				<c path="Array"><c path="resize.T"/></c>
				<x path="Int"/>
				<c path="resize.T"/>
				<c path="Array"><c path="resize.T"/></c>
			</f>
			<haxe_doc>Resizes an array of `T` to an arbitrary length by adding more elements to its end
or by removing extra elements.

Note that the function changes the passed array and doesn't create a copy.</haxe_doc>
		</resize>
		<resized public="1" params="T" set="method" line="886" static="1">
			<f a="array:length:fill">
				<c path="Array"><c path="resized.T"/></c>
				<x path="Int"/>
				<c path="resized.T"/>
				<c path="Array"><c path="resized.T"/></c>
			</f>
			<haxe_doc>Copies and resizes an array of `T` to an arbitrary length by adding more
elements to its end or by removing extra elements.

Note that the function creates and returns a copy of the passed array.</haxe_doc>
		</resized>
		<reducei public="1" params="A:B" set="method" line="894" static="1">
			<f a="array:f:initial">
				<x path="thx.ReadonlyArray"><c path="reducei.A"/></x>
				<f a="::">
					<c path="reducei.B"/>
					<c path="reducei.A"/>
					<x path="Int"/>
					<c path="reducei.B"/>
				</f>
				<c path="reducei.B"/>
				<c path="reducei.B"/>
			</f>
			<haxe_doc>It is the same as `reduce` but with the extra integer `index` parameter.</haxe_doc>
		</reducei>
		<reduceRight public="1" params="A:B" get="inline" set="null" line="903" static="1">
			<f a="array:f:initial">
				<x path="thx.ReadonlyArray"><c path="reduceRight.A"/></x>
				<f a=":">
					<c path="reduceRight.B"/>
					<c path="reduceRight.A"/>
					<c path="reduceRight.B"/>
				</f>
				<c path="reduceRight.B"/>
				<c path="reduceRight.B"/>
			</f>
			<haxe_doc>Same as `Arrays.reduce` but starting from the last element and traversing to the first</haxe_doc>
		</reduceRight>
		<removeAll public="1" params="T" set="method" line="914" static="1">
			<f a="array:element:?equality">
				<c path="Array"><c path="removeAll.T"/></c>
				<c path="removeAll.T"/>
				<f a=":">
					<c path="removeAll.T"/>
					<c path="removeAll.T"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove every occurrance of `element` from `array`. If `equality` is not specified, strict equality
will be adopted.</haxe_doc>
		</removeAll>
		<rest public="1" params="T" get="inline" set="null" line="926" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="rest.T"/></x>
				<c path="Array"><c path="rest.T"/></c>
			</f>
			<haxe_doc>Returns all but the first element of the array</haxe_doc>
		</rest>
		<reversed public="1" params="T" get="inline" set="null" line="932" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="reversed.T"/></x>
				<c path="Array"><c path="reversed.T"/></c>
			</f>
			<haxe_doc>Creates a copy of the array with its elements in reverse order.</haxe_doc>
		</reversed>
		<sample public="1" params="T" get="inline" set="null" line="942" static="1">
			<f a="array:n">
				<x path="thx.ReadonlyArray"><c path="sample.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="sample.T"/></c>
			</f>
			<haxe_doc>Returns `n` elements at random from the array. Elements will not be repeated.</haxe_doc>
		</sample>
		<sampleOne public="1" params="T" get="inline" set="null" line="954" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="sampleOne.T"/></x>
				<t path="Null"><c path="sampleOne.T"/></t>
			</f>
			<haxe_doc>Returns one element at random from the array or null if the array is empty.</haxe_doc>
		</sampleOne>
		<string public="1" params="T" set="method" line="960" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="string.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Converts an `Array<T>` into a string.]]></haxe_doc>
		</string>
		<shuffle public="1" params="T" set="method" line="968" static="1">
			<f a="a">
				<x path="thx.ReadonlyArray"><c path="shuffle.T"/></x>
				<c path="Array"><c path="shuffle.T"/></c>
			</f>
			<haxe_doc>It returns a copy of the array with its elements randomly changed in position.</haxe_doc>
		</shuffle>
		<split public="1" params="T" set="method" line="983" static="1">
			<f a="array:parts">
				<x path="thx.ReadonlyArray"><c path="split.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="Array"><c path="split.T"/></c></c>
			</f>
			<haxe_doc>Splits an array into a specified number of `parts`.</haxe_doc>
		</split>
		<splitBy public="1" params="T" set="method" line="991" static="1">
			<f a="array:len">
				<x path="thx.ReadonlyArray"><c path="splitBy.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="Array"><c path="splitBy.T"/></c></c>
			</f>
			<haxe_doc>Splits an array into smaller arrays at most of length equal to `len`.</haxe_doc>
		</splitBy>
		<splitByPad public="1" params="T" set="method" line="1003" static="1">
			<f a="arr:len:pad">
				<c path="Array"><c path="splitByPad.T"/></c>
				<x path="Int"/>
				<c path="splitByPad.T"/>
				<c path="Array"><c path="Array"><c path="splitByPad.T"/></c></c>
			</f>
			<haxe_doc>Splits an array by the given number and pads last group with the given element if necessary.</haxe_doc>
		</splitByPad>
		<tail public="1" params="T" get="inline" set="null" line="1013" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><c path="tail.T"/></x>
				<c path="Array"><c path="tail.T"/></c>
			</f>
			<haxe_doc>It returns the elements of the array after the first.</haxe_doc>
		</tail>
		<take public="1" params="T" get="inline" set="null" line="1019" static="1">
			<f a="arr:n">
				<x path="thx.ReadonlyArray"><c path="take.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="take.T"/></c>
			</f>
			<haxe_doc>Returns the first `n` elements from the array.</haxe_doc>
		</take>
		<takeLast public="1" params="T" get="inline" set="null" line="1024" static="1">
			<f a="arr:n">
				<x path="thx.ReadonlyArray"><c path="takeLast.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="takeLast.T"/></c>
			</f>
			<haxe_doc>Returns the last `n` elements from the array.</haxe_doc>
		</takeLast>
		<traverseOption public="1" params="T:U" set="method" line="1032" static="1">
			<f a="arr:f">
				<x path="thx.ReadonlyArray"><c path="traverseOption.T"/></x>
				<f a="">
					<c path="traverseOption.T"/>
					<e path="haxe.ds.Option"><c path="traverseOption.U"/></e>
				</f>
				<e path="haxe.ds.Option"><c path="Array"><c path="traverseOption.U"/></c></e>
			</f>
			<haxe_doc>Traverse the array with a function that may return values wrapped in Option.
If any of the values are None, return None, otherwise return the array of mapped
values in a Some.</haxe_doc>
		</traverseOption>
		<traverseValidation public="1" params="E:T:U" set="method" line="1042" static="1">
			<f a="arr:f:s">
				<x path="thx.ReadonlyArray"><c path="traverseValidation.T"/></x>
				<f a="">
					<c path="traverseValidation.T"/>
					<x path="thx.Validation">
						<c path="traverseValidation.E"/>
						<c path="traverseValidation.U"/>
					</x>
				</f>
				<x path="thx.Semigroup"><c path="traverseValidation.E"/></x>
				<x path="thx.Validation">
					<c path="traverseValidation.E"/>
					<c path="Array"><c path="traverseValidation.U"/></c>
				</x>
			</f>
			<haxe_doc>Traverse the array with a function that may return values wrapped in Validation.
If any of the values are Failures, return a Failure that accumulates all errors
from the failed values, otherwise return the array of mapped values in a Success.</haxe_doc>
		</traverseValidation>
		<traverseValidationIndexed public="1" params="E:T:U" set="method" line="1052" static="1">
			<f a="arr:f:s">
				<x path="thx.ReadonlyArray"><c path="traverseValidationIndexed.T"/></x>
				<f a=":">
					<c path="traverseValidationIndexed.T"/>
					<x path="Int"/>
					<x path="thx.Validation">
						<c path="traverseValidationIndexed.E"/>
						<c path="traverseValidationIndexed.U"/>
					</x>
				</f>
				<x path="thx.Semigroup"><c path="traverseValidationIndexed.E"/></x>
				<x path="thx.Validation">
					<c path="traverseValidationIndexed.E"/>
					<c path="Array"><c path="traverseValidationIndexed.U"/></c>
				</x>
			</f>
			<haxe_doc>Traverse the array with a function that may return values wrapped in Validation.
If any of the values are Failures, return a Failure that accumulates all errors
from the failed values, otherwise return the array of mapped values in a Success.</haxe_doc>
		</traverseValidationIndexed>
		<rotate public="1" params="T" set="method" line="1061" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="thx.ReadonlyArray"><c path="rotate.T"/></x></x>
				<c path="Array"><c path="Array"><c path="rotate.T"/></c></c>
			</f>
			<haxe_doc>Transforms an array like `[[a0,b0],[a1,b1],[a2,b2]]` into
`[[a0,a1,a2],[b0,b1,b2]]`.</haxe_doc>
		</rotate>
		<sliding2 public="1" params="T:U" set="method" line="1073" static="1"><f a="arr:f">
	<x path="thx.ReadonlyArray"><c path="sliding2.T"/></x>
	<f a=":">
		<c path="sliding2.T"/>
		<c path="sliding2.T"/>
		<c path="sliding2.U"/>
	</f>
	<c path="Array"><c path="sliding2.U"/></c>
</f></sliding2>
		<unzip public="1" params="T1:T2" set="method" line="1088" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="thx.Tuple2">
	<c path="unzip.T1"/>
	<c path="unzip.T2"/>
</x></x>
				<x path="thx.Tuple2">
					<c path="Array"><c path="unzip.T1"/></c>
					<c path="Array"><c path="unzip.T2"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple2<T1, T2> to a Tuple2<Array<T1>, Array<T2>>.]]></haxe_doc>
		</unzip>
		<unzip3 public="1" params="T1:T2:T3" set="method" line="1100" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="thx.Tuple3">
	<c path="unzip3.T1"/>
	<c path="unzip3.T2"/>
	<c path="unzip3.T3"/>
</x></x>
				<x path="thx.Tuple3">
					<c path="Array"><c path="unzip3.T1"/></c>
					<c path="Array"><c path="unzip3.T2"/></c>
					<c path="Array"><c path="unzip3.T3"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple3<T1, T2, T3> to a Tuple3<Array<T1>, Array<T2>, Array<T3>>.]]></haxe_doc>
		</unzip3>
		<unzip4 public="1" params="T1:T2:T3:T4" set="method" line="1113" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="thx.Tuple4">
	<c path="unzip4.T1"/>
	<c path="unzip4.T2"/>
	<c path="unzip4.T3"/>
	<c path="unzip4.T4"/>
</x></x>
				<x path="thx.Tuple4">
					<c path="Array"><c path="unzip4.T1"/></c>
					<c path="Array"><c path="unzip4.T2"/></c>
					<c path="Array"><c path="unzip4.T3"/></c>
					<c path="Array"><c path="unzip4.T4"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple4<T1, T2, T3, T4> to a Tuple4<Array<T1>, Array<T2>, Array<T3>, Array<T4>>.]]></haxe_doc>
		</unzip4>
		<unzip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="1127" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="thx.Tuple5">
	<c path="unzip5.T1"/>
	<c path="unzip5.T2"/>
	<c path="unzip5.T3"/>
	<c path="unzip5.T4"/>
	<c path="unzip5.T5"/>
</x></x>
				<x path="thx.Tuple5">
					<c path="Array"><c path="unzip5.T1"/></c>
					<c path="Array"><c path="unzip5.T2"/></c>
					<c path="Array"><c path="unzip5.T3"/></c>
					<c path="Array"><c path="unzip5.T4"/></c>
					<c path="Array"><c path="unzip5.T5"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple5<T1, T2, T3, T4, T5> to a Tuple5<Array<T1>, Array<T2>, Array<T3>, Array<T4>, Array<T5>>.]]></haxe_doc>
		</unzip5>
		<zip public="1" params="T1:T2" set="method" line="1142" static="1">
			<f a="array1:array2">
				<x path="thx.ReadonlyArray"><c path="zip.T1"/></x>
				<x path="thx.ReadonlyArray"><c path="zip.T2"/></x>
				<c path="Array"><x path="thx.Tuple2">
	<c path="zip.T1"/>
	<c path="zip.T2"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of two arrays in an array of `Tuple2`.</haxe_doc>
		</zip>
		<zip3 public="1" params="T1:T2:T3" set="method" line="1153" static="1">
			<f a="array1:array2:array3">
				<x path="thx.ReadonlyArray"><c path="zip3.T1"/></x>
				<x path="thx.ReadonlyArray"><c path="zip3.T2"/></x>
				<x path="thx.ReadonlyArray"><c path="zip3.T3"/></x>
				<c path="Array"><x path="thx.Tuple3">
	<c path="zip3.T1"/>
	<c path="zip3.T2"/>
	<c path="zip3.T3"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of three arrays in an array of `Tuple3`.</haxe_doc>
		</zip3>
		<zip4 public="1" params="T1:T2:T3:T4" set="method" line="1164" static="1">
			<f a="array1:array2:array3:array4">
				<x path="thx.ReadonlyArray"><c path="zip4.T1"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4.T2"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4.T3"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4.T4"/></x>
				<c path="Array"><x path="thx.Tuple4">
	<c path="zip4.T1"/>
	<c path="zip4.T2"/>
	<c path="zip4.T3"/>
	<c path="zip4.T4"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of four arrays in an array of `Tuple4`.</haxe_doc>
		</zip4>
		<zip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="1175" static="1">
			<f a="array1:array2:array3:array4:array5">
				<x path="thx.ReadonlyArray"><c path="zip5.T1"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5.T2"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5.T3"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5.T4"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5.T5"/></x>
				<c path="Array"><x path="thx.Tuple5">
	<c path="zip5.T1"/>
	<c path="zip5.T2"/>
	<c path="zip5.T3"/>
	<c path="zip5.T4"/>
	<c path="zip5.T5"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of five arrays in an array of `Tuple5`.</haxe_doc>
		</zip5>
		<zipAp public="1" params="A:B" set="method" line="1186" static="1">
			<f a="ax:fx">
				<x path="thx.ReadonlyArray"><c path="zipAp.A"/></x>
				<x path="thx.ReadonlyArray"><f a="">
	<c path="zipAp.A"/>
	<c path="zipAp.B"/>
</f></x>
				<c path="Array"><c path="zipAp.B"/></c>
			</f>
			<haxe_doc>* The 'zip' applicative functor operation.</haxe_doc>
		</zipAp>
		<zip2Ap public="1" params="A:B:C" set="method" line="1197" static="1">
			<f a="f:ax:bx">
				<f a=":">
					<c path="zip2Ap.A"/>
					<c path="zip2Ap.B"/>
					<c path="zip2Ap.C"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="zip2Ap.A"/></x>
				<x path="thx.ReadonlyArray"><c path="zip2Ap.B"/></x>
				<c path="Array"><c path="zip2Ap.C"/></c>
			</f>
			<haxe_doc>* Zip two arrays by applying the provided function to the aligned members.</haxe_doc>
		</zip2Ap>
		<zip3Ap public="1" params="A:B:C:D" set="method" line="1203" static="1">
			<f a="f:ax:bx:cx">
				<f a="::">
					<c path="zip3Ap.A"/>
					<c path="zip3Ap.B"/>
					<c path="zip3Ap.C"/>
					<c path="zip3Ap.D"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="zip3Ap.A"/></x>
				<x path="thx.ReadonlyArray"><c path="zip3Ap.B"/></x>
				<x path="thx.ReadonlyArray"><c path="zip3Ap.C"/></x>
				<c path="Array"><c path="zip3Ap.D"/></c>
			</f>
			<haxe_doc>* Zip three arrays by applying the provided function to the aligned members.</haxe_doc>
		</zip3Ap>
		<zip4Ap public="1" params="A:B:C:D:E" set="method" line="1209" static="1">
			<f a="f:ax:bx:cx:dx">
				<f a=":::">
					<c path="zip4Ap.A"/>
					<c path="zip4Ap.B"/>
					<c path="zip4Ap.C"/>
					<c path="zip4Ap.D"/>
					<c path="zip4Ap.E"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="zip4Ap.A"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4Ap.B"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4Ap.C"/></x>
				<x path="thx.ReadonlyArray"><c path="zip4Ap.D"/></x>
				<c path="Array"><c path="zip4Ap.E"/></c>
			</f>
			<haxe_doc>* Zip four arrays by applying the provided function to the aligned members.</haxe_doc>
		</zip4Ap>
		<zip5Ap public="1" params="A:B:C:D:E:F" set="method" line="1215" static="1">
			<f a="f:ax:bx:cx:dx:ex">
				<f a="::::">
					<c path="zip5Ap.A"/>
					<c path="zip5Ap.B"/>
					<c path="zip5Ap.C"/>
					<c path="zip5Ap.D"/>
					<c path="zip5Ap.E"/>
					<c path="zip5Ap.F"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="zip5Ap.A"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5Ap.B"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5Ap.C"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5Ap.D"/></x>
				<x path="thx.ReadonlyArray"><c path="zip5Ap.E"/></x>
				<c path="Array"><c path="zip5Ap.F"/></c>
			</f>
			<haxe_doc>* Zip five arrays by applying the provided function to the aligned members.</haxe_doc>
		</zip5Ap>
		<withPrepend public="1" params="T" get="inline" set="null" line="1221" static="1">
			<f a="arr:el">
				<x path="thx.ReadonlyArray"><c path="withPrepend.T"/></x>
				<c path="withPrepend.T"/>
				<x path="thx.ReadonlyArray"><c path="withPrepend.T"/></x>
			</f>
			<haxe_doc>Returns a copy of the array with the new element added to the beginning.</haxe_doc>
		</withPrepend>
		<with public="1" params="T" get="inline" set="null" line="1227" static="1">
			<f a="arr:el">
				<x path="thx.ReadonlyArray"><c path="with.T"/></x>
				<c path="with.T"/>
				<x path="thx.ReadonlyArray"><c path="with.T"/></x>
			</f>
			<haxe_doc>Returns a copy of the array with the new element added to the end.</haxe_doc>
		</with>
		<withSlice public="1" params="T" set="method" line="1233" static="1">
			<f a="arr:other:start:?length" v=":::0">
				<x path="thx.ReadonlyArray"><c path="withSlice.T"/></x>
				<x path="thx.ReadonlyArray"><c path="withSlice.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="thx.ReadonlyArray"><c path="withSlice.T"/></x>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Returns a copy of the array with the `other` elements inserted at `start`. The `length` elements after `start` are going to be removed.</haxe_doc>
		</withSlice>
		<withInsert public="1" params="T" set="method" line="1239" static="1">
			<f a="arr:el:pos">
				<x path="thx.ReadonlyArray"><c path="withInsert.T"/></x>
				<c path="withInsert.T"/>
				<x path="Int"/>
				<x path="thx.ReadonlyArray"><c path="withInsert.T"/></x>
			</f>
			<haxe_doc>Returns a copy of the array with the new element inserted at position `pos`.</haxe_doc>
		</withInsert>
		<maxBy public="1" params="A" set="method" line="1245" static="1">
			<f a="arr:ord">
				<x path="thx.ReadonlyArray"><c path="maxBy.A"/></x>
				<x path="thx.Ord"><c path="maxBy.A"/></x>
				<e path="haxe.ds.Option"><c path="maxBy.A"/></e>
			</f>
			<haxe_doc>Finds the min element of the array given the specified ordering.</haxe_doc>
		</maxBy>
		<minBy public="1" params="A" set="method" line="1251" static="1">
			<f a="arr:ord">
				<x path="thx.ReadonlyArray"><c path="minBy.A"/></x>
				<x path="thx.Ord"><c path="minBy.A"/></x>
				<e path="haxe.ds.Option"><c path="minBy.A"/></e>
			</f>
			<haxe_doc>Finds the min element of the array given the specified ordering.</haxe_doc>
		</minBy>
		<toMap public="1" params="K:V" set="method" line="1258" static="1">
			<f a="arr:keyOrder">
				<x path="thx.ReadonlyArray"><t path="thx.Tuple">
	<c path="toMap.K"/>
	<c path="toMap.V"/>
</t></x>
				<x path="thx.Ord"><c path="toMap.K"/></x>
				<t path="thx.VNel">
					<c path="toMap.K"/>
					<x path="thx.fp.Map">
						<c path="toMap.K"/>
						<c path="toMap.V"/>
					</x>
				</t>
			</f>
			<haxe_doc>* Convert an array of tuples to a map. If there are collisions between keys,
   * return an error.</haxe_doc>
		</toMap>
		<toStringMap public="1" params="V" set="method" line="1273" static="1"><f a="arr">
	<x path="thx.ReadonlyArray"><t path="thx.Tuple">
	<c path="String"/>
	<c path="toStringMap.V"/>
</t></x>
	<x path="Map">
		<c path="String"/>
		<c path="toStringMap.V"/>
	</x>
</f></toStringMap>
		<partition public="1" params="T" set="method" line="1286" static="1">
			<f a="arr:f">
				<x path="thx.ReadonlyArray"><c path="partition.T"/></x>
				<f a="">
					<c path="partition.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.Tuple2">
					<c path="Array"><c path="partition.T"/></c>
					<c path="Array"><c path="partition.T"/></c>
				</x>
			</f>
			<haxe_doc>Produces a `Tuple2` containing two `Array`, the left being elements where `f(e) == true`, the rest in the right.</haxe_doc>
		</partition>
		<partitionWhile public="1" params="T" set="method" line="1300" static="1">
			<f a="arr:f">
				<x path="thx.ReadonlyArray"><c path="partitionWhile.T"/></x>
				<f a="">
					<c path="partitionWhile.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.Tuple2">
					<c path="Array"><c path="partitionWhile.T"/></c>
					<c path="Array"><c path="partitionWhile.T"/></c>
				</x>
			</f>
			<haxe_doc>Produces a `Tuple2` containing two `Arrays`, the difference from partition being that after the predicate
  returns true once, the rest of the elements will be in the right hand of the tuple, regardless of
  the result of the predicate.</haxe_doc>
		</partitionWhile>
		<dropLeft public="1" params="T" set="method" line="1320" static="1">
			<f a="a:n">
				<x path="thx.ReadonlyArray"><c path="dropLeft.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="dropLeft.T"/></c>
			</f>
			<haxe_doc>Produces an Array from `a[n]` to the last element of `a`.</haxe_doc>
		</dropLeft>
		<dropRight public="1" params="T" set="method" line="1326" static="1">
			<f a="a:n">
				<x path="thx.ReadonlyArray"><c path="dropRight.T"/></x>
				<x path="Int"/>
				<c path="Array"><c path="dropRight.T"/></c>
			</f>
			<haxe_doc>Produces an Array from `a[0]` to a[a.length-n].</haxe_doc>
		</dropRight>
		<dropWhile public="1" params="T" set="method" line="1332" static="1">
			<f a="a:p">
				<x path="thx.ReadonlyArray"><c path="dropWhile.T"/></x>
				<f a="">
					<c path="dropWhile.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="dropWhile.T"/></c>
			</f>
			<haxe_doc>Drops values from Array `a` while the predicate returns true.</haxe_doc>
		</dropWhile>
		<pad public="1" params="T" set="method" line="1346" static="1">
			<f a="arr:len:?def">
				<x path="thx.ReadonlyArray"><c path="pad.T"/></x>
				<x path="Int"/>
				<c path="pad.T"/>
				<c path="Array"><c path="pad.T"/></c>
			</f>
			<haxe_doc>Pads out to len with optional default `def`, ignores if len is less than Array length.</haxe_doc>
		</pad>
		<fill public="1" params="T" set="method" line="1357" static="1">
			<f a="arr:def">
				<x path="thx.ReadonlyArray"><c path="fill.T"/></x>
				<c path="fill.T"/>
				<c path="Array"><c path="fill.T"/></c>
			</f>
			<haxe_doc>Fills `null` values in `arr` with `def`.</haxe_doc>
		</fill>
		<haxe_doc>`Arrays` provides additional extension methods on top of the `Array` type.

Note that some of the examples imply `using thx.Arrays;`.</haxe_doc>
	</class>
	<class path="thx.ArrayFloats" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Arrays.hx" module="thx.Arrays">
		<average public="1" set="method" line="1375" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<haxe_doc>Finds the average of all the elements in the array.

It returns `NaN` if the array is empty.</haxe_doc>
		</average>
		<compact public="1" set="method" line="1382" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><t path="Null"><x path="Float"/></t></x>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>Filters out all null or Math.NaN floats in the array</haxe_doc>
		</compact>
		<max public="1" set="method" line="1389" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Float"/></x>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the max float element in the array.</haxe_doc>
		</max>
		<min public="1" set="method" line="1395" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Float"/></x>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the min float element in the array.</haxe_doc>
		</min>
		<resize public="1" set="method" line="1404" static="1">
			<f a="array:length:?fill" v="::0.0">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ fill : 0.0 }</e></m></meta>
			<haxe_doc>Resizes an array of `Float` to an arbitrary length by adding more elements (default is `0.0`)
to its end or by removing extra elements.

Note that the function changes the passed array and doesn't create a copy.</haxe_doc>
		</resize>
		<resized public="1" set="method" line="1419" static="1">
			<f a="array:length:?fill" v="::0.0">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ fill : 0.0 }</e></m></meta>
			<haxe_doc>Copies and resizes an array of `Float` to an arbitrary length by adding more
elements (default is `0.0`) to its end or by removing extra elements.

Note that the function creates and returns a copy of the passed array.</haxe_doc>
		</resized>
		<standardDeviation public="1" set="method" line="1427" static="1">
			<f a="array">
				<x path="thx.ReadonlyArray"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the sample standard deviation of the sampled values.</haxe_doc>
		</standardDeviation>
		<sum public="1" set="method" line="1440" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Float"/></x>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the sum of all the elements in the array.</haxe_doc>
		</sum>
		<haxe_doc><![CDATA[Helper class for `Array<Float>`.]]></haxe_doc>
	</class>
	<class path="thx.ArrayInts" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Arrays.hx" module="thx.Arrays">
		<average public="1" set="method" line="1451" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Int"/></x>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the average of all the elements in the array.</haxe_doc>
		</average>
		<max public="1" set="method" line="1457" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Int"/></x>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Finds the max int element in the array.</haxe_doc>
		</max>
		<min public="1" set="method" line="1463" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Int"/></x>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Finds the min int element in the array.</haxe_doc>
		</min>
		<resize public="1" set="method" line="1472" static="1">
			<f a="array:length:?fill" v="::0">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ fill : 0 }</e></m></meta>
			<haxe_doc>Resizes an array of `Int` to an arbitrary length by adding more elements (default is `0`)
to its end or by removing extra elements.

Note that the function changes the passed array and doesn't create a copy.</haxe_doc>
		</resize>
		<resized public="1" set="method" line="1485" static="1">
			<f a="array:length:?fill" v="::0">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ fill : 0 }</e></m></meta>
			<haxe_doc>Copies and resizes an array of `Int` to an arbitrary length by adding more
elements (default is `0`) to its end or by removing extra elements.

Note that the function creates and returns a copy of the passed array.</haxe_doc>
		</resized>
		<sum public="1" set="method" line="1493" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><x path="Int"/></x>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Finds the sum of all the elements in the array.</haxe_doc>
		</sum>
		<haxe_doc><![CDATA[Helper class for `Array<Int>`.]]></haxe_doc>
	</class>
	<class path="thx.ArrayStrings" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Arrays.hx" module="thx.Arrays">
		<compact public="1" set="method" line="1504" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="String"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Filters out all null or empty strings in the array</haxe_doc>
		</compact>
		<max public="1" set="method" line="1510" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="String"/></x>
				<t path="Null"><c path="String"/></t>
			</f>
			<haxe_doc>Finds the max string element in the array.</haxe_doc>
		</max>
		<min public="1" set="method" line="1516" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="String"/></x>
				<t path="Null"><c path="String"/></t>
			</f>
			<haxe_doc>Finds the min string element in the array.</haxe_doc>
		</min>
		<haxe_doc><![CDATA[Helper class for `Array<String>`.]]></haxe_doc>
	</class>
	<class path="thx.Bools" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Bools.hx">
		<compare public="1" set="method" line="9" static="1">
			<f a="a:b">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns a comparison value (`Int`) from two boolean values.</haxe_doc>
		</compare>
		<toInt public="1" set="method" line="15" static="1">
			<f a="v">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Converts a boolean to an integer value (`true` => `1`, `false` => `0`).]]></haxe_doc>
		</toInt>
		<canParse public="1" set="method" line="21" static="1">
			<f a="v">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed value is either `true` or `false` (case insensitive).</haxe_doc>
		</canParse>
		<parse public="1" set="method" line="29" static="1">
			<f a="v">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true`/`false` if the passed value is `true`/`false` (case insensitive); with any other value it will return null.</haxe_doc>
		</parse>
		<xor public="1" get="inline" set="null" line="38" static="1">
			<f a="a:b">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` when arguments are different.</haxe_doc>
		</xor>
		<option public="1" params="A" get="inline" set="null" line="45" static="1">
			<f a="cond:a">
				<x path="Bool"/>
				<c path="option.A"/>
				<e path="haxe.ds.Option"><c path="option.A"/></e>
			</f>
			<haxe_doc>* Depending upon the condition, return the provided value wrapped 
   * in a Some, or None if the condition is false.</haxe_doc>
		</option>
	</class>
	<class path="thx._Ord.Ord_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" private="1" module="thx.Ord">
		<order public="1" set="method" line="45" static="1">
			<f a="this:a0:a1">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<meta><m n=":impl"/></meta>
		</order>
		<max public="1" set="method" line="48" static="1">
			<f a="this:a0:a1">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</max>
		<min public="1" set="method" line="54" static="1">
			<f a="this:a0:a1">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</min>
		<equal public="1" set="method" line="60" static="1">
			<f a="this:a0:a1">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</equal>
		<contramap public="1" params="B" set="method" line="63" static="1">
			<f a="this:f">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<f a="">
					<c path="contramap.B"/>
					<c path="thx.Ord.A"/>
				</f>
				<x path="thx.Ord"><c path="contramap.B"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</contramap>
		<inverse public="1" set="method" line="66" static="1">
			<f a="this">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<x path="thx.Ord"><c path="thx.Ord.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</inverse>
		<intComparison public="1" set="method" line="69" static="1">
			<f a="this:a0:a1">
				<f a=":">
					<c path="thx.Ord.A"/>
					<c path="thx.Ord.A"/>
					<x path="thx.Ordering"/>
				</f>
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</intComparison>
		<fromIntComparison public="1" params="A" set="method" line="76" static="1"><f a="f">
	<f a=":">
		<c path="fromIntComparison.A"/>
		<c path="fromIntComparison.A"/>
		<x path="Int"/>
	</f>
	<x path="thx.Ord"><c path="fromIntComparison.A"/></x>
</f></fromIntComparison>
		<forComparable public="1" params="T" set="method" line="79" static="1"><f a=""><x path="thx.Ord"><c path="forComparable.T"/></x></f></forComparable>
		<forComparableOrd public="1" params="T" set="method" line="82" static="1"><f a=""><x path="thx.Ord"><c path="forComparableOrd.T"/></x></f></forComparableOrd>
		<meta><m n=":final"/></meta>
	</class>
	<class path="thx._Ord.Ordering_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" private="1" module="thx.Ord">
		<fromInt public="1" set="method" line="8" static="1"><f a="value">
	<x path="Int"/>
	<x path="thx.Ordering"/>
</f></fromInt>
		<fromFloat public="1" set="method" line="11" static="1"><f a="value">
	<x path="Float"/>
	<x path="thx.Ordering"/>
</f></fromFloat>
		<toInt public="1" set="method" line="14" static="1">
			<f a="this">
				<e path="thx.OrderingImpl"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toInt>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="thx.OrderingImpl" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" module="thx.Ord">
		<LT/>
		<GT/>
		<EQ/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="thx.Dates" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Dates.hx">
		<compare public="1" set="method" line="19" static="1">
			<f a="a:b">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It compares two dates.</haxe_doc>
		</compare>
		<create public="1" set="method" line="29" static="1">
			<f a="year:?month:?day:?hour:?minute:?second" v=":0:1:0:0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<meta>
				<m n=":value"><e>{ second : 0, minute : 0, hour : 0, day : 1, month : 0 }</e></m>
				<m n=":noUsing"/>
			</meta>
			<haxe_doc>Creates a Date by using the passed year, month, day, hour, minute, second.

Note that each argument can overflow its normal boundaries (e.g. a month value of `-33` is perfectly valid)
and the method will normalize that value by offsetting the other arguments by the right amount.</haxe_doc>
		</create>
		<daysRange public="1" set="method" line="78" static="1">
			<f a="start:end">
				<c path="Date"/>
				<c path="Date"/>
				<c path="Array"><c path="Date"/></c>
			</f>
			<haxe_doc>Creates an array of dates that begin at `start` and end at `end` included.

Time values are pick from the `start` value except for the last value that will
match `end`. No interpolation is made.</haxe_doc>
		</daysRange>
		<equals public="1" get="inline" set="null" line="92" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed dates are the same.</haxe_doc>
		</equals>
		<nearEquals public="1" set="method" line="102" static="1">
			<f a="self:other:?units:?period" v="::1:">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Int"/>
				<e path="thx.TimePeriod"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ units : 1 }</e></m></meta>
			<haxe_doc>Returns `true` if the dates are approximately equals. The amount of delta
allowed is determined by `units` and it spans that amount equally before and
after the `self` date. The default `unit` value is `1`.

The default `period` range is `Second`.</haxe_doc>
		</nearEquals>
		<greater public="1" get="inline" set="null" line="115" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the `self` date is greater than `other`.</haxe_doc>
		</greater>
		<more public="1" get="inline" set="null" line="119" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"more is deprecated, use greater instead"</e></m></meta>
		</more>
		<less public="1" get="inline" set="null" line="125" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the `self` date is lesser than `other`.</haxe_doc>
		</less>
		<greaterEquals public="1" get="inline" set="null" line="131" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the `self` date is greater than or equal to `other`.</haxe_doc>
		</greaterEquals>
		<moreEqual public="1" get="inline" set="null" line="135" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"moreEqual is deprecated, use greaterEquals instead"</e></m></meta>
		</moreEqual>
		<lessEquals public="1" get="inline" set="null" line="141" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the `self` date is lesser than or equal to `other`.</haxe_doc>
		</lessEquals>
		<lessEqual public="1" get="inline" set="null" line="145" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"lessEqual is deprecated, use lessEquals instead"</e></m></meta>
		</lessEqual>
		<isLeapYear public="1" set="method" line="154" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a year is a leap year.

@param year The year, represented as a 4 digit integer
@return True if a leap year, false otherwise.</haxe_doc>
		</isLeapYear>
		<isInLeapYear public="1" get="inline" set="null" line="170" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the given date is inside a leap year.

@param date The date object to check.
@return True if it is in a leap year, false otherwise.</haxe_doc>
		</isInLeapYear>
		<daysInMonth public="1" set="method" line="180" static="1">
			<f a="year:month">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in a month.

@param month An integer representing the month. (Jan=0, Dec=11)
@param year An 4 digit integer representing the year.
@return Int, the number of days in the month.
@throws Error if the month is not between 0 and 11.</haxe_doc>
		</daysInMonth>
		<numDaysInMonth public="1" set="method" line="192" static="1">
			<f a="month:year">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":deprecated"><e>"Use daysIntMonth instead. Also notice that arguments are inverted now"</e></m></meta>
		</numDaysInMonth>
		<daysInThisMonth public="1" set="method" line="201" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Tells how many days in the month of the given date.

@param date The date representing the month we are checking.
@return Int, the number of days in the month.</haxe_doc>
		</daysInThisMonth>
		<numDaysInThisMonth public="1" set="method" line="205" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<meta><m n=":depreacated"><e>"use daysInThisMonth instead"</e></m></meta>
		</numDaysInThisMonth>
		<sameYear public="1" set="method" line="211" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the 2 dates share the same year.</haxe_doc>
		</sameYear>
		<sameMonth public="1" set="method" line="217" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the 2 dates share the same year and month.</haxe_doc>
		</sameMonth>
		<sameDay public="1" set="method" line="223" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the 2 dates share the same year, month and day.</haxe_doc>
		</sameDay>
		<sameHour public="1" set="method" line="229" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the 2 dates share the same year, month, day and hour.</haxe_doc>
		</sameHour>
		<sameMinute public="1" set="method" line="235" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the 2 dates share the same year, month, day, hour and minute.</haxe_doc>
		</sameMinute>
		<snapNext public="1" get="inline" set="null" line="245" static="1">
			<f a="date:period">
				<c path="Date"/>
				<e path="thx.TimePeriod"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Snaps a Date to the next second, minute, hour, day, week, month or year.

@param date The date to snap.  See Date.
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The snapped date.</haxe_doc>
		</snapNext>
		<snapPrev public="1" get="inline" set="null" line="255" static="1">
			<f a="date:period">
				<c path="Date"/>
				<e path="thx.TimePeriod"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Snaps a Date to the previous second, minute, hour, day, week, month or year.

@param date The date to snap.  See Date.
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The snapped date.</haxe_doc>
		</snapPrev>
		<snapTo public="1" get="inline" set="null" line="265" static="1">
			<f a="date:period">
				<c path="Date"/>
				<e path="thx.TimePeriod"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Snaps a Date to the nearest second, minute, hour, day, week, month or year.

@param date The date to snap.  See Date.
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The snapped date.</haxe_doc>
		</snapTo>
		<jump public="1" set="method" line="279" static="1">
			<f a="date:period:amount">
				<c path="Date"/>
				<e path="thx.TimePeriod"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Get a date relative to the current date, shifting by a set period of time.

  Please note this works by constructing a new date object, rather than using `DateTools.delta()`.
  The key difference is that this allows us to jump over a period that may not be a set number of seconds.
  For example, jumping between months (which have different numbers of days), leap years, leap seconds, daylight savings time changes etc.

  @param date The starting date.
  @param period The TimePeriod you wish to jump by, Second, Minute, Hour, Day, Week, Month or Year.
  @param amount The multiple of `period` that you wish to jump by. A positive amount moves forward in time, a negative amount moves backward.</haxe_doc>
		</jump>
		<max public="1" set="method" line="303" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Finds and returns which of the two passed dates is the newest.</haxe_doc>
		</max>
		<min public="1" set="method" line="309" static="1">
			<f a="self:other">
				<c path="Date"/>
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Finds and returns which of the two passed dates is the oldest.</haxe_doc>
		</min>
		<snapToWeekDay public="1" set="method" line="322" static="1">
			<f a="date:day:?firstDayOfWk" v="::Sunday">
				<c path="Date"/>
				<x path="thx.Weekday"/>
				<x path="thx.Weekday"/>
				<c path="Date"/>
			</f>
			<meta><m n=":value"><e>{ firstDayOfWk : Sunday }</e></m></meta>
			<haxe_doc>Snaps a date to the given weekday inside the current week.  The time within the day will stay the same.

If you are already on the given day, the date will not change.

@param date The date value to snap
@param day Day to snap to.  Either `Sunday`, `Monday`, `Tuesday` etc.
@param firstDayOfWk The first day of the week.  Default to `Sunday`.
@return The date of the day you have snapped to.</haxe_doc>
		</snapToWeekDay>
		<snapNextWeekDay public="1" set="method" line="341" static="1">
			<f a="date:day">
				<c path="Date"/>
				<x path="thx.Weekday"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Snaps a date to the next given weekday.  The time within the day will stay the same.

If you are already on the given day, the date will not change.

@param date The date value to snap
@param day Day to snap to.  Either `Sunday`, `Monday`, `Tuesday` etc.
@return The date of the day you have snapped to.</haxe_doc>
		</snapNextWeekDay>
		<snapPrevWeekDay public="1" set="method" line="359" static="1">
			<f a="date:day">
				<c path="Date"/>
				<x path="thx.Weekday"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Snaps a date to the previous given weekday.  The time within the day will stay the same.

If you are already on the given day, the date will not change.

@param date The date value to snap
@param day Day to snap to.  Either `Sunday`, `Monday`, `Tuesday` etc.
@return The date of the day you have snapped to.</haxe_doc>
		</snapPrevWeekDay>
		<prevYear public="1" get="inline" set="null" line="371" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 year before the given date/time.</haxe_doc>
		</prevYear>
		<nextYear public="1" get="inline" set="null" line="377" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 year after the given date/time.</haxe_doc>
		</nextYear>
		<prevMonth public="1" get="inline" set="null" line="383" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 month before the given date/time.</haxe_doc>
		</prevMonth>
		<nextMonth public="1" get="inline" set="null" line="389" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 month after the given date/time.</haxe_doc>
		</nextMonth>
		<prevWeek public="1" get="inline" set="null" line="395" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 week before the given date/time.</haxe_doc>
		</prevWeek>
		<nextWeek public="1" get="inline" set="null" line="401" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 week after the given date/time.</haxe_doc>
		</nextWeek>
		<prevDay public="1" get="inline" set="null" line="407" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 day before the given date/time.</haxe_doc>
		</prevDay>
		<nextDay public="1" get="inline" set="null" line="413" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 day after the given date/time.</haxe_doc>
		</nextDay>
		<prevHour public="1" get="inline" set="null" line="419" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 hour before the given date/time.</haxe_doc>
		</prevHour>
		<nextHour public="1" get="inline" set="null" line="425" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 hour after the given date/time.</haxe_doc>
		</nextHour>
		<prevMinute public="1" get="inline" set="null" line="431" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 minute before the given date/time.</haxe_doc>
		</prevMinute>
		<nextMinute public="1" get="inline" set="null" line="437" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 minute after the given date/time.</haxe_doc>
		</nextMinute>
		<prevSecond public="1" get="inline" set="null" line="443" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 second before the given date/time.</haxe_doc>
		</prevSecond>
		<nextSecond public="1" get="inline" set="null" line="449" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date, exactly 1 second after the given date/time.</haxe_doc>
		</nextSecond>
		<withYear public="1" set="method" line="455" static="1">
			<f a="date:year">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the year.</haxe_doc>
		</withYear>
		<withMonth public="1" set="method" line="461" static="1">
			<f a="date:month">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the month (remember that month indexes begin at zero).</haxe_doc>
		</withMonth>
		<withDay public="1" set="method" line="467" static="1">
			<f a="date:day">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the day.</haxe_doc>
		</withDay>
		<withHour public="1" set="method" line="473" static="1">
			<f a="date:hour">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the hour.</haxe_doc>
		</withHour>
		<withMinute public="1" set="method" line="479" static="1">
			<f a="date:minute">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the minute.</haxe_doc>
		</withMinute>
		<withSecond public="1" set="method" line="485" static="1">
			<f a="date:second">
				<c path="Date"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a new date that is modified only by the second.</haxe_doc>
		</withSecond>
		<parseDate public="1" set="method" line="491" static="1">
			<f a="s">
				<c path="String"/>
				<e path="thx.Either">
					<c path="String"/>
					<c path="Date"/>
				</e>
			</f>
			<haxe_doc>* Safely parse a string value to a date.</haxe_doc>
		</parseDate>
		<order public="1" set="null" expr="Ord.fromIntComparison(compare)" line="499" static="1">
			<x path="thx.Ord"><c path="Date"/></x>
			<meta><m n=":value"><e>Ord.fromIntComparison(compare)</e></m></meta>
		</order>
		<haxe_doc>`Dates` provides additional extension methods on top of the `Date` type.

```
using Dates;
```

@author Jason O'Neil
@author Franco Ponticelli</haxe_doc>
	</class>
	<typedef path="thx.HaxeDateTools" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Dates.hx" module="thx.Dates">
		<c path="DateTools"/>
		<haxe_doc>Alias of `DateTools`, included so mixins work with `using thx.Dates;`</haxe_doc>
	</typedef>
	<class path="thx.Dynamics" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Dynamics.hx">
		<equals public="1" params="T1:T2" set="method" line="14" static="1">
			<f a="a:b">
				<c path="equals.T1"/>
				<c path="equals.T2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Structural and recursive equality.</haxe_doc>
		</equals>
		<clone public="1" set="method" line="167" static="1">
			<f a="v:?cloneInstances" v=":false">
				<d/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ cloneInstances : false }</e></m></meta>
			<haxe_doc>Clone the object.

Null values, strings, dates, numbers, enums and functions are immutable so will be returned as is.
Anonymous objects will be created and each field cloned recursively.
Arrays will be recreated and each object cloned recursively.
Class instances will either be cloned, or the reference copied, depending on the value of `cloneInstances`.

@param v The object which will be cloned.
@param cloneInstances If true, class instances will be cloned using `Type.createEmptyInstance` and `Reflect.setField`. If false, class instances will be re-used, not cloned. Default is false.</haxe_doc>
		</clone>
		<compare public="1" set="method" line="200" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares two runtime values trying to match values.</haxe_doc>
		</compare>
		<string public="1" set="method" line="238" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert any value into a `String`.</haxe_doc>
		</string>
		<haxe_doc>`Dynamics` provides additional extension methods on any type.</haxe_doc>
	</class>
	<class path="thx.DynamicsT" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Dynamics.hx" module="thx.Dynamics">
		<isEmpty public="1" params="T" get="inline" set="null" line="274" static="1">
			<f a="o">
				<d><c path="isEmpty.T"/></d>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isEmpty` returns `true` if the object doesn't have any field.</haxe_doc>
		</isEmpty>
		<exists public="1" params="T" get="inline" set="null" line="280" static="1">
			<f a="o:name">
				<d><c path="exists.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`exists` returns true if `o` contains a field named `name`.</haxe_doc>
		</exists>
		<fields public="1" params="T" get="inline" set="null" line="286" static="1">
			<f a="o">
				<d><c path="fields.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>`fields` returns an array of string containing the field names of the argument object.</haxe_doc>
		</fields>
		<merge public="1" params="T" set="method" line="295" static="1">
			<f a="to:from:?replacef">
				<d><c path="merge.T"/></d>
				<d><c path="merge.T"/></d>
				<f a="::">
					<c path="String"/>
					<d/>
					<d/>
					<d/>
				</f>
				<d><c path="merge.T"/></d>
			</f>
			<haxe_doc>Copies the values from the fields of `from` to `to`. If `to` already contains those fields, then it replace
  those values with the return value of the function `replacef`.

  If not set, `replacef` always returns the value from the `from` object.</haxe_doc>
		</merge>
		<toMap public="1" params="T" set="method" line="313" static="1">
			<f a="o">
				<d><c path="toMap.T"/></d>
				<x path="Map">
					<c path="String"/>
					<c path="toMap.T"/>
				</x>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[`objectToMap` transforms an anonymous object into an instance of `Map<String, Dynamic>`.]]></haxe_doc>
		</toMap>
		<size public="1" params="T" get="inline" set="null" line="322" static="1">
			<f a="o">
				<d><c path="size.T"/></d>
				<x path="Int"/>
			</f>
			<haxe_doc>`size` returns how many fields are present in the object.</haxe_doc>
		</size>
		<values public="1" params="T" get="inline" set="null" line="328" static="1">
			<f a="o">
				<d><c path="values.T"/></d>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>`values` returns an array of dynamic values containing the values of each field in the argument object.</haxe_doc>
		</values>
		<tuples public="1" params="T" set="method" line="335" static="1">
			<f a="o">
				<d><c path="tuples.T"/></d>
				<c path="Array"><x path="thx.Tuple2">
	<c path="String"/>
	<c path="tuples.T"/>
</x></c>
			</f>
			<haxe_doc><![CDATA[Converts an object into an Array<Tuple2<String, Dynamic>> where the left value (_0) of the
  tuple is the field name and the right value (_1) is the field value.]]></haxe_doc>
		</tuples>
	</class>
	<enum path="thx.Either" params="L:R" file="/Users/francoponticelli/projects/thx.core/src/thx/Either.hx">
		<Left a="value">
			<c path="thx.Either.L"/>
			<haxe_doc>Left contructors wrapping a value of type L</haxe_doc>
		</Left>
		<Right a="value">
			<c path="thx.Either.R"/>
			<haxe_doc>Right contructors wrapping a value of type R</haxe_doc>
		</Right>
		<haxe_doc>`Either` wraps one value of two possible types.</haxe_doc>
	</enum>
	<class path="thx.Eithers" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Eithers.hx">
		<isLeft public="1" params="L:R" set="method" line="12" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="isLeft.L"/>
					<c path="isLeft.R"/>
				</e>
				<x path="Bool"/>
			</f>
			<haxe_doc>Indicates if the either has a Left value</haxe_doc>
		</isLeft>
		<isRight public="1" params="L:R" set="method" line="22" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="isRight.L"/>
					<c path="isRight.R"/>
				</e>
				<x path="Bool"/>
			</f>
			<haxe_doc>Indicates if the either has a Right value</haxe_doc>
		</isRight>
		<toLeft public="1" params="L:R" set="method" line="32" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="toLeft.L"/>
					<c path="toLeft.R"/>
				</e>
				<e path="haxe.ds.Option"><c path="toLeft.L"/></e>
			</f>
			<haxe_doc><![CDATA[Converts the Either<L, R> to an Option<L> containing the Left value if Left, or None if Right.]]></haxe_doc>
		</toLeft>
		<toRight public="1" params="L:R" set="method" line="42" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="toRight.L"/>
					<c path="toRight.R"/>
				</e>
				<e path="haxe.ds.Option"><c path="toRight.R"/></e>
			</f>
			<haxe_doc><![CDATA[Converts the Either<L, R> to an Option<R> containing the Right value if Right, or None if Left.]]></haxe_doc>
		</toRight>
		<toLeftUnsafe public="1" params="L:R" set="method" line="52" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="toLeftUnsafe.L"/>
					<c path="toLeftUnsafe.R"/>
				</e>
				<t path="Null"><c path="toLeftUnsafe.L"/></t>
			</f>
			<haxe_doc>Extracts the left value if Left, or null if Right.</haxe_doc>
		</toLeftUnsafe>
		<toRightUnsafe public="1" params="L:R" set="method" line="62" static="1">
			<f a="either">
				<e path="thx.Either">
					<c path="toRightUnsafe.L"/>
					<c path="toRightUnsafe.R"/>
				</e>
				<t path="Null"><c path="toRightUnsafe.R"/></t>
			</f>
			<haxe_doc>Extracts the right value if Right, or null if Left.</haxe_doc>
		</toRightUnsafe>
		<map public="1" params="L:RIn:ROut" set="method" line="69" static="1"><f a="either:f">
	<e path="thx.Either">
		<c path="map.L"/>
		<c path="map.RIn"/>
	</e>
	<f a="">
		<c path="map.RIn"/>
		<c path="map.ROut"/>
	</f>
	<e path="thx.Either">
		<c path="map.L"/>
		<c path="map.ROut"/>
	</e>
</f></map>
		<flatMap public="1" params="L:RIn:ROut" set="method" line="78" static="1">
			<f a="either:f">
				<e path="thx.Either">
					<c path="flatMap.L"/>
					<c path="flatMap.RIn"/>
				</e>
				<f a="">
					<c path="flatMap.RIn"/>
					<e path="thx.Either">
						<c path="flatMap.L"/>
						<c path="flatMap.ROut"/>
					</e>
				</f>
				<e path="thx.Either">
					<c path="flatMap.L"/>
					<c path="flatMap.ROut"/>
				</e>
			</f>
			<haxe_doc><![CDATA[Maps an Either<L, RIn> to and Either<L, ROut>.]]></haxe_doc>
		</flatMap>
		<leftMap public="1" params="LIn:LOut:R" set="method" line="85" static="1"><f a="either:f">
	<e path="thx.Either">
		<c path="leftMap.LIn"/>
		<c path="leftMap.R"/>
	</e>
	<f a="">
		<c path="leftMap.LIn"/>
		<c path="leftMap.LOut"/>
	</f>
	<e path="thx.Either">
		<c path="leftMap.LOut"/>
		<c path="leftMap.R"/>
	</e>
</f></leftMap>
		<orThrow public="1" params="L:R" set="method" line="91" static="1"><f a="either:message">
	<e path="thx.Either">
		<c path="orThrow.L"/>
		<c path="orThrow.R"/>
	</e>
	<c path="String"/>
	<c path="orThrow.R"/>
</f></orThrow>
		<toVNel public="1" params="E:T" set="method" line="97" static="1"><f a="either">
	<e path="thx.Either">
		<c path="toVNel.E"/>
		<c path="toVNel.T"/>
	</e>
	<t path="thx.VNel">
		<c path="toVNel.E"/>
		<c path="toVNel.T"/>
	</t>
</f></toVNel>
		<cata public="1" params="L:R:A" set="method" line="103" static="1"><f a="either:l:r">
	<e path="thx.Either">
		<c path="cata.L"/>
		<c path="cata.R"/>
	</e>
	<f a="">
		<c path="cata.L"/>
		<c path="cata.A"/>
	</f>
	<f a="">
		<c path="cata.R"/>
		<c path="cata.A"/>
	</f>
	<c path="cata.A"/>
</f></cata>
		<orElse public="1" params="L:R" set="method" line="109" static="1"><f a="e0:e1">
	<e path="thx.Either">
		<c path="orElse.L"/>
		<c path="orElse.R"/>
	</e>
	<e path="thx.Either">
		<c path="orElse.L"/>
		<c path="orElse.R"/>
	</e>
	<e path="thx.Either">
		<c path="orElse.L"/>
		<c path="orElse.R"/>
	</e>
</f></orElse>
		<haxe_doc>Extension methods for the `thx.Either` type.</haxe_doc>
	</class>
	<class path="thx.Enums" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Enums.hx">
		<string public="1" params="T" set="method" line="10" static="1">
			<f a="e">
				<c path="string.T"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts an enum value into a `String` representation.</haxe_doc>
		</string>
		<compare public="1" params="T" set="method" line="23" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares two enum values. Comparison is based on the constructor definition
index. If `a` and `b` are the same constructor and have parameters, parameters
are compared using the same rules applied for `thx.Arrays.compare`.</haxe_doc>
		</compare>
		<sameConstructor public="1" params="T" get="inline" set="null" line="33" static="1">
			<f a="a:b">
				<c path="sameConstructor.T"/>
				<c path="sameConstructor.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares two enum instances for equality ignoring the constructor arguments.</haxe_doc>
		</sameConstructor>
		<min public="1" params="T" set="method" line="40" static="1">
			<f a="a:b">
				<c path="min.T"/>
				<c path="min.T"/>
				<c path="min.T"/>
			</f>
			<haxe_doc>Returns the lower between two enum instances. Sequence is determined by their
index in the type definition.</haxe_doc>
		</min>
		<max public="1" params="T" set="method" line="51" static="1">
			<f a="a:b">
				<c path="max.T"/>
				<c path="max.T"/>
				<c path="max.T"/>
			</f>
			<haxe_doc>Returns the higher between two enum instances. Sequence is determined by their
index in the type definition.</haxe_doc>
		</max>
		<haxe_doc>Helper class for enums.</haxe_doc>
	</class>
	<class path="thx.Error" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Error.hx">
		<fromDynamic public="1" set="method" line="17" static="1">
			<f a="err:?pos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="thx.Error"/>
			</f>
			<haxe_doc>It creates an instance of Error from any value.

If `err` is already an instance of `Error`, it is returned and nothing is created.</haxe_doc>
		</fromDynamic>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>The text message associated with the error.</haxe_doc>
		</message>
		<pos public="1" set="null">
			<t path="haxe.PosInfos"/>
			<haxe_doc>The location in code where the error has been instantiated.</haxe_doc>
		</pos>
		<stackItems public="1" set="null">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<haxe_doc>The collected error stack.</haxe_doc>
		</stackItems>
		<toString public="1" set="method" line="58"><f a=""><c path="String"/></f></toString>
		<getPosition public="1" set="method" line="61"><f a=""><c path="String"/></f></getPosition>
		<stackToString public="1" set="method" line="64"><f a=""><c path="String"/></f></stackToString>
		<new public="1" set="method" line="43">
			<f a="message:?stack:?pos">
				<c path="String"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The `Error` constructor only requires a steing message. `stack` and `pos` are automatically
populate but can be provided if preferred.</haxe_doc>
		</new>
		<haxe_doc>Defines a generic Error type. When the target platform is JS, `Error` extends the native
`js.Error` type.</haxe_doc>
	</class>
	<class path="thx.Floats" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Floats.hx">
		<TOLERANCE public="1" get="inline" set="null" expr="10e-5" line="7" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>10e-5</e></m></meta>
		</TOLERANCE>
		<EPSILON public="1" get="inline" set="null" expr="1e-9" line="11" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1e-9</e></m></meta>
			<haxe_doc>Constant value employed to see if two `Float` values are very close.</haxe_doc>
		</EPSILON>
		<pattern_parse expr="~/^(\+|-)?\d+(\.\d+)?(e-?\d+)?$/" line="13" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^(\+|-)?\d+(\.\d+)?(e-?\d+)?$/</e></m></meta>
		</pattern_parse>
		<angleDifference public="1" set="method" line="18" static="1">
			<f a="a:b:?turn" v="::360.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ turn : 360.0 }</e></m></meta>
			<haxe_doc>Returns the angular distance between 2 angles.</haxe_doc>
		</angleDifference>
		<ceilTo public="1" set="method" line="30" static="1">
			<f a="f:decimals">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds a number up to the specified number of decimals.</haxe_doc>
		</ceilTo>
		<canParse public="1" set="method" line="38" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`canParse` checks if a string value can be safely converted into a `Float` value.</haxe_doc>
		</canParse>
		<clamp public="1" get="inline" set="null" line="50" static="1">
			<f a="v:min:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>`clamp` restricts a value within the specified range.

```haxe
trace(1.3.clamp(0, 1)); // prints 1
trace(0.8.clamp(0, 1)); // prints 0.8
trace(-0.5.clamp(0, 1)); // prints 0.0
```</haxe_doc>
		</clamp>
		<clampSym public="1" get="inline" set="null" line="57" static="1">
			<f a="v:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Like clamp but you only pass one argument (`max`) that is used as the upper limit
and the opposite (additive inverse or `-max`) as the lower limit.</haxe_doc>
		</clampSym>
		<compare public="1" get="inline" set="null" line="63" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It returns the comparison value (an integer number) between two `float` values.</haxe_doc>
		</compare>
		<floorTo public="1" set="method" line="69" static="1">
			<f a="f:decimals">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds a number down to the specified number of decimals.</haxe_doc>
		</floorTo>
		<interpolate public="1" set="method" line="77" static="1">
			<f a="f:a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>`interpolate` returns a value between `a` and `b` for any value of `f` between 0 and 1.</haxe_doc>
		</interpolate>
		<interpolateAngle public="1" set="method" line="85" static="1">
			<f a="f:a:b:?turn" v=":::360">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ turn : 360 }</e></m></meta>
			<haxe_doc>Interpolates values in a polar coordinate system looking for the narrowest delta angle.

It can be either clock-wise or counter-clock-wise.</haxe_doc>
		</interpolateAngle>
		<interpolateAngleWidest public="1" set="method" line="93" static="1">
			<f a="f:a:b:?turn" v=":::360">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ turn : 360 }</e></m></meta>
			<haxe_doc>Interpolates values in a polar coordinate system looking for the wideset delta angle.

It can be either clock-wise or counter-clock-wise.</haxe_doc>
		</interpolateAngleWidest>
		<interpolateAngleCW public="1" set="method" line="100" static="1">
			<f a="f:a:b:?turn" v=":::360">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ turn : 360 }</e></m></meta>
			<haxe_doc>Interpolates values in a polar coordinate system always in clock-wise direction.</haxe_doc>
		</interpolateAngleCW>
		<interpolateAngleCCW public="1" set="method" line="111" static="1">
			<f a="f:a:b:?turn" v=":::360">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ turn : 360 }</e></m></meta>
			<haxe_doc>Interpolates values in a polar coordinate system always in counter-clock-wise direction.</haxe_doc>
		</interpolateAngleCCW>
		<max public="1" params="T" get="inline" set="null" line="122" static="1">
			<f a="a:b">
				<c path="max.T"/>
				<c path="max.T"/>
				<c path="max.T"/>
			</f>
			<haxe_doc>Return the maximum value between two integers or floats.</haxe_doc>
		</max>
		<min public="1" params="T" get="inline" set="null" line="128" static="1">
			<f a="a:b">
				<c path="min.T"/>
				<c path="min.T"/>
				<c path="min.T"/>
			</f>
			<haxe_doc>Return the minimum value between two integers or floats.</haxe_doc>
		</min>
		<nearEquals public="1" set="method" line="136" static="1">
			<f a="a:b:?tollerance" v="::EPSILON">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ tollerance : EPSILON }</e></m></meta>
			<haxe_doc>Float numbers can sometime introduce tiny errors even for simple operations.
`nearEquals` compares two floats using a tiny tollerance (last optional
argument). By default it is defined as `EPSILON`.</haxe_doc>
		</nearEquals>
		<nearEqualAngles public="1" get="inline" set="null" line="160" static="1">
			<f a="a:b:?turn:?tollerance" v="::360.0:EPSILON">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ tollerance : EPSILON, turn : 360.0 }</e></m></meta>
			<haxe_doc>Float numbers can sometime introduce tiny errors even for simple operations.
`nearEqualAngles` compares two angles (default is 360deg) using a tiny
tollerance (last optional argument). By default the tollerance is defined as
`EPSILON`.</haxe_doc>
		</nearEqualAngles>
		<nearZero public="1" get="inline" set="null" line="167" static="1">
			<f a="n:?tollerance" v=":EPSILON">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ tollerance : EPSILON }</e></m></meta>
			<haxe_doc>`nearZero` finds if the passed number is zero or very close to it. By default
`EPSILON` is used as the tollerance value.</haxe_doc>
		</nearZero>
		<normalize public="1" get="inline" set="null" line="173" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>`normalize` clamps the passwed value between 0 and 1.</haxe_doc>
		</normalize>
		<parse public="1" set="method" line="179" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>`parse` can parse a string and tranform it into a `Float` value.</haxe_doc>
		</parse>
		<root public="1" get="inline" set="null" line="188" static="1">
			<f a="base:index">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Computes the nth root (`index`) of `base`.</haxe_doc>
		</root>
		<roundTo public="1" set="method" line="194" static="1">
			<f a="f:decimals">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds a number to the specified number of decimals.</haxe_doc>
		</roundTo>
		<sign public="1" params="T" get="inline" set="null" line="202" static="1">
			<f a="value">
				<c path="sign.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>`sign` returns `-1` if `value` is a negative number, `1` otherwise.</haxe_doc>
		</sign>
		<toString public="1" get="inline" set="null" line="205" static="1"><f a="v">
	<x path="Float"/>
	<c path="String"/>
</f></toString>
		<toFloat public="1" get="inline" set="null" line="211" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Alias for parse, mainly for disambiguation with other parses using mega Thx.</haxe_doc>
		</toFloat>
		<trunc public="1" get="inline" set="null" line="214" static="1"><f a="value">
	<x path="Float"/>
	<x path="Int"/>
</f></trunc>
		<ftrunc public="1" get="inline" set="null" line="217" static="1"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></ftrunc>
		<wrap public="1" set="method" line="226" static="1">
			<f a="v:min:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Passed two boundaries values (`min`, `max`), `wrap` ensures that the passed value `v` will
be included in the boundaries. If the value exceeds `max`, the value is reduced by `min`
repeatedely until it falls within the range. Similar and inverted treatment is performed if
the value is below `min`.</haxe_doc>
		</wrap>
		<wrapCircular public="1" set="method" line="235" static="1">
			<f a="v:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Similar to `wrap`, it works for numbers between 0 and `max`.</haxe_doc>
		</wrapCircular>
		<order public="1" set="null" expr="Ord.fromIntComparison(compare)" line="245" static="1">
			<x path="thx.Ord"><x path="Float"/></x>
			<meta><m n=":value"><e>Ord.fromIntComparison(compare)</e></m></meta>
			<haxe_doc>* The ordering instance for floating-point values.</haxe_doc>
		</order>
		<monoid public="1" set="null" expr="{ zero : 0.0, append : function(a:Float, b:Float) return a + b }" line="248" static="1">
			<x path="thx.Monoid"><x path="Float"/></x>
			<meta><m n=":value"><e>{ zero : 0.0, append : function(a:Float, b:Float) return a + b }</e></m></meta>
		</monoid>
		<haxe_doc>`Floats` contains helper methods to work with `Float` values.</haxe_doc>
	</class>
	<typedef path="thx.HaxeMath" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Floats.hx" module="thx.Floats"><c path="Math"/></typedef>
	<class path="thx.Functions0" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions">
		<after public="1" get="inline" set="null" line="15" static="1">
			<f a="callback:n">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>Returns a function that invokes `callback` after being being invoked `n` times.</haxe_doc>
		</after>
		<join public="1" get="inline" set="null" line="22" static="1">
			<f a="fa:fb">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>`join` creates a function that calls the 2 functions passed as arguments in sequence.</haxe_doc>
		</join>
		<once public="1" get="inline" set="null" line="32" static="1">
			<f a="f">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>`once` wraps and returns the argument function. `once` ensures that `f` will be called
at most once even if the returned function is invoked multiple times.</haxe_doc>
		</once>
		<negate public="1" get="inline" set="null" line="42" static="1">
			<f a="callback">
				<f a=""><x path="Bool"/></f>
				<f a=""><x path="Bool"/></f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<times public="1" params="T" get="inline" set="null" line="49" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a=""><c path="times.T"/></f>
				<f a=""><c path="Array"><c path="times.T"/></c></f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.</haxe_doc>
		</times>
		<timesi public="1" params="T" get="inline" set="null" line="58" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a="">
					<x path="Int"/>
					<c path="timesi.T"/>
				</f>
				<f a=""><c path="Array"><c path="timesi.T"/></c></f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.

Callback takes an additional argument `index`.</haxe_doc>
		</timesi>
		<haxe_doc>Extension methods for functions with arity 0 (functions that do not take arguments).</haxe_doc>
	</class>
	<class path="thx.Functions1" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions">
		<compose public="1" params="TIn:TRet1:TRet2" get="inline" set="null" line="72" static="1">
			<f a="fa:fb">
				<f a="">
					<c path="compose.TRet2"/>
					<c path="compose.TRet1"/>
				</f>
				<f a="">
					<c path="compose.TIn"/>
					<c path="compose.TRet2"/>
				</f>
				<f a="">
					<c path="compose.TIn"/>
					<c path="compose.TRet1"/>
				</f>
			</f>
			<haxe_doc>`compose` returns a function that calls the first argument function with the result
of the following one.</haxe_doc>
		</compose>
		<map public="1" params="A:B:C" get="inline" set="null" line="78" static="1">
			<f a="fab:fbc">
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<f a="">
					<c path="map.B"/>
					<c path="map.C"/>
				</f>
				<f a="">
					<c path="map.A"/>
					<c path="map.C"/>
				</f>
			</f>
			<haxe_doc><![CDATA[* The covariant functor for Function1<A, _>]]></haxe_doc>
		</map>
		<contramap public="1" params="A:B:C" get="inline" set="null" line="84" static="1">
			<f a="fbc:fab">
				<f a="">
					<c path="contramap.B"/>
					<c path="contramap.C"/>
				</f>
				<f a="">
					<c path="contramap.A"/>
					<c path="contramap.B"/>
				</f>
				<f a="">
					<c path="contramap.A"/>
					<c path="contramap.C"/>
				</f>
			</f>
			<haxe_doc><![CDATA[* The contravariant functor for Function1<_, B>. Equivalent to compose.]]></haxe_doc>
		</contramap>
		<join public="1" params="TIn" get="inline" set="null" line="91" static="1">
			<f a="fa:fb">
				<f a="">
					<c path="join.TIn"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="join.TIn"/>
					<x path="Void"/>
				</f>
				<f a="v">
					<c path="join.TIn"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>`join` creates a function that calls the 2 functions passed as arguments in sequence
and passes the same argument value to the both of them.</haxe_doc>
		</join>
		<memoize public="1" params="TIn:TOut" set="method" line="103" static="1">
			<f a="callback:?resolver">
				<f a="">
					<c path="memoize.TIn"/>
					<c path="memoize.TOut"/>
				</f>
				<f a="">
					<c path="memoize.TIn"/>
					<c path="String"/>
				</f>
				<f a="">
					<c path="memoize.TIn"/>
					<c path="memoize.TOut"/>
				</f>
			</f>
			<haxe_doc>`memoize` wraps `callback` and calls it only once storing the result for future needs.

Computed results are stored in an internal map. The keys to this map are generated by
the resolver function that by default directly converts the first argument into a string.</haxe_doc>
		</memoize>
		<negate public="1" params="T1" get="inline" set="null" line="120" static="1">
			<f a="callback">
				<f a="">
					<c path="negate.T1"/>
					<x path="Bool"/>
				</f>
				<f a="v">
					<c path="negate.T1"/>
					<x path="Bool"/>
				</f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<noop public="1" params="T" set="method" line="127" static="1">
			<f a="_">
				<c path="noop.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>`noop` is a function that has no side effects and doesn't return any value.</haxe_doc>
		</noop>
		<times public="1" params="TIn:TOut" get="inline" set="null" line="132" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a="">
					<c path="times.TIn"/>
					<c path="times.TOut"/>
				</f>
				<f a="value">
					<c path="times.TIn"/>
					<c path="Array"><c path="times.TOut"/></c>
				</f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.</haxe_doc>
		</times>
		<timesi public="1" params="TIn:TOut" get="inline" set="null" line="141" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a=":">
					<c path="timesi.TIn"/>
					<x path="Int"/>
					<c path="timesi.TOut"/>
				</f>
				<f a="value">
					<c path="timesi.TIn"/>
					<c path="Array"><c path="timesi.TOut"/></c>
				</f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.

Callback takes an additional argument `index`.</haxe_doc>
		</timesi>
		<swapArguments public="1" params="T1:T2:TReturn" get="inline" set="null" line="148" static="1">
			<f a="callback">
				<f a=":">
					<c path="swapArguments.T1"/>
					<c path="swapArguments.T2"/>
					<c path="swapArguments.TReturn"/>
				</f>
				<f a=":">
					<c path="swapArguments.T2"/>
					<c path="swapArguments.T1"/>
					<c path="swapArguments.TReturn"/>
				</f>
			</f>
			<haxe_doc>Returns a function that behaves the same as `callback` but has its arguments inverted.</haxe_doc>
		</swapArguments>
		<fn public="1" params="T:T2" set="method" static="1">
			<f a="fn:restArgs">
				<f a="">
					<c path="fn.T"/>
					<c path="fn.T2"/>
				</f>
				<d/>
				<d/>
			</f>
			<haxe_doc>Lambda expressions</haxe_doc>
		</fn>
		<haxe_doc>Extension methods for functions with arity 1 (functions that take exactly 1 argument).</haxe_doc>
	</class>
	<class path="thx.Functions2" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions">
		<memoize public="1" params="T1:T2:TOut" set="method" line="169" static="1">
			<f a="callback:?resolver">
				<f a=":">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.TOut"/>
				</f>
				<f a=":">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="String"/>
				</f>
				<f a=":">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.TOut"/>
				</f>
			</f>
			<haxe_doc>`memoize` wraps `callback` and calls it only once storing the result for future needs.

Computed results are stored in an internal map. The keys to this map are generated by
the resolver function that by default directly converts the arguments into a string.</haxe_doc>
		</memoize>
		<curry public="1" params="A:B:C" set="method" line="183" static="1"><f a="f">
	<f a=":">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
	</f>
	<f a="">
		<c path="curry.A"/>
		<f a="">
			<c path="curry.B"/>
			<c path="curry.C"/>
		</f>
	</f>
</f></curry>
		<join public="1" params="T1:T2" get="inline" set="null" line="190" static="1">
			<f a="fa:fb">
				<f a=":">
					<c path="join.T1"/>
					<c path="join.T2"/>
					<x path="Void"/>
				</f>
				<f a=":">
					<c path="join.T1"/>
					<c path="join.T2"/>
					<x path="Void"/>
				</f>
				<f a="v1:v2">
					<c path="join.T1"/>
					<c path="join.T2"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>`join` creates a function that calls the 2 functions passed as arguments in sequence
and passes the same argument values to the both of them.</haxe_doc>
		</join>
		<negate public="1" params="T1:T2" get="inline" set="null" line="199" static="1">
			<f a="callback">
				<f a=":">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<x path="Bool"/>
				</f>
				<f a="v1:v2">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<x path="Bool"/>
				</f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<fn public="1" params="T:T2:T3" set="method" static="1">
			<f a="fn:restArgs">
				<f a=":">
					<c path="fn.T"/>
					<c path="fn.T2"/>
					<c path="fn.T3"/>
				</f>
				<d/>
				<d/>
			</f>
			<haxe_doc>Lambda expressions</haxe_doc>
		</fn>
		<haxe_doc>Helper class for functions that take 2 arguments</haxe_doc>
	</class>
	<class path="thx.Functions3" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions">
		<memoize public="1" params="T1:T2:T3:TOut" set="method" line="220" static="1">
			<f a="callback:?resolver">
				<f a="::">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.T3"/>
					<c path="memoize.TOut"/>
				</f>
				<f a="::">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.T3"/>
					<c path="String"/>
				</f>
				<f a="::">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.T3"/>
					<c path="memoize.TOut"/>
				</f>
			</f>
			<haxe_doc>`memoize` wraps `callback` and calls it only once storing the result for future needs.

Computed results are stored in an internal map. The keys to this map are generated by
the resolver function that by default directly converts the arguments into a string.</haxe_doc>
		</memoize>
		<negate public="1" params="T1:T2:T3" get="inline" set="null" line="237" static="1">
			<f a="callback">
				<f a="::">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<c path="negate.T3"/>
					<x path="Bool"/>
				</f>
				<f a="v1:v2:v3">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<c path="negate.T3"/>
					<x path="Bool"/>
				</f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<curry public="1" params="A:B:C:D" get="inline" set="null" line="241" static="1"><f a="f">
	<f a="::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
	</f>
	<f a=":">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<f a="">
			<c path="curry.C"/>
			<c path="curry.D"/>
		</f>
	</f>
</f></curry>
		<fn public="1" params="T:T2:T3:T4" set="method" static="1">
			<f a="fn:restArgs">
				<f a="::">
					<c path="fn.T"/>
					<c path="fn.T2"/>
					<c path="fn.T3"/>
					<c path="fn.T4"/>
				</f>
				<d/>
				<d/>
			</f>
			<haxe_doc>Lambda expressions</haxe_doc>
		</fn>
		<haxe_doc>Helper class for functions that take 3 arguments</haxe_doc>
	</class>
	<class path="thx.Functions4" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E" get="inline" set="null" line="253" static="1"><f a="f">
	<f a=":::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
	</f>
	<f a="::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<f a="">
			<c path="curry.D"/>
			<c path="curry.E"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions5" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F" get="inline" set="null" line="258" static="1"><f a="f">
	<f a="::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
	</f>
	<f a=":::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<f a="">
			<c path="curry.E"/>
			<c path="curry.F"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions6" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G" get="inline" set="null" line="263" static="1"><f a="f">
	<f a=":::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
	</f>
	<f a="::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<f a="">
			<c path="curry.F"/>
			<c path="curry.G"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions7" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H" get="inline" set="null" line="268" static="1"><f a="f">
	<f a="::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
	</f>
	<f a=":::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<f a="">
			<c path="curry.G"/>
			<c path="curry.H"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions8" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H:I" get="inline" set="null" line="273" static="1"><f a="f">
	<f a=":::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
	</f>
	<f a="::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<f a="">
			<c path="curry.H"/>
			<c path="curry.I"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions9" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H:I:J" get="inline" set="null" line="278" static="1"><f a="f">
	<f a="::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
	</f>
	<f a=":::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<f a="">
			<c path="curry.I"/>
			<c path="curry.J"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions10" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H:I:J:K" get="inline" set="null" line="283" static="1"><f a="f">
	<f a=":::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
		<c path="curry.K"/>
	</f>
	<f a="::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<f a="">
			<c path="curry.J"/>
			<c path="curry.K"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions11" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H:I:J:K:L" get="inline" set="null" line="288" static="1"><f a="f">
	<f a="::::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
		<c path="curry.K"/>
		<c path="curry.L"/>
	</f>
	<f a=":::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
		<f a="">
			<c path="curry.K"/>
			<c path="curry.L"/>
		</f>
	</f>
</f></curry></class>
	<class path="thx.Functions12" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions"><curry public="1" params="A:B:C:D:E:F:G:H:I:J:K:L:M" get="inline" set="null" line="293" static="1"><f a="f">
	<f a=":::::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
		<c path="curry.K"/>
		<c path="curry.L"/>
		<c path="curry.M"/>
	</f>
	<f a="::::::::::">
		<c path="curry.A"/>
		<c path="curry.B"/>
		<c path="curry.C"/>
		<c path="curry.D"/>
		<c path="curry.E"/>
		<c path="curry.F"/>
		<c path="curry.G"/>
		<c path="curry.H"/>
		<c path="curry.I"/>
		<c path="curry.J"/>
		<c path="curry.K"/>
		<f a="">
			<c path="curry.L"/>
			<c path="curry.M"/>
		</f>
	</f>
</f></curry></class>
	<abstract path="thx.Reader" params="A:B" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" module="thx.Functions">
		<from><icast><f a="">
	<c path="thx.Reader.A"/>
	<c path="thx.Reader.B"/>
</f></icast></from>
		<this><f a="">
	<c path="thx.Reader.A"/>
	<c path="thx.Reader.B"/>
</f></this>
		<to><icast><f a="">
	<c path="thx.Reader.A"/>
	<c path="thx.Reader.B"/>
</f></icast></to>
		<impl><class path="thx._Functions.Reader_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" private="1" module="thx.Functions">
	<flatMap public="1" params="C" set="method" line="298" static="1">
		<f a="this:f">
			<f a="">
				<c path="thx.Reader.A"/>
				<c path="thx.Reader.B"/>
			</f>
			<f a="">
				<c path="thx.Reader.B"/>
				<f a="">
					<c path="thx.Reader.A"/>
					<c path="flatMap.C"/>
				</f>
			</f>
			<f a="">
				<c path="thx.Reader.A"/>
				<c path="flatMap.C"/>
			</f>
		</f>
		<meta><m n=":impl"/></meta>
	</flatMap>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Functions.Reader_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx" private="1" module="thx.Functions">
		<flatMap public="1" params="C" set="method" line="298" static="1">
			<f a="this:f">
				<f a="">
					<c path="thx.Reader.A"/>
					<c path="thx.Reader.B"/>
				</f>
				<f a="">
					<c path="thx.Reader.B"/>
					<f a="">
						<c path="thx.Reader.A"/>
						<c path="flatMap.C"/>
					</f>
				</f>
				<f a="">
					<c path="thx.Reader.A"/>
					<c path="flatMap.C"/>
				</f>
			</f>
			<meta><m n=":impl"/></meta>
		</flatMap>
		<meta><m n=":final"/></meta>
	</class>
	<class path="thx.Functions" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Functions.hx">
		<equality public="1" params="T" set="method" line="312" static="1">
			<f a="a:b">
				<c path="equality.T"/>
				<c path="equality.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>It provides strict equality between the two arguments `a` and `b`.</haxe_doc>
		</equality>
		<identity public="1" params="T" set="method" line="318" static="1">
			<f a="value">
				<c path="identity.T"/>
				<c path="identity.T"/>
			</f>
			<haxe_doc>The `identity` function returns the value of its argument.</haxe_doc>
		</identity>
		<noop public="1" set="method" line="324" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>`noop` is a function that has no side effects and doesn't return any value.</haxe_doc>
		</noop>
		<with public="1" set="method" static="1"><f a="context:body">
	<d/>
	<d/>
	<d/>
</f></with>
		<fn public="1" params="T" set="method" static="1">
			<f a="fn:restArgs">
				<f a=""><c path="fn.T"/></f>
				<d/>
				<d/>
			</f>
			<haxe_doc>Lambda expressions</haxe_doc>
		</fn>
		<lift public="1" params="T:U" get="inline" set="null" line="353" static="1">
			<f a="t:f">
				<c path="lift.T"/>
				<f a="">
					<c path="lift.T"/>
					<c path="lift.U"/>
				</f>
				<c path="lift.U"/>
			</f>
			<haxe_doc><![CDATA[Converts an instance of type `T` to an instance of type `U`.

Useful as an extension methods for converting a value to another type inside a chain of function calls.

E.g.

```
using thx.Functions;
import thx.Options;

var arr: Array<Int> = [1, 2, 3];
var opt : Option<Array<Int>> = myArray.lift(Options.ofValue);
Assert.same(Some(arr), opt); // true
```]]></haxe_doc>
		</lift>
		<haxe_doc>Generic helper for functions.</haxe_doc>
	</class>
	<class path="thx.Ints" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ints.hx">
		<pattern_parse expr="~/^[ 	
]*[+-]?(\d+|0x[0-9A-F]+)/" line="13" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 	
]*[+-]?(\d+|0x[0-9A-F]+)/</e></m></meta>
		</pattern_parse>
		<abs public="1" get="inline" set="null" line="17" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>`abs` returns the absolute integer value of the passed argument.</haxe_doc>
		</abs>
		<canParse public="1" set="method" line="24" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`canParse` takes a string and return a boolean indicating if the argument can be safely transformed
into a valid integer value.</haxe_doc>
		</canParse>
		<clamp public="1" get="inline" set="null" line="30" static="1">
			<f a="v:min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>`clamp` restricts a value within the specified range.</haxe_doc>
		</clamp>
		<clampSym public="1" get="inline" set="null" line="37" static="1">
			<f a="v:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Like clamp but you only pass one argument (`max`) that is used as the upper limit
and the opposite (additive inverse or `-max`) as the lower limit.</haxe_doc>
		</clampSym>
		<compare public="1" set="method" line="45" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Return a comparison value between `a` and `b`. The number is negative if `a` is
greater than `b`, positive if `a` is lesser than `b` or zero if `a` and `b` are
equals.</haxe_doc>
		</compare>
		<gcd public="1" set="method" line="51" static="1">
			<f a="m:n">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the greater common denominator</haxe_doc>
		</gcd>
		<interpolate public="1" set="method" line="63" static="1">
			<f a="f:a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Given a value `t` between 0 and 1, it interpolates that value in the range between `a` and `b`.

The returned value is a rounded integer.</haxe_doc>
		</interpolate>
		<isEven public="1" get="inline" set="null" line="69" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isEven` returns `true` if `v` is even, `false` otherwise.</haxe_doc>
		</isEven>
		<isOdd public="1" get="inline" set="null" line="75" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isOdd` returns `true` if `v` is odd, `false` otherwise.</haxe_doc>
		</isOdd>
		<lpad public="1" set="method" line="78" static="1">
			<f a="v:?pad:len" v=":&quot;0&quot;:">
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pad : "0" }</e></m></meta>
		</lpad>
		<lcm public="1" set="method" line="90" static="1">
			<f a="m:n">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the least common multiple</haxe_doc>
		</lcm>
		<rpad public="1" get="inline" set="null" line="97" static="1">
			<f a="v:?pad:len" v=":&quot;0&quot;:">
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pad : "0" }</e></m></meta>
		</rpad>
		<max public="1" get="inline" set="null" line="103" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It returns the maximum value between `a` and `b`.</haxe_doc>
		</max>
		<min public="1" get="inline" set="null" line="109" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It returns the minimum value between `a` and `b`.</haxe_doc>
		</min>
		<parse public="1" set="method" line="116" static="1">
			<f a="s:?base">
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Parses a string into an Int value using the provided base. Default base is 16 for strings that begin with
0x (after optional sign) or 10 otherwise.</haxe_doc>
		</parse>
		<random public="1" get="inline" set="null" line="177" static="1">
			<f a="?min:max" v="0:">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ min : 0 }</e></m></meta>
			<haxe_doc>Integer random function that includes both upper and lower limits. A roll on a die with
6 sides would be the equivalent to the following:

```haxe
var d6 = Ints.random(1, 6);
```</haxe_doc>
		</random>
		<range public="1" set="method" line="185" static="1">
			<f a="start:?stop:?step" v="::1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ step : 1 }</e></m></meta>
			<haxe_doc>`range` creates an array of integer containing values between  start (included) and stop (excluded)
with a progression set by `step`. A negative value for `step` can be used but in that
case start will need to be a greater value than stop.</haxe_doc>
		</range>
		<rangeIter public="1" set="method" line="199" static="1">
			<f a="start:?stop:?step" v="::1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="Iterator"><x path="Int"/></t>
			</f>
			<meta><m n=":value"><e>{ step : 1 }</e></m></meta>
		</rangeIter>
		<BASE expr="&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;" line="204" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"0123456789abcdefghijklmnopqrstuvwxyz"</e></m></meta>
		</BASE>
		<toString public="1" get="inline" set="null" line="210" static="1">
			<f a="value:base">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Transform an `Int` value to a `String` using the specified `base`</haxe_doc>
		</toString>
		<toBase public="1" get="inline" set="null" line="236" static="1">
			<f a="value:base">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Alias for toString, mainly for disambig. with standard toString using mega Thx.
Should toString just be renamed to this? At least with this, existing code
doesn't break.</haxe_doc>
		</toBase>
		<toBool public="1" get="inline" set="null" line="242" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Converts an integer value into a boolean. Any value different from `0` will evaluate to `true`.</haxe_doc>
		</toBool>
		<toInt public="1" get="inline" set="null" line="248" static="1">
			<f a="s:?base">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Alias for parse, mainly for disambiguation with other parses using mega Thx.</haxe_doc>
		</toInt>
		<sign public="1" get="inline" set="null" line="254" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>`sign` returns `-1` if `value` is a negative number, `1` otherwise.</haxe_doc>
		</sign>
		<wrapCircular public="1" set="method" line="260" static="1">
			<f a="v:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `wrap`, it works for numbers between 0 and `max`.</haxe_doc>
		</wrapCircular>
		<order public="1" set="null" expr="function(i0, i1) {
	return if (i0 &gt; i1) GT else if (i0 == i1) EQ else LT;
}" line="268" static="1">
			<x path="thx.Ord"><x path="Int"/></x>
			<meta><m n=":value"><e><![CDATA[function(i0, i1) {
	return if (i0 > i1) GT else if (i0 == i1) EQ else LT;
}]]></e></m></meta>
		</order>
		<monoid public="1" set="null" expr="{ zero : 0, append : function(a:Int, b:Int) return a + b }" line="271" static="1">
			<x path="thx.Monoid"><x path="Int"/></x>
			<meta><m n=":value"><e>{ zero : 0, append : function(a:Int, b:Int) return a + b }</e></m></meta>
		</monoid>
		<haxe_doc>Extension methods for integer values.</haxe_doc>
	</class>
	<class path="thx.RangeIterator" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ints.hx" module="thx.Ints">
		<current><x path="Int"/></current>
		<stop><t path="Null"><x path="Int"/></t></stop>
		<step><x path="Int"/></step>
		<hasNext public="1" set="method" line="285"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="289"><f a=""><x path="Int"/></f></next>
		<new public="1" set="method" line="279">
			<f a="start:?stop:?step" v=":null:1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ step : 1, stop : null }</e></m></meta>
		</new>
	</class>
	<class path="thx.Iterables" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Iterables.hx">
		<all public="1" params="T" set="method" line="23" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="all.T"/></t>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for all elements in the iterable.</haxe_doc>
		</all>
		<any public="1" params="T" set="method" line="29" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="any.T"/></t>
				<f a="">
					<c path="any.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for at least one element in the iterable.</haxe_doc>
		</any>
		<eachPair public="1" params="TIn:TOut" get="inline" set="null" line="35" static="1">
			<f a="it:handler">
				<t path="Iterable"><c path="eachPair.TIn"/></t>
				<f a=":">
					<c path="eachPair.TIn"/>
					<c path="eachPair.TIn"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.eachPair`.</haxe_doc>
		</eachPair>
		<equals public="1" params="T" get="inline" set="null" line="43" static="1">
			<f a="a:b:?equality">
				<t path="Iterable"><c path="equals.T"/></t>
				<t path="Iterable"><c path="equals.T"/></t>
				<f a=":">
					<c path="equals.T"/>
					<c path="equals.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>It compares the lengths and elements of two given iterables and returns `true` if they match.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</equals>
		<filter public="1" params="T" get="inline" set="null" line="49" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="filter.T"/></t>
				<f a="">
					<c path="filter.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.T"/></c>
			</f>
			<haxe_doc>Refer to `Array.filter`.</haxe_doc>
		</filter>
		<find public="1" params="T:TFind" get="inline" set="null" line="55" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.find`.</haxe_doc>
		</find>
		<findOption public="1" params="T:TFind" get="inline" set="null" line="61" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="findOption.T"/></t>
				<f a="">
					<c path="findOption.T"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="findOption.T"/></e>
			</f>
			<haxe_doc>Refer to `thx.Arrays.findOption`.</haxe_doc>
		</findOption>
		<first public="1" params="T:TFind" get="inline" set="null" line="67" static="1">
			<f a="it">
				<t path="Iterable"><c path="first.T"/></t>
				<t path="Null"><c path="first.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.first`.</haxe_doc>
		</first>
		<get public="1" params="T" get="inline" set="null" line="73" static="1">
			<f a="it:index">
				<t path="Iterable"><c path="get.T"/></t>
				<x path="Int"/>
				<t path="Null"><c path="get.T"/></t>
			</f>
			<haxe_doc>Get the element at the `index` position.</haxe_doc>
		</get>
		<getOption public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="it:index">
				<t path="Iterable"><c path="getOption.T"/></t>
				<x path="Int"/>
				<e path="haxe.ds.Option"><c path="getOption.T"/></e>
			</f>
			<haxe_doc>Refer to `thx.Arrays.getOption`.</haxe_doc>
		</getOption>
		<last public="1" params="T:TFind" get="inline" set="null" line="85" static="1">
			<f a="it">
				<t path="Iterable"><c path="last.T"/></t>
				<t path="Null"><c path="last.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.last`.</haxe_doc>
		</last>
		<hasElements public="1" params="T" get="inline" set="null" line="91" static="1">
			<f a="it">
				<t path="Iterable"><c path="hasElements.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the iterable contains at least one element.</haxe_doc>
		</hasElements>
		<indexOf public="1" params="T" get="inline" set="null" line="97" static="1">
			<f a="it:element">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of element in the iterable. It returns -1 if not found.</haxe_doc>
		</indexOf>
		<isEmpty public="1" params="T" get="inline" set="null" line="103" static="1">
			<f a="it">
				<t path="Iterable"><c path="isEmpty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.isEmpty`.</haxe_doc>
		</isEmpty>
		<isIterable public="1" set="method" line="112" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isIterable` checks that the passed argument has all the requirements to be an `Iterable`.

Note that no type checking is performed at runtime, only if a method `iterator` exists regardless
of its signature.</haxe_doc>
		</isIterable>
		<map public="1" params="T:S" get="inline" set="null" line="121" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.T"/></t>
				<f a="">
					<c path="map.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Refer to `Array.map`.</haxe_doc>
		</map>
		<fmap public="1" params="T:S" get="inline" set="null" line="127" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="fmap.T"/></t>
				<f a="">
					<c path="fmap.T"/>
					<c path="fmap.S"/>
				</f>
				<t path="Iterable"><c path="fmap.S"/></t>
			</f>
			<haxe_doc>* A proper Functor-like map function that preverses iterable structure.</haxe_doc>
		</fmap>
		<mapi public="1" params="T:S" get="inline" set="null" line="133" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.T"/></t>
				<f a=":">
					<c path="mapi.T"/>
					<x path="Int"/>
					<c path="mapi.S"/>
				</f>
				<c path="Array"><c path="mapi.S"/></c>
			</f>
			<haxe_doc>Refer to `thx.Arrays.mapi`.</haxe_doc>
		</mapi>
		<fmapi public="1" params="T:S" get="inline" set="null" line="139" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="fmapi.T"/></t>
				<f a=":">
					<c path="fmapi.T"/>
					<x path="Int"/>
					<c path="fmapi.S"/>
				</f>
				<t path="Iterable"><c path="fmapi.S"/></t>
			</f>
			<haxe_doc>* A proper Functor-like mapi function that preverses iterable structure, with index information.</haxe_doc>
		</fmapi>
		<order public="1" params="T" get="inline" set="null" line="145" static="1">
			<f a="it:sort">
				<t path="Iterable"><c path="order.T"/></t>
				<f a=":">
					<c path="order.T"/>
					<c path="order.T"/>
					<x path="Int"/>
				</f>
				<c path="Array"><c path="order.T"/></c>
			</f>
			<haxe_doc>Refer to `thx.Arrays.order`.</haxe_doc>
		</order>
		<reduce public="1" params="TElement:TAcc" get="inline" set="null" line="151" static="1">
			<f a="it:callback:initial">
				<t path="Iterable"><c path="reduce.TElement"/></t>
				<f a=":">
					<c path="reduce.TAcc"/>
					<c path="reduce.TElement"/>
					<c path="reduce.TAcc"/>
				</f>
				<c path="reduce.TAcc"/>
				<c path="reduce.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.reduce`.</haxe_doc>
		</reduce>
		<reducei public="1" params="TElement:TAcc" get="inline" set="null" line="157" static="1">
			<f a="it:callback:initial">
				<t path="Iterable"><c path="reducei.TElement"/></t>
				<f a="::">
					<c path="reducei.TAcc"/>
					<c path="reducei.TElement"/>
					<x path="Int"/>
					<c path="reducei.TAcc"/>
				</f>
				<c path="reducei.TAcc"/>
				<c path="reducei.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.reducei`.</haxe_doc>
		</reducei>
		<toArray public="1" params="T" get="inline" set="null" line="163" static="1">
			<f a="it">
				<t path="Iterable"><c path="toArray.T"/></t>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc><![CDATA[`toArray` transforms an `Iterable<T>` into an `Array<T>`.]]></haxe_doc>
		</toArray>
		<minBy public="1" params="A:B" set="method" line="170" static="1">
			<f a="it:f:ord">
				<t path="Iterable"><c path="minBy.A"/></t>
				<f a="">
					<c path="minBy.A"/>
					<c path="minBy.B"/>
				</f>
				<x path="thx.Ord"><c path="minBy.B"/></x>
				<e path="haxe.ds.Option"><c path="minBy.A"/></e>
			</f>
			<haxe_doc>`minBy` finds the minimum value included in the iterable, as compared by some
function of the values contained within the iterable.</haxe_doc>
		</minBy>
		<maxBy public="1" params="A:B" get="inline" set="null" line="182" static="1">
			<f a="it:f:ord">
				<t path="Iterable"><c path="maxBy.A"/></t>
				<f a="">
					<c path="maxBy.A"/>
					<c path="maxBy.B"/>
				</f>
				<x path="thx.Ord"><c path="maxBy.B"/></x>
				<e path="haxe.ds.Option"><c path="maxBy.A"/></e>
			</f>
			<haxe_doc>`maxBy` finds the maximum value included in the iterable, as compared by some
function of the values contained within the iterable.</haxe_doc>
		</maxBy>
		<min public="1" params="A" get="inline" set="null" line="189" static="1">
			<f a="it:ord">
				<t path="Iterable"><c path="min.A"/></t>
				<x path="thx.Ord"><c path="min.A"/></x>
				<e path="haxe.ds.Option"><c path="min.A"/></e>
			</f>
			<haxe_doc>`min` finds the minimum value included in the iterable, accorrding
to the specified ordering.</haxe_doc>
		</min>
		<max public="1" params="A" get="inline" set="null" line="196" static="1">
			<f a="it:ord">
				<t path="Iterable"><c path="max.A"/></t>
				<x path="thx.Ord"><c path="max.A"/></x>
				<e path="haxe.ds.Option"><c path="max.A"/></e>
			</f>
			<haxe_doc>`max` finds the maximum value included in the iterable, accorrding
to the specified ordering.</haxe_doc>
		</max>
		<extremaBy public="1" params="A:B" set="method" line="204" static="1">
			<f a="it:f:ord">
				<t path="Iterable"><c path="extremaBy.A"/></t>
				<f a="">
					<c path="extremaBy.A"/>
					<c path="extremaBy.B"/>
				</f>
				<x path="thx.Ord"><c path="extremaBy.B"/></x>
				<e path="haxe.ds.Option"><t path="thx.Tuple">
	<c path="extremaBy.A"/>
	<c path="extremaBy.A"/>
</t></e>
			</f>
			<haxe_doc>`extremaBy` finds both the minimum and maximum value included in the iterable,
as compared by some function of the values contained within the iterable and
the specified ordering.</haxe_doc>
		</extremaBy>
		<extrema public="1" params="A" get="inline" set="null" line="221" static="1">
			<f a="it:ord">
				<t path="Iterable"><c path="extrema.A"/></t>
				<x path="thx.Ord"><c path="extrema.A"/></x>
				<e path="haxe.ds.Option"><t path="thx.Tuple">
	<c path="extrema.A"/>
	<c path="extrema.A"/>
</t></e>
			</f>
			<haxe_doc>`extrema` finds both the minimum and maximum value included in the iterable,
as compared by the specified ordering.</haxe_doc>
		</extrema>
		<takeUntil public="1" params="A" set="method" line="227" static="1">
			<f a="it:fn">
				<t path="Iterable"><c path="takeUntil.A"/></t>
				<f a="">
					<c path="takeUntil.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="takeUntil.A"/></c>
			</f>
			<haxe_doc>Take values until the first time `fn` produced false.</haxe_doc>
		</takeUntil>
		<dropLeft public="1" params="A" set="method" line="233" static="1">
			<f a="itr:n">
				<t path="Iterable"><c path="dropLeft.A"/></t>
				<x path="Int"/>
				<t path="Iterable"><c path="dropLeft.A"/></t>
			</f>
			<haxe_doc>Produces an Array from `a[n]` to the last element of `a`.</haxe_doc>
		</dropLeft>
		<dropUntil public="1" params="A" set="method" line="253" static="1">
			<f a="it:fn">
				<t path="Iterable"><c path="dropUntil.A"/></t>
				<f a="">
					<c path="dropUntil.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="dropUntil.A"/></c>
			</f>
			<haxe_doc>Drop values until the first time `fn` produced false.</haxe_doc>
		</dropUntil>
		<unionBy public="1" params="T" set="method" line="260" static="1">
			<f a="a:b:eq">
				<t path="Iterable"><c path="unionBy.T"/></t>
				<t path="Iterable"><c path="unionBy.T"/></t>
				<f a=":">
					<c path="unionBy.T"/>
					<c path="unionBy.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="unionBy.T"/></c>
			</f>
			<haxe_doc>Returns an Array that contains all elements from a which are also elements of b.
    If a contains duplicates, so will the result.</haxe_doc>
		</unionBy>
		<differenceBy public="1" params="T" set="method" line="274" static="1">
			<f a="a:b:eq">
				<t path="Iterable"><c path="differenceBy.T"/></t>
				<t path="Iterable"><c path="differenceBy.T"/></t>
				<f a=":">
					<c path="differenceBy.T"/>
					<c path="differenceBy.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="differenceBy.T"/></c>
			</f>
			<haxe_doc>Returns an Array that contains all elements from a which are not elements of b.
    If a contains duplicates, the resulting Array contains duplicates.</haxe_doc>
		</differenceBy>
		<unzip public="1" params="T1:T2" set="method" line="284" static="1">
			<f a="it">
				<t path="Iterable"><x path="thx.Tuple2">
	<c path="unzip.T1"/>
	<c path="unzip.T2"/>
</x></t>
				<x path="thx.Tuple2">
					<c path="Array"><c path="unzip.T1"/></c>
					<c path="Array"><c path="unzip.T2"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterable of Tuple2<T1, T2> to a Tuple2<Array<T1>, Array<T2>>.]]></haxe_doc>
		</unzip>
		<unzip3 public="1" params="T1:T2:T3" set="method" line="289" static="1">
			<f a="it">
				<t path="Iterable"><x path="thx.Tuple3">
	<c path="unzip3.T1"/>
	<c path="unzip3.T2"/>
	<c path="unzip3.T3"/>
</x></t>
				<x path="thx.Tuple3">
					<c path="Array"><c path="unzip3.T1"/></c>
					<c path="Array"><c path="unzip3.T2"/></c>
					<c path="Array"><c path="unzip3.T3"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterable of Tuple3<T1, T2, T3> to a Tuple3<Array<T1>, Array<T2>, Array<T3>>.]]></haxe_doc>
		</unzip3>
		<unzip4 public="1" params="T1:T2:T3:T4" set="method" line="295" static="1">
			<f a="it">
				<t path="Iterable"><x path="thx.Tuple4">
	<c path="unzip4.T1"/>
	<c path="unzip4.T2"/>
	<c path="unzip4.T3"/>
	<c path="unzip4.T4"/>
</x></t>
				<x path="thx.Tuple4">
					<c path="Array"><c path="unzip4.T1"/></c>
					<c path="Array"><c path="unzip4.T2"/></c>
					<c path="Array"><c path="unzip4.T3"/></c>
					<c path="Array"><c path="unzip4.T4"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterable of Tuple4<T1, T2, T3, T4> to a Tuple4<Array<T1>, Array<T2>, Array<T3>, Array<T4>>.]]></haxe_doc>
		</unzip4>
		<unzip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="301" static="1">
			<f a="it">
				<t path="Iterable"><x path="thx.Tuple5">
	<c path="unzip5.T1"/>
	<c path="unzip5.T2"/>
	<c path="unzip5.T3"/>
	<c path="unzip5.T4"/>
	<c path="unzip5.T5"/>
</x></t>
				<x path="thx.Tuple5">
					<c path="Array"><c path="unzip5.T1"/></c>
					<c path="Array"><c path="unzip5.T2"/></c>
					<c path="Array"><c path="unzip5.T3"/></c>
					<c path="Array"><c path="unzip5.T4"/></c>
					<c path="Array"><c path="unzip5.T5"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterable of Tuple5<T1, T2, T3, T4, T5> to a Tuple5<Array<T1>, Array<T2>, Array<T3>, Array<T4>, Array<T5>>.]]></haxe_doc>
		</unzip5>
		<zip public="1" params="T1:T2" set="method" line="307" static="1">
			<f a="it1:it2">
				<t path="Iterable"><c path="zip.T1"/></t>
				<t path="Iterable"><c path="zip.T2"/></t>
				<c path="Array"><x path="thx.Tuple2">
	<c path="zip.T1"/>
	<c path="zip.T2"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of two iterables in an array of `Tuple2`.</haxe_doc>
		</zip>
		<zip3 public="1" params="T1:T2:T3" set="method" line="313" static="1">
			<f a="it1:it2:it3">
				<t path="Iterable"><c path="zip3.T1"/></t>
				<t path="Iterable"><c path="zip3.T2"/></t>
				<t path="Iterable"><c path="zip3.T3"/></t>
				<c path="Array"><x path="thx.Tuple3">
	<c path="zip3.T1"/>
	<c path="zip3.T2"/>
	<c path="zip3.T3"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of three iterables in an array of `Tuple3`.</haxe_doc>
		</zip3>
		<zip4 public="1" params="T1:T2:T3:T4" set="method" line="319" static="1">
			<f a="it1:it2:it3:it4">
				<t path="Iterable"><c path="zip4.T1"/></t>
				<t path="Iterable"><c path="zip4.T2"/></t>
				<t path="Iterable"><c path="zip4.T3"/></t>
				<t path="Iterable"><c path="zip4.T4"/></t>
				<c path="Array"><x path="thx.Tuple4">
	<c path="zip4.T1"/>
	<c path="zip4.T2"/>
	<c path="zip4.T3"/>
	<c path="zip4.T4"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of four iterables in an array of `Tuple4`.</haxe_doc>
		</zip4>
		<zip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="325" static="1">
			<f a="it1:it2:it3:it4:it5">
				<t path="Iterable"><c path="zip5.T1"/></t>
				<t path="Iterable"><c path="zip5.T2"/></t>
				<t path="Iterable"><c path="zip5.T3"/></t>
				<t path="Iterable"><c path="zip5.T4"/></t>
				<t path="Iterable"><c path="zip5.T5"/></t>
				<c path="Array"><x path="thx.Tuple5">
	<c path="zip5.T1"/>
	<c path="zip5.T2"/>
	<c path="zip5.T3"/>
	<c path="zip5.T4"/>
	<c path="zip5.T5"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of five iterables in an array of `Tuple5`.</haxe_doc>
		</zip5>
		<haxe_doc>Helper class for `Iterable`. Implementations usually fallback on `thx.Iterators`.

For documentation of specific methods refer to the equivalent methods in `thx.Arrays`;</haxe_doc>
	</class>
	<class path="thx.Iterators" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Iterators.hx">
		<all public="1" params="T" set="method" line="19" static="1">
			<f a="it:predicate">
				<t path="Iterator"><c path="all.T"/></t>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for all elements in the iterator.</haxe_doc>
		</all>
		<any public="1" params="T" set="method" line="29" static="1">
			<f a="it:predicate">
				<t path="Iterator"><c path="any.T"/></t>
				<f a="">
					<c path="any.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for at least one element in the iterator.</haxe_doc>
		</any>
		<equals public="1" params="T" set="method" line="41" static="1">
			<f a="a:b:?equality">
				<t path="Iterator"><c path="equals.T"/></t>
				<t path="Iterator"><c path="equals.T"/></t>
				<f a=":">
					<c path="equals.T"/>
					<c path="equals.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>It compares the lengths and elements of two given iterators and returns `true` if they match.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</equals>
		<get public="1" params="T" set="method" line="62" static="1">
			<f a="it:index">
				<t path="Iterator"><c path="get.T"/></t>
				<x path="Int"/>
				<t path="Null"><c path="get.T"/></t>
			</f>
			<haxe_doc>Get the element at the `index` position.</haxe_doc>
		</get>
		<getOption public="1" params="T" set="method" line="74" static="1">
			<f a="it:index">
				<t path="Iterator"><c path="getOption.T"/></t>
				<x path="Int"/>
				<e path="haxe.ds.Option"><c path="getOption.T"/></e>
			</f>
			<haxe_doc>Refer to `thx.Arrays.getOption`</haxe_doc>
		</getOption>
		<eachPair public="1" params="TIn:TOut" set="method" line="80" static="1">
			<f a="it:handler">
				<t path="Iterator"><c path="eachPair.TIn"/></t>
				<f a=":">
					<c path="eachPair.TIn"/>
					<c path="eachPair.TIn"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.eachPair`.</haxe_doc>
		</eachPair>
		<filter public="1" params="TElement" set="method" line="86" static="1">
			<f a="it:predicate">
				<t path="Iterator"><c path="filter.TElement"/></t>
				<f a="">
					<c path="filter.TElement"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.TElement"/></c>
			</f>
			<haxe_doc>Refer to `Array.filter`.</haxe_doc>
		</filter>
		<find public="1" params="T:TFind" set="method" line="96" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.find`.</haxe_doc>
		</find>
		<findOption public="1" params="T:TFind" set="method" line="106" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="findOption.T"/></t>
				<f a="">
					<c path="findOption.T"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="findOption.T"/></e>
			</f>
			<haxe_doc>Refer to `thx.Arrays.findOption`.</haxe_doc>
		</findOption>
		<first public="1" params="T:TFind" set="method" line="112" static="1">
			<f a="it">
				<t path="Iterator"><c path="first.T"/></t>
				<t path="Null"><c path="first.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.first`.</haxe_doc>
		</first>
		<hasElements public="1" params="T" get="inline" set="null" line="118" static="1">
			<f a="it">
				<t path="Iterator"><c path="hasElements.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the iterator contains at least one element.</haxe_doc>
		</hasElements>
		<indexOf public="1" params="T" set="method" line="124" static="1">
			<f a="it:element">
				<t path="Iterator"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of element in the iterator. It returns -1 if not found.</haxe_doc>
		</indexOf>
		<isEmpty public="1" params="T" get="inline" set="null" line="137" static="1">
			<f a="it">
				<t path="Iterator"><c path="isEmpty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.isEmpty`.</haxe_doc>
		</isEmpty>
		<isIterator public="1" set="method" line="146" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isIterator` checks that the passed argument has all the requirements to be an `Iterator`.

Note that no type checking is performed at runtime, the method only checks that the value
has two fields `next` and `hasNext` and that they are both functions.</haxe_doc>
		</isIterator>
		<last public="1" params="T:TFind" set="method" line="155" static="1">
			<f a="it">
				<t path="Iterator"><c path="last.T"/></t>
				<t path="Null"><c path="last.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.Arrays.last`.</haxe_doc>
		</last>
		<forEach public="1" params="A" set="method" line="165" static="1">
			<f a="it:proc">
				<t path="Iterator"><c path="forEach.A"/></t>
				<f a="">
					<c path="forEach.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Effectful traversal. Use this instead of .map if producing side-effects.
This method consumes the original iterator.</haxe_doc>
		</forEach>
		<map public="1" params="T:S" set="method" line="174" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="map.T"/></t>
				<f a="">
					<c path="map.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Refer to `Array.map`.</haxe_doc>
		</map>
		<fmap public="1" params="T:S" set="method" line="185" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="fmap.T"/></t>
				<f a="">
					<c path="fmap.T"/>
					<c path="fmap.S"/>
				</f>
				<t path="Iterator"><c path="fmap.S"/></t>
			</f>
			<haxe_doc>* Produce a new Iterator that lazily applies the provided function to
   * each element of this iterator.</haxe_doc>
		</fmap>
		<mapi public="1" params="T:S" set="method" line="191" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="mapi.T"/></t>
				<f a=":">
					<c path="mapi.T"/>
					<x path="Int"/>
					<c path="mapi.S"/>
				</f>
				<c path="Array"><c path="mapi.S"/></c>
			</f>
			<haxe_doc>Refer to `thx.Arrays.mapi`.</haxe_doc>
		</mapi>
		<fmapi public="1" params="T:S" set="method" line="204" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="fmapi.T"/></t>
				<f a=":">
					<c path="fmapi.T"/>
					<x path="Int"/>
					<c path="fmapi.S"/>
				</f>
				<t path="Iterator"><c path="fmapi.S"/></t>
			</f>
			<haxe_doc>* Produce a new Iterator that lazily applies the provided function to
   * each element of this iterator and an index value that increases with
   * each application.</haxe_doc>
		</fmapi>
		<order public="1" params="T" set="method" line="210" static="1">
			<f a="it:sort">
				<t path="Iterator"><c path="order.T"/></t>
				<f a=":">
					<c path="order.T"/>
					<c path="order.T"/>
					<x path="Int"/>
				</f>
				<c path="Array"><c path="order.T"/></c>
			</f>
			<haxe_doc>Refer to `thx.Arrays.order`.</haxe_doc>
		</order>
		<reduce public="1" params="TElement:TAcc" set="method" line="219" static="1">
			<f a="it:callback:initial">
				<t path="Iterator"><c path="reduce.TElement"/></t>
				<f a=":">
					<c path="reduce.TAcc"/>
					<c path="reduce.TElement"/>
					<c path="reduce.TAcc"/>
				</f>
				<c path="reduce.TAcc"/>
				<c path="reduce.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.reduce`.</haxe_doc>
		</reduce>
		<reducei public="1" params="TElement:TAcc" set="method" line="230" static="1">
			<f a="it:callback:initial">
				<t path="Iterator"><c path="reducei.TElement"/></t>
				<f a="::">
					<c path="reducei.TAcc"/>
					<c path="reducei.TElement"/>
					<x path="Int"/>
					<c path="reducei.TAcc"/>
				</f>
				<c path="reducei.TAcc"/>
				<c path="reducei.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.Arrays.reducei`.</haxe_doc>
		</reducei>
		<foldLeft public="1" params="A:B" set="method" line="235" static="1"><f a="it:zero:f">
	<t path="Iterator"><c path="foldLeft.A"/></t>
	<c path="foldLeft.B"/>
	<f a=":">
		<c path="foldLeft.B"/>
		<c path="foldLeft.A"/>
		<c path="foldLeft.B"/>
	</f>
	<c path="foldLeft.B"/>
</f></foldLeft>
		<foldMap public="1" params="A:B" set="method" line="241" static="1">
			<f a="it:f:m">
				<t path="Iterator"><c path="foldMap.A"/></t>
				<f a="">
					<c path="foldMap.A"/>
					<c path="foldMap.B"/>
				</f>
				<x path="thx.Monoid"><c path="foldMap.B"/></x>
				<c path="foldMap.B"/>
			</f>
			<haxe_doc>* Fold by mapping the contained values into some monoidal type and reducing with that monoid.</haxe_doc>
		</foldMap>
		<takeUntil public="1" params="A" set="method" line="247" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="takeUntil.A"/></t>
				<f a="">
					<c path="takeUntil.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="takeUntil.A"/></c>
			</f>
			<haxe_doc>Take values until the first time `fn` produced false.</haxe_doc>
		</takeUntil>
		<dropUntil public="1" params="A" set="method" line="261" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="dropUntil.A"/></t>
				<f a="">
					<c path="dropUntil.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="dropUntil.A"/></c>
			</f>
			<haxe_doc>Drop values until the first time `fn` produces false.</haxe_doc>
		</dropUntil>
		<toArray public="1" params="T" set="method" line="280" static="1">
			<f a="it">
				<t path="Iterator"><c path="toArray.T"/></t>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc><![CDATA[`toArray` transforms an `Iterator<T>` into an `Array<T>`.]]></haxe_doc>
		</toArray>
		<unzip public="1" params="T1:T2" set="method" line="290" static="1">
			<f a="it">
				<t path="Iterator"><x path="thx.Tuple2">
	<c path="unzip.T1"/>
	<c path="unzip.T2"/>
</x></t>
				<x path="thx.Tuple2">
					<c path="Array"><c path="unzip.T1"/></c>
					<c path="Array"><c path="unzip.T2"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterator of Tuple2<T1, T2> to a Tuple2<Array<T1>, Array<T2>>.]]></haxe_doc>
		</unzip>
		<unzip3 public="1" params="T1:T2:T3" set="method" line="302" static="1">
			<f a="it">
				<t path="Iterator"><x path="thx.Tuple3">
	<c path="unzip3.T1"/>
	<c path="unzip3.T2"/>
	<c path="unzip3.T3"/>
</x></t>
				<x path="thx.Tuple3">
					<c path="Array"><c path="unzip3.T1"/></c>
					<c path="Array"><c path="unzip3.T2"/></c>
					<c path="Array"><c path="unzip3.T3"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterator of Tuple3<T1, T2, T3> to a Tuple3<Array<T1>, Array<T2>, Array<T3>>.]]></haxe_doc>
		</unzip3>
		<unzip4 public="1" params="T1:T2:T3:T4" set="method" line="315" static="1">
			<f a="it">
				<t path="Iterator"><x path="thx.Tuple4">
	<c path="unzip4.T1"/>
	<c path="unzip4.T2"/>
	<c path="unzip4.T3"/>
	<c path="unzip4.T4"/>
</x></t>
				<x path="thx.Tuple4">
					<c path="Array"><c path="unzip4.T1"/></c>
					<c path="Array"><c path="unzip4.T2"/></c>
					<c path="Array"><c path="unzip4.T3"/></c>
					<c path="Array"><c path="unzip4.T4"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterator of Tuple4<T1, T2, T3, T4> to a Tuple4<Array<T1>, Array<T2>, Array<T3>, Array<T4>>.]]></haxe_doc>
		</unzip4>
		<unzip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="329" static="1">
			<f a="it">
				<t path="Iterator"><x path="thx.Tuple5">
	<c path="unzip5.T1"/>
	<c path="unzip5.T2"/>
	<c path="unzip5.T3"/>
	<c path="unzip5.T4"/>
	<c path="unzip5.T5"/>
</x></t>
				<x path="thx.Tuple5">
					<c path="Array"><c path="unzip5.T1"/></c>
					<c path="Array"><c path="unzip5.T2"/></c>
					<c path="Array"><c path="unzip5.T3"/></c>
					<c path="Array"><c path="unzip5.T4"/></c>
					<c path="Array"><c path="unzip5.T5"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an iterator of Tuple5<T1, T2, T3, T4, T5> to a Tuple5<Array<T1>, Array<T2>, Array<T3>, Array<T4>, Array<T5>>.]]></haxe_doc>
		</unzip5>
		<zip public="1" params="T1:T2" set="method" line="344" static="1">
			<f a="it1:it2">
				<t path="Iterator"><c path="zip.T1"/></t>
				<t path="Iterator"><c path="zip.T2"/></t>
				<c path="Array"><x path="thx.Tuple2">
	<c path="zip.T1"/>
	<c path="zip.T2"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of two iterators in an array of `Tuple2`.</haxe_doc>
		</zip>
		<zip3 public="1" params="T1:T2:T3" set="method" line="354" static="1">
			<f a="it1:it2:it3">
				<t path="Iterator"><c path="zip3.T1"/></t>
				<t path="Iterator"><c path="zip3.T2"/></t>
				<t path="Iterator"><c path="zip3.T3"/></t>
				<c path="Array"><x path="thx.Tuple3">
	<c path="zip3.T1"/>
	<c path="zip3.T2"/>
	<c path="zip3.T3"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of three iterators in an array of `Tuple3`.</haxe_doc>
		</zip3>
		<zip4 public="1" params="T1:T2:T3:T4" set="method" line="364" static="1">
			<f a="it1:it2:it3:it4">
				<t path="Iterator"><c path="zip4.T1"/></t>
				<t path="Iterator"><c path="zip4.T2"/></t>
				<t path="Iterator"><c path="zip4.T3"/></t>
				<t path="Iterator"><c path="zip4.T4"/></t>
				<c path="Array"><x path="thx.Tuple4">
	<c path="zip4.T1"/>
	<c path="zip4.T2"/>
	<c path="zip4.T3"/>
	<c path="zip4.T4"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of four iterators in an array of `Tuple4`.</haxe_doc>
		</zip4>
		<zip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="374" static="1">
			<f a="it1:it2:it3:it4:it5">
				<t path="Iterator"><c path="zip5.T1"/></t>
				<t path="Iterator"><c path="zip5.T2"/></t>
				<t path="Iterator"><c path="zip5.T3"/></t>
				<t path="Iterator"><c path="zip5.T4"/></t>
				<t path="Iterator"><c path="zip5.T5"/></t>
				<c path="Array"><x path="thx.Tuple5">
	<c path="zip5.T1"/>
	<c path="zip5.T2"/>
	<c path="zip5.T3"/>
	<c path="zip5.T4"/>
	<c path="zip5.T5"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of five iterators in an array of `Tuple5`.</haxe_doc>
		</zip5>
		<haxe_doc>Helper class to work with `Iterator`.

For documentation of specific methods refer to the equivalent methods in `thx.Arrays`;</haxe_doc>
	</class>
	<class path="thx.MapIterator" params="A:B" file="/Users/francoponticelli/projects/thx.core/src/thx/Iterators.hx" module="thx.Iterators">
		<base><t path="Iterator"><c path="thx.MapIterator.A"/></t></base>
		<f><f a="">
	<c path="thx.MapIterator.A"/>
	<c path="thx.MapIterator.B"/>
</f></f>
		<next public="1" set="method" line="391"><f a=""><c path="thx.MapIterator.B"/></f></next>
		<hasNext public="1" set="method" line="394"><f a=""><x path="Bool"/></f></hasNext>
		<new public="1" set="method" line="386"><f a="base:f">
	<t path="Iterator"><c path="thx.MapIterator.A"/></t>
	<f a="">
		<c path="thx.MapIterator.A"/>
		<c path="thx.MapIterator.B"/>
	</f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.MapIIterator" params="A:B" file="/Users/francoponticelli/projects/thx.core/src/thx/Iterators.hx" module="thx.Iterators">
		<base><t path="Iterator"><c path="thx.MapIIterator.A"/></t></base>
		<f><f a=":">
	<c path="thx.MapIIterator.A"/>
	<x path="Int"/>
	<c path="thx.MapIIterator.B"/>
</f></f>
		<i expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</i>
		<next public="1" set="method" line="408"><f a=""><c path="thx.MapIIterator.B"/></f></next>
		<hasNext public="1" set="method" line="414"><f a=""><x path="Bool"/></f></hasNext>
		<new public="1" set="method" line="403"><f a="base:f">
	<t path="Iterator"><c path="thx.MapIIterator.A"/></t>
	<f a=":">
		<c path="thx.MapIIterator.A"/>
		<x path="Int"/>
		<c path="thx.MapIIterator.B"/>
	</f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.Maps" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Maps.hx">
		<copyTo public="1" params="TKey:TValue" set="method" line="22" static="1">
			<f a="src:dst">
				<c path="haxe.IMap">
					<c path="copyTo.TKey"/>
					<c path="copyTo.TValue"/>
				</c>
				<c path="haxe.IMap">
					<c path="copyTo.TKey"/>
					<c path="copyTo.TValue"/>
				</c>
				<c path="haxe.IMap">
					<c path="copyTo.TKey"/>
					<c path="copyTo.TValue"/>
				</c>
			</f>
			<haxe_doc>Copies all the key/values pairs from `src` to `dst`. It overwrites already existing
keys in `dst` if needed.</haxe_doc>
		</copyTo>
		<tuples public="1" params="TKey:TValue" set="method" line="31" static="1">
			<f a="map">
				<c path="haxe.IMap">
					<c path="tuples.TKey"/>
					<c path="tuples.TValue"/>
				</c>
				<c path="Array"><x path="thx.Tuple2">
	<c path="tuples.TKey"/>
	<c path="tuples.TValue"/>
</x></c>
			</f>
			<haxe_doc><![CDATA[Converts a Map<TKey, TValue> into an Array<Tuple2<TKey, TValue>>]]></haxe_doc>
		</tuples>
		<mapValues public="1" params="TKey:TValueA:TValueB" set="method" line="39" static="1">
			<f a="map:f:acc">
				<c path="haxe.IMap">
					<c path="mapValues.TKey"/>
					<c path="mapValues.TValueA"/>
				</c>
				<f a="">
					<c path="mapValues.TValueA"/>
					<c path="mapValues.TValueB"/>
				</f>
				<x path="Map">
					<c path="mapValues.TKey"/>
					<c path="mapValues.TValueB"/>
				</x>
				<x path="Map">
					<c path="mapValues.TKey"/>
					<c path="mapValues.TValueB"/>
				</x>
			</f>
			<haxe_doc>It maps values from one `Map` instance to another.</haxe_doc>
		</mapValues>
		<reduce public="1" params="TKey:TValue:TOut" set="method" line="48" static="1">
			<f a="map:f:acc">
				<c path="haxe.IMap">
					<c path="reduce.TKey"/>
					<c path="reduce.TValue"/>
				</c>
				<f a=":">
					<c path="reduce.TOut"/>
					<t path="thx.Tuple">
						<c path="reduce.TKey"/>
						<c path="reduce.TValue"/>
					</t>
					<c path="reduce.TOut"/>
				</f>
				<c path="reduce.TOut"/>
				<c path="reduce.TOut"/>
			</f>
			<haxe_doc>Applies the reduce function on every key/value pair in the map.</haxe_doc>
		</reduce>
		<values public="1" params="TKey:TValue" set="method" line="54" static="1">
			<f a="map">
				<c path="haxe.IMap">
					<c path="values.TKey"/>
					<c path="values.TValue"/>
				</c>
				<c path="Array"><c path="values.TValue"/></c>
			</f>
			<haxe_doc><![CDATA[Extracts the values of a Map<TKey, TValue> into Array<TValue>]]></haxe_doc>
		</values>
		<foldLeftWithKeys public="1" params="K:A:B" set="method" line="62" static="1">
			<f a="map:f:acc">
				<x path="Map">
					<c path="foldLeftWithKeys.K"/>
					<c path="foldLeftWithKeys.A"/>
				</x>
				<f a="::">
					<c path="foldLeftWithKeys.B"/>
					<c path="foldLeftWithKeys.K"/>
					<c path="foldLeftWithKeys.A"/>
					<c path="foldLeftWithKeys.B"/>
				</f>
				<c path="foldLeftWithKeys.B"/>
				<c path="foldLeftWithKeys.B"/>
			</f>
			<haxe_doc>* Unordered fold over key/value pairs in the map.</haxe_doc>
		</foldLeftWithKeys>
		<getOption public="1" params="TKey:TValue" set="method" line="72" static="1">
			<f a="map:key">
				<c path="haxe.IMap">
					<c path="getOption.TKey"/>
					<c path="getOption.TValue"/>
				</c>
				<c path="getOption.TKey"/>
				<e path="haxe.ds.Option"><c path="getOption.TValue"/></e>
			</f>
			<haxe_doc>Null-safe get.</haxe_doc>
		</getOption>
		<toObject public="1" params="T" set="method" line="78" static="1">
			<f a="map">
				<x path="Map">
					<c path="String"/>
					<c path="toObject.T"/>
				</x>
				<a/>
			</f>
			<haxe_doc><![CDATA[`mapToObject` transforms a `Map<String, T>` into an anonymous object.]]></haxe_doc>
		</toObject>
		<getAlt public="1" params="TKey:TValue" set="method" line="88" static="1">
			<f a="map:key:alt">
				<x path="Map">
					<c path="getAlt.TKey"/>
					<c path="getAlt.TValue"/>
				</x>
				<c path="getAlt.TKey"/>
				<c path="getAlt.TValue"/>
				<c path="getAlt.TValue"/>
			</f>
			<haxe_doc>Given a `key` returns the associated value from `map`. If the key doesn't exist or the associated value is `null`,
it returns the provided `alt` value instead.</haxe_doc>
		</getAlt>
		<isMap public="1" get="inline" set="null" line="96" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if a value is of any type of Map. Equivalent to `Std.is(v, IMap)`.</haxe_doc>
		</isMap>
		<string public="1" params="TKey:TValue" set="method" line="99" static="1"><f a="m">
	<c path="haxe.IMap">
		<c path="string.TKey"/>
		<c path="string.TValue"/>
	</c>
	<c path="String"/>
</f></string>
		<merge public="1" params="TKey:TValue" set="method" line="115" static="1">
			<f a="dest:sources">
				<c path="haxe.IMap">
					<c path="merge.TKey"/>
					<c path="merge.TValue"/>
				</c>
				<c path="Array"><c path="haxe.IMap">
	<c path="merge.TKey"/>
	<c path="merge.TValue"/>
</c></c>
				<c path="haxe.IMap">
					<c path="merge.TKey"/>
					<c path="merge.TValue"/>
				</c>
			</f>
			<haxe_doc><![CDATA[Merges 0 or more maps of the same type into a destination map.  Successive source maps will overwrite values for
the same key from previous sources.  The destination map is modified in place, and the destination is also returned
from the function.  To merge into an empty map, pass a new empty map as the dest argument.

```
var result1 = map1.merge([map2, map3]); // result1 and map1 should be the same after this.  map2 and map3 are not modified.
var result2 = (new Map() : Map<String, Int>).merge(map1, map2); // map1 and map2 not modified
```]]></haxe_doc>
		</merge>
		<semigroup public="1" params="K:V" set="method" line="130" static="1">
			<f a=""><x path="thx.Semigroup"><c path="haxe.IMap">
	<c path="semigroup.K"/>
	<c path="semigroup.V"/>
</c></x></f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>* The way that Haxe specializes maps inhibits us from defining a Monoid
   * instance for maps. The recommended way to reduce an array of maps
   * is `Nel.nel(new Map(), maps).fold(Maps.semigroup())`</haxe_doc>
		</semigroup>
		<haxe_doc>Extension methods for Maps</haxe_doc>
	</class>
	<typedef path="thx.MonoidImpl" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Monoid.hx" module="thx.Monoid"><a>
	<zero><c path="thx.MonoidImpl.A"/></zero>
	<append><f a=":">
	<c path="thx.MonoidImpl.A"/>
	<c path="thx.MonoidImpl.A"/>
	<c path="thx.MonoidImpl.A"/>
</f></append>
</a></typedef>
	<abstract path="thx.Monoid" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Monoid.hx">
		<from><icast><t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t></icast></from>
		<this><t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t></this>
		<impl><class path="thx._Monoid.Monoid_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Monoid.hx" private="1" module="thx.Monoid">
	<semigroup public="1" get="accessor" set="null" static="1">
		<x path="thx.Semigroup"><c path="thx.Monoid.A"/></x>
		<meta><m n=":impl"/></meta>
	</semigroup>
	<get_semigroup set="method" line="12" static="1">
		<f a="this">
			<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
			<x path="thx.Semigroup"><c path="thx.Monoid.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</get_semigroup>
	<zero public="1" get="accessor" set="null" static="1">
		<c path="thx.Monoid.A"/>
		<meta><m n=":impl"/></meta>
	</zero>
	<get_zero set="method" line="15" static="1">
		<f a="this">
			<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
			<c path="thx.Monoid.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_zero>
	<append public="1" set="method" line="17" static="1">
		<f a="this:a0:a1">
			<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
			<c path="thx.Monoid.A"/>
			<c path="thx.Monoid.A"/>
			<c path="thx.Monoid.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</append>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Monoid.Monoid_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Monoid.hx" private="1" module="thx.Monoid">
		<semigroup public="1" get="accessor" set="null" static="1">
			<x path="thx.Semigroup"><c path="thx.Monoid.A"/></x>
			<meta><m n=":impl"/></meta>
		</semigroup>
		<get_semigroup set="method" line="12" static="1">
			<f a="this">
				<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
				<x path="thx.Semigroup"><c path="thx.Monoid.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</get_semigroup>
		<zero public="1" get="accessor" set="null" static="1">
			<c path="thx.Monoid.A"/>
			<meta><m n=":impl"/></meta>
		</zero>
		<get_zero set="method" line="15" static="1">
			<f a="this">
				<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
				<c path="thx.Monoid.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_zero>
		<append public="1" set="method" line="17" static="1">
			<f a="this:a0:a1">
				<t path="thx.MonoidImpl"><c path="thx.Monoid.A"/></t>
				<c path="thx.Monoid.A"/>
				<c path="thx.Monoid.A"/>
				<c path="thx.Monoid.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</append>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Nel" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Nel.hx">
		<from><icast><e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e></icast></from>
		<this><e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e></this>
		<to><icast><e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e></icast></to>
		<haxe_doc><![CDATA[Abstract around `NonEmptyList<A>`, which is similar to a Cons-style list, but must contain
at least one element (cannot be empty).]]></haxe_doc>
		<impl><class path="thx._Nel.Nel_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Nel.hx" private="1" module="thx.Nel">
	<nel public="1" params="A" set="method" line="15" static="1">
		<f a="hd:tl">
			<c path="nel.A"/>
			<c path="Array"><c path="nel.A"/></c>
			<x path="thx.Nel"><c path="nel.A"/></x>
		</f>
		<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element and tail `Array<A>`]]></haxe_doc>
	</nel>
	<pure public="1" params="A" set="method" line="25" static="1">
		<f a="a">
			<c path="pure.A"/>
			<x path="thx.Nel"><c path="pure.A"/></x>
		</f>
		<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element]]></haxe_doc>
	</pure>
	<cons public="1" params="A" set="method" line="31" static="1">
		<f a="a:nl">
			<c path="cons.A"/>
			<x path="thx.Nel"><c path="cons.A"/></x>
			<x path="thx.Nel"><c path="cons.A"/></x>
		</f>
		<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element and tail `Nel<A>`]]></haxe_doc>
	</cons>
	<fromArray public="1" params="A" set="method" line="38" static="1">
		<f a="arr">
			<x path="thx.ReadonlyArray"><c path="fromArray.A"/></x>
			<e path="haxe.ds.Option"><x path="thx.Nel"><c path="fromArray.A"/></x></e>
		</f>
		<haxe_doc><![CDATA[Attempts to construct a `Nel<A>` from a possibly-empty `Array<A>`.  If the array
is empty, `None` is returned.]]></haxe_doc>
	</fromArray>
	<map public="1" params="B" set="method" line="51" static="1">
		<f a="this:f">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<f a="">
				<c path="thx.Nel.A"/>
				<c path="map.B"/>
			</f>
			<x path="thx.Nel"><c path="map.B"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Applies an `A -> B` function to each element in this `Nel<A>` to create a new `Nel<B>`]]></haxe_doc>
	</map>
	<flatMap public="1" params="B" set="method" line="57" static="1">
		<f a="this:f">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<f a="">
				<c path="thx.Nel.A"/>
				<x path="thx.Nel"><c path="flatMap.B"/></x>
			</f>
			<x path="thx.Nel"><c path="flatMap.B"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Applies an `A -> Nel<B>` function to each element in this `Nel<A>` and flattens the result to create a new `Nel<B>`]]></haxe_doc>
	</flatMap>
	<fold public="1" set="method" line="66" static="1">
		<f a="this:f">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<f a=":">
				<c path="thx.Nel.A"/>
				<c path="thx.Nel.A"/>
				<c path="thx.Nel.A"/>
			</f>
			<c path="thx.Nel.A"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Applies a reducing function to this `Nel<A>`]]></haxe_doc>
	</fold>
	<append public="1" set="method" line="78" static="1">
		<f a="this:nel">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<x path="thx.Nel"><c path="thx.Nel.A"/></x>
			<x path="thx.Nel"><c path="thx.Nel.A"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>N + N0</e></m>
		</meta>
		<haxe_doc><![CDATA[Appends another non-empty list to this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
	</append>
	<head public="1" set="method" line="88" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<c path="thx.Nel.A"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Gets the head item of this `Nel<A>`, which is guaranteed to exist]]></haxe_doc>
	</head>
	<tail public="1" set="method" line="98" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Gets the tail (all but the first element) of the `Nel<A>` as a possibly-empty `ReadonlyArray<A>`]]></haxe_doc>
	</tail>
	<init public="1" set="method" line="110" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Gets the initial elements (all but the last element) of the `Nel<A>` as a possibly-empty `ReadonlyArray<A>`

Warning: this operation is `O(n)`]]></haxe_doc>
	</init>
	<last public="1" set="method" line="122" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<c path="thx.Nel.A"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Gets the last item of the `Nel<A>`, which is guaranteed to exist.

Warning: this operation is `O(n)`]]></haxe_doc>
	</last>
	<push public="1" set="method" line="136" static="1">
		<f a="this:a">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<c path="thx.Nel.A"/>
			<x path="thx.Nel"><c path="thx.Nel.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Returns a new `Nel<A>` with the given item added at the end.

Does not modify this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
	</push>
	<pop public="1" set="method" line="147" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<t path="thx.Tuple">
				<c path="thx.Nel.A"/>
				<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Returns the last item of the `Nel<A>` and a new `Nel<A>` with the last item removed.

Does not modify this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
	</pop>
	<unshift public="1" set="method" line="156" static="1">
		<f a="this:a">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<c path="thx.Nel.A"/>
			<x path="thx.Nel"><c path="thx.Nel.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Returns a new `Nel<A>` with the given item added at the front.

Does not modify this `Nel<A>`.]]></haxe_doc>
	</unshift>
	<shift public="1" set="method" line="165" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<t path="thx.Tuple">
				<c path="thx.Nel.A"/>
				<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Returns the first item of the `Nel<A>` and a new `Nel<A>` with the first item removed.

Does not modify this `Nel<A>`.]]></haxe_doc>
	</shift>
	<toArray public="1" set="method" line="174" static="1">
		<f a="this">
			<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
			<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Converts the `Nel<A>` to a `ReadonlyArray<A>`

Warning: this operation is `O(n)`]]></haxe_doc>
	</toArray>
	<semigroup public="1" params="A" set="method" line="187" static="1">
		<f a=""><x path="thx.Semigroup"><x path="thx.Nel"><c path="semigroup.A"/></x></x></f>
		<haxe_doc><![CDATA[Gets a `Semigroup` instance for `Nel<A>`, using the `append` method of `Nel<A>`.]]></haxe_doc>
	</semigroup>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Nel.Nel_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Nel.hx" private="1" module="thx.Nel">
		<nel public="1" params="A" set="method" line="15" static="1">
			<f a="hd:tl">
				<c path="nel.A"/>
				<c path="Array"><c path="nel.A"/></c>
				<x path="thx.Nel"><c path="nel.A"/></x>
			</f>
			<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element and tail `Array<A>`]]></haxe_doc>
		</nel>
		<pure public="1" params="A" set="method" line="25" static="1">
			<f a="a">
				<c path="pure.A"/>
				<x path="thx.Nel"><c path="pure.A"/></x>
			</f>
			<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element]]></haxe_doc>
		</pure>
		<cons public="1" params="A" set="method" line="31" static="1">
			<f a="a:nl">
				<c path="cons.A"/>
				<x path="thx.Nel"><c path="cons.A"/></x>
				<x path="thx.Nel"><c path="cons.A"/></x>
			</f>
			<haxe_doc><![CDATA[Constructs a `Nel<A>` from a head element and tail `Nel<A>`]]></haxe_doc>
		</cons>
		<fromArray public="1" params="A" set="method" line="38" static="1">
			<f a="arr">
				<x path="thx.ReadonlyArray"><c path="fromArray.A"/></x>
				<e path="haxe.ds.Option"><x path="thx.Nel"><c path="fromArray.A"/></x></e>
			</f>
			<haxe_doc><![CDATA[Attempts to construct a `Nel<A>` from a possibly-empty `Array<A>`.  If the array
is empty, `None` is returned.]]></haxe_doc>
		</fromArray>
		<map public="1" params="B" set="method" line="51" static="1">
			<f a="this:f">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<f a="">
					<c path="thx.Nel.A"/>
					<c path="map.B"/>
				</f>
				<x path="thx.Nel"><c path="map.B"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Applies an `A -> B` function to each element in this `Nel<A>` to create a new `Nel<B>`]]></haxe_doc>
		</map>
		<flatMap public="1" params="B" set="method" line="57" static="1">
			<f a="this:f">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<f a="">
					<c path="thx.Nel.A"/>
					<x path="thx.Nel"><c path="flatMap.B"/></x>
				</f>
				<x path="thx.Nel"><c path="flatMap.B"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Applies an `A -> Nel<B>` function to each element in this `Nel<A>` and flattens the result to create a new `Nel<B>`]]></haxe_doc>
		</flatMap>
		<fold public="1" set="method" line="66" static="1">
			<f a="this:f">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<f a=":">
					<c path="thx.Nel.A"/>
					<c path="thx.Nel.A"/>
					<c path="thx.Nel.A"/>
				</f>
				<c path="thx.Nel.A"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Applies a reducing function to this `Nel<A>`]]></haxe_doc>
		</fold>
		<append public="1" set="method" line="78" static="1">
			<f a="this:nel">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<x path="thx.Nel"><c path="thx.Nel.A"/></x>
				<x path="thx.Nel"><c path="thx.Nel.A"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>N + N0</e></m>
			</meta>
			<haxe_doc><![CDATA[Appends another non-empty list to this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
		</append>
		<head public="1" set="method" line="88" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<c path="thx.Nel.A"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Gets the head item of this `Nel<A>`, which is guaranteed to exist]]></haxe_doc>
		</head>
		<tail public="1" set="method" line="98" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Gets the tail (all but the first element) of the `Nel<A>` as a possibly-empty `ReadonlyArray<A>`]]></haxe_doc>
		</tail>
		<init public="1" set="method" line="110" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Gets the initial elements (all but the last element) of the `Nel<A>` as a possibly-empty `ReadonlyArray<A>`

Warning: this operation is `O(n)`]]></haxe_doc>
		</init>
		<last public="1" set="method" line="122" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<c path="thx.Nel.A"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Gets the last item of the `Nel<A>`, which is guaranteed to exist.

Warning: this operation is `O(n)`]]></haxe_doc>
		</last>
		<push public="1" set="method" line="136" static="1">
			<f a="this:a">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<c path="thx.Nel.A"/>
				<x path="thx.Nel"><c path="thx.Nel.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Returns a new `Nel<A>` with the given item added at the end.

Does not modify this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
		</push>
		<pop public="1" set="method" line="147" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<t path="thx.Tuple">
					<c path="thx.Nel.A"/>
					<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Returns the last item of the `Nel<A>` and a new `Nel<A>` with the last item removed.

Does not modify this `Nel<A>`.

Warning: this operation is `O(n)`]]></haxe_doc>
		</pop>
		<unshift public="1" set="method" line="156" static="1">
			<f a="this:a">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<c path="thx.Nel.A"/>
				<x path="thx.Nel"><c path="thx.Nel.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Returns a new `Nel<A>` with the given item added at the front.

Does not modify this `Nel<A>`.]]></haxe_doc>
		</unshift>
		<shift public="1" set="method" line="165" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<t path="thx.Tuple">
					<c path="thx.Nel.A"/>
					<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Returns the first item of the `Nel<A>` and a new `Nel<A>` with the first item removed.

Does not modify this `Nel<A>`.]]></haxe_doc>
		</shift>
		<toArray public="1" set="method" line="174" static="1">
			<f a="this">
				<e path="thx.NonEmptyList"><c path="thx.Nel.A"/></e>
				<x path="thx.ReadonlyArray"><c path="thx.Nel.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Converts the `Nel<A>` to a `ReadonlyArray<A>`

Warning: this operation is `O(n)`]]></haxe_doc>
		</toArray>
		<semigroup public="1" params="A" set="method" line="187" static="1">
			<f a=""><x path="thx.Semigroup"><x path="thx.Nel"><c path="semigroup.A"/></x></x></f>
			<haxe_doc><![CDATA[Gets a `Semigroup` instance for `Nel<A>`, using the `append` method of `Nel<A>`.]]></haxe_doc>
		</semigroup>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="thx.NonEmptyList" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Nel.hx" module="thx.Nel">
		<Single a="x"><c path="thx.NonEmptyList.A"/></Single>
		<ConsNel a="x:xs">
			<c path="thx.NonEmptyList.A"/>
			<x path="thx.Nel"><c path="thx.NonEmptyList.A"/></x>
		</ConsNel>
	</enum>
	<enum path="thx.Nil" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Nil.hx">
		<nil><haxe_doc>`nil` is the only value available for `Nil` and it is a constant value.</haxe_doc></nil>
		<haxe_doc>A runtime value that describes the absence of a value.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="thx.Nulls" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Nulls.hx">
		<ensure public="1" params="T" set="method" static="1">
			<f a="value:alt">
				<t path="Null"><c path="ensure.T"/></t>
				<c path="ensure.T"/>
				<d/>
			</f>
			<haxe_doc>Assigns the value `alt` to `value` if found `null`;</haxe_doc>
		</ensure>
		<exists public="1" set="method" static="1">
			<f a="value">
				<d/>
				<d/>
			</f>
			<haxe_doc>`exists` is synonymous of `notNull`.</haxe_doc>
		</exists>
		<with public="1" params="TValue:TOut" set="method" static="1">
			<f a="value:expr:?alt">
				<c path="with.TValue"/>
				<c path="with.TOut"/>
				<c path="with.TOut"/>
				<c path="with.TOut"/>
			</f>
			<haxe_doc>Executes `expr` only if `value` is a non-null value. Inside `expr` the `value` can be
referenced using the special var `_`. It is also possible to provide an alternative value `alt` in
case a non null value is desired.

```haxe
myvalue.with(_.myMethod());
```</haxe_doc>
		</with>
		<isNull public="1" set="method" static="1">
			<f a="value">
				<d/>
				<d/>
			</f>
			<haxe_doc>`isNull` checks if a chain of identifier is null at any point.</haxe_doc>
		</isNull>
		<opt public="1" set="method" static="1">
			<f a="value">
				<d/>
				<d/>
			</f>
			<haxe_doc>It traverses a chain of dot/array identifiers and it returns the last value in the chain or null if any of the identifiers is not set.

```haxe
var o : { a : { b : { c : String }}} = null;
trace((o.a.b.c).opt()); // prints null
var o = { a : { b : { c : 'A' }}};
trace((o.a.b.c).opt()); // prints 'A'
```</haxe_doc>
		</opt>
		<or public="1" params="T" set="method" static="1">
			<f a="value:alt">
				<t path="Null"><c path="or.T"/></t>
				<c path="or.T"/>
				<d/>
			</f>
			<haxe_doc>Like `opt` but allows an `alt` value that replaces a `null` occurrance.

```haxe
var s : String = null;
trace(s.or('b')); // prints 'b'
s = 'a';
trace(s.or('b')); // prints 'a'

// or more complex
var o : { a : { b : { c : String }}} = null;
trace((o.a.b.c).or("B")); // prints 'B'
var o = { a : { b : { c : 'A' }}};
trace((o.a.b.c).or("B")); // prints 'A'
```

Notice that the subject `value` must be a constant identifier (eg: fields, local variables, ...).</haxe_doc>
		</or>
		<notNull public="1" set="method" static="1">
			<f a="value">
				<d/>
				<d/>
			</f>
			<haxe_doc>`notNull` is the negation of `isNull`.</haxe_doc>
		</notNull>
		<haxe_doc>`Nulls` provides extension methods that help to deal with nullable values.

Note that the parenthesis wrap the entire chain of identifiers. That means that a null check will be performed for each identifier in the chain.

Identifiers can also be getters and methods (both are invoked only once and only if the check reaches them). `Python` seems to struggle with some native methods like methods on strings.</haxe_doc>
	</class>
	<class path="thx.Objects" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Objects.hx">
		<compare public="1" set="method" line="19" static="1">
			<f a="a:b">
				<a/>
				<a/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares two objects assuming that the object with less fields will come first.

If both objects have the same number of fields, each field value is compared
using `thx.Dynamics.compare`.</haxe_doc>
		</compare>
		<isEmpty public="1" get="inline" set="null" line="33" static="1">
			<f a="o">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isEmpty` returns `true` if the object doesn't have any field.</haxe_doc>
		</isEmpty>
		<exists public="1" get="inline" set="null" line="39" static="1">
			<f a="o:name">
				<a/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`exists` returns true if `o` contains a field named `name`.</haxe_doc>
		</exists>
		<fields public="1" get="inline" set="null" line="45" static="1">
			<f a="o">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>`fields` returns an array of string containing the field names of the argument object.</haxe_doc>
		</fields>
		<deflate public="1" set="method" line="48" static="1">
			<f a="o:?flattenArrays" v=":true">
				<a/>
				<x path="Bool"/>
				<a/>
			</f>
			<meta><m n=":value"><e>{ flattenArrays : true }</e></m></meta>
		</deflate>
		<inflate public="1" set="method" line="89" static="1"><f a="o">
	<a/>
	<a/>
</f></inflate>
		<merge public="1" set="method" static="1">
			<f a="first:second">
				<a/>
				<a/>
				<d/>
			</f>
			<haxe_doc>Shallow, typed merge of two anonymous objects.</haxe_doc>
		</merge>
		<shallowMerge public="1" set="method" static="1">
			<f a="first:second">
				<a/>
				<a/>
				<d/>
			</f>
			<haxe_doc>Shallow, typed merge of two anonymous objects.</haxe_doc>
		</shallowMerge>
		<combine public="1" set="method" line="114" static="1">
			<f a="first:second">
				<a/>
				<a/>
				<a/>
			</f>
			<meta><m n=":deprecated"><e>"use thx.Objects.shallowCombine or thx.Objects.deepCombine instead"</e></m></meta>
			<haxe_doc>Shallow, untyped merge of two anonymous objects.</haxe_doc>
		</combine>
		<shallowCombine public="1" set="method" line="121" static="1">
			<f a="first:second">
				<a/>
				<a/>
				<a/>
			</f>
			<haxe_doc>Shallow, untyped merge of two anonymous objects.</haxe_doc>
		</shallowCombine>
		<deepCombine public="1" set="method" line="144" static="1">
			<f a="first:second">
				<a/>
				<a/>
				<a/>
			</f>
			<haxe_doc>Deep, typed merge of two objects.</haxe_doc>
		</deepCombine>
		<assign public="1" set="method" line="158" static="1">
			<f a="to:from:?replacef">
				<a/>
				<a/>
				<f a="::">
					<c path="String"/>
					<d/>
					<d/>
					<d/>
				</f>
				<a/>
			</f>
			<haxe_doc>Copies the values from the fields of `from` to `to`. If `to` already contains those fields, then it replaces
those values with the return value of the function `replacef`.

If not set, `replacef` always returns the value from the `from` object.</haxe_doc>
		</assign>
		<copyTo public="1" set="method" line="176" static="1">
			<f a="src:dst:?cloneInstances" v="::false">
				<a/>
				<a/>
				<x path="Bool"/>
				<a/>
			</f>
			<meta><m n=":value"><e>{ cloneInstances : false }</e></m></meta>
			<haxe_doc>`copyTo` copies the fields from `src` to `dst` using `Reflect.setField()` and `Dynamics.clone()`.
Anonymous objects are entered into and copied recursively.</haxe_doc>
		</copyTo>
		<clone public="1" params="T" set="method" line="192" static="1">
			<f a="src:?cloneInstances" v=":false">
				<c path="clone.T"/>
				<x path="Bool"/>
				<c path="clone.T"/>
			</f>
			<meta><m n=":value"><e>{ cloneInstances : false }</e></m></meta>
			<haxe_doc>Clone the current object by creating a new object and using `copyTo` to clone each field.</haxe_doc>
		</clone>
		<toMap public="1" set="method" line="200" static="1">
			<f a="o">
				<a/>
				<x path="Map">
					<c path="String"/>
					<d/>
				</x>
			</f>
			<haxe_doc><![CDATA[`objectToMap` transforms an anonymous object into an instance of `Map<String, Dynamic>`.]]></haxe_doc>
		</toMap>
		<size public="1" get="inline" set="null" line="209" static="1">
			<f a="o">
				<a/>
				<x path="Int"/>
			</f>
			<haxe_doc>`size` returns how many fields are present in the object.</haxe_doc>
		</size>
		<string public="1" set="method" line="218" static="1">
			<f a="o">
				<a/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of the object containing each field and value.

The function is recursive so it might generate infinite loops if used with
circular references.</haxe_doc>
		</string>
		<stringImpl set="method" line="234" static="1"><f a="o:cache">
	<a/>
	<x path="Map">
		<a/>
		<x path="Bool"/>
	</x>
	<x path="Void"/>
</f></stringImpl>
		<values public="1" get="inline" set="null" line="241" static="1">
			<f a="o">
				<a/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>`values` returns an array of dynamic values containing the values of each field in the argument object.</haxe_doc>
		</values>
		<tuples public="1" set="method" line="248" static="1">
			<f a="o">
				<a/>
				<c path="Array"><x path="thx.Tuple2">
	<c path="String"/>
	<d/>
</x></c>
			</f>
			<haxe_doc><![CDATA[Converts an object into an Array<Tuple2<String, Dynamic>> where the left value (_0) of the
tuple is the field name and the right value (_1) is the field value.]]></haxe_doc>
		</tuples>
		<hasPath public="1" set="method" line="259" static="1">
			<f a="o:path">
				<a/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Determines whether an object has fields represented by a string path.  The path
can contain object keys and array indices separated by ".".

E.g. { key1: { key2: [1, 2, 3] } }.hasPath("key1.key2.2") -> returns true]]></haxe_doc>
		</hasPath>
		<hasPathValue public="1" set="method" line="284" static="1">
			<f a="o:path">
				<a/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Like `hasPath`, but will return `false` for null values, even if the key exists.

E.g. { key1 : { key2: null } }.hasPathValue("key1.key2") -> returns false]]></haxe_doc>
		</hasPathValue>
		<getPath public="1" set="method" line="294" static="1">
			<f a="o:path">
				<a/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Gets a value from an object by a string path.  The path can contain object keys and array indices separated
by ".".  Returns null for a path that does not exist.

E.g. { key1: { key2: [1, 2, 3] } }.getPath("key1.key2.2") -> returns 3
E.g. { key1: { key2: [1, 2, 3] } }.getPath("key1.key2[2]") -> returns 3]]></haxe_doc>
		</getPath>
		<getPathOption public="1" set="method" line="318" static="1">
			<f a="o:path">
				<a/>
				<c path="String"/>
				<e path="haxe.ds.Option"><d/></e>
			</f>
			<haxe_doc>Null-safe getPath</haxe_doc>
		</getPathOption>
		<parsePath public="1" params="T" set="method" line="325" static="1">
			<f a="o:path:parse">
				<a/>
				<c path="String"/>
				<f a="">
					<d/>
					<t path="thx.VNel">
						<c path="String"/>
						<c path="parsePath.T"/>
					</t>
				</f>
				<t path="thx.VNel">
					<c path="String"/>
					<c path="parsePath.T"/>
				</t>
			</f>
			<haxe_doc>Null-safe `getPath` that attempts to parse the result using the provided parse
function. `thx.fp.Dynamics` has several functions that match this pattern.</haxe_doc>
		</parsePath>
		<getPathOr public="1" set="method" line="337" static="1">
			<f a="o:path:alt">
				<a/>
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Gets a value from an object by a string path.  The path can contain object keys and array indices separated
  by ".".  Returns `alt` for a path that does not exist.
```
  E.g. { key1: { key2: [1, 2, 3] } }.getPath("key1.key2.2") -> returns 3
  E.g. { key1: { key2: [1, 2, 3] } }.getPath("key1.key2.5", 7) -> returns 7
```]]></haxe_doc>
		</getPathOr>
		<setPath public="1" params="T" set="method" line="349" static="1">
			<f a="o:path:val">
				<a/>
				<c path="String"/>
				<c path="setPath.T"/>
				<a/>
			</f>
			<haxe_doc><![CDATA[Sets a value in an object by a string path.  The path can contain object keys and array indices separated
by ".".  Returns the original object, for optional chaining of other object methods.

Inner objects and arrays will be created as needed when traversing the path.

E.g. { key1: { key2: [1, 2, 3] } }.setPath("key1.key2.2", 4) -> returns { key1: { key2: [ 1, 2, 4 ] } }]]></haxe_doc>
		</setPath>
		<removePath public="1" set="method" line="400" static="1">
			<f a="o:path">
				<a/>
				<c path="String"/>
				<a/>
			</f>
			<haxe_doc><![CDATA[Delete an object's property, given a string path to that property.

E.g. { foo : 'bar' }.removePath('foo') -> returns {}]]></haxe_doc>
		</removePath>
		<normalizePath get="inline" set="null" line="429" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></normalizePath>
		<with public="1" params="T" set="method" static="1"><f a="o:field:value">
	<c path="with.T"/>
	<d/>
	<d/>
	<d/>
</f></with>
		<haxe_doc>Helper methods for generic objects.</haxe_doc>
	</class>
	<class path="thx.Options" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Options.hx">
		<ofValue public="1" params="T" get="inline" set="null" line="12" static="1"><f a="value">
	<t path="Null"><c path="ofValue.T"/></t>
	<e path="haxe.ds.Option"><c path="ofValue.T"/></e>
</f></ofValue>
		<maybe public="1" params="T" get="inline" set="null" line="15" static="1"><f a="value">
	<t path="Null"><c path="maybe.T"/></t>
	<e path="haxe.ds.Option"><c path="maybe.T"/></e>
</f></maybe>
		<equals public="1" params="T" set="method" line="23" static="1">
			<f a="a:b:?eq">
				<e path="haxe.ds.Option"><c path="equals.T"/></e>
				<e path="haxe.ds.Option"><c path="equals.T"/></e>
				<f a=":">
					<c path="equals.T"/>
					<c path="equals.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Equality function to campare two `Option` values of the same type. An optional equality
function can be provided if values inside `Some` should be compared using something
different than strict equality.</haxe_doc>
		</equals>
		<equalsValue public="1" params="T" set="method" line="38" static="1">
			<f a="a:b:?eq">
				<e path="haxe.ds.Option"><c path="equalsValue.T"/></e>
				<t path="Null"><c path="equalsValue.T"/></t>
				<f a=":">
					<c path="equalsValue.T"/>
					<c path="equalsValue.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[`equalsValue` compares an `Option<T>` with a value `T`. The logic adopted to compare
values is the same as in `Options.equals()`.]]></haxe_doc>
		</equalsValue>
		<map public="1" params="T:TOut" set="method" line="45" static="1">
			<f a="option:callback">
				<e path="haxe.ds.Option"><c path="map.T"/></e>
				<f a="">
					<c path="map.T"/>
					<c path="map.TOut"/>
				</f>
				<e path="haxe.ds.Option"><c path="map.TOut"/></e>
			</f>
			<haxe_doc><![CDATA[`map` transforms a value contained in `Option<T>` to `Option<TOut>` using a `callback`.
`callback` is used only if `Option` is `Some(value)`.]]></haxe_doc>
		</map>
		<ap public="1" params="T:U" set="method" line="55" static="1">
			<f a="option:fopt">
				<e path="haxe.ds.Option"><c path="ap.T"/></e>
				<e path="haxe.ds.Option"><f a="">
	<c path="ap.T"/>
	<c path="ap.U"/>
</f></e>
				<e path="haxe.ds.Option"><c path="ap.U"/></e>
			</f>
			<haxe_doc><![CDATA[`ap` transforms a value contained in `Option<T>` to `Option<TOut>` using a `callback`
wrapped in another Option.]]></haxe_doc>
		</ap>
		<flatMap public="1" params="T:TOut" set="method" line="64" static="1">
			<f a="option:callback">
				<e path="haxe.ds.Option"><c path="flatMap.T"/></e>
				<f a="">
					<c path="flatMap.T"/>
					<e path="haxe.ds.Option"><c path="flatMap.TOut"/></e>
				</f>
				<e path="haxe.ds.Option"><c path="flatMap.TOut"/></e>
			</f>
			<haxe_doc>`flatMap` is shortcut for `map(cb).join()`</haxe_doc>
		</flatMap>
		<join public="1" params="T" set="method" line="73" static="1">
			<f a="option">
				<e path="haxe.ds.Option"><e path="haxe.ds.Option"><c path="join.T"/></e></e>
				<e path="haxe.ds.Option"><c path="join.T"/></e>
			</f>
			<haxe_doc>`join` collapses a nested option into a single optional value.</haxe_doc>
		</join>
		<cata public="1" params="A:B" set="method" line="82" static="1">
			<f a="option:ifNone:f">
				<e path="haxe.ds.Option"><c path="cata.A"/></e>
				<c path="cata.B"/>
				<f a="">
					<c path="cata.A"/>
					<c path="cata.B"/>
				</f>
				<c path="cata.B"/>
			</f>
			<haxe_doc>`cata` the option catamorphism, useful for inline deconstruction.</haxe_doc>
		</cata>
		<cataf public="1" params="A:B" set="method" line="91" static="1">
			<f a="option:ifNone:f">
				<e path="haxe.ds.Option"><c path="cataf.A"/></e>
				<f a=""><c path="cataf.B"/></f>
				<f a="">
					<c path="cataf.A"/>
					<c path="cataf.B"/>
				</f>
				<c path="cataf.B"/>
			</f>
			<haxe_doc>Lazy version of `thx.Options.cata`</haxe_doc>
		</cataf>
		<foldLeft public="1" params="T:B" set="method" line="101" static="1">
			<f a="option:b:f">
				<e path="haxe.ds.Option"><c path="foldLeft.T"/></e>
				<c path="foldLeft.B"/>
				<f a=":">
					<c path="foldLeft.B"/>
					<c path="foldLeft.T"/>
					<c path="foldLeft.B"/>
				</f>
				<c path="foldLeft.B"/>
			</f>
			<haxe_doc>`foldLeft` reduce using an accumulating function and an initial value.</haxe_doc>
		</foldLeft>
		<foldLeftf public="1" params="T:B" set="method" line="110" static="1">
			<f a="option:b:f">
				<e path="haxe.ds.Option"><c path="foldLeftf.T"/></e>
				<f a=""><c path="foldLeftf.B"/></f>
				<f a=":">
					<c path="foldLeftf.B"/>
					<c path="foldLeftf.T"/>
					<c path="foldLeftf.B"/>
				</f>
				<c path="foldLeftf.B"/>
			</f>
			<haxe_doc>Lazy version of `thx.Options.foldLeft`</haxe_doc>
		</foldLeftf>
		<foldMap public="1" params="A:B" set="method" line="119" static="1">
			<f a="option:f:m">
				<e path="haxe.ds.Option"><c path="foldMap.A"/></e>
				<f a="">
					<c path="foldMap.A"/>
					<c path="foldMap.B"/>
				</f>
				<x path="thx.Monoid"><c path="foldMap.B"/></x>
				<c path="foldMap.B"/>
			</f>
			<haxe_doc>* Fold by mapping the contained value into some monoidal type and reducing with that monoid.</haxe_doc>
		</foldMap>
		<filter public="1" params="A" set="method" line="125" static="1">
			<f a="option:f">
				<e path="haxe.ds.Option"><c path="filter.A"/></e>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="filter.A"/></e>
			</f>
			<haxe_doc>`filter` returns the current value if any contained value matches the predicate, None otherwise.</haxe_doc>
		</filter>
		<toArray public="1" params="T" set="method" line="135" static="1">
			<f a="option">
				<e path="haxe.ds.Option"><c path="toArray.T"/></e>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc><![CDATA[`toArray` transforms an `Option<T>` value into an `Array<T>` value. The result array
will be empty if `Option` is `None` or will contain one value otherwise.]]></haxe_doc>
		</toArray>
		<toBool public="1" params="T" set="method" line="146" static="1">
			<f a="option">
				<e path="haxe.ds.Option"><c path="toBool.T"/></e>
				<x path="Bool"/>
			</f>
			<haxe_doc>`toBool` transforms an `Option` value into a boolean: `None` maps to `false`, and
`Some(_)` to `true`. The value in `Some` has no play in the conversion.</haxe_doc>
		</toBool>
		<isNone public="1" params="T" set="method" line="156" static="1">
			<f a="option">
				<e path="haxe.ds.Option"><c path="isNone.T"/></e>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isNone` determines whether the option is a None</haxe_doc>
		</isNone>
		<toOption public="1" params="T" get="inline" set="null" line="163" static="1">
			<f a="value">
				<t path="Null"><c path="toOption.T"/></t>
				<e path="haxe.ds.Option"><c path="toOption.T"/></e>
			</f>
			<haxe_doc><![CDATA[`toOption` transforms any type T into `Option<T>`. If the value is null, the result
is be `None`.]]></haxe_doc>
		</toOption>
		<get public="1" params="T" set="method" line="169" static="1">
			<f a="option">
				<e path="haxe.ds.Option"><c path="get.T"/></e>
				<t path="Null"><c path="get.T"/></t>
			</f>
			<haxe_doc>`toValue` extracts the value from `Option`. If the `Option` is `None`, `null` is returned.</haxe_doc>
		</get>
		<getOrElse public="1" params="T" set="method" line="178" static="1">
			<f a="option:alt">
				<e path="haxe.ds.Option"><c path="getOrElse.T"/></e>
				<c path="getOrElse.T"/>
				<c path="getOrElse.T"/>
			</f>
			<haxe_doc>`getOrElse` extracts the value from `Option`. If the `Option` is `None`, `alt` value is returned.</haxe_doc>
		</getOrElse>
		<getOrThrow public="1" params="T" set="method" line="187" static="1">
			<f a="option:?err:?posInfo">
				<e path="haxe.ds.Option"><c path="getOrThrow.T"/></e>
				<c path="thx.Error"/>
				<t path="haxe.PosInfos"/>
				<c path="getOrThrow.T"/>
			</f>
			<haxe_doc>Extract the value from `Option` or throw a thx.Error if the `Option` is `None`.</haxe_doc>
		</getOrThrow>
		<getOrFail public="1" params="T" set="method" line="198" static="1">
			<f a="option:msg:?posInfo">
				<e path="haxe.ds.Option"><c path="getOrFail.T"/></e>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<c path="getOrFail.T"/>
			</f>
			<haxe_doc>Extract the value from `Option` or throw a thx.Error with the provided message.</haxe_doc>
		</getOrFail>
		<orElse public="1" params="T" set="method" line="204" static="1">
			<f a="option:alt">
				<e path="haxe.ds.Option"><c path="orElse.T"/></e>
				<e path="haxe.ds.Option"><c path="orElse.T"/></e>
				<e path="haxe.ds.Option"><c path="orElse.T"/></e>
			</f>
			<haxe_doc>`orElse` returns `option` if it holds a value or `alt` otherwise.</haxe_doc>
		</orElse>
		<all public="1" params="T" set="method" line="210" static="1"><f a="option:f">
	<e path="haxe.ds.Option"><c path="all.T"/></e>
	<f a="">
		<c path="all.T"/>
		<x path="Bool"/>
	</f>
	<x path="Bool"/>
</f></all>
		<any public="1" params="T" set="method" line="216" static="1"><f a="option:f">
	<e path="haxe.ds.Option"><c path="any.T"/></e>
	<f a="">
		<c path="any.T"/>
		<x path="Bool"/>
	</f>
	<x path="Bool"/>
</f></any>
		<traverseValidation public="1" params="E:T:U" set="method" line="227" static="1">
			<f a="option:f">
				<e path="haxe.ds.Option"><c path="traverseValidation.T"/></e>
				<f a="">
					<c path="traverseValidation.T"/>
					<x path="thx.Validation">
						<c path="traverseValidation.E"/>
						<c path="traverseValidation.U"/>
					</x>
				</f>
				<x path="thx.Validation">
					<c path="traverseValidation.E"/>
					<e path="haxe.ds.Option"><c path="traverseValidation.U"/></e>
				</x>
			</f>
			<haxe_doc>Traverse the array with a function that may return values wrapped in Validation.
  If any of the values are Failures, return a Failure that accumulates all errors
  from the failed values, otherwise return the array of mapped values in a Success.</haxe_doc>
		</traverseValidation>
		<toSuccess public="1" params="E:T" set="method" line="233" static="1"><f a="option:error">
	<e path="haxe.ds.Option"><c path="toSuccess.T"/></e>
	<c path="toSuccess.E"/>
	<x path="thx.Validation">
		<c path="toSuccess.E"/>
		<c path="toSuccess.T"/>
	</x>
</f></toSuccess>
		<toSuccessNel public="1" params="E:T" set="method" line="239" static="1"><f a="option:error">
	<e path="haxe.ds.Option"><c path="toSuccessNel.T"/></e>
	<c path="toSuccessNel.E"/>
	<t path="thx.VNel">
		<c path="toSuccessNel.E"/>
		<c path="toSuccessNel.T"/>
	</t>
</f></toSuccessNel>
		<toFailure public="1" params="E:T" set="method" line="245" static="1"><f a="error:value">
	<e path="haxe.ds.Option"><c path="toFailure.E"/></e>
	<c path="toFailure.T"/>
	<x path="thx.Validation">
		<c path="toFailure.E"/>
		<c path="toFailure.T"/>
	</x>
</f></toFailure>
		<toFailureNel public="1" params="E:T" set="method" line="251" static="1"><f a="error:value">
	<e path="haxe.ds.Option"><c path="toFailureNel.E"/></e>
	<c path="toFailureNel.T"/>
	<t path="thx.VNel">
		<c path="toFailureNel.E"/>
		<c path="toFailureNel.T"/>
	</t>
</f></toFailureNel>
		<toRight public="1" params="E:T" set="method" line="257" static="1"><f a="opt:left">
	<e path="haxe.ds.Option"><c path="toRight.T"/></e>
	<c path="toRight.E"/>
	<e path="thx.Either">
		<c path="toRight.E"/>
		<c path="toRight.T"/>
	</e>
</f></toRight>
		<toLeft public="1" params="E:T" set="method" line="263" static="1"><f a="opt:right">
	<e path="haxe.ds.Option"><c path="toLeft.E"/></e>
	<c path="toLeft.T"/>
	<e path="thx.Either">
		<c path="toLeft.E"/>
		<c path="toLeft.T"/>
	</e>
</f></toLeft>
		<each public="1" params="T" set="method" line="272" static="1">
			<f a="o:f">
				<e path="haxe.ds.Option"><c path="each.T"/></e>
				<f a="">
					<c path="each.T"/>
					<x path="Void"/>
				</f>
				<e path="haxe.ds.Option"><c path="each.T"/></e>
			</f>
			<haxe_doc>Performs `f` on the contents of `o` if `o` != None</haxe_doc>
		</each>
		<ap2 public="1" params="A:B:C" get="inline" set="null" line="278" static="1"><f a="f:v1:v2">
	<f a=":">
		<c path="ap2.A"/>
		<c path="ap2.B"/>
		<c path="ap2.C"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap2.A"/></e>
	<e path="haxe.ds.Option"><c path="ap2.B"/></e>
	<e path="haxe.ds.Option"><c path="ap2.C"/></e>
</f></ap2>
		<ap3 public="1" params="A:B:C:D" get="inline" set="null" line="281" static="1"><f a="f:v1:v2:v3">
	<f a="::">
		<c path="ap3.A"/>
		<c path="ap3.B"/>
		<c path="ap3.C"/>
		<c path="ap3.D"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap3.A"/></e>
	<e path="haxe.ds.Option"><c path="ap3.B"/></e>
	<e path="haxe.ds.Option"><c path="ap3.C"/></e>
	<e path="haxe.ds.Option"><c path="ap3.D"/></e>
</f></ap3>
		<ap4 public="1" params="A:B:C:D:E" get="inline" set="null" line="284" static="1"><f a="f:v1:v2:v3:v4">
	<f a=":::">
		<c path="ap4.A"/>
		<c path="ap4.B"/>
		<c path="ap4.C"/>
		<c path="ap4.D"/>
		<c path="ap4.E"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap4.A"/></e>
	<e path="haxe.ds.Option"><c path="ap4.B"/></e>
	<e path="haxe.ds.Option"><c path="ap4.C"/></e>
	<e path="haxe.ds.Option"><c path="ap4.D"/></e>
	<e path="haxe.ds.Option"><c path="ap4.E"/></e>
</f></ap4>
		<ap5 public="1" params="A:B:C:D:E:F" get="inline" set="null" line="289" static="1"><f a="f:v1:v2:v3:v4:v5">
	<f a="::::">
		<c path="ap5.A"/>
		<c path="ap5.B"/>
		<c path="ap5.C"/>
		<c path="ap5.D"/>
		<c path="ap5.E"/>
		<c path="ap5.F"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap5.A"/></e>
	<e path="haxe.ds.Option"><c path="ap5.B"/></e>
	<e path="haxe.ds.Option"><c path="ap5.C"/></e>
	<e path="haxe.ds.Option"><c path="ap5.D"/></e>
	<e path="haxe.ds.Option"><c path="ap5.E"/></e>
	<e path="haxe.ds.Option"><c path="ap5.F"/></e>
</f></ap5>
		<ap6 public="1" params="A:B:C:D:E:F:G" get="inline" set="null" line="294" static="1"><f a="f:v1:v2:v3:v4:v5:v6">
	<f a=":::::">
		<c path="ap6.A"/>
		<c path="ap6.B"/>
		<c path="ap6.C"/>
		<c path="ap6.D"/>
		<c path="ap6.E"/>
		<c path="ap6.F"/>
		<c path="ap6.G"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap6.A"/></e>
	<e path="haxe.ds.Option"><c path="ap6.B"/></e>
	<e path="haxe.ds.Option"><c path="ap6.C"/></e>
	<e path="haxe.ds.Option"><c path="ap6.D"/></e>
	<e path="haxe.ds.Option"><c path="ap6.E"/></e>
	<e path="haxe.ds.Option"><c path="ap6.F"/></e>
	<e path="haxe.ds.Option"><c path="ap6.G"/></e>
</f></ap6>
		<ap7 public="1" params="A:B:C:D:E:F:G:H" get="inline" set="null" line="299" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7">
	<f a="::::::">
		<c path="ap7.A"/>
		<c path="ap7.B"/>
		<c path="ap7.C"/>
		<c path="ap7.D"/>
		<c path="ap7.E"/>
		<c path="ap7.F"/>
		<c path="ap7.G"/>
		<c path="ap7.H"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap7.A"/></e>
	<e path="haxe.ds.Option"><c path="ap7.B"/></e>
	<e path="haxe.ds.Option"><c path="ap7.C"/></e>
	<e path="haxe.ds.Option"><c path="ap7.D"/></e>
	<e path="haxe.ds.Option"><c path="ap7.E"/></e>
	<e path="haxe.ds.Option"><c path="ap7.F"/></e>
	<e path="haxe.ds.Option"><c path="ap7.G"/></e>
	<e path="haxe.ds.Option"><c path="ap7.H"/></e>
</f></ap7>
		<ap8 public="1" params="A:B:C:D:E:F:G:H:I" get="inline" set="null" line="304" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8">
	<f a=":::::::">
		<c path="ap8.A"/>
		<c path="ap8.B"/>
		<c path="ap8.C"/>
		<c path="ap8.D"/>
		<c path="ap8.E"/>
		<c path="ap8.F"/>
		<c path="ap8.G"/>
		<c path="ap8.H"/>
		<c path="ap8.I"/>
	</f>
	<e path="haxe.ds.Option"><c path="ap8.A"/></e>
	<e path="haxe.ds.Option"><c path="ap8.B"/></e>
	<e path="haxe.ds.Option"><c path="ap8.C"/></e>
	<e path="haxe.ds.Option"><c path="ap8.D"/></e>
	<e path="haxe.ds.Option"><c path="ap8.E"/></e>
	<e path="haxe.ds.Option"><c path="ap8.F"/></e>
	<e path="haxe.ds.Option"><c path="ap8.G"/></e>
	<e path="haxe.ds.Option"><c path="ap8.H"/></e>
	<e path="haxe.ds.Option"><c path="ap8.I"/></e>
</f></ap8>
		<combine public="1" params="A:B" get="inline" set="null" line="309" static="1"><f a="a:b">
	<e path="haxe.ds.Option"><c path="combine.A"/></e>
	<e path="haxe.ds.Option"><c path="combine.B"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple2">
	<c path="combine.A"/>
	<c path="combine.B"/>
</x></e>
</f></combine>
		<combine2 public="1" params="A:B" get="inline" set="null" line="312" static="1"><f a="a:b">
	<e path="haxe.ds.Option"><c path="combine2.A"/></e>
	<e path="haxe.ds.Option"><c path="combine2.B"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple2">
	<c path="combine2.A"/>
	<c path="combine2.B"/>
</x></e>
</f></combine2>
		<combine3 public="1" params="A:B:C" get="inline" set="null" line="315" static="1"><f a="a:b:c">
	<e path="haxe.ds.Option"><c path="combine3.A"/></e>
	<e path="haxe.ds.Option"><c path="combine3.B"/></e>
	<e path="haxe.ds.Option"><c path="combine3.C"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple3">
	<c path="combine3.A"/>
	<c path="combine3.B"/>
	<c path="combine3.C"/>
</x></e>
</f></combine3>
		<combine4 public="1" params="A:B:C:D" get="inline" set="null" line="318" static="1"><f a="a:b:c:d">
	<e path="haxe.ds.Option"><c path="combine4.A"/></e>
	<e path="haxe.ds.Option"><c path="combine4.B"/></e>
	<e path="haxe.ds.Option"><c path="combine4.C"/></e>
	<e path="haxe.ds.Option"><c path="combine4.D"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple4">
	<c path="combine4.A"/>
	<c path="combine4.B"/>
	<c path="combine4.C"/>
	<c path="combine4.D"/>
</x></e>
</f></combine4>
		<combine5 public="1" params="A:B:C:D:E" get="inline" set="null" line="321" static="1"><f a="a:b:c:d:e">
	<e path="haxe.ds.Option"><c path="combine5.A"/></e>
	<e path="haxe.ds.Option"><c path="combine5.B"/></e>
	<e path="haxe.ds.Option"><c path="combine5.C"/></e>
	<e path="haxe.ds.Option"><c path="combine5.D"/></e>
	<e path="haxe.ds.Option"><c path="combine5.E"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple5">
	<c path="combine5.A"/>
	<c path="combine5.B"/>
	<c path="combine5.C"/>
	<c path="combine5.D"/>
	<c path="combine5.E"/>
</x></e>
</f></combine5>
		<combine6 public="1" params="A:B:C:D:E:F" get="inline" set="null" line="324" static="1"><f a="a:b:c:d:e:f">
	<e path="haxe.ds.Option"><c path="combine6.A"/></e>
	<e path="haxe.ds.Option"><c path="combine6.B"/></e>
	<e path="haxe.ds.Option"><c path="combine6.C"/></e>
	<e path="haxe.ds.Option"><c path="combine6.D"/></e>
	<e path="haxe.ds.Option"><c path="combine6.E"/></e>
	<e path="haxe.ds.Option"><c path="combine6.F"/></e>
	<e path="haxe.ds.Option"><x path="thx.Tuple6">
	<c path="combine6.A"/>
	<c path="combine6.B"/>
	<c path="combine6.C"/>
	<c path="combine6.D"/>
	<c path="combine6.E"/>
	<c path="combine6.F"/>
</x></e>
</f></combine6>
		<spread2 public="1" params="A:B:C" get="inline" set="null" line="327" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple2">
	<c path="spread2.A"/>
	<c path="spread2.B"/>
</x></e>
	<f a=":">
		<c path="spread2.A"/>
		<c path="spread2.B"/>
		<c path="spread2.C"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread2.C"/></e>
</f></spread2>
		<spread public="1" params="A:B:C" get="inline" set="null" line="332" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple2">
	<c path="spread.A"/>
	<c path="spread.B"/>
</x></e>
	<f a=":">
		<c path="spread.A"/>
		<c path="spread.B"/>
		<c path="spread.C"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread.C"/></e>
</f></spread>
		<spread3 public="1" params="A:B:C:D" get="inline" set="null" line="335" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple3">
	<c path="spread3.A"/>
	<c path="spread3.B"/>
	<c path="spread3.C"/>
</x></e>
	<f a="::">
		<c path="spread3.A"/>
		<c path="spread3.B"/>
		<c path="spread3.C"/>
		<c path="spread3.D"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread3.D"/></e>
</f></spread3>
		<spread4 public="1" params="A:B:C:D:E" get="inline" set="null" line="340" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple4">
	<c path="spread4.A"/>
	<c path="spread4.B"/>
	<c path="spread4.C"/>
	<c path="spread4.D"/>
</x></e>
	<f a=":::">
		<c path="spread4.A"/>
		<c path="spread4.B"/>
		<c path="spread4.C"/>
		<c path="spread4.D"/>
		<c path="spread4.E"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread4.E"/></e>
</f></spread4>
		<spread5 public="1" params="A:B:C:D:E:F" get="inline" set="null" line="345" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple5">
	<c path="spread5.A"/>
	<c path="spread5.B"/>
	<c path="spread5.C"/>
	<c path="spread5.D"/>
	<c path="spread5.E"/>
</x></e>
	<f a="::::">
		<c path="spread5.A"/>
		<c path="spread5.B"/>
		<c path="spread5.C"/>
		<c path="spread5.D"/>
		<c path="spread5.E"/>
		<c path="spread5.F"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread5.F"/></e>
</f></spread5>
		<spread6 public="1" params="A:B:C:D:E:F:G" get="inline" set="null" line="350" static="1"><f a="v:f">
	<e path="haxe.ds.Option"><x path="thx.Tuple6">
	<c path="spread6.A"/>
	<c path="spread6.B"/>
	<c path="spread6.C"/>
	<c path="spread6.D"/>
	<c path="spread6.E"/>
	<c path="spread6.F"/>
</x></e>
	<f a=":::::">
		<c path="spread6.A"/>
		<c path="spread6.B"/>
		<c path="spread6.C"/>
		<c path="spread6.D"/>
		<c path="spread6.E"/>
		<c path="spread6.F"/>
		<c path="spread6.G"/>
	</f>
	<e path="haxe.ds.Option"><c path="spread6.G"/></e>
</f></spread6>
		<haxe_doc>Extension methods for the `haxe.ds.Option` type.</haxe_doc>
	</class>
	<abstract path="thx.Ordering" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" module="thx.Ord">
		<from><icast><e path="thx.OrderingImpl"/></icast></from>
		<this><e path="thx.OrderingImpl"/></this>
		<to><icast><e path="thx.OrderingImpl"/></icast></to>
		<impl><class path="thx._Ord.Ordering_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" private="1" module="thx.Ord">
	<fromInt public="1" set="method" line="8" static="1"><f a="value">
	<x path="Int"/>
	<x path="thx.Ordering"/>
</f></fromInt>
	<fromFloat public="1" set="method" line="11" static="1"><f a="value">
	<x path="Float"/>
	<x path="thx.Ordering"/>
</f></fromFloat>
	<toInt public="1" set="method" line="14" static="1">
		<f a="this">
			<e path="thx.OrderingImpl"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toInt>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx.Orderings" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" module="thx.Ord">
		<monoid public="1" set="null" expr="{ zero : EQ, append : function(o0:Ordering, o1:Ordering):Ordering return switch o0 {
	case LT:
		LT;	
	case EQ:
		o1;	
	case GT:
		GT;	
} }" line="27" static="1">
			<x path="thx.Monoid"><x path="thx.Ordering"/></x>
			<meta><m n=":value"><e>{ zero : EQ, append : function(o0:Ordering, o1:Ordering):Ordering return switch o0 {
	case LT:
		LT;	
	case EQ:
		o1;	
	case GT:
		GT;	
} }</e></m></meta>
		</monoid>
		<negate public="1" set="method" line="36" static="1"><f a="o">
	<x path="thx.Ordering"/>
	<x path="thx.Ordering"/>
</f></negate>
	</class>
	<abstract path="thx.Ord" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx">
		<from><icast><f a=":">
	<c path="thx.Ord.A"/>
	<c path="thx.Ord.A"/>
	<x path="thx.Ordering"/>
</f></icast></from>
		<this><f a=":">
	<c path="thx.Ord.A"/>
	<c path="thx.Ord.A"/>
	<x path="thx.Ordering"/>
</f></this>
		<to><icast><f a=":">
	<c path="thx.Ord.A"/>
	<c path="thx.Ord.A"/>
	<x path="thx.Ordering"/>
</f></icast></to>
		<meta><m n=":callable"/></meta>
		<impl><class path="thx._Ord.Ord_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Ord.hx" private="1" module="thx.Ord">
	<order public="1" set="method" line="45" static="1">
		<f a="this:a0:a1">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
			<x path="thx.Ordering"/>
		</f>
		<meta><m n=":impl"/></meta>
	</order>
	<max public="1" set="method" line="48" static="1">
		<f a="this:a0:a1">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</max>
	<min public="1" set="method" line="54" static="1">
		<f a="this:a0:a1">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</min>
	<equal public="1" set="method" line="60" static="1">
		<f a="this:a0:a1">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</equal>
	<contramap public="1" params="B" set="method" line="63" static="1">
		<f a="this:f">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<f a="">
				<c path="contramap.B"/>
				<c path="thx.Ord.A"/>
			</f>
			<x path="thx.Ord"><c path="contramap.B"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</contramap>
	<inverse public="1" set="method" line="66" static="1">
		<f a="this">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<x path="thx.Ord"><c path="thx.Ord.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</inverse>
	<intComparison public="1" set="method" line="69" static="1">
		<f a="this:a0:a1">
			<f a=":">
				<c path="thx.Ord.A"/>
				<c path="thx.Ord.A"/>
				<x path="thx.Ordering"/>
			</f>
			<c path="thx.Ord.A"/>
			<c path="thx.Ord.A"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</intComparison>
	<fromIntComparison public="1" params="A" set="method" line="76" static="1"><f a="f">
	<f a=":">
		<c path="fromIntComparison.A"/>
		<c path="fromIntComparison.A"/>
		<x path="Int"/>
	</f>
	<x path="thx.Ord"><c path="fromIntComparison.A"/></x>
</f></fromIntComparison>
	<forComparable public="1" params="T" set="method" line="79" static="1"><f a=""><x path="thx.Ord"><c path="forComparable.T"/></x></f></forComparable>
	<forComparableOrd public="1" params="T" set="method" line="82" static="1"><f a=""><x path="thx.Ord"><c path="forComparableOrd.T"/></x></f></forComparableOrd>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<abstract path="thx.OrderedMap" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx">
		<this><c path="thx.OrderedMapImpl">
	<c path="thx.OrderedMap.K"/>
	<c path="thx.OrderedMap.V"/>
</c></this>
		<to><icast><c path="haxe.IMap">
	<c path="thx.OrderedMap.K"/>
	<c path="thx.OrderedMap.V"/>
</c></icast></to>
		<meta><m n=":forward">
	<e>length</e>
	<e>set</e>
	<e>insert</e>
	<e>exists</e>
	<e>remove</e>
	<e>keys</e>
	<e>iterator</e>
	<e>tuples</e>
	<e>toArray</e>
	<e>toString</e>
	<e>keyAt</e>
	<e>keyIndex</e>
	<e>valueIndex</e>
	<e>removeAt</e>
</m></meta>
		<impl><class path="thx._OrderedMap.OrderedMap_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" private="1" module="thx.OrderedMap">
	<createString public="1" params="K:V" get="inline" set="null" line="8" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createString.K"/>
	<c path="createString.V"/>
</x></f></createString>
	<createInt public="1" params="K:V" get="inline" set="null" line="13" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createInt.K"/>
	<c path="createInt.V"/>
</x></f></createInt>
	<createObject public="1" params="K:V" get="inline" set="null" line="17" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createObject.K"/>
	<c path="createObject.V"/>
</x></f></createObject>
	<createEnum public="1" params="K:V" get="inline" set="null" line="20" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createEnum.K"/>
	<c path="createEnum.V"/>
</x></f></createEnum>
	<_new get="inline" set="null" line="23" static="1">
		<f a="inst">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<x path="thx.OrderedMap">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<getOption public="1" get="inline" set="null" line="26" static="1">
		<f a="this:key">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<c path="thx.OrderedMap.K"/>
			<e path="haxe.ds.Option"><c path="thx.OrderedMap.V"/></e>
		</f>
		<meta><m n=":impl"/></meta>
	</getOption>
	<empty public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<x path="thx.OrderedMap">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</empty>
	<copyTo public="1" get="inline" set="null" line="32" static="1">
		<f a="this:that">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<x path="thx.OrderedMap">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</x>
			<x path="thx.OrderedMap">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</copyTo>
	<clone public="1" get="inline" set="null" line="38" static="1">
		<f a="this">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<x path="thx.OrderedMap">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<get public="1" get="inline" set="null" line="41" static="1">
		<f a="this:key">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<c path="thx.OrderedMap.K"/>
			<t path="Null"><c path="thx.OrderedMap.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<at public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<x path="Int"/>
			<t path="Null"><c path="thx.OrderedMap.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</at>
	<arrayWrite public="1" get="inline" set="null" line="47" static="1">
		<f a="this:k:v">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<c path="thx.OrderedMap.K"/>
			<c path="thx.OrderedMap.V"/>
			<c path="thx.OrderedMap.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<self public="1" get="inline" set="null" line="50" static="1">
		<f a="this">
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
			<c path="thx.OrderedMapImpl">
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
			</c>
		</f>
		<meta><m n=":impl"/></meta>
	</self>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._OrderedMap.OrderedMap_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" private="1" module="thx.OrderedMap">
		<createString public="1" params="K:V" get="inline" set="null" line="8" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createString.K"/>
	<c path="createString.V"/>
</x></f></createString>
		<createInt public="1" params="K:V" get="inline" set="null" line="13" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createInt.K"/>
	<c path="createInt.V"/>
</x></f></createInt>
		<createObject public="1" params="K:V" get="inline" set="null" line="17" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createObject.K"/>
	<c path="createObject.V"/>
</x></f></createObject>
		<createEnum public="1" params="K:V" get="inline" set="null" line="20" static="1"><f a=""><x path="thx.OrderedMap">
	<c path="createEnum.K"/>
	<c path="createEnum.V"/>
</x></f></createEnum>
		<_new get="inline" set="null" line="23" static="1">
			<f a="inst">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<x path="thx.OrderedMap">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<getOption public="1" get="inline" set="null" line="26" static="1">
			<f a="this:key">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<c path="thx.OrderedMap.K"/>
				<e path="haxe.ds.Option"><c path="thx.OrderedMap.V"/></e>
			</f>
			<meta><m n=":impl"/></meta>
		</getOption>
		<empty public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<x path="thx.OrderedMap">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</empty>
		<copyTo public="1" get="inline" set="null" line="32" static="1">
			<f a="this:that">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<x path="thx.OrderedMap">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</x>
				<x path="thx.OrderedMap">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</copyTo>
		<clone public="1" get="inline" set="null" line="38" static="1">
			<f a="this">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<x path="thx.OrderedMap">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<get public="1" get="inline" set="null" line="41" static="1">
			<f a="this:key">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<c path="thx.OrderedMap.K"/>
				<t path="Null"><c path="thx.OrderedMap.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<at public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<x path="Int"/>
				<t path="Null"><c path="thx.OrderedMap.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</at>
		<arrayWrite public="1" get="inline" set="null" line="47" static="1">
			<f a="this:k:v">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<c path="thx.OrderedMap.K"/>
				<c path="thx.OrderedMap.V"/>
				<c path="thx.OrderedMap.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<self public="1" get="inline" set="null" line="50" static="1">
			<f a="this">
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
				<c path="thx.OrderedMapImpl">
					<c path="thx.OrderedMap.K"/>
					<c path="thx.OrderedMap.V"/>
				</c>
			</f>
			<meta><m n=":impl"/></meta>
		</self>
		<meta><m n=":final"/></meta>
	</class>
	<class path="thx.OrderedMapImpl" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" module="thx.OrderedMap">
		<implements path="haxe.IMap">
			<c path="thx.OrderedMapImpl.K"/>
			<c path="thx.OrderedMapImpl.V"/>
		</implements>
		<map><c path="haxe.IMap">
	<c path="thx.OrderedMapImpl.K"/>
	<c path="thx.OrderedMapImpl.V"/>
</c></map>
		<arr><c path="Array"><c path="thx.OrderedMapImpl.K"/></c></arr>
		<length public="1" set="null"><x path="Int"/></length>
		<get public="1" set="method" line="110"><f a="k">
	<c path="thx.OrderedMapImpl.K"/>
	<t path="Null"><c path="thx.OrderedMapImpl.V"/></t>
</f></get>
		<keyAt public="1" set="method" line="113"><f a="index">
	<x path="Int"/>
	<t path="Null"><c path="thx.OrderedMapImpl.K"/></t>
</f></keyAt>
		<keyIndex public="1" set="method" line="116"><f a="k">
	<c path="thx.OrderedMapImpl.K"/>
	<x path="Int"/>
</f></keyIndex>
		<valueIndex public="1" set="method" line="123"><f a="v">
	<c path="thx.OrderedMapImpl.V"/>
	<x path="Int"/>
</f></valueIndex>
		<at public="1" set="method" line="130"><f a="index">
	<x path="Int"/>
	<t path="Null"><c path="thx.OrderedMapImpl.V"/></t>
</f></at>
		<set public="1" set="method" line="133"><f a="k:v">
	<c path="thx.OrderedMapImpl.K"/>
	<c path="thx.OrderedMapImpl.V"/>
	<x path="Void"/>
</f></set>
		<empty public="1" set="method" line="141"><f a=""><c path="thx.OrderedMapImpl">
	<c path="thx.OrderedMapImpl.K"/>
	<c path="thx.OrderedMapImpl.V"/>
</c></f></empty>
		<setValue public="1" set="method" line="145">
			<f a="k:v">
				<c path="thx.OrderedMapImpl.K"/>
				<c path="thx.OrderedMapImpl.V"/>
				<c path="thx.OrderedMapImpl.V"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</setValue>
		<insert public="1" set="method" line="150"><f a="index:k:v">
	<x path="Int"/>
	<c path="thx.OrderedMapImpl.K"/>
	<c path="thx.OrderedMapImpl.V"/>
	<x path="Void"/>
</f></insert>
		<exists public="1" set="method" line="157"><f a="k">
	<c path="thx.OrderedMapImpl.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method" line="160"><f a="k">
	<c path="thx.OrderedMapImpl.K"/>
	<x path="Bool"/>
</f></remove>
		<removeAt public="1" set="method" line="168"><f a="index">
	<x path="Int"/>
	<x path="Bool"/>
</f></removeAt>
		<keys public="1" set="method" line="178"><f a=""><t path="Iterator"><c path="thx.OrderedMapImpl.K"/></t></f></keys>
		<iterator public="1" set="method" line="181"><f a=""><t path="Iterator"><c path="thx.OrderedMapImpl.V"/></t></f></iterator>
		<tuples public="1" set="method" line="184"><f a=""><c path="Array"><x path="thx.Tuple2">
	<c path="thx.OrderedMapImpl.K"/>
	<c path="thx.OrderedMapImpl.V"/>
</x></c></f></tuples>
		<toString public="1" set="method" line="188"><f a=""><c path="String"/></f></toString>
		<toArray public="1" set="method" line="203"><f a=""><c path="Array"><c path="thx.OrderedMapImpl.V"/></c></f></toArray>
		<new set="method" line="104"><f a="map">
	<c path="haxe.IMap">
		<c path="thx.OrderedMapImpl.K"/>
		<c path="thx.OrderedMapImpl.V"/>
	</c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.EnumValueOrderedMap" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" module="thx.OrderedMap">
		<extends path="thx.OrderedMapImpl">
			<c path="thx.EnumValueOrderedMap.K"/>
			<c path="thx.EnumValueOrderedMap.V"/>
		</extends>
		<empty public="1" set="method" line="58" override="1"><f a=""><c path="thx.OrderedMapImpl">
	<c path="thx.EnumValueOrderedMap.K"/>
	<c path="thx.EnumValueOrderedMap.V"/>
</c></f></empty>
		<new public="1" set="method" line="55"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="thx.IntOrderedMap" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" module="thx.OrderedMap">
		<extends path="thx.OrderedMapImpl">
			<c path="thx.IntOrderedMap.K"/>
			<c path="thx.IntOrderedMap.V"/>
		</extends>
		<empty public="1" set="method" line="66" override="1"><f a=""><c path="thx.OrderedMapImpl">
	<c path="thx.IntOrderedMap.K"/>
	<c path="thx.IntOrderedMap.V"/>
</c></f></empty>
		<new public="1" set="method" line="63"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="thx.ObjectOrderedMap" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" module="thx.OrderedMap">
		<extends path="thx.OrderedMapImpl">
			<c path="thx.ObjectOrderedMap.K"/>
			<c path="thx.ObjectOrderedMap.V"/>
		</extends>
		<empty public="1" set="method" line="74" override="1"><f a=""><c path="thx.OrderedMapImpl">
	<c path="thx.ObjectOrderedMap.K"/>
	<c path="thx.ObjectOrderedMap.V"/>
</c></f></empty>
		<new public="1" set="method" line="71"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="thx.StringOrderedMap" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/OrderedMap.hx" module="thx.OrderedMap">
		<extends path="thx.OrderedMapImpl">
			<c path="thx.StringOrderedMap.K"/>
			<c path="thx.StringOrderedMap.V"/>
		</extends>
		<fromArray public="1" params="T:K:V" set="method" line="85" static="1"><f a="array:toKey:toVal">
	<x path="thx.ReadonlyArray"><c path="fromArray.T"/></x>
	<f a="">
		<c path="fromArray.T"/>
		<c path="fromArray.K"/>
	</f>
	<f a="">
		<c path="fromArray.T"/>
		<c path="fromArray.V"/>
	</f>
	<x path="thx.OrderedMap">
		<c path="fromArray.K"/>
		<c path="fromArray.V"/>
	</x>
</f></fromArray>
		<fromValueArray public="1" params="K:V" get="inline" set="null" line="91" static="1"><f a="array:toKey">
	<x path="thx.ReadonlyArray"><c path="fromValueArray.V"/></x>
	<f a="">
		<c path="fromValueArray.V"/>
		<c path="fromValueArray.K"/>
	</f>
	<x path="thx.OrderedMap">
		<c path="fromValueArray.K"/>
		<c path="fromValueArray.V"/>
	</x>
</f></fromValueArray>
		<fromTuples public="1" params="K:V" get="inline" set="null" line="94" static="1"><f a="array">
	<x path="thx.ReadonlyArray"><t path="thx.Tuple">
	<c path="fromTuples.K"/>
	<c path="fromTuples.V"/>
</t></x>
	<x path="thx.OrderedMap">
		<c path="fromTuples.K"/>
		<c path="fromTuples.V"/>
	</x>
</f></fromTuples>
		<empty public="1" set="method" line="82" override="1"><f a=""><c path="thx.OrderedMapImpl">
	<c path="thx.StringOrderedMap.K"/>
	<c path="thx.StringOrderedMap.V"/>
</c></f></empty>
		<new public="1" set="method" line="79"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="thx.ReadonlyArray" params="T" file="/Users/francoponticelli/projects/thx.core/src/thx/ReadonlyArray.hx">
		<from><icast><c path="Array"><c path="thx.ReadonlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="thx.ReadonlyArray.T"/></c></this>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>join</e>
	<e>map</e>
	<e>slice</e>
	<e>toString</e>
</m></meta>
		<impl><class path="thx._ReadonlyArray.ReadonlyArray_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/ReadonlyArray.hx" private="1" module="thx.ReadonlyArray">
	<empty public="1" params="T" get="inline" set="null" line="8" static="1"><f a=""><x path="thx.ReadonlyArray"><c path="empty.T"/></x></f></empty>
	<flatten public="1" params="T" set="method" line="12" static="1"><f a="array">
	<x path="thx.ReadonlyArray"><x path="thx.ReadonlyArray"><c path="flatten.T"/></x></x>
	<x path="thx.ReadonlyArray"><c path="flatten.T"/></x>
</f></flatten>
	<indexOf public="1" set="method" line="19" static="1">
		<f a="this:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</indexOf>
	<lastIndexOf public="1" set="method" line="27" static="1">
		<f a="this:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</lastIndexOf>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get get="inline" set="null" line="40" static="1">
		<f a="this:i">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="Int"/>
			<c path="thx.ReadonlyArray.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<head public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</head>
	<tail public="1" get="inline" set="null" line="46" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</tail>
	<reduce public="1" params="A:B" set="method" line="49" static="1">
		<f a="this:arr:f:initial">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="Array"><c path="reduce.A"/></c>
			<f a=":">
				<c path="reduce.B"/>
				<c path="reduce.A"/>
				<c path="reduce.B"/>
			</f>
			<c path="reduce.B"/>
			<c path="reduce.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</reduce>
	<reducei public="1" params="A:B" set="method" line="58" static="1">
		<f a="array:f:initial">
			<x path="thx.ReadonlyArray"><c path="reducei.A"/></x>
			<f a="::">
				<c path="reducei.B"/>
				<c path="reducei.A"/>
				<x path="Int"/>
				<c path="reducei.B"/>
			</f>
			<c path="reducei.B"/>
			<c path="reducei.B"/>
		</f>
		<haxe_doc>It is the same as `reduce` but with the extra integer `index` parameter.</haxe_doc>
	</reducei>
	<reverse public="1" set="method" line="64" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
	<toArray public="1" get="inline" set="null" line="70" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</toArray>
	<unsafe public="1" get="inline" set="null" line="73" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</unsafe>
	<concat public="1" get="inline" set="null" line="76" static="1">
		<f a="this:that">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</concat>
	<insertAt public="1" get="inline" set="null" line="79" static="1">
		<f a="this:pos:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="Int"/>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</insertAt>
	<insertAfter public="1" set="method" line="82" static="1">
		<f a="this:ref:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</insertAfter>
	<insertBefore public="1" get="inline" set="null" line="89" static="1">
		<f a="this:ref:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</insertBefore>
	<replace public="1" set="method" line="92" static="1">
		<f a="this:ref:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</replace>
	<replaceAt public="1" get="inline" set="null" line="98" static="1">
		<f a="this:pos:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="Int"/>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</replaceAt>
	<remove public="1" get="inline" set="null" line="101" static="1">
		<f a="this:el:?eq">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<f a=":">
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="Bool"/>
			</f>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</remove>
	<removeAt public="1" get="inline" set="null" line="104" static="1">
		<f a="this:pos">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<x path="Int"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</removeAt>
	<prepend public="1" get="inline" set="null" line="107" static="1">
		<f a="this:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</prepend>
	<append public="1" get="inline" set="null" line="110" static="1">
		<f a="this:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</append>
	<unshift public="1" get="inline" set="null" line="116" static="1">
		<f a="this:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Alias for prepend</haxe_doc>
	</unshift>
	<shift public="1" set="method" line="122" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<t path="thx.Tuple">
				<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes and returns the value at the beginning of the array.  The original ReadonlyArray is unchanged.</haxe_doc>
	</shift>
	<push public="1" get="inline" set="null" line="132" static="1">
		<f a="this:el">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<c path="thx.ReadonlyArray.T"/>
			<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Alias for append</haxe_doc>
	</push>
	<pop public="1" get="inline" set="null" line="138" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<t path="thx.Tuple">
				<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes and returns the value at the end of the array.  The original ReadonlyArray is unchanged.</haxe_doc>
	</pop>
	<iterator public="1" get="inline" set="null" line="145" static="1">
		<f a="this">
			<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			<t path="Iterator"><c path="thx.ReadonlyArray.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._ReadonlyArray.ReadonlyArray_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/ReadonlyArray.hx" private="1" module="thx.ReadonlyArray">
		<empty public="1" params="T" get="inline" set="null" line="8" static="1"><f a=""><x path="thx.ReadonlyArray"><c path="empty.T"/></x></f></empty>
		<flatten public="1" params="T" set="method" line="12" static="1"><f a="array">
	<x path="thx.ReadonlyArray"><x path="thx.ReadonlyArray"><c path="flatten.T"/></x></x>
	<x path="thx.ReadonlyArray"><c path="flatten.T"/></x>
</f></flatten>
		<indexOf public="1" set="method" line="19" static="1">
			<f a="this:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</indexOf>
		<lastIndexOf public="1" set="method" line="27" static="1">
			<f a="this:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</lastIndexOf>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get get="inline" set="null" line="40" static="1">
			<f a="this:i">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="Int"/>
				<c path="thx.ReadonlyArray.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<head public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</head>
		<tail public="1" get="inline" set="null" line="46" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</tail>
		<reduce public="1" params="A:B" set="method" line="49" static="1">
			<f a="this:arr:f:initial">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="Array"><c path="reduce.A"/></c>
				<f a=":">
					<c path="reduce.B"/>
					<c path="reduce.A"/>
					<c path="reduce.B"/>
				</f>
				<c path="reduce.B"/>
				<c path="reduce.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</reduce>
		<reducei public="1" params="A:B" set="method" line="58" static="1">
			<f a="array:f:initial">
				<x path="thx.ReadonlyArray"><c path="reducei.A"/></x>
				<f a="::">
					<c path="reducei.B"/>
					<c path="reducei.A"/>
					<x path="Int"/>
					<c path="reducei.B"/>
				</f>
				<c path="reducei.B"/>
				<c path="reducei.B"/>
			</f>
			<haxe_doc>It is the same as `reduce` but with the extra integer `index` parameter.</haxe_doc>
		</reducei>
		<reverse public="1" set="method" line="64" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
		<toArray public="1" get="inline" set="null" line="70" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</toArray>
		<unsafe public="1" get="inline" set="null" line="73" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</unsafe>
		<concat public="1" get="inline" set="null" line="76" static="1">
			<f a="this:that">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</concat>
		<insertAt public="1" get="inline" set="null" line="79" static="1">
			<f a="this:pos:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="Int"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</insertAt>
		<insertAfter public="1" set="method" line="82" static="1">
			<f a="this:ref:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</insertAfter>
		<insertBefore public="1" get="inline" set="null" line="89" static="1">
			<f a="this:ref:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</insertBefore>
		<replace public="1" set="method" line="92" static="1">
			<f a="this:ref:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</replace>
		<replaceAt public="1" get="inline" set="null" line="98" static="1">
			<f a="this:pos:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="Int"/>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</replaceAt>
		<remove public="1" get="inline" set="null" line="101" static="1">
			<f a="this:el:?eq">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<f a=":">
					<c path="thx.ReadonlyArray.T"/>
					<c path="thx.ReadonlyArray.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</remove>
		<removeAt public="1" get="inline" set="null" line="104" static="1">
			<f a="this:pos">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<x path="Int"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</removeAt>
		<prepend public="1" get="inline" set="null" line="107" static="1">
			<f a="this:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</prepend>
		<append public="1" get="inline" set="null" line="110" static="1">
			<f a="this:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</append>
		<unshift public="1" get="inline" set="null" line="116" static="1">
			<f a="this:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Alias for prepend</haxe_doc>
		</unshift>
		<shift public="1" set="method" line="122" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<t path="thx.Tuple">
					<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
					<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes and returns the value at the beginning of the array.  The original ReadonlyArray is unchanged.</haxe_doc>
		</shift>
		<push public="1" get="inline" set="null" line="132" static="1">
			<f a="this:el">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<c path="thx.ReadonlyArray.T"/>
				<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Alias for append</haxe_doc>
		</push>
		<pop public="1" get="inline" set="null" line="138" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<t path="thx.Tuple">
					<t path="Null"><c path="thx.ReadonlyArray.T"/></t>
					<x path="thx.ReadonlyArray"><c path="thx.ReadonlyArray.T"/></x>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes and returns the value at the end of the array.  The original ReadonlyArray is unchanged.</haxe_doc>
		</pop>
		<iterator public="1" get="inline" set="null" line="145" static="1">
			<f a="this">
				<c path="Array"><c path="thx.ReadonlyArray.T"/></c>
				<t path="Iterator"><c path="thx.ReadonlyArray.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Semigroup" params="A" file="/Users/francoponticelli/projects/thx.core/src/thx/Semigroup.hx">
		<from><icast><f a=":">
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
</f></icast></from>
		<this><f a=":">
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
</f></this>
		<to><icast><f a=":">
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
	<c path="thx.Semigroup.A"/>
</f></icast></to>
		<impl><class path="thx._Semigroup.Semigroup_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Semigroup.hx" private="1" module="thx.Semigroup">
	<append public="1" get="accessor" set="null" static="1">
		<f a=":">
			<c path="thx.Semigroup.A"/>
			<c path="thx.Semigroup.A"/>
			<c path="thx.Semigroup.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</append>
	<get_append set="method" line="6" static="1">
		<f a="this">
			<f a=":">
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
			</f>
			<f a=":">
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
			</f>
		</f>
		<meta><m n=":impl"/></meta>
	</get_append>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Semigroup.Semigroup_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Semigroup.hx" private="1" module="thx.Semigroup">
		<append public="1" get="accessor" set="null" static="1">
			<f a=":">
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
				<c path="thx.Semigroup.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</append>
		<get_append set="method" line="6" static="1">
			<f a="this">
				<f a=":">
					<c path="thx.Semigroup.A"/>
					<c path="thx.Semigroup.A"/>
					<c path="thx.Semigroup.A"/>
				</f>
				<f a=":">
					<c path="thx.Semigroup.A"/>
					<c path="thx.Semigroup.A"/>
					<c path="thx.Semigroup.A"/>
				</f>
			</f>
			<meta><m n=":impl"/></meta>
		</get_append>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Set" params="T" file="/Users/francoponticelli/projects/thx.core/src/thx/Set.hx">
		<this><x path="Map">
	<c path="thx.Set.T"/>
	<x path="Bool"/>
</x></this>
		<to>
			<icast field="toArray"><c path="Array"><c path="thx.Set.T"/></c></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<haxe_doc>A set is a list of unique values.  Value equality is determined using `==`.

See thx.HashSet for an alternative set implementation that uses a hash code to determine item equality.</haxe_doc>
		<impl><class path="thx._Set.Set_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Set.hx" private="1" module="thx.Set">
	<createString public="1" set="method" line="12" static="1">
		<f a="?it">
			<t path="Iterable"><c path="String"/></t>
			<x path="thx.Set"><c path="String"/></x>
		</f>
		<haxe_doc>Creates a Set of Strings with optional initial values.</haxe_doc>
	</createString>
	<createInt public="1" set="method" line="23" static="1">
		<f a="?it">
			<t path="Iterable"><x path="Int"/></t>
			<x path="thx.Set"><x path="Int"/></x>
		</f>
		<haxe_doc>Creates a Set of Ints with optional initial values.</haxe_doc>
	</createInt>
	<createObject public="1" params="T" set="method" line="34" static="1">
		<f a="?it">
			<t path="Iterable"><c path="createObject.T"/></t>
			<x path="thx.Set"><c path="createObject.T"/></x>
		</f>
		<haxe_doc>Creates a Set of anonymous objects with optional initial values.</haxe_doc>
	</createObject>
	<createEnum public="1" params="T" set="method" line="45" static="1">
		<f a="?arr">
			<t path="Iterable"><c path="createEnum.T"/></t>
			<x path="thx.Set"><c path="createEnum.T"/></x>
		</f>
		<haxe_doc>Creates a Set of EnumValue, with optional initial values.</haxe_doc>
	</createEnum>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new get="inline" set="null" line="55" static="1">
		<f a="map">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<add public="1" set="method" line="63" static="1">
		<f a="this:v">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="thx.Set.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`add` pushes a value into `Set` if the value was not already present.

It returns a boolean value indicating if `Set` was changed by the operation or not.</haxe_doc>
	</add>
	<copy public="1" set="method" line="74" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`copy` creates a new `Set` with copied elements.</haxe_doc>
	</copy>
	<empty public="1" set="method" line="84" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates an empty copy of the current set.</haxe_doc>
	</empty>
	<difference public="1" get="inline" set="null" line="93" static="1">
		<f a="this:set">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
		<haxe_doc>`difference` creates a new `Set` with elements from the first set excluding the elements
from the second.</haxe_doc>
	</difference>
	<filter public="1" set="method" line="100" static="1">
		<f a="this:predicate">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<f a="">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</f>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</filter>
	<map public="1" params="TOut" set="method" line="107" static="1">
		<f a="this:f">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<f a="">
				<c path="thx.Set.T"/>
				<c path="map.TOut"/>
			</f>
			<c path="Array"><c path="map.TOut"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<exists public="1" get="inline" set="null" line="116" static="1">
		<f a="this:v">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="thx.Set.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`exists` returns `true` if it contains an element that is equals to `v`.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="119" static="1">
		<f a="this:v">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="thx.Set.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</remove>
	<intersection public="1" get="inline" set="null" line="125" static="1">
		<f a="this:set">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`intersection` returns a Set with elements that are presents in both sets</haxe_doc>
	</intersection>
	<push public="1" get="inline" set="null" line="136" static="1">
		<f a="this:v">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="thx.Set.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Like `add` but doesn't notify if the addition was successful or not.</haxe_doc>
	</push>
	<pushMany public="1" set="method" line="142" static="1">
		<f a="this:values">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<t path="Iterable"><c path="thx.Set.T"/></t>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Pushes many values to the set</haxe_doc>
	</pushMany>
	<reduce public="1" params="TOut" set="method" line="146" static="1">
		<f a="this:handler:acc">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<f a=":">
				<c path="reduce.TOut"/>
				<c path="thx.Set.T"/>
				<c path="reduce.TOut"/>
			</f>
			<c path="reduce.TOut"/>
			<c path="reduce.TOut"/>
		</f>
		<meta><m n=":impl"/></meta>
	</reduce>
	<iterator public="1" set="method" line="156" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<t path="Iterator"><c path="thx.Set.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Iterates the values of the Set.</haxe_doc>
	</iterator>
	<union public="1" get="inline" set="null" line="162" static="1">
		<f a="this:set">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
			<x path="thx.Set"><c path="thx.Set.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
		<haxe_doc>Union creates a new Set with elements from both sets.</haxe_doc>
	</union>
	<toArray public="1" set="method" line="173" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="Array"><c path="thx.Set.T"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[Converts a `Set<T>` into `Array<T>`. The returned array is a copy of the internal
array used by `Set`. This ensures that the set is not affected by unsafe operations
that might happen on the returned array.]]></haxe_doc>
	</toArray>
	<toString public="1" set="method" line="184" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Converts `Set` into `String`. To differentiate from normal `Array`s the output string
uses curly braces `{}` instead of square brackets `[]`.</haxe_doc>
	</toString>
	<get_length set="method" line="187" static="1">
		<f a="this">
			<x path="Map">
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</x>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Set.Set_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Set.hx" private="1" module="thx.Set">
		<createString public="1" set="method" line="12" static="1">
			<f a="?it">
				<t path="Iterable"><c path="String"/></t>
				<x path="thx.Set"><c path="String"/></x>
			</f>
			<haxe_doc>Creates a Set of Strings with optional initial values.</haxe_doc>
		</createString>
		<createInt public="1" set="method" line="23" static="1">
			<f a="?it">
				<t path="Iterable"><x path="Int"/></t>
				<x path="thx.Set"><x path="Int"/></x>
			</f>
			<haxe_doc>Creates a Set of Ints with optional initial values.</haxe_doc>
		</createInt>
		<createObject public="1" params="T" set="method" line="34" static="1">
			<f a="?it">
				<t path="Iterable"><c path="createObject.T"/></t>
				<x path="thx.Set"><c path="createObject.T"/></x>
			</f>
			<haxe_doc>Creates a Set of anonymous objects with optional initial values.</haxe_doc>
		</createObject>
		<createEnum public="1" params="T" set="method" line="45" static="1">
			<f a="?arr">
				<t path="Iterable"><c path="createEnum.T"/></t>
				<x path="thx.Set"><c path="createEnum.T"/></x>
			</f>
			<haxe_doc>Creates a Set of EnumValue, with optional initial values.</haxe_doc>
		</createEnum>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new get="inline" set="null" line="55" static="1">
			<f a="map">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<add public="1" set="method" line="63" static="1">
			<f a="this:v">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`add` pushes a value into `Set` if the value was not already present.

It returns a boolean value indicating if `Set` was changed by the operation or not.</haxe_doc>
		</add>
		<copy public="1" set="method" line="74" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`copy` creates a new `Set` with copied elements.</haxe_doc>
		</copy>
		<empty public="1" set="method" line="84" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates an empty copy of the current set.</haxe_doc>
		</empty>
		<difference public="1" get="inline" set="null" line="93" static="1">
			<f a="this:set">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
			<haxe_doc>`difference` creates a new `Set` with elements from the first set excluding the elements
from the second.</haxe_doc>
		</difference>
		<filter public="1" set="method" line="100" static="1">
			<f a="this:predicate">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<f a="">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</f>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</filter>
		<map public="1" params="TOut" set="method" line="107" static="1">
			<f a="this:f">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<f a="">
					<c path="thx.Set.T"/>
					<c path="map.TOut"/>
				</f>
				<c path="Array"><c path="map.TOut"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<exists public="1" get="inline" set="null" line="116" static="1">
			<f a="this:v">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`exists` returns `true` if it contains an element that is equals to `v`.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="119" static="1">
			<f a="this:v">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="thx.Set.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</remove>
		<intersection public="1" get="inline" set="null" line="125" static="1">
			<f a="this:set">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`intersection` returns a Set with elements that are presents in both sets</haxe_doc>
		</intersection>
		<push public="1" get="inline" set="null" line="136" static="1">
			<f a="this:v">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="thx.Set.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Like `add` but doesn't notify if the addition was successful or not.</haxe_doc>
		</push>
		<pushMany public="1" set="method" line="142" static="1">
			<f a="this:values">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<t path="Iterable"><c path="thx.Set.T"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Pushes many values to the set</haxe_doc>
		</pushMany>
		<reduce public="1" params="TOut" set="method" line="146" static="1">
			<f a="this:handler:acc">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<f a=":">
					<c path="reduce.TOut"/>
					<c path="thx.Set.T"/>
					<c path="reduce.TOut"/>
				</f>
				<c path="reduce.TOut"/>
				<c path="reduce.TOut"/>
			</f>
			<meta><m n=":impl"/></meta>
		</reduce>
		<iterator public="1" set="method" line="156" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<t path="Iterator"><c path="thx.Set.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Iterates the values of the Set.</haxe_doc>
		</iterator>
		<union public="1" get="inline" set="null" line="162" static="1">
			<f a="this:set">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
				<x path="thx.Set"><c path="thx.Set.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
			<haxe_doc>Union creates a new Set with elements from both sets.</haxe_doc>
		</union>
		<toArray public="1" set="method" line="173" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="Array"><c path="thx.Set.T"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[Converts a `Set<T>` into `Array<T>`. The returned array is a copy of the internal
array used by `Set`. This ensures that the set is not affected by unsafe operations
that might happen on the returned array.]]></haxe_doc>
		</toArray>
		<toString public="1" set="method" line="184" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Converts `Set` into `String`. To differentiate from normal `Array`s the output string
uses curly braces `{}` instead of square brackets `[]`.</haxe_doc>
		</toString>
		<get_length set="method" line="187" static="1">
			<f a="this">
				<x path="Map">
					<c path="thx.Set.T"/>
					<x path="Bool"/>
				</x>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="thx.HaxeStringTools" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Strings.hx" module="thx.Strings">
		<c path="StringTools"/>
		<haxe_doc>Alias of `StringTools`, included so mixins work with `using thx.Strings;`</haxe_doc>
	</typedef>
	<class path="thx.Strings" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Strings.hx">
		<after public="1" set="method" line="20" static="1">
			<f a="value:searchFor">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`after` searches for the first occurrance of `searchFor` and returns the text after that.

If `searchFor` is not found, an empty string is returned.</haxe_doc>
		</after>
		<afterLast public="1" set="method" line="33" static="1">
			<f a="value:searchFor">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`afterLast` searches for the last occurrance of `searchFor` and returns the text after that.

  If `searchFor` is not found, an empty string is returned.</haxe_doc>
		</afterLast>
		<capitalize public="1" get="inline" set="null" line="44" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`capitalize` returns a string with the first character convert to upper case.</haxe_doc>
		</capitalize>
		<capitalizeWords public="1" set="method" line="51" static="1">
			<f a="value:?whiteSpaceOnly" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ whiteSpaceOnly : false }</e></m></meta>
			<haxe_doc>Capitalize the first letter of every word in `value`. If `whiteSpaceOnly` is set to `true`
the process is limited to whitespace separated words.</haxe_doc>
		</capitalizeWords>
		<canonicalizeNewlines public="1" set="method" line="66" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces occurrances of `\r\n`, `\n\r`, `\r` with `\n`;</haxe_doc>
		</canonicalizeNewlines>
		<caseInsensitiveCompare public="1" set="method" line="72" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares two strings ignoring their case.</haxe_doc>
		</caseInsensitiveCompare>
		<caseInsensitiveEndsWith public="1" get="inline" set="null" line="85" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `s` ends with `end` ignoring their case.</haxe_doc>
		</caseInsensitiveEndsWith>
		<caseInsensitiveEndsWithAny public="1" get="inline" set="null" line="91" static="1">
			<f a="s:values">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares a string `s` with many `values` and see if one of them matches its end ignoring their case.</haxe_doc>
		</caseInsensitiveEndsWithAny>
		<caseInsensitiveStartsWith public="1" get="inline" set="null" line="97" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares two strings ignoring their case.</haxe_doc>
		</caseInsensitiveStartsWith>
		<caseInsensitiveStartsWithAny public="1" get="inline" set="null" line="103" static="1">
			<f a="s:values">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares a string `s` with many `values` and see if one of them matches its beginning ignoring their case.</haxe_doc>
		</caseInsensitiveStartsWithAny>
		<collapse public="1" set="method" line="114" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>It cleans up all the whitespaces in the passed `value`. `collapse` does the following:

  - remove trailing/leading whitespaces
  - within the string, it collapses seqeunces of whitespaces into a single space character

For whitespaces in this description, it is intended to be anything that is matched by the regular expression `\s`.</haxe_doc>
		</collapse>
		<compare public="1" get="inline" set="null" line="121" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It compares to string and it returns a negative number if `a` is inferior to `b`, zero if they are the same,
or otherwise a positive non-sero number.</haxe_doc>
		</compare>
		<order public="1" set="null" expr="Ord.fromIntComparison(compare)" line="128" static="1">
			<x path="thx.Ord"><c path="String"/></x>
			<meta><m n=":value"><e>Ord.fromIntComparison(compare)</e></m></meta>
		</order>
		<caseInsensitiveContains public="1" get="inline" set="null" line="133" static="1">
			<f a="s:test">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`contains` returns `true` if `s` contains one or more occurrences of `test` regardless of the text case.</haxe_doc>
		</caseInsensitiveContains>
		<contains public="1" get="inline" set="null" line="143" static="1">
			<f a="s:test">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`contains` returns `true` if `s` contains one or more occurrences of `test`.</haxe_doc>
		</contains>
		<count public="1" set="method" line="153" static="1">
			<f a="s:test">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Return the number of occurances of `test` in `s`.</haxe_doc>
		</count>
		<caseInsensitiveContainsAny public="1" get="inline" set="null" line="159" static="1">
			<f a="s:tests">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>`contains` returns `true` if `s` contains any of the strings in `tests` regardless of the text case</haxe_doc>
		</caseInsensitiveContainsAny>
		<containsAny public="1" get="inline" set="null" line="165" static="1">
			<f a="s:tests">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>`contains` returns `true` if `s` contains any of the strings in `tests`</haxe_doc>
		</containsAny>
		<dasherize public="1" set="method" line="172" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`dasherize` replaces all the occurrances of `_` with `-`;</haxe_doc>
		</dasherize>
		<diffAt public="1" set="method" line="182" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares strings `a` and `b` and returns the position where they differ.

```haxe
Strings.diffAt("abcdef", "abc123"); // returns 3
```</haxe_doc>
		</diffAt>
		<ellipsis public="1" set="method" line="198" static="1">
			<f a="s:?maxlen:?symbol" v=":20:&quot;…&quot;">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ symbol : "…", maxlen : 20 }</e></m></meta>
			<haxe_doc>`ellipsis` truncates `s` at len `maxlen` replaces the last characters with the content
of `symbol`.

```haxe
'thx is a nice library'.ellipsis(8); // returns 'thx is …'
```</haxe_doc>
		</ellipsis>
		<ellipsisMiddle public="1" set="method" line="218" static="1">
			<f a="s:?maxlen:?symbol" v=":20:&quot;…&quot;">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ symbol : "…", maxlen : 20 }</e></m></meta>
			<haxe_doc>Same as `ellipsis` but puts the symbol in the middle of the string and not to the end.

```haxe
'thx is a nice library'.ellipsisMiddle(16); // returns 'thx is … library'
```</haxe_doc>
		</ellipsisMiddle>
		<endsWithAny public="1" set="method" line="235" static="1">
			<f a="s:values">
				<c path="String"/>
				<t path="Iterable"><c path="String"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `s` ends with any of the values in `values`.</haxe_doc>
		</endsWithAny>
		<filter public="1" set="method" line="242" static="1">
			<f a="s:predicate">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>`filter` applies `predicate` character by character to `s` and it returns a filtered
version of the string.</haxe_doc>
		</filter>
		<filterCharcode public="1" set="method" line="250" static="1">
			<f a="s:predicate">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Bool"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Same as `filter` but `predicate` operates on integer char codes instead of string characters.</haxe_doc>
		</filterCharcode>
		<from public="1" set="method" line="262" static="1">
			<f a="value:searchFor">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`from` searches for the first occurrance of `searchFor` and returns the text from that point on.

If `searchFor` is not found, an empty string is returned.</haxe_doc>
		</from>
		<HASCODE_MAX expr="2147483647" line="270" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":value"><e>2147483647</e></m></meta>
		</HASCODE_MAX>
		<HASCODE_MUL expr="31" line="271" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":value"><e>31</e></m></meta>
		</HASCODE_MUL>
		<hashCode public="1" set="method" line="272" static="1"><f a="value">
	<c path="String"/>
	<x path="Int"/>
</f></hashCode>
		<hasContent public="1" get="inline" set="null" line="284" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `value` is not `null` and contains at least one character.</haxe_doc>
		</hasContent>
		<humanize public="1" set="method" line="290" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Works the same as `underscore` but also replaces underscores with whitespaces.</haxe_doc>
		</humanize>
		<isAlpha public="1" set="method" line="296" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `s` contains only (and at least one) alphabetical characters.</haxe_doc>
		</isAlpha>
		<isAlphaNum public="1" get="inline" set="null" line="302" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isAlphaNum` returns `true` if the string only contains alpha-numeric characters.</haxe_doc>
		</isAlphaNum>
		<isBreakingWhitespace public="1" set="method" line="309" static="1"><f a="value">
	<c path="String"/>
	<x path="Bool"/>
</f></isBreakingWhitespace>
		<isLowerCase public="1" set="method" line="316" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the value string is composed of only lower cased characters
or case neutral characters.</haxe_doc>
		</isLowerCase>
		<isUpperCase public="1" set="method" line="323" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the value string is composed of only upper cased characters
or case neutral characters.</haxe_doc>
		</isUpperCase>
		<ifEmpty public="1" get="inline" set="null" line="329" static="1">
			<f a="value:alt">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`ifEmpty` returns `value` if it is neither `null` or empty, otherwise it returns `alt`</haxe_doc>
		</ifEmpty>
		<isDigitsOnly public="1" get="inline" set="null" line="335" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isDigitsOnly` returns `true` if the string only contains digits.</haxe_doc>
		</isDigitsOnly>
		<isEmpty public="1" set="method" line="345" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isEmpty` returns true if either `value` is null or is an empty string.</haxe_doc>
		</isEmpty>
		<lowerCaseFirst public="1" set="method" line="351" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert first letter in `value` to lower case.</haxe_doc>
		</lowerCaseFirst>
		<random public="1" set="method" line="357" static="1">
			<f a="value:?length" v=":1">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ length : 1 }</e></m></meta>
			<haxe_doc>Returns a random substring from the `value` argument. The length of such value is by default `1`.</haxe_doc>
		</random>
		<randomSequence public="1" set="method" line="363" static="1">
			<f a="seed:length">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a random sampling of the specified length from the seed string.</haxe_doc>
		</randomSequence>
		<randomSequence64 public="1" set="method" line="370" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Like `Strings.randomSequence`, but automatically uses `haxe.crypto.Base64.CHARS`
as the seed string.</haxe_doc>
		</randomSequence64>
		<iterator public="1" set="method" line="376" static="1">
			<f a="s">
				<c path="String"/>
				<t path="Iterator"><c path="String"/></t>
			</f>
			<haxe_doc>It returns an iterator holding in sequence one character of the string per iteration.</haxe_doc>
		</iterator>
		<map public="1" params="T" set="method" line="382" static="1">
			<f a="value:callback">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<c path="map.T"/>
				</f>
				<c path="Array"><c path="map.T"/></c>
			</f>
			<haxe_doc>It maps a string character by character using `callback`.</haxe_doc>
		</map>
		<remove public="1" get="inline" set="null" line="388" static="1">
			<f a="value:toremove">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>If present, it removes all the occurrences of `toremove` from `value`.</haxe_doc>
		</remove>
		<removeAfter public="1" set="method" line="394" static="1">
			<f a="value:toremove">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>If present, it removes the `toremove` text from the end of `value`.</haxe_doc>
		</removeAfter>
		<removeAt public="1" set="method" line="400" static="1">
			<f a="value:index:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes a slice from `index` to `index + length` from `value`.</haxe_doc>
		</removeAt>
		<removeBefore public="1" set="method" line="406" static="1">
			<f a="value:toremove">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>If present, it removes the `toremove` text from the beginning of `value`.</haxe_doc>
		</removeBefore>
		<removeOne public="1" set="method" line="412" static="1">
			<f a="value:toremove">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>If present, it removes the first occurrence of `toremove` from `value`.</haxe_doc>
		</removeOne>
		<repeat public="1" set="method" line="426" static="1">
			<f a="s:times">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>`repeat` builds a new string by repeating the argument `s`, n `times`.

```haxe
'Xy'.repeat(3); // generates 'XyXyXy'
```</haxe_doc>
		</repeat>
		<reverse public="1" set="method" line="432" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a new string whose characters are in reverse order.</haxe_doc>
		</reverse>
		<quote public="1" set="method" line="441" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a string in a quoted string.</haxe_doc>
		</quote>
		<splitOnce public="1" set="method" line="453" static="1">
			<f a="s:separator">
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Like `StringTools.split` but it only splits on the first occurrance of separator.</haxe_doc>
		</splitOnce>
		<startsWithAny public="1" set="method" line="463" static="1">
			<f a="s:values">
				<c path="String"/>
				<t path="Iterable"><c path="String"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `s` starts with any of the values in `values`.</haxe_doc>
		</startsWithAny>
		<stripTags public="1" set="method" line="470" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`stripTags` removes any HTML/XML markup from the string leaving only the concatenation
of the existing text nodes.</haxe_doc>
		</stripTags>
		<surround public="1" get="inline" set="null" line="481" static="1">
			<f a="s:left:?right">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Surrounds a string with the contents of `left` and `right`. If `right` is omitted,
`left` will be used on both sides;</haxe_doc>
		</surround>
		<toArray public="1" get="inline" set="null" line="487" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>It transforms a string into an `Array` of characters.</haxe_doc>
		</toArray>
		<toCharcodes public="1" get="inline" set="null" line="501" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>It transforms a string into an `Array` of char codes in integer format.</haxe_doc>
		</toCharcodes>
		<toChunks public="1" set="method" line="509" static="1">
			<f a="s:len">
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array of `String` whose elements are equally long (using `len`). If the string `s`
is not exactly divisible by `len` the last element of the array will be shorter.</haxe_doc>
		</toChunks>
		<toLines public="1" get="inline" set="null" line="521" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array of `String` split by line breaks.</haxe_doc>
		</toLines>
		<trimChars public="1" get="inline" set="null" line="527" static="1">
			<f a="value:charlist">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`trimChars` removes from the beginning and the end of the string any character that is present in `charlist`.</haxe_doc>
		</trimChars>
		<trimCharsLeft public="1" set="method" line="537" static="1">
			<f a="value:charlist">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`trimCharsLeft` removes from the beginning of the string any character that is present in `charlist`.</haxe_doc>
		</trimCharsLeft>
		<trimCharsRight public="1" set="method" line="554" static="1">
			<f a="value:charlist">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`trimCharsRight` removes from the end of the string any character that is present in `charlist`.</haxe_doc>
		</trimCharsRight>
		<underscore public="1" set="method" line="576" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`underscore` finds UpperCase characters and turns them into LowerCase and prepends them with a whtiespace.
Sequences of more than one UpperCase character are left untouched.</haxe_doc>
		</underscore>
		<upperCaseFirst public="1" set="method" line="587" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert first letter in `value` to upper case.</haxe_doc>
		</upperCaseFirst>
		<upTo public="1" set="method" line="595" static="1">
			<f a="value:searchFor">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`upTo` searches for the first occurrance of `searchFor` and returns the text up to that point.

If `searchFor` is not found, the entire string is returned.</haxe_doc>
		</upTo>
		<wrapColumns public="1" set="method" line="608" static="1">
			<f a="s:?columns:?indent:?newline" v=":78:&quot;&quot;:&quot;\n&quot;">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ newline : "\n", indent : "", columns : 78 }</e></m></meta>
			<haxe_doc>`wrapColumns` splits a long string into lines that are at most `columns` long.

Words whose length exceeds `columns` are not split.</haxe_doc>
		</wrapColumns>
		<upperMatch set="method" line="615" static="1"><f a="re">
	<c path="EReg"/>
	<c path="String"/>
</f></upperMatch>
		<wrapLine set="method" line="618" static="1"><f a="s:columns:indent:newline">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></wrapLine>
		<lpad public="1" set="method" line="649" static="1"><f a="s:char:length">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></lpad>
		<rpad public="1" set="method" line="658" static="1"><f a="s:char:length">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></rpad>
		<monoid public="1" set="null" expr="{ zero : &quot;&quot;, append : function(a:String, b:String) return a + b }" line="668" static="1">
			<x path="thx.Monoid"><c path="String"/></x>
			<meta><m n=":value"><e>{ zero : "", append : function(a:String, b:String) return a + b }</e></m></meta>
		</monoid>
		<UCWORDS expr="~/[^a-zA-Z]([a-z])/" line="670" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[^a-zA-Z]([a-z])/</e></m></meta>
		</UCWORDS>
		<IS_BREAKINGWHITESPACE expr="~/[^	
 ]/" line="671" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[^	
 ]/</e></m></meta>
		</IS_BREAKINGWHITESPACE>
		<IS_ALPHA expr="~/[^a-zA-Z]/" line="672" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[^a-zA-Z]/</e></m></meta>
		</IS_ALPHA>
		<UCWORDSWS expr="~/[ 	
][a-z]/" line="674" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[ 	
][a-z]/</e></m></meta>
		</UCWORDSWS>
		<ALPHANUM expr="~/^[a-z0-9]+$/" line="675" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[a-z0-9]+$/</e></m></meta>
		</ALPHANUM>
		<DIGITS expr="~/^[0-9]+$/" line="676" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</DIGITS>
		<STRIPTAGS expr="~/&lt;/?[a-z]+[^&gt;]*&gt;/" line="677" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/</?[a-z]+[^>]*>/]]></e></m></meta>
		</STRIPTAGS>
		<WSG expr="~/[ 	
]+/" line="679" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[ 	
]+/</e></m></meta>
		</WSG>
		<SPLIT_LINES expr="~/
|
|
|/" line="680" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/
|
|
|/</e></m></meta>
		</SPLIT_LINES>
		<CANONICALIZE_LINES expr="~/
|
|/" line="681" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/
|
|/</e></m></meta>
		</CANONICALIZE_LINES>
		<haxe_doc>Extension methods for strings.</haxe_doc>
	</class>
	<enum path="thx.TimePeriod" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/TimePeriod.hx">
		<Second/>
		<Minute/>
		<Hour/>
		<Day/>
		<Week/>
		<Month/>
		<Year/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="thx.Timer" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Timer.hx">
		<debounce public="1" set="method" line="27" static="1">
			<f a="callback:delayms:?leading" v="::false">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<x path="Bool"/>
				<f a=""><x path="Void"/></f>
			</f>
			<meta><m n=":value"><e>{ leading : false }</e></m></meta>
			<haxe_doc>Creates a function that delays the execution of `callback` by `delayms` every time it is
invoked. If `leading` is set to true, a first execution is guaranteed to happen as soon
as the returnd function is invoked.</haxe_doc>
		</debounce>
		<throttle public="1" set="method" line="47" static="1">
			<f a="callback:delayms:?leading" v="::false">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<x path="Bool"/>
				<f a=""><x path="Void"/></f>
			</f>
			<meta><m n=":value"><e>{ leading : false }</e></m></meta>
			<haxe_doc>The returned function executes `callback` at most once every `delayms` regardless of
how many times it is invoked in that timespance. Setting `leading` to true ensures
that the callback is invoked at the beginning of the cycle.</haxe_doc>
		</throttle>
		<repeat public="1" set="method" line="76" static="1">
			<f a="callback:delayms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>`Timer.repeat` continues to invoke `callback` until it is cancelled using the returned
cancel function.</haxe_doc>
		</repeat>
		<delay public="1" set="method" line="102" static="1">
			<f a="callback:delayms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>`Timer.delay` invokes `callback` after `delayms` milliseconds. The scheduling can be
canelled using the returned cancel function.</haxe_doc>
		</delay>
		<frame public="1" set="method" line="130" static="1">
			<f a="callback">
				<f a="">
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>Invokes `callback` at every frame using native implementation where available. A delta time
in milliseconds is passed since the latest time callback was invoked.</haxe_doc>
		</frame>
		<nextFrame public="1" set="method" line="183" static="1">
			<f a="callback">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>Delays `callback` untile the next frame using native implementation where available.</haxe_doc>
		</nextFrame>
		<FRAME_RATE expr="Math.round(1000 / 60)" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>Math.round(1000 / 60)</e></m></meta>
		</FRAME_RATE>
		<immediate public="1" set="method" line="217" static="1">
			<f a="callback">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>`Timer.immediate` works essentially like `Timer.delay` with the exception that the delay
will be the shortest allowed by the platform. How short the delay depends a lot on
the target platform.</haxe_doc>
		</immediate>
		<clear set="method" line="227" static="1">
			<f a="id">
				<unknown/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</clear>
		<time public="1" get="inline" set="null" line="250" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a time value in milliseconds. Where supported, the decimal value represents microseconds.

Note that the initial value might change from platform to platform so only delta measurements make sense.</haxe_doc>
		</time>
		<_resolution static="1"><t path="Null"><x path="Float"/></t></_resolution>
		<resolution public="1" set="method" line="270" static="1"><f a=""><x path="Float"/></f></resolution>
		<haxe_doc><![CDATA[`Timer` provides several meaning to delay the execution of code. At the moment it is only
implemented for platforms that have a native concept of Timer like Swf and JavaScript or c++/Neko
with OpenFL or NME.

All of the Timer methods return a function with signature Void -> Void that can be used to cancel
the timer.

```haxe
// set the execution delayed by 200ms
var cancel = Timer.delay(doSomethingLater, 200);

// cancel immediately (doSomethingLater will never be executed)
cancel();
```

Note that calling the cancel function multiple times have no effect after the first execution.]]></haxe_doc>
	</class>
	<abstract path="thx.Timestamp" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Timestamp.hx">
		<from>
			<icast><x path="Float"/></icast>
			<icast field="fromDate"><c path="Date"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="toDate"><c path="Date"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<haxe_doc>`Timestamp` provides additional methods on top of the `Float` as well as
automatic casting from and to Date/String.

```
import thx.Timestamp;
```

@author Jason O'Neil
@author Franco Ponticelli</haxe_doc>
		<impl><class path="thx._Timestamp.Timestamp_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Timestamp.hx" private="1" module="thx.Timestamp">
	<create public="1" get="inline" set="null" line="23" static="1">
		<f a="year:?month:?day:?hour:?minute:?second">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="thx.Timestamp"/>
		</f>
		<haxe_doc>Creates a timestamp by using the passed year, month, day, hour, minute, second.

Note that each argument can overflow its normal boundaries (e.g. a month value of `-33` is perfectly valid)
and the method will normalize that value by offsetting the other arguments by the right amount.</haxe_doc>
	</create>
	<now public="1" get="inline" set="null" line="26" static="1"><f a=""><x path="thx.Timestamp"/></f></now>
	<fromDate public="1" get="inline" set="null" line="29" static="1">
		<f a="d">
			<c path="Date"/>
			<x path="thx.Timestamp"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromDate>
	<fromString public="1" get="inline" set="null" line="32" static="1">
		<f a="s">
			<c path="String"/>
			<x path="thx.Timestamp"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toDate public="1" get="inline" set="null" line="35" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="Date"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toDate>
	<toString public="1" get="inline" set="null" line="38" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
	<snapNext public="1" set="method" line="48" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="thx.TimePeriod"/>
			<x path="thx.Timestamp"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Snaps a time to the next second, minute, hour, day, week, month or year.

@param time The unix time in milliseconds.  See date.getTime()
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The unix time of the snapped date (In milliseconds).</haxe_doc>
	</snapNext>
	<snapPrev public="1" set="method" line="78" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="thx.TimePeriod"/>
			<x path="thx.Timestamp"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Snaps a time to the previous second, minute, hour, day, week, month or year.

@param time The unix time in milliseconds.  See date.getTime()
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The unix time of the snapped date (In milliseconds).</haxe_doc>
	</snapPrev>
	<snapTo public="1" set="method" line="106" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="thx.TimePeriod"/>
			<x path="thx.Timestamp"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Snaps a time to the nearest second, minute, hour, day, week, month or year.

@param period Either: Second, Minute, Hour, Day, Week, Month or Year</haxe_doc>
	</snapTo>
	<r get="inline" set="null" line="133" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></r>
	<f get="inline" set="null" line="135" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></f>
	<c get="inline" set="null" line="137" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></c>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Timestamp.Timestamp_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Timestamp.hx" private="1" module="thx.Timestamp">
		<create public="1" get="inline" set="null" line="23" static="1">
			<f a="year:?month:?day:?hour:?minute:?second">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="thx.Timestamp"/>
			</f>
			<haxe_doc>Creates a timestamp by using the passed year, month, day, hour, minute, second.

Note that each argument can overflow its normal boundaries (e.g. a month value of `-33` is perfectly valid)
and the method will normalize that value by offsetting the other arguments by the right amount.</haxe_doc>
		</create>
		<now public="1" get="inline" set="null" line="26" static="1"><f a=""><x path="thx.Timestamp"/></f></now>
		<fromDate public="1" get="inline" set="null" line="29" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="thx.Timestamp"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromDate>
		<fromString public="1" get="inline" set="null" line="32" static="1">
			<f a="s">
				<c path="String"/>
				<x path="thx.Timestamp"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toDate public="1" get="inline" set="null" line="35" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toDate>
		<toString public="1" get="inline" set="null" line="38" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
		<snapNext public="1" set="method" line="48" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="thx.TimePeriod"/>
				<x path="thx.Timestamp"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Snaps a time to the next second, minute, hour, day, week, month or year.

@param time The unix time in milliseconds.  See date.getTime()
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The unix time of the snapped date (In milliseconds).</haxe_doc>
		</snapNext>
		<snapPrev public="1" set="method" line="78" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="thx.TimePeriod"/>
				<x path="thx.Timestamp"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Snaps a time to the previous second, minute, hour, day, week, month or year.

@param time The unix time in milliseconds.  See date.getTime()
@param period Either: Second, Minute, Hour, Day, Week, Month or Year
@return The unix time of the snapped date (In milliseconds).</haxe_doc>
		</snapPrev>
		<snapTo public="1" set="method" line="106" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="thx.TimePeriod"/>
				<x path="thx.Timestamp"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Snaps a time to the nearest second, minute, hour, day, week, month or year.

@param period Either: Second, Minute, Hour, Day, Week, Month or Year</haxe_doc>
		</snapTo>
		<r get="inline" set="null" line="133" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></r>
		<f get="inline" set="null" line="135" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></f>
		<c get="inline" set="null" line="137" static="1"><f a="t:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></c>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="thx.Tuple" params="T0:T1" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx"><x path="thx.Tuple2">
	<c path="thx.Tuple.T0"/>
	<c path="thx.Tuple.T1"/>
</x></typedef>
	<abstract path="thx.Tuple0" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from><icast field="nilToTuple"><e path="thx.Nil"/></icast></from>
		<this><e path="thx.Nil"/></this>
		<to><icast field="toNil"><e path="thx.Nil"/></icast></to>
		<haxe_doc>`Tuple0` is a tuple with no values. It maps directly to `Nil.nil`.</haxe_doc>
		<impl><class path="thx._Tuple.Tuple0_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<_new public="1" get="inline" set="null" line="12" static="1">
		<f a=""><x path="thx.Tuple0"/></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple0`.</haxe_doc>
	</_new>
	<with public="1" params="T0" get="inline" set="null" line="19" static="1">
		<f a="this:v">
			<e path="thx.Nil"/>
			<c path="with.T0"/>
			<x path="thx.Tuple1"><c path="with.T0"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="25" static="1">
		<f a="this">
			<e path="thx.Nil"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<toNil public="1" get="inline" set="null" line="31" static="1">
		<f a="this">
			<e path="thx.Nil"/>
			<e path="thx.Nil"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Cast to `Nil`.</haxe_doc>
	</toNil>
	<nilToTuple public="1" get="inline" set="null" line="37" static="1">
		<f a="v">
			<e path="thx.Nil"/>
			<x path="thx.Tuple0"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Creates `Tuple0` from `Nil`.</haxe_doc>
	</nilToTuple>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple0_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<_new public="1" get="inline" set="null" line="12" static="1">
			<f a=""><x path="thx.Tuple0"/></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple0`.</haxe_doc>
		</_new>
		<with public="1" params="T0" get="inline" set="null" line="19" static="1">
			<f a="this:v">
				<e path="thx.Nil"/>
				<c path="with.T0"/>
				<x path="thx.Tuple1"><c path="with.T0"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="25" static="1">
			<f a="this">
				<e path="thx.Nil"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<toNil public="1" get="inline" set="null" line="31" static="1">
			<f a="this">
				<e path="thx.Nil"/>
				<e path="thx.Nil"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Cast to `Nil`.</haxe_doc>
		</toNil>
		<nilToTuple public="1" get="inline" set="null" line="37" static="1">
			<f a="v">
				<e path="thx.Nil"/>
				<x path="thx.Tuple0"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Creates `Tuple0` from `Nil`.</haxe_doc>
		</nilToTuple>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple1" params="T0" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><c path="thx.Tuple1.T0"/></icast>
			<icast field="arrayToTuple"><c path="Array"><c path="arrayToTuple.T"/></c></icast>
		</from>
		<this><c path="thx.Tuple1.T0"/></this>
		<to><icast><c path="thx.Tuple1.T0"/></icast></to>
		<haxe_doc>`Tuple1` is a tuple with one value. It maps directly to its own T0 types.</haxe_doc>
		<impl><class path="thx._Tuple.Tuple1_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<_new public="1" get="inline" set="null" line="48" static="1">
		<f a="_0">
			<c path="thx.Tuple1.T0"/>
			<x path="thx.Tuple1"><c path="thx.Tuple1.T0"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple1` passing a value T as an argument.</haxe_doc>
	</_new>
	<_0 public="1" get="accessor" set="null" static="1">
		<c path="thx.Tuple1.T0"/>
		<meta><m n=":impl"/></meta>
	</_0>
	<get__0 get="inline" set="null" line="51" static="1">
		<f a="this">
			<c path="thx.Tuple1.T0"/>
			<c path="thx.Tuple1.T0"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get__0>
	<with public="1" params="T1" get="inline" set="null" line="57" static="1">
		<f a="this:v">
			<c path="thx.Tuple1.T0"/>
			<c path="with.T1"/>
			<x path="thx.Tuple2">
				<c path="thx.Tuple1.T0"/>
				<c path="with.T1"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="63" static="1">
		<f a="this">
			<c path="thx.Tuple1.T0"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<arrayToTuple public="1" params="T" get="inline" set="null" line="66" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple.T"/></c>
			<x path="thx.Tuple1"><c path="arrayToTuple.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple1_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<_new public="1" get="inline" set="null" line="48" static="1">
			<f a="_0">
				<c path="thx.Tuple1.T0"/>
				<x path="thx.Tuple1"><c path="thx.Tuple1.T0"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple1` passing a value T as an argument.</haxe_doc>
		</_new>
		<_0 public="1" get="accessor" set="null" static="1">
			<c path="thx.Tuple1.T0"/>
			<meta><m n=":impl"/></meta>
		</_0>
		<get__0 get="inline" set="null" line="51" static="1">
			<f a="this">
				<c path="thx.Tuple1.T0"/>
				<c path="thx.Tuple1.T0"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get__0>
		<with public="1" params="T1" get="inline" set="null" line="57" static="1">
			<f a="this:v">
				<c path="thx.Tuple1.T0"/>
				<c path="with.T1"/>
				<x path="thx.Tuple2">
					<c path="thx.Tuple1.T0"/>
					<c path="with.T1"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="63" static="1">
			<f a="this">
				<c path="thx.Tuple1.T0"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<arrayToTuple public="1" params="T" get="inline" set="null" line="66" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple.T"/></c>
				<x path="thx.Tuple1"><c path="arrayToTuple.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple2" params="T0:T1" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><a>
	<_1><c path="thx.Tuple2.T1"/></_1>
	<_0><c path="thx.Tuple2.T0"/></_0>
</a></icast>
			<icast field="arrayToTuple2"><c path="Array"><c path="arrayToTuple2.T"/></c></icast>
		</from>
		<this><a>
	<_1><c path="thx.Tuple2.T1"/></_1>
	<_0><c path="thx.Tuple2.T0"/></_0>
</a></this>
		<to><icast><a>
	<_1><c path="thx.Tuple2.T1"/></_1>
	<_0><c path="thx.Tuple2.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple2` is a tuple with two values. It maps to an anonymous object with fields `_0` and `_1`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
</m></meta>
		<impl><class path="thx._Tuple.Tuple2_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<of public="1" params="A:B" get="inline" set="null" line="79" static="1">
		<f a="_0:_1">
			<c path="of.A"/>
			<c path="of.B"/>
			<x path="thx.Tuple2">
				<c path="of.A"/>
				<c path="of.B"/>
			</x>
		</f>
		<haxe_doc>Constructs an instance of `Tuple2` the 2 required value. This is required
because Tuple2.new.bind(...) crashes the compiler.</haxe_doc>
	</of>
	<_new public="1" get="inline" set="null" line="85" static="1">
		<f a="_0:_1">
			<c path="thx.Tuple2.T0"/>
			<c path="thx.Tuple2.T1"/>
			<x path="thx.Tuple2">
				<c path="thx.Tuple2.T0"/>
				<c path="thx.Tuple2.T1"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple2` the 2 required value.</haxe_doc>
	</_new>
	<left public="1" get="accessor" set="null" static="1">
		<c path="thx.Tuple2.T0"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Alias for `_0`.</haxe_doc>
	</left>
	<right public="1" get="accessor" set="null" static="1">
		<c path="thx.Tuple2.T1"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Alias for `_1`.</haxe_doc>
	</right>
	<get_left get="inline" set="null" line="98" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<c path="thx.Tuple2.T0"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_left>
	<get_right get="inline" set="null" line="99" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<c path="thx.Tuple2.T1"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<flip public="1" get="inline" set="null" line="104" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<x path="thx.Tuple2">
				<c path="thx.Tuple2.T1"/>
				<c path="thx.Tuple2.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="111" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<x path="thx.Tuple1"><c path="thx.Tuple2.T1"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="118" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<x path="thx.Tuple1"><c path="thx.Tuple2.T0"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T2" get="inline" set="null" line="125" static="1">
		<f a="this:v">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<c path="with.T2"/>
			<x path="thx.Tuple3">
				<c path="thx.Tuple2.T0"/>
				<c path="thx.Tuple2.T1"/>
				<c path="with.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="131" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<map public="1" params="T2" set="method" line="134" static="1">
		<f a="this:f">
			<a>
				<_1><c path="thx.Tuple2.T1"/></_1>
				<_0><c path="thx.Tuple2.T0"/></_0>
			</a>
			<f a="">
				<c path="thx.Tuple2.T1"/>
				<c path="map.T2"/>
			</f>
			<x path="thx.Tuple2">
				<c path="thx.Tuple2.T0"/>
				<c path="map.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<squeeze public="1" params="T1:T2:R" set="method" line="137" static="1"><f a="f">
	<f a=":">
		<c path="squeeze.T1"/>
		<c path="squeeze.T2"/>
		<c path="squeeze.R"/>
	</f>
	<f a="">
		<x path="thx.Tuple2">
			<c path="squeeze.T1"/>
			<c path="squeeze.T2"/>
		</x>
		<c path="squeeze.R"/>
	</f>
</f></squeeze>
	<arrayToTuple2 public="1" params="T" get="inline" set="null" line="143" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple2.T"/></c>
			<x path="thx.Tuple2">
				<c path="arrayToTuple2.T"/>
				<c path="arrayToTuple2.T"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple2>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple2_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<of public="1" params="A:B" get="inline" set="null" line="79" static="1">
			<f a="_0:_1">
				<c path="of.A"/>
				<c path="of.B"/>
				<x path="thx.Tuple2">
					<c path="of.A"/>
					<c path="of.B"/>
				</x>
			</f>
			<haxe_doc>Constructs an instance of `Tuple2` the 2 required value. This is required
because Tuple2.new.bind(...) crashes the compiler.</haxe_doc>
		</of>
		<_new public="1" get="inline" set="null" line="85" static="1">
			<f a="_0:_1">
				<c path="thx.Tuple2.T0"/>
				<c path="thx.Tuple2.T1"/>
				<x path="thx.Tuple2">
					<c path="thx.Tuple2.T0"/>
					<c path="thx.Tuple2.T1"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple2` the 2 required value.</haxe_doc>
		</_new>
		<left public="1" get="accessor" set="null" static="1">
			<c path="thx.Tuple2.T0"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Alias for `_0`.</haxe_doc>
		</left>
		<right public="1" get="accessor" set="null" static="1">
			<c path="thx.Tuple2.T1"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Alias for `_1`.</haxe_doc>
		</right>
		<get_left get="inline" set="null" line="98" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<c path="thx.Tuple2.T0"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_left>
		<get_right get="inline" set="null" line="99" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<c path="thx.Tuple2.T1"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<flip public="1" get="inline" set="null" line="104" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<x path="thx.Tuple2">
					<c path="thx.Tuple2.T1"/>
					<c path="thx.Tuple2.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="111" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<x path="thx.Tuple1"><c path="thx.Tuple2.T1"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="118" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<x path="thx.Tuple1"><c path="thx.Tuple2.T0"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T2" get="inline" set="null" line="125" static="1">
			<f a="this:v">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<c path="with.T2"/>
				<x path="thx.Tuple3">
					<c path="thx.Tuple2.T0"/>
					<c path="thx.Tuple2.T1"/>
					<c path="with.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="131" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<map public="1" params="T2" set="method" line="134" static="1">
			<f a="this:f">
				<a>
					<_1><c path="thx.Tuple2.T1"/></_1>
					<_0><c path="thx.Tuple2.T0"/></_0>
				</a>
				<f a="">
					<c path="thx.Tuple2.T1"/>
					<c path="map.T2"/>
				</f>
				<x path="thx.Tuple2">
					<c path="thx.Tuple2.T0"/>
					<c path="map.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<squeeze public="1" params="T1:T2:R" set="method" line="137" static="1"><f a="f">
	<f a=":">
		<c path="squeeze.T1"/>
		<c path="squeeze.T2"/>
		<c path="squeeze.R"/>
	</f>
	<f a="">
		<x path="thx.Tuple2">
			<c path="squeeze.T1"/>
			<c path="squeeze.T2"/>
		</x>
		<c path="squeeze.R"/>
	</f>
</f></squeeze>
		<arrayToTuple2 public="1" params="T" get="inline" set="null" line="143" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple2.T"/></c>
				<x path="thx.Tuple2">
					<c path="arrayToTuple2.T"/>
					<c path="arrayToTuple2.T"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple2>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple3" params="T0:T1:T2" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><a>
	<_2><c path="thx.Tuple3.T2"/></_2>
	<_1><c path="thx.Tuple3.T1"/></_1>
	<_0><c path="thx.Tuple3.T0"/></_0>
</a></icast>
			<icast field="arrayToTuple3"><c path="Array"><c path="arrayToTuple3.T"/></c></icast>
		</from>
		<this><a>
	<_2><c path="thx.Tuple3.T2"/></_2>
	<_1><c path="thx.Tuple3.T1"/></_1>
	<_0><c path="thx.Tuple3.T0"/></_0>
</a></this>
		<to><icast><a>
	<_2><c path="thx.Tuple3.T2"/></_2>
	<_1><c path="thx.Tuple3.T1"/></_1>
	<_0><c path="thx.Tuple3.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple3` is a tuple with three values. It maps to an anonymous object with fields `_0`, `_1`, and `_2`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
</m></meta>
		<impl><class path="thx._Tuple.Tuple3_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<of public="1" params="T0:T1:T2" get="inline" set="null" line="155" static="1">
		<f a="_0:_1:_2">
			<c path="of.T0"/>
			<c path="of.T1"/>
			<c path="of.T2"/>
			<x path="thx.Tuple3">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
			</x>
		</f>
		<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
	</of>
	<_new public="1" get="inline" set="null" line="161" static="1">
		<f a="_0:_1:_2">
			<c path="thx.Tuple3.T0"/>
			<c path="thx.Tuple3.T1"/>
			<c path="thx.Tuple3.T2"/>
			<x path="thx.Tuple3">
				<c path="thx.Tuple3.T0"/>
				<c path="thx.Tuple3.T1"/>
				<c path="thx.Tuple3.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple3` the 3 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="167" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<x path="thx.Tuple3">
				<c path="thx.Tuple3.T2"/>
				<c path="thx.Tuple3.T1"/>
				<c path="thx.Tuple3.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="174" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<x path="thx.Tuple2">
				<c path="thx.Tuple3.T1"/>
				<c path="thx.Tuple3.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="181" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<x path="thx.Tuple2">
				<c path="thx.Tuple3.T0"/>
				<c path="thx.Tuple3.T1"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T3" get="inline" set="null" line="188" static="1">
		<f a="this:v">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<c path="with.T3"/>
			<x path="thx.Tuple4">
				<c path="thx.Tuple3.T0"/>
				<c path="thx.Tuple3.T1"/>
				<c path="thx.Tuple3.T2"/>
				<c path="with.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="194" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<arrayToTuple3 public="1" params="T" get="inline" set="null" line="197" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple3.T"/></c>
			<x path="thx.Tuple3">
				<c path="arrayToTuple3.T"/>
				<c path="arrayToTuple3.T"/>
				<c path="arrayToTuple3.T"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple3>
	<map public="1" params="T3" set="method" line="200" static="1">
		<f a="this:f">
			<a>
				<_2><c path="thx.Tuple3.T2"/></_2>
				<_1><c path="thx.Tuple3.T1"/></_1>
				<_0><c path="thx.Tuple3.T0"/></_0>
			</a>
			<f a="">
				<c path="thx.Tuple3.T2"/>
				<c path="map.T3"/>
			</f>
			<x path="thx.Tuple3">
				<c path="thx.Tuple3.T0"/>
				<c path="thx.Tuple3.T1"/>
				<c path="map.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple3_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<of public="1" params="T0:T1:T2" get="inline" set="null" line="155" static="1">
			<f a="_0:_1:_2">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<x path="thx.Tuple3">
					<c path="of.T0"/>
					<c path="of.T1"/>
					<c path="of.T2"/>
				</x>
			</f>
			<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
		</of>
		<_new public="1" get="inline" set="null" line="161" static="1">
			<f a="_0:_1:_2">
				<c path="thx.Tuple3.T0"/>
				<c path="thx.Tuple3.T1"/>
				<c path="thx.Tuple3.T2"/>
				<x path="thx.Tuple3">
					<c path="thx.Tuple3.T0"/>
					<c path="thx.Tuple3.T1"/>
					<c path="thx.Tuple3.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple3` the 3 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="167" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<x path="thx.Tuple3">
					<c path="thx.Tuple3.T2"/>
					<c path="thx.Tuple3.T1"/>
					<c path="thx.Tuple3.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="174" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<x path="thx.Tuple2">
					<c path="thx.Tuple3.T1"/>
					<c path="thx.Tuple3.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="181" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<x path="thx.Tuple2">
					<c path="thx.Tuple3.T0"/>
					<c path="thx.Tuple3.T1"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T3" get="inline" set="null" line="188" static="1">
			<f a="this:v">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<c path="with.T3"/>
				<x path="thx.Tuple4">
					<c path="thx.Tuple3.T0"/>
					<c path="thx.Tuple3.T1"/>
					<c path="thx.Tuple3.T2"/>
					<c path="with.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="194" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<arrayToTuple3 public="1" params="T" get="inline" set="null" line="197" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple3.T"/></c>
				<x path="thx.Tuple3">
					<c path="arrayToTuple3.T"/>
					<c path="arrayToTuple3.T"/>
					<c path="arrayToTuple3.T"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple3>
		<map public="1" params="T3" set="method" line="200" static="1">
			<f a="this:f">
				<a>
					<_2><c path="thx.Tuple3.T2"/></_2>
					<_1><c path="thx.Tuple3.T1"/></_1>
					<_0><c path="thx.Tuple3.T0"/></_0>
				</a>
				<f a="">
					<c path="thx.Tuple3.T2"/>
					<c path="map.T3"/>
				</f>
				<x path="thx.Tuple3">
					<c path="thx.Tuple3.T0"/>
					<c path="thx.Tuple3.T1"/>
					<c path="map.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple4" params="T0:T1:T2:T3" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><a>
	<_3><c path="thx.Tuple4.T3"/></_3>
	<_2><c path="thx.Tuple4.T2"/></_2>
	<_1><c path="thx.Tuple4.T1"/></_1>
	<_0><c path="thx.Tuple4.T0"/></_0>
</a></icast>
			<icast field="arrayToTuple4"><c path="Array"><c path="arrayToTuple4.T"/></c></icast>
		</from>
		<this><a>
	<_3><c path="thx.Tuple4.T3"/></_3>
	<_2><c path="thx.Tuple4.T2"/></_2>
	<_1><c path="thx.Tuple4.T1"/></_1>
	<_0><c path="thx.Tuple4.T0"/></_0>
</a></this>
		<to><icast><a>
	<_3><c path="thx.Tuple4.T3"/></_3>
	<_2><c path="thx.Tuple4.T2"/></_2>
	<_1><c path="thx.Tuple4.T1"/></_1>
	<_0><c path="thx.Tuple4.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple4` is a tuple with four values. It maps to an anonymous object with fields `_0`, `_1`, `_2`, and `_3`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
	<e>_3</e>
</m></meta>
		<impl><class path="thx._Tuple.Tuple4_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<of public="1" params="T0:T1:T2:T3" get="inline" set="null" line="212" static="1">
		<f a="_0:_1:_2:_3">
			<c path="of.T0"/>
			<c path="of.T1"/>
			<c path="of.T2"/>
			<c path="of.T3"/>
			<x path="thx.Tuple4">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
			</x>
		</f>
		<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
	</of>
	<_new public="1" get="inline" set="null" line="218" static="1">
		<f a="_0:_1:_2:_3">
			<c path="thx.Tuple4.T0"/>
			<c path="thx.Tuple4.T1"/>
			<c path="thx.Tuple4.T2"/>
			<c path="thx.Tuple4.T3"/>
			<x path="thx.Tuple4">
				<c path="thx.Tuple4.T0"/>
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T2"/>
				<c path="thx.Tuple4.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple4` the 4 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="224" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.Tuple4.T3"/></_3>
				<_2><c path="thx.Tuple4.T2"/></_2>
				<_1><c path="thx.Tuple4.T1"/></_1>
				<_0><c path="thx.Tuple4.T0"/></_0>
			</a>
			<x path="thx.Tuple4">
				<c path="thx.Tuple4.T3"/>
				<c path="thx.Tuple4.T2"/>
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="231" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.Tuple4.T3"/></_3>
				<_2><c path="thx.Tuple4.T2"/></_2>
				<_1><c path="thx.Tuple4.T1"/></_1>
				<_0><c path="thx.Tuple4.T0"/></_0>
			</a>
			<x path="thx.Tuple3">
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T2"/>
				<c path="thx.Tuple4.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="238" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.Tuple4.T3"/></_3>
				<_2><c path="thx.Tuple4.T2"/></_2>
				<_1><c path="thx.Tuple4.T1"/></_1>
				<_0><c path="thx.Tuple4.T0"/></_0>
			</a>
			<x path="thx.Tuple3">
				<c path="thx.Tuple4.T0"/>
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T4" get="inline" set="null" line="245" static="1">
		<f a="this:v">
			<a>
				<_3><c path="thx.Tuple4.T3"/></_3>
				<_2><c path="thx.Tuple4.T2"/></_2>
				<_1><c path="thx.Tuple4.T1"/></_1>
				<_0><c path="thx.Tuple4.T0"/></_0>
			</a>
			<c path="with.T4"/>
			<x path="thx.Tuple5">
				<c path="thx.Tuple4.T0"/>
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T2"/>
				<c path="thx.Tuple4.T3"/>
				<c path="with.T4"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="251" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.Tuple4.T3"/></_3>
				<_2><c path="thx.Tuple4.T2"/></_2>
				<_1><c path="thx.Tuple4.T1"/></_1>
				<_0><c path="thx.Tuple4.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<arrayToTuple4 public="1" params="T" get="inline" set="null" line="254" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple4.T"/></c>
			<x path="thx.Tuple4">
				<c path="arrayToTuple4.T"/>
				<c path="arrayToTuple4.T"/>
				<c path="arrayToTuple4.T"/>
				<c path="arrayToTuple4.T"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple4>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple4_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<of public="1" params="T0:T1:T2:T3" get="inline" set="null" line="212" static="1">
			<f a="_0:_1:_2:_3">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
				<x path="thx.Tuple4">
					<c path="of.T0"/>
					<c path="of.T1"/>
					<c path="of.T2"/>
					<c path="of.T3"/>
				</x>
			</f>
			<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
		</of>
		<_new public="1" get="inline" set="null" line="218" static="1">
			<f a="_0:_1:_2:_3">
				<c path="thx.Tuple4.T0"/>
				<c path="thx.Tuple4.T1"/>
				<c path="thx.Tuple4.T2"/>
				<c path="thx.Tuple4.T3"/>
				<x path="thx.Tuple4">
					<c path="thx.Tuple4.T0"/>
					<c path="thx.Tuple4.T1"/>
					<c path="thx.Tuple4.T2"/>
					<c path="thx.Tuple4.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple4` the 4 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="224" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.Tuple4.T3"/></_3>
					<_2><c path="thx.Tuple4.T2"/></_2>
					<_1><c path="thx.Tuple4.T1"/></_1>
					<_0><c path="thx.Tuple4.T0"/></_0>
				</a>
				<x path="thx.Tuple4">
					<c path="thx.Tuple4.T3"/>
					<c path="thx.Tuple4.T2"/>
					<c path="thx.Tuple4.T1"/>
					<c path="thx.Tuple4.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="231" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.Tuple4.T3"/></_3>
					<_2><c path="thx.Tuple4.T2"/></_2>
					<_1><c path="thx.Tuple4.T1"/></_1>
					<_0><c path="thx.Tuple4.T0"/></_0>
				</a>
				<x path="thx.Tuple3">
					<c path="thx.Tuple4.T1"/>
					<c path="thx.Tuple4.T2"/>
					<c path="thx.Tuple4.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="238" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.Tuple4.T3"/></_3>
					<_2><c path="thx.Tuple4.T2"/></_2>
					<_1><c path="thx.Tuple4.T1"/></_1>
					<_0><c path="thx.Tuple4.T0"/></_0>
				</a>
				<x path="thx.Tuple3">
					<c path="thx.Tuple4.T0"/>
					<c path="thx.Tuple4.T1"/>
					<c path="thx.Tuple4.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T4" get="inline" set="null" line="245" static="1">
			<f a="this:v">
				<a>
					<_3><c path="thx.Tuple4.T3"/></_3>
					<_2><c path="thx.Tuple4.T2"/></_2>
					<_1><c path="thx.Tuple4.T1"/></_1>
					<_0><c path="thx.Tuple4.T0"/></_0>
				</a>
				<c path="with.T4"/>
				<x path="thx.Tuple5">
					<c path="thx.Tuple4.T0"/>
					<c path="thx.Tuple4.T1"/>
					<c path="thx.Tuple4.T2"/>
					<c path="thx.Tuple4.T3"/>
					<c path="with.T4"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="251" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.Tuple4.T3"/></_3>
					<_2><c path="thx.Tuple4.T2"/></_2>
					<_1><c path="thx.Tuple4.T1"/></_1>
					<_0><c path="thx.Tuple4.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<arrayToTuple4 public="1" params="T" get="inline" set="null" line="254" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple4.T"/></c>
				<x path="thx.Tuple4">
					<c path="arrayToTuple4.T"/>
					<c path="arrayToTuple4.T"/>
					<c path="arrayToTuple4.T"/>
					<c path="arrayToTuple4.T"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple4>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple5" params="T0:T1:T2:T3:T4" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><a>
	<_4><c path="thx.Tuple5.T4"/></_4>
	<_3><c path="thx.Tuple5.T3"/></_3>
	<_2><c path="thx.Tuple5.T2"/></_2>
	<_1><c path="thx.Tuple5.T1"/></_1>
	<_0><c path="thx.Tuple5.T0"/></_0>
</a></icast>
			<icast field="arrayToTuple5"><c path="Array"><c path="arrayToTuple5.T"/></c></icast>
		</from>
		<this><a>
	<_4><c path="thx.Tuple5.T4"/></_4>
	<_3><c path="thx.Tuple5.T3"/></_3>
	<_2><c path="thx.Tuple5.T2"/></_2>
	<_1><c path="thx.Tuple5.T1"/></_1>
	<_0><c path="thx.Tuple5.T0"/></_0>
</a></this>
		<to><icast><a>
	<_4><c path="thx.Tuple5.T4"/></_4>
	<_3><c path="thx.Tuple5.T3"/></_3>
	<_2><c path="thx.Tuple5.T2"/></_2>
	<_1><c path="thx.Tuple5.T1"/></_1>
	<_0><c path="thx.Tuple5.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple5` is a tuple with five values. It maps to an anonymous object with fields `_0`, `_1`, `_2`, `_4`, and `_5`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
	<e>_3</e>
	<e>_4</e>
</m></meta>
		<impl><class path="thx._Tuple.Tuple5_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<of public="1" params="T0:T1:T2:T3:T4" get="inline" set="null" line="266" static="1">
		<f a="_0:_1:_2:_3:_4">
			<c path="of.T0"/>
			<c path="of.T1"/>
			<c path="of.T2"/>
			<c path="of.T3"/>
			<c path="of.T4"/>
			<x path="thx.Tuple5">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
				<c path="of.T4"/>
			</x>
		</f>
		<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
	</of>
	<_new public="1" get="inline" set="null" line="272" static="1">
		<f a="_0:_1:_2:_3:_4">
			<c path="thx.Tuple5.T0"/>
			<c path="thx.Tuple5.T1"/>
			<c path="thx.Tuple5.T2"/>
			<c path="thx.Tuple5.T3"/>
			<c path="thx.Tuple5.T4"/>
			<x path="thx.Tuple5">
				<c path="thx.Tuple5.T0"/>
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T3"/>
				<c path="thx.Tuple5.T4"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple5` the 5 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="278" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.Tuple5.T4"/></_4>
				<_3><c path="thx.Tuple5.T3"/></_3>
				<_2><c path="thx.Tuple5.T2"/></_2>
				<_1><c path="thx.Tuple5.T1"/></_1>
				<_0><c path="thx.Tuple5.T0"/></_0>
			</a>
			<x path="thx.Tuple5">
				<c path="thx.Tuple5.T4"/>
				<c path="thx.Tuple5.T3"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="285" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.Tuple5.T4"/></_4>
				<_3><c path="thx.Tuple5.T3"/></_3>
				<_2><c path="thx.Tuple5.T2"/></_2>
				<_1><c path="thx.Tuple5.T1"/></_1>
				<_0><c path="thx.Tuple5.T0"/></_0>
			</a>
			<x path="thx.Tuple4">
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T3"/>
				<c path="thx.Tuple5.T4"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="292" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.Tuple5.T4"/></_4>
				<_3><c path="thx.Tuple5.T3"/></_3>
				<_2><c path="thx.Tuple5.T2"/></_2>
				<_1><c path="thx.Tuple5.T1"/></_1>
				<_0><c path="thx.Tuple5.T0"/></_0>
			</a>
			<x path="thx.Tuple4">
				<c path="thx.Tuple5.T0"/>
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T5" get="inline" set="null" line="299" static="1">
		<f a="this:v">
			<a>
				<_4><c path="thx.Tuple5.T4"/></_4>
				<_3><c path="thx.Tuple5.T3"/></_3>
				<_2><c path="thx.Tuple5.T2"/></_2>
				<_1><c path="thx.Tuple5.T1"/></_1>
				<_0><c path="thx.Tuple5.T0"/></_0>
			</a>
			<c path="with.T5"/>
			<x path="thx.Tuple6">
				<c path="thx.Tuple5.T0"/>
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T3"/>
				<c path="thx.Tuple5.T4"/>
				<c path="with.T5"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="305" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.Tuple5.T4"/></_4>
				<_3><c path="thx.Tuple5.T3"/></_3>
				<_2><c path="thx.Tuple5.T2"/></_2>
				<_1><c path="thx.Tuple5.T1"/></_1>
				<_0><c path="thx.Tuple5.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<arrayToTuple5 public="1" params="T" get="inline" set="null" line="308" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple5.T"/></c>
			<x path="thx.Tuple5">
				<c path="arrayToTuple5.T"/>
				<c path="arrayToTuple5.T"/>
				<c path="arrayToTuple5.T"/>
				<c path="arrayToTuple5.T"/>
				<c path="arrayToTuple5.T"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple5>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple5_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<of public="1" params="T0:T1:T2:T3:T4" get="inline" set="null" line="266" static="1">
			<f a="_0:_1:_2:_3:_4">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
				<c path="of.T4"/>
				<x path="thx.Tuple5">
					<c path="of.T0"/>
					<c path="of.T1"/>
					<c path="of.T2"/>
					<c path="of.T3"/>
					<c path="of.T4"/>
				</x>
			</f>
			<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
		</of>
		<_new public="1" get="inline" set="null" line="272" static="1">
			<f a="_0:_1:_2:_3:_4">
				<c path="thx.Tuple5.T0"/>
				<c path="thx.Tuple5.T1"/>
				<c path="thx.Tuple5.T2"/>
				<c path="thx.Tuple5.T3"/>
				<c path="thx.Tuple5.T4"/>
				<x path="thx.Tuple5">
					<c path="thx.Tuple5.T0"/>
					<c path="thx.Tuple5.T1"/>
					<c path="thx.Tuple5.T2"/>
					<c path="thx.Tuple5.T3"/>
					<c path="thx.Tuple5.T4"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple5` the 5 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="278" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.Tuple5.T4"/></_4>
					<_3><c path="thx.Tuple5.T3"/></_3>
					<_2><c path="thx.Tuple5.T2"/></_2>
					<_1><c path="thx.Tuple5.T1"/></_1>
					<_0><c path="thx.Tuple5.T0"/></_0>
				</a>
				<x path="thx.Tuple5">
					<c path="thx.Tuple5.T4"/>
					<c path="thx.Tuple5.T3"/>
					<c path="thx.Tuple5.T2"/>
					<c path="thx.Tuple5.T1"/>
					<c path="thx.Tuple5.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="285" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.Tuple5.T4"/></_4>
					<_3><c path="thx.Tuple5.T3"/></_3>
					<_2><c path="thx.Tuple5.T2"/></_2>
					<_1><c path="thx.Tuple5.T1"/></_1>
					<_0><c path="thx.Tuple5.T0"/></_0>
				</a>
				<x path="thx.Tuple4">
					<c path="thx.Tuple5.T1"/>
					<c path="thx.Tuple5.T2"/>
					<c path="thx.Tuple5.T3"/>
					<c path="thx.Tuple5.T4"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="292" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.Tuple5.T4"/></_4>
					<_3><c path="thx.Tuple5.T3"/></_3>
					<_2><c path="thx.Tuple5.T2"/></_2>
					<_1><c path="thx.Tuple5.T1"/></_1>
					<_0><c path="thx.Tuple5.T0"/></_0>
				</a>
				<x path="thx.Tuple4">
					<c path="thx.Tuple5.T0"/>
					<c path="thx.Tuple5.T1"/>
					<c path="thx.Tuple5.T2"/>
					<c path="thx.Tuple5.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T5" get="inline" set="null" line="299" static="1">
			<f a="this:v">
				<a>
					<_4><c path="thx.Tuple5.T4"/></_4>
					<_3><c path="thx.Tuple5.T3"/></_3>
					<_2><c path="thx.Tuple5.T2"/></_2>
					<_1><c path="thx.Tuple5.T1"/></_1>
					<_0><c path="thx.Tuple5.T0"/></_0>
				</a>
				<c path="with.T5"/>
				<x path="thx.Tuple6">
					<c path="thx.Tuple5.T0"/>
					<c path="thx.Tuple5.T1"/>
					<c path="thx.Tuple5.T2"/>
					<c path="thx.Tuple5.T3"/>
					<c path="thx.Tuple5.T4"/>
					<c path="with.T5"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="305" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.Tuple5.T4"/></_4>
					<_3><c path="thx.Tuple5.T3"/></_3>
					<_2><c path="thx.Tuple5.T2"/></_2>
					<_1><c path="thx.Tuple5.T1"/></_1>
					<_0><c path="thx.Tuple5.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<arrayToTuple5 public="1" params="T" get="inline" set="null" line="308" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple5.T"/></c>
				<x path="thx.Tuple5">
					<c path="arrayToTuple5.T"/>
					<c path="arrayToTuple5.T"/>
					<c path="arrayToTuple5.T"/>
					<c path="arrayToTuple5.T"/>
					<c path="arrayToTuple5.T"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple5>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="thx.Tuple6" params="T0:T1:T2:T3:T4:T5" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" module="thx.Tuple">
		<from>
			<icast><a>
	<_5><c path="thx.Tuple6.T5"/></_5>
	<_4><c path="thx.Tuple6.T4"/></_4>
	<_3><c path="thx.Tuple6.T3"/></_3>
	<_2><c path="thx.Tuple6.T2"/></_2>
	<_1><c path="thx.Tuple6.T1"/></_1>
	<_0><c path="thx.Tuple6.T0"/></_0>
</a></icast>
			<icast field="arrayToTuple6"><c path="Array"><c path="arrayToTuple6.T"/></c></icast>
		</from>
		<this><a>
	<_5><c path="thx.Tuple6.T5"/></_5>
	<_4><c path="thx.Tuple6.T4"/></_4>
	<_3><c path="thx.Tuple6.T3"/></_3>
	<_2><c path="thx.Tuple6.T2"/></_2>
	<_1><c path="thx.Tuple6.T1"/></_1>
	<_0><c path="thx.Tuple6.T0"/></_0>
</a></this>
		<to><icast><a>
	<_5><c path="thx.Tuple6.T5"/></_5>
	<_4><c path="thx.Tuple6.T4"/></_4>
	<_3><c path="thx.Tuple6.T3"/></_3>
	<_2><c path="thx.Tuple6.T2"/></_2>
	<_1><c path="thx.Tuple6.T1"/></_1>
	<_0><c path="thx.Tuple6.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple6` is a tuple with size values. It maps to an anonymous object with fields `_0`, `_1`, `_2`, `_4`, `_5`, and `_6`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
	<e>_3</e>
	<e>_4</e>
	<e>_5</e>
</m></meta>
		<impl><class path="thx._Tuple.Tuple6_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
	<of public="1" params="T0:T1:T2:T3:T4:T5" get="inline" set="null" line="320" static="1">
		<f a="_0:_1:_2:_3:_4:_5">
			<c path="of.T0"/>
			<c path="of.T1"/>
			<c path="of.T2"/>
			<c path="of.T3"/>
			<c path="of.T4"/>
			<c path="of.T5"/>
			<x path="thx.Tuple6">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
				<c path="of.T4"/>
				<c path="of.T5"/>
			</x>
		</f>
		<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
	</of>
	<_new public="1" get="inline" set="null" line="326" static="1">
		<f a="_0:_1:_2:_3:_4:_5">
			<c path="thx.Tuple6.T0"/>
			<c path="thx.Tuple6.T1"/>
			<c path="thx.Tuple6.T2"/>
			<c path="thx.Tuple6.T3"/>
			<c path="thx.Tuple6.T4"/>
			<c path="thx.Tuple6.T5"/>
			<x path="thx.Tuple6">
				<c path="thx.Tuple6.T0"/>
				<c path="thx.Tuple6.T1"/>
				<c path="thx.Tuple6.T2"/>
				<c path="thx.Tuple6.T3"/>
				<c path="thx.Tuple6.T4"/>
				<c path="thx.Tuple6.T5"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple6` the 6 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="332" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.Tuple6.T5"/></_5>
				<_4><c path="thx.Tuple6.T4"/></_4>
				<_3><c path="thx.Tuple6.T3"/></_3>
				<_2><c path="thx.Tuple6.T2"/></_2>
				<_1><c path="thx.Tuple6.T1"/></_1>
				<_0><c path="thx.Tuple6.T0"/></_0>
			</a>
			<x path="thx.Tuple6">
				<c path="thx.Tuple6.T5"/>
				<c path="thx.Tuple6.T4"/>
				<c path="thx.Tuple6.T3"/>
				<c path="thx.Tuple6.T2"/>
				<c path="thx.Tuple6.T1"/>
				<c path="thx.Tuple6.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="339" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.Tuple6.T5"/></_5>
				<_4><c path="thx.Tuple6.T4"/></_4>
				<_3><c path="thx.Tuple6.T3"/></_3>
				<_2><c path="thx.Tuple6.T2"/></_2>
				<_1><c path="thx.Tuple6.T1"/></_1>
				<_0><c path="thx.Tuple6.T0"/></_0>
			</a>
			<x path="thx.Tuple5">
				<c path="thx.Tuple6.T1"/>
				<c path="thx.Tuple6.T2"/>
				<c path="thx.Tuple6.T3"/>
				<c path="thx.Tuple6.T4"/>
				<c path="thx.Tuple6.T5"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="346" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.Tuple6.T5"/></_5>
				<_4><c path="thx.Tuple6.T4"/></_4>
				<_3><c path="thx.Tuple6.T3"/></_3>
				<_2><c path="thx.Tuple6.T2"/></_2>
				<_1><c path="thx.Tuple6.T1"/></_1>
				<_0><c path="thx.Tuple6.T0"/></_0>
			</a>
			<x path="thx.Tuple5">
				<c path="thx.Tuple6.T0"/>
				<c path="thx.Tuple6.T1"/>
				<c path="thx.Tuple6.T2"/>
				<c path="thx.Tuple6.T3"/>
				<c path="thx.Tuple6.T4"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<toString public="1" get="inline" set="null" line="352" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.Tuple6.T5"/></_5>
				<_4><c path="thx.Tuple6.T4"/></_4>
				<_3><c path="thx.Tuple6.T3"/></_3>
				<_2><c path="thx.Tuple6.T2"/></_2>
				<_1><c path="thx.Tuple6.T1"/></_1>
				<_0><c path="thx.Tuple6.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<arrayToTuple6 public="1" params="T" get="inline" set="null" line="355" static="1">
		<f a="v">
			<c path="Array"><c path="arrayToTuple6.T"/></c>
			<x path="thx.Tuple6">
				<c path="arrayToTuple6.T"/>
				<c path="arrayToTuple6.T"/>
				<c path="arrayToTuple6.T"/>
				<c path="arrayToTuple6.T"/>
				<c path="arrayToTuple6.T"/>
				<c path="arrayToTuple6.T"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</arrayToTuple6>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Tuple.Tuple6_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Tuple.hx" private="1" module="thx.Tuple">
		<of public="1" params="T0:T1:T2:T3:T4:T5" get="inline" set="null" line="320" static="1">
			<f a="_0:_1:_2:_3:_4:_5">
				<c path="of.T0"/>
				<c path="of.T1"/>
				<c path="of.T2"/>
				<c path="of.T3"/>
				<c path="of.T4"/>
				<c path="of.T5"/>
				<x path="thx.Tuple6">
					<c path="of.T0"/>
					<c path="of.T1"/>
					<c path="of.T2"/>
					<c path="of.T3"/>
					<c path="of.T4"/>
					<c path="of.T5"/>
				</x>
			</f>
			<haxe_doc>Static constructor, required to work around Haxe compiler bug.</haxe_doc>
		</of>
		<_new public="1" get="inline" set="null" line="326" static="1">
			<f a="_0:_1:_2:_3:_4:_5">
				<c path="thx.Tuple6.T0"/>
				<c path="thx.Tuple6.T1"/>
				<c path="thx.Tuple6.T2"/>
				<c path="thx.Tuple6.T3"/>
				<c path="thx.Tuple6.T4"/>
				<c path="thx.Tuple6.T5"/>
				<x path="thx.Tuple6">
					<c path="thx.Tuple6.T0"/>
					<c path="thx.Tuple6.T1"/>
					<c path="thx.Tuple6.T2"/>
					<c path="thx.Tuple6.T3"/>
					<c path="thx.Tuple6.T4"/>
					<c path="thx.Tuple6.T5"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple6` the 6 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="332" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.Tuple6.T5"/></_5>
					<_4><c path="thx.Tuple6.T4"/></_4>
					<_3><c path="thx.Tuple6.T3"/></_3>
					<_2><c path="thx.Tuple6.T2"/></_2>
					<_1><c path="thx.Tuple6.T1"/></_1>
					<_0><c path="thx.Tuple6.T0"/></_0>
				</a>
				<x path="thx.Tuple6">
					<c path="thx.Tuple6.T5"/>
					<c path="thx.Tuple6.T4"/>
					<c path="thx.Tuple6.T3"/>
					<c path="thx.Tuple6.T2"/>
					<c path="thx.Tuple6.T1"/>
					<c path="thx.Tuple6.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="339" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.Tuple6.T5"/></_5>
					<_4><c path="thx.Tuple6.T4"/></_4>
					<_3><c path="thx.Tuple6.T3"/></_3>
					<_2><c path="thx.Tuple6.T2"/></_2>
					<_1><c path="thx.Tuple6.T1"/></_1>
					<_0><c path="thx.Tuple6.T0"/></_0>
				</a>
				<x path="thx.Tuple5">
					<c path="thx.Tuple6.T1"/>
					<c path="thx.Tuple6.T2"/>
					<c path="thx.Tuple6.T3"/>
					<c path="thx.Tuple6.T4"/>
					<c path="thx.Tuple6.T5"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="346" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.Tuple6.T5"/></_5>
					<_4><c path="thx.Tuple6.T4"/></_4>
					<_3><c path="thx.Tuple6.T3"/></_3>
					<_2><c path="thx.Tuple6.T2"/></_2>
					<_1><c path="thx.Tuple6.T1"/></_1>
					<_0><c path="thx.Tuple6.T0"/></_0>
				</a>
				<x path="thx.Tuple5">
					<c path="thx.Tuple6.T0"/>
					<c path="thx.Tuple6.T1"/>
					<c path="thx.Tuple6.T2"/>
					<c path="thx.Tuple6.T3"/>
					<c path="thx.Tuple6.T4"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<toString public="1" get="inline" set="null" line="352" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.Tuple6.T5"/></_5>
					<_4><c path="thx.Tuple6.T4"/></_4>
					<_3><c path="thx.Tuple6.T3"/></_3>
					<_2><c path="thx.Tuple6.T2"/></_2>
					<_1><c path="thx.Tuple6.T1"/></_1>
					<_0><c path="thx.Tuple6.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<arrayToTuple6 public="1" params="T" get="inline" set="null" line="355" static="1">
			<f a="v">
				<c path="Array"><c path="arrayToTuple6.T"/></c>
				<x path="thx.Tuple6">
					<c path="arrayToTuple6.T"/>
					<c path="arrayToTuple6.T"/>
					<c path="arrayToTuple6.T"/>
					<c path="arrayToTuple6.T"/>
					<c path="arrayToTuple6.T"/>
					<c path="arrayToTuple6.T"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</arrayToTuple6>
		<meta><m n=":final"/></meta>
	</class>
	<class path="thx.Types" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Types.hx">
		<isAnonymousObject public="1" get="inline" set="null" line="10" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isAnonymousObject` returns true if `v` is an object and it is not an instance of any custom class.</haxe_doc>
		</isAnonymousObject>
		<isObject public="1" set="method" line="16" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed value is an anonymous object or class instance but it is not any of the primitive types.</haxe_doc>
		</isObject>
		<isPrimitive public="1" set="method" line="22" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `v` is any of the following types: Int, Float, Bool, Date or String.</haxe_doc>
		</isPrimitive>
		<isEnumValue public="1" set="method" line="34" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `v` is an instance of any Enum type.</haxe_doc>
		</isEnumValue>
		<hasSuperClass public="1" set="method" line="45" static="1">
			<f a="cls:sup">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `cls` extends `sup` or one of its children.

It also returns `true` if `cls` and `sup` are the same.</haxe_doc>
		</hasSuperClass>
		<sameType public="1" params="A:B" set="method" line="57" static="1">
			<f a="a:b">
				<c path="sameType.A"/>
				<c path="sameType.B"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`sameType` returns true if the arguments `a` and `b` share exactly the same type.</haxe_doc>
		</sameType>
		<typeInheritance public="1" set="method" line="64" static="1">
			<f a="type">
				<e path="ValueType"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>`typeInheritance` returns an array of string describing the entire inheritance
chain of the passed `ValueType`.</haxe_doc>
		</typeInheritance>
		<toString public="1" set="method" line="86" static="1">
			<f a="type">
				<e path="ValueType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of a `ValueType`.</haxe_doc>
		</toString>
		<valueTypeInheritance public="1" params="T" get="inline" set="null" line="104" static="1">
			<f a="value">
				<c path="valueTypeInheritance.T"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>`valueTypeInheritance` returns an array of string describing the entire inheritance
chain of the passed `value`.</haxe_doc>
		</valueTypeInheritance>
		<valueTypeToString public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="value">
				<c path="valueTypeToString.T"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string describing the type of any `value`.</haxe_doc>
		</valueTypeToString>
		<anyValueToString public="1" get="inline" set="null" line="116" static="1">
			<f a="value">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string describing the type of any `value`.</haxe_doc>
		</anyValueToString>
		<haxe_doc>Helper methods to use on values, types and classes.</haxe_doc>
	</class>
	<typedef path="thx.VNel" params="E:A" file="/Users/francoponticelli/projects/thx.core/src/thx/Validation.hx" module="thx.Validation"><x path="thx.Validation">
	<x path="thx.Nel"><c path="thx.VNel.E"/></x>
	<c path="thx.VNel.A"/>
</x></typedef>
	<abstract path="thx.Validation" params="E:A" file="/Users/francoponticelli/projects/thx.core/src/thx/Validation.hx">
		<from><icast><e path="thx.Either">
	<c path="thx.Validation.E"/>
	<c path="thx.Validation.A"/>
</e></icast></from>
		<this><e path="thx.Either">
	<c path="thx.Validation.E"/>
	<c path="thx.Validation.A"/>
</e></this>
		<haxe_doc>* A right-biased disjunctive type with applicative functor requiring a semigroup
 * on the left type. This is useful for composing validation functions.</haxe_doc>
		<impl><class path="thx._Validation.Validation_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Validation.hx" private="1" module="thx.Validation">
	<validation public="1" params="E:A" get="inline" set="null" line="16" static="1"><f a="e">
	<e path="thx.Either">
		<c path="validation.E"/>
		<c path="validation.A"/>
	</e>
	<x path="thx.Validation">
		<c path="validation.E"/>
		<c path="validation.A"/>
	</x>
</f></validation>
	<vnel public="1" params="E:A" get="inline" set="null" line="19" static="1"><f a="e">
	<e path="thx.Either">
		<x path="thx.Nel"><c path="vnel.E"/></x>
		<c path="vnel.A"/>
	</e>
	<t path="thx.VNel">
		<c path="vnel.E"/>
		<c path="vnel.A"/>
	</t>
</f></vnel>
	<liftVNel public="1" params="E:A" set="method" line="22" static="1"><f a="e">
	<e path="thx.Either">
		<c path="liftVNel.E"/>
		<c path="liftVNel.A"/>
	</e>
	<t path="thx.VNel">
		<c path="liftVNel.E"/>
		<c path="liftVNel.A"/>
	</t>
</f></liftVNel>
	<pure public="1" params="E:A" get="inline" set="null" line="25" static="1"><f a="a">
	<c path="pure.A"/>
	<x path="thx.Validation">
		<c path="pure.E"/>
		<c path="pure.A"/>
	</x>
</f></pure>
	<success public="1" params="E:A" get="inline" set="null" line="28" static="1"><f a="a">
	<c path="success.A"/>
	<x path="thx.Validation">
		<c path="success.E"/>
		<c path="success.A"/>
	</x>
</f></success>
	<failure public="1" params="E:A" get="inline" set="null" line="31" static="1"><f a="e">
	<c path="failure.E"/>
	<x path="thx.Validation">
		<c path="failure.E"/>
		<c path="failure.A"/>
	</x>
</f></failure>
	<nn public="1" params="E:A" get="inline" set="null" line="35" static="1"><f a="a:e">
	<t path="Null"><c path="nn.A"/></t>
	<c path="nn.E"/>
	<x path="thx.Validation">
		<c path="nn.E"/>
		<c path="nn.A"/>
	</x>
</f></nn>
	<successNel public="1" params="E:A" get="inline" set="null" line="38" static="1"><f a="a">
	<c path="successNel.A"/>
	<t path="thx.VNel">
		<c path="successNel.E"/>
		<c path="successNel.A"/>
	</t>
</f></successNel>
	<failureNel public="1" params="E:A" get="inline" set="null" line="41" static="1"><f a="e">
	<c path="failureNel.E"/>
	<t path="thx.VNel">
		<c path="failureNel.E"/>
		<c path="failureNel.A"/>
	</t>
</f></failureNel>
	<nnNel public="1" params="E:A" get="inline" set="null" line="45" static="1"><f a="a:e">
	<t path="Null"><c path="nnNel.A"/></t>
	<c path="nnNel.E"/>
	<t path="thx.VNel">
		<c path="nnNel.E"/>
		<c path="nnNel.A"/>
	</t>
</f></nnNel>
	<either public="1" get="accessor" set="null" static="1">
		<e path="thx.Either">
			<c path="thx.Validation.E"/>
			<c path="thx.Validation.A"/>
		</e>
		<meta><m n=":impl"/></meta>
	</either>
	<get_either public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
		</f>
		<meta><m n=":impl"/></meta>
	</get_either>
	<map public="1" params="B" set="method" line="52" static="1">
		<f a="this:f">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<f a="">
				<c path="thx.Validation.A"/>
				<c path="map.B"/>
			</f>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<c path="map.B"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<foldLeft public="1" params="B" set="method" line="55" static="1">
		<f a="this:b:f">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<c path="foldLeft.B"/>
			<f a=":">
				<c path="foldLeft.B"/>
				<c path="thx.Validation.A"/>
				<c path="foldLeft.B"/>
			</f>
			<c path="foldLeft.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</foldLeft>
	<foldMap public="1" params="B" set="method" line="64" static="1">
		<f a="this:f:m">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<f a="">
				<c path="thx.Validation.A"/>
				<c path="foldMap.B"/>
			</f>
			<x path="thx.Monoid"><c path="foldMap.B"/></x>
			<c path="foldMap.B"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Fold by mapping the contained value into some monoidal type and reducing with that monoid.</haxe_doc>
	</foldMap>
	<ap public="1" params="B" set="method" line="67" static="1">
		<f a="this:v:s">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<f a="">
					<c path="thx.Validation.A"/>
					<c path="ap.B"/>
				</f>
			</x>
			<x path="thx.Semigroup"><c path="thx.Validation.E"/></x>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<c path="ap.B"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</ap>
	<zip public="1" params="B" get="inline" set="null" line="81" static="1">
		<f a="this:v:s">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<c path="zip.B"/>
			</x>
			<x path="thx.Semigroup"><c path="thx.Validation.E"/></x>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<x path="thx.Tuple2">
					<c path="thx.Validation.A"/>
					<c path="zip.B"/>
				</x>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</zip>
	<leftMap public="1" params="E0" get="inline" set="null" line="84" static="1">
		<f a="this:f">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<f a="">
				<c path="thx.Validation.E"/>
				<c path="leftMap.E0"/>
			</f>
			<x path="thx.Validation">
				<c path="leftMap.E0"/>
				<c path="thx.Validation.A"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</leftMap>
	<wrapNel public="1" get="inline" set="null" line="87" static="1">
		<f a="this">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<t path="thx.VNel">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
	</wrapNel>
	<ensure public="1" set="method" line="90" static="1">
		<f a="this:p:error">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<f a="">
				<c path="thx.Validation.A"/>
				<x path="Bool"/>
			</f>
			<c path="thx.Validation.E"/>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</ensure>
	<flatMapV public="1" params="B" get="inline" set="null" line="99" static="1">
		<f a="this:f">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<f a="">
				<c path="thx.Validation.A"/>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="flatMapV.B"/>
				</x>
			</f>
			<x path="thx.Validation">
				<c path="thx.Validation.E"/>
				<c path="flatMapV.B"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</flatMapV>
	<val2 public="1" params="X:A:B:C" get="inline" set="null" line="106" static="1"><f a="f:v1:v2:s">
	<f a=":">
		<c path="val2.A"/>
		<c path="val2.B"/>
		<c path="val2.C"/>
	</f>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.B"/>
	</x>
	<x path="thx.Semigroup"><c path="val2.X"/></x>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.C"/>
	</x>
</f></val2>
	<val3 public="1" params="X:A:B:C:D" get="inline" set="null" line="109" static="1"><f a="f:v1:v2:v3:s">
	<f a="::">
		<c path="val3.A"/>
		<c path="val3.B"/>
		<c path="val3.C"/>
		<c path="val3.D"/>
	</f>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.C"/>
	</x>
	<x path="thx.Semigroup"><c path="val3.X"/></x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.D"/>
	</x>
</f></val3>
	<val4 public="1" params="X:A:B:C:D:E" get="inline" set="null" line="112" static="1"><f a="f:v1:v2:v3:v4:s">
	<f a=":::">
		<c path="val4.A"/>
		<c path="val4.B"/>
		<c path="val4.C"/>
		<c path="val4.D"/>
		<c path="val4.E"/>
	</f>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.D"/>
	</x>
	<x path="thx.Semigroup"><c path="val4.X"/></x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.E"/>
	</x>
</f></val4>
	<val5 public="1" params="X:A:B:C:D:E:F" get="inline" set="null" line="118" static="1"><f a="f:v1:v2:v3:v4:v5:s">
	<f a="::::">
		<c path="val5.A"/>
		<c path="val5.B"/>
		<c path="val5.C"/>
		<c path="val5.D"/>
		<c path="val5.E"/>
		<c path="val5.F"/>
	</f>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.E"/>
	</x>
	<x path="thx.Semigroup"><c path="val5.X"/></x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.F"/>
	</x>
</f></val5>
	<val6 public="1" params="X:A:B:C:D:E:F:G" get="inline" set="null" line="124" static="1"><f a="f:v1:v2:v3:v4:v5:v6:s">
	<f a=":::::">
		<c path="val6.A"/>
		<c path="val6.B"/>
		<c path="val6.C"/>
		<c path="val6.D"/>
		<c path="val6.E"/>
		<c path="val6.F"/>
		<c path="val6.G"/>
	</f>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.F"/>
	</x>
	<x path="thx.Semigroup"><c path="val6.X"/></x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.G"/>
	</x>
</f></val6>
	<val7 public="1" params="X:A:B:C:D:E:F:G:H" get="inline" set="null" line="130" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:s">
	<f a="::::::">
		<c path="val7.A"/>
		<c path="val7.B"/>
		<c path="val7.C"/>
		<c path="val7.D"/>
		<c path="val7.E"/>
		<c path="val7.F"/>
		<c path="val7.G"/>
		<c path="val7.H"/>
	</f>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.G"/>
	</x>
	<x path="thx.Semigroup"><c path="val7.X"/></x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.H"/>
	</x>
</f></val7>
	<val8 public="1" params="X:A:B:C:D:E:F:G:H:I" get="inline" set="null" line="136" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:s">
	<f a=":::::::">
		<c path="val8.A"/>
		<c path="val8.B"/>
		<c path="val8.C"/>
		<c path="val8.D"/>
		<c path="val8.E"/>
		<c path="val8.F"/>
		<c path="val8.G"/>
		<c path="val8.H"/>
		<c path="val8.I"/>
	</f>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.H"/>
	</x>
	<x path="thx.Semigroup"><c path="val8.X"/></x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.I"/>
	</x>
</f></val8>
	<val9 public="1" params="X:A:B:C:D:E:F:G:H:I:J" get="inline" set="null" line="142" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:s">
	<f a="::::::::">
		<c path="val9.A"/>
		<c path="val9.B"/>
		<c path="val9.C"/>
		<c path="val9.D"/>
		<c path="val9.E"/>
		<c path="val9.F"/>
		<c path="val9.G"/>
		<c path="val9.H"/>
		<c path="val9.I"/>
		<c path="val9.J"/>
	</f>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.I"/>
	</x>
	<x path="thx.Semigroup"><c path="val9.X"/></x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.J"/>
	</x>
</f></val9>
	<val10 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K" get="inline" set="null" line="148" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:s">
	<f a=":::::::::">
		<c path="val10.A"/>
		<c path="val10.B"/>
		<c path="val10.C"/>
		<c path="val10.D"/>
		<c path="val10.E"/>
		<c path="val10.F"/>
		<c path="val10.G"/>
		<c path="val10.H"/>
		<c path="val10.I"/>
		<c path="val10.J"/>
		<c path="val10.K"/>
	</f>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.J"/>
	</x>
	<x path="thx.Semigroup"><c path="val10.X"/></x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.K"/>
	</x>
</f></val10>
	<val11 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K:L" get="inline" set="null" line="154" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:v11:s">
	<f a="::::::::::">
		<c path="val11.A"/>
		<c path="val11.B"/>
		<c path="val11.C"/>
		<c path="val11.D"/>
		<c path="val11.E"/>
		<c path="val11.F"/>
		<c path="val11.G"/>
		<c path="val11.H"/>
		<c path="val11.I"/>
		<c path="val11.J"/>
		<c path="val11.K"/>
		<c path="val11.L"/>
	</f>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.J"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.K"/>
	</x>
	<x path="thx.Semigroup"><c path="val11.X"/></x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.L"/>
	</x>
</f></val11>
	<val12 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K:L:M" get="inline" set="null" line="160" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:v11:v12:s">
	<f a=":::::::::::">
		<c path="val12.A"/>
		<c path="val12.B"/>
		<c path="val12.C"/>
		<c path="val12.D"/>
		<c path="val12.E"/>
		<c path="val12.F"/>
		<c path="val12.G"/>
		<c path="val12.H"/>
		<c path="val12.I"/>
		<c path="val12.J"/>
		<c path="val12.K"/>
		<c path="val12.L"/>
		<c path="val12.M"/>
	</f>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.J"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.K"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.L"/>
	</x>
	<x path="thx.Semigroup"><c path="val12.X"/></x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.M"/>
	</x>
</f></val12>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx._Validation.Validation_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Validation.hx" private="1" module="thx.Validation">
		<validation public="1" params="E:A" get="inline" set="null" line="16" static="1"><f a="e">
	<e path="thx.Either">
		<c path="validation.E"/>
		<c path="validation.A"/>
	</e>
	<x path="thx.Validation">
		<c path="validation.E"/>
		<c path="validation.A"/>
	</x>
</f></validation>
		<vnel public="1" params="E:A" get="inline" set="null" line="19" static="1"><f a="e">
	<e path="thx.Either">
		<x path="thx.Nel"><c path="vnel.E"/></x>
		<c path="vnel.A"/>
	</e>
	<t path="thx.VNel">
		<c path="vnel.E"/>
		<c path="vnel.A"/>
	</t>
</f></vnel>
		<liftVNel public="1" params="E:A" set="method" line="22" static="1"><f a="e">
	<e path="thx.Either">
		<c path="liftVNel.E"/>
		<c path="liftVNel.A"/>
	</e>
	<t path="thx.VNel">
		<c path="liftVNel.E"/>
		<c path="liftVNel.A"/>
	</t>
</f></liftVNel>
		<pure public="1" params="E:A" get="inline" set="null" line="25" static="1"><f a="a">
	<c path="pure.A"/>
	<x path="thx.Validation">
		<c path="pure.E"/>
		<c path="pure.A"/>
	</x>
</f></pure>
		<success public="1" params="E:A" get="inline" set="null" line="28" static="1"><f a="a">
	<c path="success.A"/>
	<x path="thx.Validation">
		<c path="success.E"/>
		<c path="success.A"/>
	</x>
</f></success>
		<failure public="1" params="E:A" get="inline" set="null" line="31" static="1"><f a="e">
	<c path="failure.E"/>
	<x path="thx.Validation">
		<c path="failure.E"/>
		<c path="failure.A"/>
	</x>
</f></failure>
		<nn public="1" params="E:A" get="inline" set="null" line="35" static="1"><f a="a:e">
	<t path="Null"><c path="nn.A"/></t>
	<c path="nn.E"/>
	<x path="thx.Validation">
		<c path="nn.E"/>
		<c path="nn.A"/>
	</x>
</f></nn>
		<successNel public="1" params="E:A" get="inline" set="null" line="38" static="1"><f a="a">
	<c path="successNel.A"/>
	<t path="thx.VNel">
		<c path="successNel.E"/>
		<c path="successNel.A"/>
	</t>
</f></successNel>
		<failureNel public="1" params="E:A" get="inline" set="null" line="41" static="1"><f a="e">
	<c path="failureNel.E"/>
	<t path="thx.VNel">
		<c path="failureNel.E"/>
		<c path="failureNel.A"/>
	</t>
</f></failureNel>
		<nnNel public="1" params="E:A" get="inline" set="null" line="45" static="1"><f a="a:e">
	<t path="Null"><c path="nnNel.A"/></t>
	<c path="nnNel.E"/>
	<t path="thx.VNel">
		<c path="nnNel.E"/>
		<c path="nnNel.A"/>
	</t>
</f></nnNel>
		<either public="1" get="accessor" set="null" static="1">
			<e path="thx.Either">
				<c path="thx.Validation.E"/>
				<c path="thx.Validation.A"/>
			</e>
			<meta><m n=":impl"/></meta>
		</either>
		<get_either public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
			</f>
			<meta><m n=":impl"/></meta>
		</get_either>
		<map public="1" params="B" set="method" line="52" static="1">
			<f a="this:f">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<f a="">
					<c path="thx.Validation.A"/>
					<c path="map.B"/>
				</f>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="map.B"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<foldLeft public="1" params="B" set="method" line="55" static="1">
			<f a="this:b:f">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<c path="foldLeft.B"/>
				<f a=":">
					<c path="foldLeft.B"/>
					<c path="thx.Validation.A"/>
					<c path="foldLeft.B"/>
				</f>
				<c path="foldLeft.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</foldLeft>
		<foldMap public="1" params="B" set="method" line="64" static="1">
			<f a="this:f:m">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<f a="">
					<c path="thx.Validation.A"/>
					<c path="foldMap.B"/>
				</f>
				<x path="thx.Monoid"><c path="foldMap.B"/></x>
				<c path="foldMap.B"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Fold by mapping the contained value into some monoidal type and reducing with that monoid.</haxe_doc>
		</foldMap>
		<ap public="1" params="B" set="method" line="67" static="1">
			<f a="this:v:s">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<f a="">
						<c path="thx.Validation.A"/>
						<c path="ap.B"/>
					</f>
				</x>
				<x path="thx.Semigroup"><c path="thx.Validation.E"/></x>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="ap.B"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</ap>
		<zip public="1" params="B" get="inline" set="null" line="81" static="1">
			<f a="this:v:s">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="zip.B"/>
				</x>
				<x path="thx.Semigroup"><c path="thx.Validation.E"/></x>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<x path="thx.Tuple2">
						<c path="thx.Validation.A"/>
						<c path="zip.B"/>
					</x>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</zip>
		<leftMap public="1" params="E0" get="inline" set="null" line="84" static="1">
			<f a="this:f">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<f a="">
					<c path="thx.Validation.E"/>
					<c path="leftMap.E0"/>
				</f>
				<x path="thx.Validation">
					<c path="leftMap.E0"/>
					<c path="thx.Validation.A"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</leftMap>
		<wrapNel public="1" get="inline" set="null" line="87" static="1">
			<f a="this">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<t path="thx.VNel">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
		</wrapNel>
		<ensure public="1" set="method" line="90" static="1">
			<f a="this:p:error">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<f a="">
					<c path="thx.Validation.A"/>
					<x path="Bool"/>
				</f>
				<c path="thx.Validation.E"/>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</ensure>
		<flatMapV public="1" params="B" get="inline" set="null" line="99" static="1">
			<f a="this:f">
				<e path="thx.Either">
					<c path="thx.Validation.E"/>
					<c path="thx.Validation.A"/>
				</e>
				<f a="">
					<c path="thx.Validation.A"/>
					<x path="thx.Validation">
						<c path="thx.Validation.E"/>
						<c path="flatMapV.B"/>
					</x>
				</f>
				<x path="thx.Validation">
					<c path="thx.Validation.E"/>
					<c path="flatMapV.B"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</flatMapV>
		<val2 public="1" params="X:A:B:C" get="inline" set="null" line="106" static="1"><f a="f:v1:v2:s">
	<f a=":">
		<c path="val2.A"/>
		<c path="val2.B"/>
		<c path="val2.C"/>
	</f>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.B"/>
	</x>
	<x path="thx.Semigroup"><c path="val2.X"/></x>
	<x path="thx.Validation">
		<c path="val2.X"/>
		<c path="val2.C"/>
	</x>
</f></val2>
		<val3 public="1" params="X:A:B:C:D" get="inline" set="null" line="109" static="1"><f a="f:v1:v2:v3:s">
	<f a="::">
		<c path="val3.A"/>
		<c path="val3.B"/>
		<c path="val3.C"/>
		<c path="val3.D"/>
	</f>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.C"/>
	</x>
	<x path="thx.Semigroup"><c path="val3.X"/></x>
	<x path="thx.Validation">
		<c path="val3.X"/>
		<c path="val3.D"/>
	</x>
</f></val3>
		<val4 public="1" params="X:A:B:C:D:E" get="inline" set="null" line="112" static="1"><f a="f:v1:v2:v3:v4:s">
	<f a=":::">
		<c path="val4.A"/>
		<c path="val4.B"/>
		<c path="val4.C"/>
		<c path="val4.D"/>
		<c path="val4.E"/>
	</f>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.D"/>
	</x>
	<x path="thx.Semigroup"><c path="val4.X"/></x>
	<x path="thx.Validation">
		<c path="val4.X"/>
		<c path="val4.E"/>
	</x>
</f></val4>
		<val5 public="1" params="X:A:B:C:D:E:F" get="inline" set="null" line="118" static="1"><f a="f:v1:v2:v3:v4:v5:s">
	<f a="::::">
		<c path="val5.A"/>
		<c path="val5.B"/>
		<c path="val5.C"/>
		<c path="val5.D"/>
		<c path="val5.E"/>
		<c path="val5.F"/>
	</f>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.E"/>
	</x>
	<x path="thx.Semigroup"><c path="val5.X"/></x>
	<x path="thx.Validation">
		<c path="val5.X"/>
		<c path="val5.F"/>
	</x>
</f></val5>
		<val6 public="1" params="X:A:B:C:D:E:F:G" get="inline" set="null" line="124" static="1"><f a="f:v1:v2:v3:v4:v5:v6:s">
	<f a=":::::">
		<c path="val6.A"/>
		<c path="val6.B"/>
		<c path="val6.C"/>
		<c path="val6.D"/>
		<c path="val6.E"/>
		<c path="val6.F"/>
		<c path="val6.G"/>
	</f>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.F"/>
	</x>
	<x path="thx.Semigroup"><c path="val6.X"/></x>
	<x path="thx.Validation">
		<c path="val6.X"/>
		<c path="val6.G"/>
	</x>
</f></val6>
		<val7 public="1" params="X:A:B:C:D:E:F:G:H" get="inline" set="null" line="130" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:s">
	<f a="::::::">
		<c path="val7.A"/>
		<c path="val7.B"/>
		<c path="val7.C"/>
		<c path="val7.D"/>
		<c path="val7.E"/>
		<c path="val7.F"/>
		<c path="val7.G"/>
		<c path="val7.H"/>
	</f>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.G"/>
	</x>
	<x path="thx.Semigroup"><c path="val7.X"/></x>
	<x path="thx.Validation">
		<c path="val7.X"/>
		<c path="val7.H"/>
	</x>
</f></val7>
		<val8 public="1" params="X:A:B:C:D:E:F:G:H:I" get="inline" set="null" line="136" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:s">
	<f a=":::::::">
		<c path="val8.A"/>
		<c path="val8.B"/>
		<c path="val8.C"/>
		<c path="val8.D"/>
		<c path="val8.E"/>
		<c path="val8.F"/>
		<c path="val8.G"/>
		<c path="val8.H"/>
		<c path="val8.I"/>
	</f>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.H"/>
	</x>
	<x path="thx.Semigroup"><c path="val8.X"/></x>
	<x path="thx.Validation">
		<c path="val8.X"/>
		<c path="val8.I"/>
	</x>
</f></val8>
		<val9 public="1" params="X:A:B:C:D:E:F:G:H:I:J" get="inline" set="null" line="142" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:s">
	<f a="::::::::">
		<c path="val9.A"/>
		<c path="val9.B"/>
		<c path="val9.C"/>
		<c path="val9.D"/>
		<c path="val9.E"/>
		<c path="val9.F"/>
		<c path="val9.G"/>
		<c path="val9.H"/>
		<c path="val9.I"/>
		<c path="val9.J"/>
	</f>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.I"/>
	</x>
	<x path="thx.Semigroup"><c path="val9.X"/></x>
	<x path="thx.Validation">
		<c path="val9.X"/>
		<c path="val9.J"/>
	</x>
</f></val9>
		<val10 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K" get="inline" set="null" line="148" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:s">
	<f a=":::::::::">
		<c path="val10.A"/>
		<c path="val10.B"/>
		<c path="val10.C"/>
		<c path="val10.D"/>
		<c path="val10.E"/>
		<c path="val10.F"/>
		<c path="val10.G"/>
		<c path="val10.H"/>
		<c path="val10.I"/>
		<c path="val10.J"/>
		<c path="val10.K"/>
	</f>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.J"/>
	</x>
	<x path="thx.Semigroup"><c path="val10.X"/></x>
	<x path="thx.Validation">
		<c path="val10.X"/>
		<c path="val10.K"/>
	</x>
</f></val10>
		<val11 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K:L" get="inline" set="null" line="154" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:v11:s">
	<f a="::::::::::">
		<c path="val11.A"/>
		<c path="val11.B"/>
		<c path="val11.C"/>
		<c path="val11.D"/>
		<c path="val11.E"/>
		<c path="val11.F"/>
		<c path="val11.G"/>
		<c path="val11.H"/>
		<c path="val11.I"/>
		<c path="val11.J"/>
		<c path="val11.K"/>
		<c path="val11.L"/>
	</f>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.J"/>
	</x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.K"/>
	</x>
	<x path="thx.Semigroup"><c path="val11.X"/></x>
	<x path="thx.Validation">
		<c path="val11.X"/>
		<c path="val11.L"/>
	</x>
</f></val11>
		<val12 public="1" params="X:A:B:C:D:E:F:G:H:I:J:K:L:M" get="inline" set="null" line="160" static="1"><f a="f:v1:v2:v3:v4:v5:v6:v7:v8:v9:v10:v11:v12:s">
	<f a=":::::::::::">
		<c path="val12.A"/>
		<c path="val12.B"/>
		<c path="val12.C"/>
		<c path="val12.D"/>
		<c path="val12.E"/>
		<c path="val12.F"/>
		<c path="val12.G"/>
		<c path="val12.H"/>
		<c path="val12.I"/>
		<c path="val12.J"/>
		<c path="val12.K"/>
		<c path="val12.L"/>
		<c path="val12.M"/>
	</f>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.A"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.B"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.C"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.D"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.E"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.F"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.G"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.H"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.I"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.J"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.K"/>
	</x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.L"/>
	</x>
	<x path="thx.Semigroup"><c path="val12.X"/></x>
	<x path="thx.Validation">
		<c path="val12.X"/>
		<c path="val12.M"/>
	</x>
</f></val12>
		<meta><m n=":final"/></meta>
	</class>
	<class path="thx.ValidationExtensions" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Validation.hx" module="thx.Validation">
		<leftMapNel public="1" params="E:E0:A" get="inline" set="null" line="168" static="1"><f a="n:f">
	<t path="thx.VNel">
		<c path="leftMapNel.E"/>
		<c path="leftMapNel.A"/>
	</t>
	<f a="">
		<c path="leftMapNel.E"/>
		<c path="leftMapNel.E0"/>
	</f>
	<t path="thx.VNel">
		<c path="leftMapNel.E0"/>
		<c path="leftMapNel.A"/>
	</t>
</f></leftMapNel>
		<ensureNel public="1" params="E:A" set="method" line="171" static="1"><f a="v:p:error">
	<t path="thx.VNel">
		<c path="ensureNel.E"/>
		<c path="ensureNel.A"/>
	</t>
	<f a="">
		<c path="ensureNel.A"/>
		<x path="Bool"/>
	</f>
	<c path="ensureNel.E"/>
	<t path="thx.VNel">
		<c path="ensureNel.E"/>
		<c path="ensureNel.A"/>
	</t>
</f></ensureNel>
		<appendVNel public="1" params="E:A" set="method" line="177" static="1"><f a="target:item">
	<t path="thx.VNel">
		<c path="appendVNel.E"/>
		<c path="Array"><c path="appendVNel.A"/></c>
	</t>
	<t path="thx.VNel">
		<c path="appendVNel.E"/>
		<c path="appendVNel.A"/>
	</t>
	<t path="thx.VNel">
		<c path="appendVNel.E"/>
		<c path="Array"><c path="appendVNel.A"/></c>
	</t>
</f></appendVNel>
		<appendValidation public="1" params="E:A" set="method" line="186" static="1"><f a="target:item">
	<t path="thx.VNel">
		<c path="appendValidation.E"/>
		<c path="Array"><c path="appendValidation.A"/></c>
	</t>
	<x path="thx.Validation">
		<c path="appendValidation.E"/>
		<c path="appendValidation.A"/>
	</x>
	<t path="thx.VNel">
		<c path="appendValidation.E"/>
		<c path="Array"><c path="appendValidation.A"/></c>
	</t>
</f></appendValidation>
		<appendVNels public="1" params="E:A" set="method" line="190" static="1"><f a="target:items">
	<t path="thx.VNel">
		<c path="appendVNels.E"/>
		<c path="Array"><c path="appendVNels.A"/></c>
	</t>
	<c path="Array"><t path="thx.VNel">
	<c path="appendVNels.E"/>
	<c path="appendVNels.A"/>
</t></c>
	<t path="thx.VNel">
		<c path="appendVNels.E"/>
		<c path="Array"><c path="appendVNels.A"/></c>
	</t>
</f></appendVNels>
		<appendValidations public="1" params="E:A" set="method" line="194" static="1"><f a="target:items">
	<t path="thx.VNel">
		<c path="appendValidations.E"/>
		<c path="Array"><c path="appendValidations.A"/></c>
	</t>
	<c path="Array"><x path="thx.Validation">
	<c path="appendValidations.E"/>
	<c path="appendValidations.A"/>
</x></c>
	<t path="thx.VNel">
		<c path="appendValidations.E"/>
		<c path="Array"><c path="appendValidations.A"/></c>
	</t>
</f></appendValidations>
	</class>
	<abstract path="thx.Weekday" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Weekday.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>Named weekdays mapped to integer values from 0 to 6 where 0 is Sunday and 6 is
Saturday.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="thx._Weekday.Weekday_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Weekday.hx" private="1" module="thx.Weekday" extern="1">
	<Sunday public="1" get="inline" set="null" expr="cast 0" line="9" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Sunday>
	<Monday public="1" get="inline" set="null" expr="cast 1" line="10" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Monday>
	<Tuesday public="1" get="inline" set="null" expr="cast 2" line="11" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Tuesday>
	<Wednesday public="1" get="inline" set="null" expr="cast 3" line="12" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Wednesday>
	<Thursday public="1" get="inline" set="null" expr="cast 4" line="13" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Thursday>
	<Friday public="1" get="inline" set="null" expr="cast 5" line="14" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Friday>
	<Saturday public="1" get="inline" set="null" expr="cast 6" line="15" static="1">
		<x path="thx.Weekday"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Saturday>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="thx._Weekday.Weekday_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/Weekday.hx" private="1" module="thx.Weekday" extern="1">
		<Sunday public="1" get="inline" set="null" expr="cast 0" line="9" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Sunday>
		<Monday public="1" get="inline" set="null" expr="cast 1" line="10" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Monday>
		<Tuesday public="1" get="inline" set="null" expr="cast 2" line="11" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Tuesday>
		<Wednesday public="1" get="inline" set="null" expr="cast 3" line="12" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Wednesday>
		<Thursday public="1" get="inline" set="null" expr="cast 4" line="13" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Thursday>
		<Friday public="1" get="inline" set="null" expr="cast 5" line="14" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Friday>
		<Saturday public="1" get="inline" set="null" expr="cast 6" line="15" static="1">
			<x path="thx.Weekday"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Saturday>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="thx.benchmark.measure.Stopwatch" params="" file="../src/thx/benchmark/measure/Stopwatch.hx">
		<go public="1" set="method" line="4" static="1"><f a=""><c path="thx.benchmark.measure.Stopwatch"/></f></go>
		<elapsed public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>Elapsed time in milliseconds.</haxe_doc>
		</elapsed>
		<elapsedSeconds public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>Elapsed time in seconds.</haxe_doc>
		</elapsedSeconds>
		<isRunning public="1" set="null"><x path="Bool"/></isRunning>
		<_elapsed><x path="Float"/></_elapsed>
		<startTime><x path="Float"/></startTime>
		<endTime><t path="Null"><x path="Float"/></t></endTime>
		<endTemp><x path="Float"/></endTemp>
		<timer><f a=""><x path="Float"/></f></timer>
		<start public="1" set="method" line="33"><f a=""><x path="Void"/></f></start>
		<stop public="1" set="method" line="39"><f a=""><x path="Void"/></f></stop>
		<reset public="1" set="method" line="47"><f a=""><x path="Void"/></f></reset>
		<restart public="1" set="method" line="51"><f a=""><x path="Void"/></f></restart>
		<get_elapsed set="method" line="56"><f a=""><x path="Float"/></f></get_elapsed>
		<get_elapsedSeconds set="method" line="60"><f a=""><x path="Float"/></f></get_elapsedSeconds>
		<new public="1" set="method" line="27"><f a="?timer">
	<f a=""><x path="Float"/></f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.benchmark.measure.Tracker" params="" file="../src/thx/benchmark/measure/Tracker.hx">
		<instance public="1" set="null" expr="new Tracker()" line="6" static="1">
			<c path="thx.benchmark.measure.Tracker"/>
			<meta><m n=":value"><e>new Tracker()</e></m></meta>
		</instance>
		<getTimer public="1" get="inline" set="null" line="8" static="1"><f a="name">
	<c path="String"/>
	<t path="Null"><c path="thx.benchmark.measure.Stopwatch"/></t>
</f></getTimer>
		<startTimer public="1" get="inline" set="null" line="11" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></startTimer>
		<stopTimer public="1" get="inline" set="null" line="14" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></stopTimer>
		<resetTimer public="1" get="inline" set="null" line="17" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></resetTimer>
		<restartTimer public="1" get="inline" set="null" line="20" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></restartTimer>
		<elapsedForTimer public="1" get="inline" set="null" line="23" static="1"><f a="name">
	<c path="String"/>
	<x path="Float"/>
</f></elapsedForTimer>
		<elapsedSecondsForTimer public="1" get="inline" set="null" line="26" static="1"><f a="name">
	<c path="String"/>
	<x path="Float"/>
</f></elapsedSecondsForTimer>
		<timers public="1" get="inline" set="null" line="29" static="1"><f a=""><c path="Array"><x path="thx.Tuple2">
	<c path="String"/>
	<c path="thx.benchmark.measure.Stopwatch"/>
</x></c></f></timers>
		<wrap public="1" get="inline" set="null" line="33" static="1"><f a="f:name">
	<f a=""><x path="Void"/></f>
	<c path="String"/>
	<x path="Void"/>
</f></wrap>
		<watches><x path="Map">
	<c path="String"/>
	<c path="thx.benchmark.measure.Stopwatch"/>
</x></watches>
		<timer><f a=""><x path="Float"/></f></timer>
		<get public="1" set="method" line="46"><f a="name">
	<c path="String"/>
	<t path="Null"><c path="thx.benchmark.measure.Stopwatch"/></t>
</f></get>
		<start public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></start>
		<stop public="1" set="method" line="52"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></stop>
		<reset public="1" set="method" line="55"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></reset>
		<restart public="1" set="method" line="58"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></restart>
		<iterator public="1" set="method" line="61"><f a=""><c path="Array"><x path="thx.Tuple2">
	<c path="String"/>
	<c path="thx.benchmark.measure.Stopwatch"/>
</x></c></f></iterator>
		<elapsed public="1" set="method" line="64"><f a="name">
	<c path="String"/>
	<x path="Float"/>
</f></elapsed>
		<elapsedSeconds public="1" set="method" line="67"><f a="name">
	<c path="String"/>
	<x path="Float"/>
</f></elapsedSeconds>
		<ensureStopwatch set="method" line="70"><f a="name">
	<c path="String"/>
	<t path="Null"><c path="thx.benchmark.measure.Stopwatch"/></t>
</f></ensureStopwatch>
		<new public="1" set="method" line="41"><f a="?timer">
	<f a=""><x path="Float"/></f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.benchmark.speed.SpeedCase" params="" file="../src/thx/benchmark/speed/SpeedCase.hx">
		<execute public="1" set="method" static="1"><f a="expr:?minSamples:?maxTime:?maxSamples">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></execute>
		<desiredUncertainty expr="0.01" line="11" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</desiredUncertainty>
		<minResolution expr="1.0" line="12" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</minResolution>
		<threshold expr="1073741824" line="13" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1073741824</e></m></meta>
		</threshold>
		<max expr="2147483647" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2147483647</e></m></meta>
		</max>
		<f><f a="">
	<x path="Int"/>
	<x path="Float"/>
</f></f>
		<run public="1" set="method" line="20">
			<f a="?minSamples:?maxTime:?maxSamples" v="5:5000.0:100000">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.benchmark.speed.Stats"/>
			</f>
			<meta><m n=":value"><e>{ maxSamples : 100000, maxTime : 5000.0, minSamples : 5 }</e></m></meta>
		</run>
		<new public="1" set="method" line="16"><f a="f">
	<f a="">
		<x path="Int"/>
		<x path="Float"/>
	</f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.benchmark.speed.Stats" params="" file="../src/thx/benchmark/speed/Stats.hx">
		<compare public="1" set="method" line="7" static="1"><f a="a:b">
	<c path="thx.benchmark.speed.Stats"/>
	<c path="thx.benchmark.speed.Stats"/>
	<x path="Int"/>
</f></compare>
		<tTable_infinity expr="1.96" line="78" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1.96</e></m></meta>
		</tTable_infinity>
		<tTable expr="[1 =&gt; 12.706, 2 =&gt; 4.303, 3 =&gt; 3.182, 4 =&gt; 2.776, 5 =&gt; 2.571, 6 =&gt; 2.447, 7 =&gt; 2.365, 8 =&gt; 2.306, 9 =&gt; 2.262, 10 =&gt; 2.228, 11 =&gt; 2.201, 12 =&gt; 2.179, 13 =&gt; 2.16, 14 =&gt; 2.145, 15 =&gt; 2.131, 16 =&gt; 2.12, 17 =&gt; 2.11, 18 =&gt; 2.101, 19 =&gt; 2.093, 20 =&gt; 2.086, 21 =&gt; 2.08, 22 =&gt; 2.074, 23 =&gt; 2.069, 24 =&gt; 2.064, 25 =&gt; 2.06, 26 =&gt; 2.056, 27 =&gt; 2.052, 28 =&gt; 2.048, 29 =&gt; 2.045, 30 =&gt; 2.042]" line="79" static="1">
			<x path="Map">
				<x path="Int"/>
				<x path="Float"/>
			</x>
			<meta><m n=":value"><e><![CDATA[[1 => 12.706, 2 => 4.303, 3 => 3.182, 4 => 2.776, 5 => 2.571, 6 => 2.447, 7 => 2.365, 8 => 2.306, 9 => 2.262, 10 => 2.228, 11 => 2.201, 12 => 2.179, 13 => 2.16, 14 => 2.145, 15 => 2.131, 16 => 2.12, 17 => 2.11, 18 => 2.101, 19 => 2.093, 20 => 2.086, 21 => 2.08, 22 => 2.074, 23 => 2.069, 24 => 2.064, 25 => 2.06, 26 => 2.056, 27 => 2.052, 28 => 2.048, 29 => 2.045, 30 => 2.042]]]></e></m></meta>
		</tTable>
		<count public="1" set="null"><x path="Int"/></count>
		<samples public="1" set="null"><c path="Array"><x path="Float"/></c></samples>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
		<ms public="1" get="accessor" set="null"><x path="Float"/></ms>
		<standardDeviation public="1" get="accessor" set="null"><x path="Float"/></standardDeviation>
		<standardErrorOfMean public="1" get="accessor" set="null"><x path="Float"/></standardErrorOfMean>
		<seconds public="1" get="accessor" set="null"><x path="Float"/></seconds>
		<period public="1" get="accessor" set="null"><x path="Float"/></period>
		<cycles public="1" get="accessor" set="null"><x path="Float"/></cycles>
		<criticalValue public="1" get="accessor" set="null"><x path="Float"/></criticalValue>
		<marginOfError public="1" get="accessor" set="null"><x path="Float"/></marginOfError>
		<relativeMarginOfError public="1" get="accessor" set="null"><x path="Float"/></relativeMarginOfError>
		<compareTo public="1" set="method" line="27"><f a="that">
	<c path="thx.benchmark.speed.Stats"/>
	<x path="Int"/>
</f></compareTo>
		<get_size get="inline" set="null" line="30"><f a=""><x path="Int"/></f></get_size>
		<_ms expr="-1">
			<x path="Float"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</_ms>
		<get_ms set="method" line="34"><f a=""><x path="Float"/></f></get_ms>
		<_standardDeviation expr="-1">
			<x path="Float"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</_standardDeviation>
		<get_standardDeviation set="method" line="41"><f a=""><x path="Float"/></f></get_standardDeviation>
		<get_standardErrorOfMean set="method" line="47"><f a=""><x path="Float"/></f></get_standardErrorOfMean>
		<get_seconds set="method" line="50"><f a=""><x path="Float"/></f></get_seconds>
		<get_period set="method" line="53"><f a=""><x path="Float"/></f></get_period>
		<get_cycles set="method" line="56"><f a=""><x path="Float"/></f></get_cycles>
		<get_criticalValue set="method" line="60"><f a=""><x path="Float"/></f></get_criticalValue>
		<get_marginOfError set="method" line="69"><f a=""><x path="Float"/></f></get_marginOfError>
		<get_relativeMarginOfError set="method" line="72"><f a=""><x path="Float"/></f></get_relativeMarginOfError>
		<toString public="1" set="method" line="75"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="22"><f a="samples:count">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.benchmark.speed.Suite" params="" file="../src/thx/benchmark/speed/Suite.hx">
		<tests><x path="thx.OrderedMap">
	<c path="String"/>
	<c path="thx.benchmark.speed.SpeedCase"/>
</x></tests>
		<maxExecutionTime public="1"><x path="Float"/></maxExecutionTime>
		<minSamples public="1"><x path="Int"/></minSamples>
		<addCase public="1" set="method" line="20"><f a="description:f">
	<c path="String"/>
	<f a="">
		<x path="Int"/>
		<x path="Float"/>
	</f>
	<x path="Void"/>
</f></addCase>
		<run public="1" set="method" line="24"><f a=""><c path="thx.benchmark.speed.SuiteReport"/></f></run>
		<add public="1" set="method"><f a="description:f">
	<d/>
	<x path="haxe.Function"/>
	<d/>
</f></add>
		<new public="1" set="method" line="14">
			<f a="?minSamples:?maxExecutionTime" v="5:5000.0">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ maxExecutionTime : 5000.0, minSamples : 5 }</e></m></meta>
		</new>
	</class>
	<class path="thx.benchmark.speed.SuiteReport" params="" file="../src/thx/benchmark/speed/SuiteReport.hx">
		<tests><x path="thx.OrderedMap">
	<c path="String"/>
	<c path="thx.benchmark.speed.Stats"/>
</x></tests>
		<toString public="1" set="method" line="17"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="13"><f a="tests">
	<x path="thx.OrderedMap">
		<c path="String"/>
		<c path="thx.benchmark.speed.Stats"/>
	</x>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.benchmark.speed.macro.SpeedCaseBuilder" params="" file="../src/thx/benchmark/speed/macro/SpeedCaseBuilder.hx"><create public="1" set="method" static="1"><f a="f">
	<d/>
	<d/>
</f></create></class>
	<class path="thx.culture.DateFormatInfo" params="" file="/Users/francoponticelli/projects/thx.culture/src/thx/culture/DateFormatInfo.hx">
		<invariant public="1" set="null" expr="new DateFormatInfo(0, &quot;FirstDay&quot;, &quot;AM&quot;, &quot;PM&quot;, 0, &quot;Sunday&quot;, &quot;Gregorian&quot;, null, [&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;], [&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;], [&quot;Su&quot;, &quot;Mo&quot;, &quot;Tu&quot;, &quot;We&quot;, &quot;Th&quot;, &quot;Fr&quot;, &quot;Sa&quot;], [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;, &quot;&quot;], [&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;, &quot;&quot;], [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;, &quot;&quot;], [&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;, &quot;&quot;], &quot;dddd, dd MMMM yyyy&quot;, &quot;MM/dd/yyyy&quot;, &quot;dddd, dd MMMM yyyy HH:mm:ss&quot;, &quot;yyyy&apos;-&apos;MM&apos;-&apos;dd&apos;T&apos;HH&apos;:&apos;mm&apos;:&apos;ss&quot;, &quot;MMMM dd&quot;, &quot;ddd, dd MMM yyyy HH&apos;:&apos;mm&apos;:&apos;ss &apos;GMT&apos;&quot;, &quot;HH:mm:ss&quot;, &quot;HH:mm&quot;, &quot;yyyy&apos;-&apos;MM&apos;-&apos;dd HH&apos;:&apos;mm&apos;:&apos;ss&apos;Z&apos;&quot;, &quot;yyyy MMMM&quot;, &quot;/&quot;, &quot;:&quot;)" line="4" static="1">
			<c path="thx.culture.DateFormatInfo"/>
			<meta><m n=":value"><e>new DateFormatInfo(0, "FirstDay", "AM", "PM", 0, "Sunday", "Gregorian", null, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""], "dddd, dd MMMM yyyy", "MM/dd/yyyy", "dddd, dd MMMM yyyy HH:mm:ss", "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "MMMM dd", "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "HH:mm:ss", "HH:mm", "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "yyyy MMMM", "/", ":")</e></m></meta>
		</invariant>
		<fromObject public="1" get="inline" set="null" line="151" static="1"><f a="o">
	<d/>
	<c path="thx.culture.DateFormatInfo"/>
</f></fromObject>
		<calendarWeekRuleIndex public="1" set="null"><x path="Int"/></calendarWeekRuleIndex>
		<calendarWeekRuleName public="1" set="null"><c path="String"/></calendarWeekRuleName>
		<designatorAm public="1" set="null"><c path="String"/></designatorAm>
		<designatorPm public="1" set="null"><c path="String"/></designatorPm>
		<firstDayOfWeekIndex public="1" set="null"><x path="Int"/></firstDayOfWeekIndex>
		<firstDayOfWeekName public="1" set="null"><c path="String"/></firstDayOfWeekName>
		<nameCalendar public="1" set="null"><c path="String"/></nameCalendar>
		<nameCalendarNative public="1" set="null"><t path="Null"><c path="String"/></t></nameCalendarNative>
		<nameDays public="1" set="null"><c path="Array"><c path="String"/></c></nameDays>
		<nameDaysAbbreviated public="1" set="null"><c path="Array"><c path="String"/></c></nameDaysAbbreviated>
		<nameDaysShortest public="1" set="null"><c path="Array"><c path="String"/></c></nameDaysShortest>
		<nameMonths public="1" set="null"><c path="Array"><c path="String"/></c></nameMonths>
		<nameMonthsAbbreviated public="1" set="null"><c path="Array"><c path="String"/></c></nameMonthsAbbreviated>
		<nameMonthGenitives public="1" set="null"><c path="Array"><c path="String"/></c></nameMonthGenitives>
		<nameMonthGenitivesAbbreviated public="1" set="null"><c path="Array"><c path="String"/></c></nameMonthGenitivesAbbreviated>
		<patternDateLong public="1" set="null"><c path="String"/></patternDateLong>
		<patternDateShort public="1" set="null"><c path="String"/></patternDateShort>
		<patternDateTimeFull public="1" set="null"><c path="String"/></patternDateTimeFull>
		<patternDateTimeSortable public="1" set="null"><c path="String"/></patternDateTimeSortable>
		<patternMonthDay public="1" set="null"><c path="String"/></patternMonthDay>
		<patternRfc1123 public="1" set="null"><c path="String"/></patternRfc1123>
		<patternTimeLong public="1" set="null"><c path="String"/></patternTimeLong>
		<patternTimeShort public="1" set="null"><c path="String"/></patternTimeShort>
		<patternUniversalSortable public="1" set="null"><c path="String"/></patternUniversalSortable>
		<patternYearMonth public="1" set="null"><c path="String"/></patternYearMonth>
		<separatorDate public="1" set="null"><c path="String"/></separatorDate>
		<separatorTime public="1" set="null"><c path="String"/></separatorTime>
		<toObject public="1" set="method" line="120"><f a=""><a>
	<separatorTime><c path="String"/></separatorTime>
	<separatorDate><c path="String"/></separatorDate>
	<patternYearMonth><c path="String"/></patternYearMonth>
	<patternUniversalSortable><c path="String"/></patternUniversalSortable>
	<patternTimeShort><c path="String"/></patternTimeShort>
	<patternTimeLong><c path="String"/></patternTimeLong>
	<patternRfc1123><c path="String"/></patternRfc1123>
	<patternMonthDay><c path="String"/></patternMonthDay>
	<patternDateTimeSortable><c path="String"/></patternDateTimeSortable>
	<patternDateTimeFull><c path="String"/></patternDateTimeFull>
	<patternDateShort><c path="String"/></patternDateShort>
	<patternDateLong><c path="String"/></patternDateLong>
	<nameMonthsAbbreviated><c path="Array"><c path="String"/></c></nameMonthsAbbreviated>
	<nameMonths><c path="Array"><c path="String"/></c></nameMonths>
	<nameMonthGenitivesAbbreviated><c path="Array"><c path="String"/></c></nameMonthGenitivesAbbreviated>
	<nameMonthGenitives><c path="Array"><c path="String"/></c></nameMonthGenitives>
	<nameDaysShortest><c path="Array"><c path="String"/></c></nameDaysShortest>
	<nameDaysAbbreviated><c path="Array"><c path="String"/></c></nameDaysAbbreviated>
	<nameDays><c path="Array"><c path="String"/></c></nameDays>
	<nameCalendarNative><t path="Null"><c path="String"/></t></nameCalendarNative>
	<nameCalendar><c path="String"/></nameCalendar>
	<firstDayOfWeekName><c path="String"/></firstDayOfWeekName>
	<firstDayOfWeekIndex><x path="Int"/></firstDayOfWeekIndex>
	<designatorPm><c path="String"/></designatorPm>
	<designatorAm><c path="String"/></designatorAm>
	<calendarWeekRuleName><c path="String"/></calendarWeekRuleName>
	<calendarWeekRuleIndex><x path="Int"/></calendarWeekRuleIndex>
</a></f></toObject>
		<new public="1" set="method" line="62"><f a="calendarWeekRuleIndex:calendarWeekRuleName:designatorAm:designatorPm:firstDayOfWeekIndex:firstDayOfWeekName:nameCalendar:nameCalendarNative:nameDays:nameDaysAbbreviated:nameDaysShortest:nameMonths:nameMonthsAbbreviated:nameMonthGenitives:nameMonthGenitivesAbbreviated:patternDateLong:patternDateShort:patternDateTimeFull:patternDateTimeSortable:patternMonthDay:patternRfc1123:patternTimeLong:patternTimeShort:patternUniversalSortable:patternYearMonth:separatorDate:separatorTime">
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<t path="Null"><c path="String"/></t>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.culture.NumberFormatInfo" params="" file="/Users/francoponticelli/projects/thx.culture/src/thx/culture/NumberFormatInfo.hx">
		<invariant public="1" set="null" expr="new NumberFormatInfo(2, 2, 2, [3], [3], [3], 0, 1, 0, 0, 0, &quot;.&quot;, &quot;.&quot;, &quot;.&quot;, &quot;,&quot;, &quot;,&quot;, &quot;,&quot;, &quot;-&quot;, &quot;+&quot;, &quot;¤&quot;, &quot;NaN&quot;, &quot;-Infinity&quot;, &quot;%&quot;, &quot;‰&quot;, &quot;Infinity&quot;)" line="4" static="1">
			<c path="thx.culture.NumberFormatInfo"/>
			<meta><m n=":value"><e>new NumberFormatInfo(2, 2, 2, [3], [3], [3], 0, 1, 0, 0, 0, ".", ".", ".", ",", ",", ",", "-", "+", "¤", "NaN", "-Infinity", "%", "‰", "Infinity")</e></m></meta>
		</invariant>
		<fromObject public="1" get="inline" set="null" line="115" static="1"><f a="o">
	<d/>
	<c path="thx.culture.NumberFormatInfo"/>
</f></fromObject>
		<decimalDigitsCurrency public="1" set="null"><x path="Int"/></decimalDigitsCurrency>
		<decimalDigitsNumber public="1" set="null"><x path="Int"/></decimalDigitsNumber>
		<decimalDigitsPercent public="1" set="null"><x path="Int"/></decimalDigitsPercent>
		<groupSizesCurrency public="1" set="null"><c path="Array"><x path="Int"/></c></groupSizesCurrency>
		<groupSizesNumber public="1" set="null"><c path="Array"><x path="Int"/></c></groupSizesNumber>
		<groupSizesPercent public="1" set="null"><c path="Array"><x path="Int"/></c></groupSizesPercent>
		<patternNegativeCurrency public="1" set="null"><x path="Int"/></patternNegativeCurrency>
		<patternNegativeNumber public="1" set="null"><x path="Int"/></patternNegativeNumber>
		<patternNegativePercent public="1" set="null"><x path="Int"/></patternNegativePercent>
		<patternPositiveCurrency public="1" set="null"><x path="Int"/></patternPositiveCurrency>
		<patternPositivePercent public="1" set="null"><x path="Int"/></patternPositivePercent>
		<separatorDecimalCurrency public="1" set="null"><c path="String"/></separatorDecimalCurrency>
		<separatorDecimalNumber public="1" set="null"><c path="String"/></separatorDecimalNumber>
		<separatorDecimalPercent public="1" set="null"><c path="String"/></separatorDecimalPercent>
		<separatorGroupCurrency public="1" set="null"><c path="String"/></separatorGroupCurrency>
		<separatorGroupNumber public="1" set="null"><c path="String"/></separatorGroupNumber>
		<separatorGroupPercent public="1" set="null"><c path="String"/></separatorGroupPercent>
		<signNegative public="1" set="null"><c path="String"/></signNegative>
		<signPositive public="1" set="null"><c path="String"/></signPositive>
		<symbolCurrency public="1" set="null"><c path="String"/></symbolCurrency>
		<symbolNaN public="1" set="null"><c path="String"/></symbolNaN>
		<symbolNegativeInfinity public="1" set="null"><c path="String"/></symbolNegativeInfinity>
		<symbolPercent public="1" set="null"><c path="String"/></symbolPercent>
		<symbolPermille public="1" set="null"><c path="String"/></symbolPermille>
		<symbolPositiveInfinity public="1" set="null"><c path="String"/></symbolPositiveInfinity>
		<toObject public="1" set="method" line="86"><f a=""><a>
	<symbolPositiveInfinity><c path="String"/></symbolPositiveInfinity>
	<symbolPermille><c path="String"/></symbolPermille>
	<symbolPercent><c path="String"/></symbolPercent>
	<symbolNegativeInfinity><c path="String"/></symbolNegativeInfinity>
	<symbolNaN><c path="String"/></symbolNaN>
	<symbolCurrency><c path="String"/></symbolCurrency>
	<signPositive><c path="String"/></signPositive>
	<signNegative><c path="String"/></signNegative>
	<separatorGroupPercent><c path="String"/></separatorGroupPercent>
	<separatorGroupNumber><c path="String"/></separatorGroupNumber>
	<separatorGroupCurrency><c path="String"/></separatorGroupCurrency>
	<separatorDecimalPercent><c path="String"/></separatorDecimalPercent>
	<separatorDecimalNumber><c path="String"/></separatorDecimalNumber>
	<separatorDecimalCurrency><c path="String"/></separatorDecimalCurrency>
	<patternPositivePercent><x path="Int"/></patternPositivePercent>
	<patternPositiveCurrency><x path="Int"/></patternPositiveCurrency>
	<patternNegativePercent><x path="Int"/></patternNegativePercent>
	<patternNegativeNumber><x path="Int"/></patternNegativeNumber>
	<patternNegativeCurrency><x path="Int"/></patternNegativeCurrency>
	<groupSizesPercent><c path="Array"><x path="Int"/></c></groupSizesPercent>
	<groupSizesNumber><c path="Array"><x path="Int"/></c></groupSizesNumber>
	<groupSizesCurrency><c path="Array"><x path="Int"/></c></groupSizesCurrency>
	<decimalDigitsPercent><x path="Int"/></decimalDigitsPercent>
	<decimalDigitsNumber><x path="Int"/></decimalDigitsNumber>
	<decimalDigitsCurrency><x path="Int"/></decimalDigitsCurrency>
</a></f></toObject>
		<new public="1" set="method" line="32"><f a="decimalDigitsCurrency:decimalDigitsNumber:decimalDigitsPercent:groupSizesCurrency:groupSizesNumber:groupSizesPercent:patternNegativeCurrency:patternNegativeNumber:patternNegativePercent:patternPositiveCurrency:patternPositivePercent:separatorDecimalCurrency:separatorDecimalNumber:separatorDecimalPercent:separatorGroupCurrency:separatorGroupNumber:separatorGroupPercent:signNegative:signPositive:symbolCurrency:symbolNaN:symbolNegativeInfinity:symbolPercent:symbolPermille:symbolPositiveInfinity">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.culture.Culture" params="" file="/Users/francoponticelli/projects/thx.culture/src/thx/culture/Culture.hx">
		<invariant public="1" set="null" expr="new Culture(&quot;&quot;, DateFormatInfo.invariant, &quot;&quot;, false, &quot;iv&quot;, &quot;IVL&quot;, false, 127, &quot;Gregorian&quot;, &quot;Invariant Language&quot;, &quot;Invariant Language&quot;, &quot;Invariant Country&quot;, &quot;Invariant Country&quot;, NumberFormatInfo.invariant, &quot;,&quot;, &quot;IVL&quot;)" line="4" static="1">
			<c path="thx.culture.Culture"/>
			<meta><m n=":value"><e>new Culture("", DateFormatInfo.invariant, "", false, "iv", "IVL", false, 127, "Gregorian", "Invariant Language", "Invariant Language", "Invariant Country", "Invariant Country", NumberFormatInfo.invariant, ",", "IVL")</e></m></meta>
		</invariant>
		<fromObject public="1" get="inline" set="null" line="81" static="1"><f a="o">
	<d/>
	<c path="thx.culture.Culture"/>
</f></fromObject>
		<cultures static="1"><x path="Map">
	<c path="String"/>
	<c path="thx.culture.Culture"/>
</x></cultures>
		<list static="1"><c path="Array"><c path="thx.culture.Culture"/></c></list>
		<register public="1" set="method" line="112" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<t path="Null"><c path="thx.culture.Culture"/></t>
</f></register>
		<getByCode public="1" set="method" line="124" static="1"><f a="code">
	<c path="String"/>
	<t path="Null"><c path="thx.culture.Culture"/></t>
</f></getByCode>
		<getByIso2 public="1" set="method" line="126" static="1"><f a="iso2">
	<c path="String"/>
	<t path="Null"><c path="thx.culture.Culture"/></t>
</f></getByIso2>
		<getByIso3 public="1" set="method" line="128" static="1"><f a="iso3">
	<c path="String"/>
	<t path="Null"><c path="thx.culture.Culture"/></t>
</f></getByIso3>
		<iterator public="1" set="method" line="130" static="1"><f a=""><t path="Iterator"><c path="thx.culture.Culture"/></t></f></iterator>
		<getCodeKey get="inline" set="null" line="133" static="1"><f a="key">
	<c path="String"/>
	<c path="String"/>
</f></getCodeKey>
		<getIso2Key get="inline" set="null" line="135" static="1"><f a="key">
	<c path="String"/>
	<c path="String"/>
</f></getIso2Key>
		<getIso3Key get="inline" set="null" line="137" static="1"><f a="key">
	<c path="String"/>
	<c path="String"/>
</f></getIso3Key>
		<code public="1" set="null"><c path="String"/></code>
		<dateTime public="1" set="null"><c path="thx.culture.DateFormatInfo"/></dateTime>
		<ietf public="1" set="null"><c path="String"/></ietf>
		<isNeutral public="1" set="null"><x path="Bool"/></isNeutral>
		<iso2 public="1" set="null"><c path="String"/></iso2>
		<iso3 public="1" set="null"><c path="String"/></iso3>
		<isRightToLeft public="1" set="null"><x path="Bool"/></isRightToLeft>
		<lcid public="1" set="null"><x path="Int"/></lcid>
		<nameCalendar public="1" set="null"><c path="String"/></nameCalendar>
		<nameDisplayEnglish public="1" get="accessor" set="null"><c path="String"/></nameDisplayEnglish>
		<nameDisplayNative public="1" get="accessor" set="null"><c path="String"/></nameDisplayNative>
		<nameEnglish public="1" set="null"><c path="String"/></nameEnglish>
		<nameNative public="1" set="null"><c path="String"/></nameNative>
		<nameRegionEnglish public="1" set="null"><c path="String"/></nameRegionEnglish>
		<nameRegionNative public="1" set="null"><c path="String"/></nameRegionNative>
		<number public="1" set="null"><c path="thx.culture.NumberFormatInfo"/></number>
		<separatorList public="1" set="null"><c path="String"/></separatorList>
		<win3 public="1" set="null"><c path="String"/></win3>
		<toObject public="1" set="method" line="61"><f a=""><a>
	<win3><c path="String"/></win3>
	<separatorList><c path="String"/></separatorList>
	<number><t path="Null"><a>
	<symbolPositiveInfinity><c path="String"/></symbolPositiveInfinity>
	<symbolPermille><c path="String"/></symbolPermille>
	<symbolPercent><c path="String"/></symbolPercent>
	<symbolNegativeInfinity><c path="String"/></symbolNegativeInfinity>
	<symbolNaN><c path="String"/></symbolNaN>
	<symbolCurrency><c path="String"/></symbolCurrency>
	<signPositive><c path="String"/></signPositive>
	<signNegative><c path="String"/></signNegative>
	<separatorGroupPercent><c path="String"/></separatorGroupPercent>
	<separatorGroupNumber><c path="String"/></separatorGroupNumber>
	<separatorGroupCurrency><c path="String"/></separatorGroupCurrency>
	<separatorDecimalPercent><c path="String"/></separatorDecimalPercent>
	<separatorDecimalNumber><c path="String"/></separatorDecimalNumber>
	<separatorDecimalCurrency><c path="String"/></separatorDecimalCurrency>
	<patternPositivePercent><x path="Int"/></patternPositivePercent>
	<patternPositiveCurrency><x path="Int"/></patternPositiveCurrency>
	<patternNegativePercent><x path="Int"/></patternNegativePercent>
	<patternNegativeNumber><x path="Int"/></patternNegativeNumber>
	<patternNegativeCurrency><x path="Int"/></patternNegativeCurrency>
	<groupSizesPercent><c path="Array"><x path="Int"/></c></groupSizesPercent>
	<groupSizesNumber><c path="Array"><x path="Int"/></c></groupSizesNumber>
	<groupSizesCurrency><c path="Array"><x path="Int"/></c></groupSizesCurrency>
	<decimalDigitsPercent><x path="Int"/></decimalDigitsPercent>
	<decimalDigitsNumber><x path="Int"/></decimalDigitsNumber>
	<decimalDigitsCurrency><x path="Int"/></decimalDigitsCurrency>
</a></t></number>
	<nameRegionNative><c path="String"/></nameRegionNative>
	<nameRegionEnglish><c path="String"/></nameRegionEnglish>
	<nameNative><c path="String"/></nameNative>
	<nameEnglish><c path="String"/></nameEnglish>
	<nameCalendar><c path="String"/></nameCalendar>
	<lcid><x path="Int"/></lcid>
	<iso3><c path="String"/></iso3>
	<iso2><c path="String"/></iso2>
	<isRightToLeft><x path="Bool"/></isRightToLeft>
	<isNeutral><x path="Bool"/></isNeutral>
	<ietf><c path="String"/></ietf>
	<dateTime><t path="Null"><a>
	<separatorTime><c path="String"/></separatorTime>
	<separatorDate><c path="String"/></separatorDate>
	<patternYearMonth><c path="String"/></patternYearMonth>
	<patternUniversalSortable><c path="String"/></patternUniversalSortable>
	<patternTimeShort><c path="String"/></patternTimeShort>
	<patternTimeLong><c path="String"/></patternTimeLong>
	<patternRfc1123><c path="String"/></patternRfc1123>
	<patternMonthDay><c path="String"/></patternMonthDay>
	<patternDateTimeSortable><c path="String"/></patternDateTimeSortable>
	<patternDateTimeFull><c path="String"/></patternDateTimeFull>
	<patternDateShort><c path="String"/></patternDateShort>
	<patternDateLong><c path="String"/></patternDateLong>
	<nameMonthsAbbreviated><c path="Array"><c path="String"/></c></nameMonthsAbbreviated>
	<nameMonths><c path="Array"><c path="String"/></c></nameMonths>
	<nameMonthGenitivesAbbreviated><c path="Array"><c path="String"/></c></nameMonthGenitivesAbbreviated>
	<nameMonthGenitives><c path="Array"><c path="String"/></c></nameMonthGenitives>
	<nameDaysShortest><c path="Array"><c path="String"/></c></nameDaysShortest>
	<nameDaysAbbreviated><c path="Array"><c path="String"/></c></nameDaysAbbreviated>
	<nameDays><c path="Array"><c path="String"/></c></nameDays>
	<nameCalendarNative><t path="Null"><c path="String"/></t></nameCalendarNative>
	<nameCalendar><c path="String"/></nameCalendar>
	<firstDayOfWeekName><c path="String"/></firstDayOfWeekName>
	<firstDayOfWeekIndex><x path="Int"/></firstDayOfWeekIndex>
	<designatorPm><c path="String"/></designatorPm>
	<designatorAm><c path="String"/></designatorAm>
	<calendarWeekRuleName><c path="String"/></calendarWeekRuleName>
	<calendarWeekRuleIndex><x path="Int"/></calendarWeekRuleIndex>
</a></t></dateTime>
	<code><c path="String"/></code>
</a></f></toObject>
		<get_nameDisplayEnglish get="inline" set="null" line="101"><f a=""><c path="String"/></f></get_nameDisplayEnglish>
		<get_nameDisplayNative get="inline" set="null" line="104"><f a=""><c path="String"/></f></get_nameDisplayNative>
		<toString public="1" get="inline" set="null" line="107"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="25"><f a="code:dateTime:ietf:isNeutral:iso2:iso3:isRightToLeft:lcid:nameCalendar:nameEnglish:nameNative:nameRegionEnglish:nameRegionNative:number:separatorList:win3">
	<c path="String"/>
	<c path="thx.culture.DateFormatInfo"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.NumberFormatInfo"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="thx.culture.Pattern" params="" file="/Users/francoponticelli/projects/thx.culture/src/thx/culture/Pattern.hx">
		<currencyNegatives public="1" set="null" expr="[&quot;($n)&quot;, &quot;-$n&quot;, &quot;$-n&quot;, &quot;$n-&quot;, &quot;(n$)&quot;, &quot;-n$&quot;, &quot;n-$&quot;, &quot;n$-&quot;, &quot;-n $&quot;, &quot;-$ n&quot;, &quot;n $-&quot;, &quot;$ n-&quot;, &quot;$ -n&quot;, &quot;n- $&quot;, &quot;($ n)&quot;, &quot;(n $)&quot;]" line="4" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["($n)", "-$n", "$-n", "$n-", "(n$)", "-n$", "n-$", "n$-", "-n $", "-$ n", "n $-", "$ n-", "$ -n", "n- $", "($ n)", "(n $)"]</e></m></meta>
		</currencyNegatives>
		<currencyPositives public="1" set="null" expr="[&quot;$n&quot;, &quot;n$&quot;, &quot;$ n&quot;, &quot;n $&quot;]" line="5" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["$n", "n$", "$ n", "n $"]</e></m></meta>
		</currencyPositives>
		<numberNegatives public="1" set="null" expr="[&quot;(n)&quot;, &quot;-n&quot;, &quot;- n&quot;, &quot;n-&quot;, &quot;n -&quot;]" line="6" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["(n)", "-n", "- n", "n-", "n -"]</e></m></meta>
		</numberNegatives>
		<percentNegatives public="1" set="null" expr="[&quot;-n %&quot;, &quot;-n%&quot;, &quot;-%n&quot;, &quot;%-n&quot;, &quot;%n-&quot;, &quot;n-%&quot;, &quot;n%-&quot;, &quot;-%n&quot;, &quot;n %-&quot;, &quot;% n-&quot;, &quot;% -n&quot;, &quot;n- %&quot;]" line="7" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["-n %", "-n%", "-%n", "%-n", "%n-", "n-%", "n%-", "-%n", "n %-", "% n-", "% -n", "n- %"]</e></m></meta>
		</percentNegatives>
		<percentPositives public="1" set="null" expr="[&quot;n %&quot;, &quot;n%&quot;, &quot;%n&quot;, &quot;% n&quot;]" line="8" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["n %", "n%", "%n", "% n"]</e></m></meta>
		</percentPositives>
	</class>
	<class path="thx.error.AbstractMethod" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/error/AbstractMethod.hx">
		<extends path="thx.Error"/>
		<new public="1" set="method" line="19"><f a="?posInfo">
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>`AbstractMethod` extends `Error` and it is intended to be used inside those methods
that are considered abstract. Abstract methods are methods that needs to be implemented
in a sub-class.

The error message brings the class name/method name that is abstract.

```haxe
function abstractMethod() {
  throw new AbstractMethod();
}
```</haxe_doc>
	</class>
	<class path="thx.error.ErrorWrapper" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/error/ErrorWrapper.hx">
		<extends path="thx.Error"/>
		<innerError public="1"><d/></innerError>
		<new public="1" set="method" line="13"><f a="message:innerError:?stack:?pos">
	<c path="String"/>
	<d/>
	<c path="Array"><e path="haxe.StackItem"/></c>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An error that keeps a reference to an internal error.

The internal error is stored as Dynamic to keep its usage flexible.</haxe_doc>
	</class>
	<class path="thx.format.Format" params="" file="/Users/francoponticelli/projects/thx.format/src/thx/format/Format.hx">
		<defaultCulture public="1" get="accessor" set="accessor" static="1">
			<c path="thx.culture.Culture"/>
			<meta><m n=":isVar"/></meta>
		</defaultCulture>
		<get_defaultCulture set="method" line="11" static="1"><f a=""><c path="thx.culture.Culture"/></f></get_defaultCulture>
		<set_defaultCulture set="method" line="14" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<c path="thx.culture.Culture"/>
</f></set_defaultCulture>
		<f public="1" set="method" static="1">
			<f a="subject:pattern:?culture">
				<d/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<d/>
			</f>
			<haxe_doc>Applies the right format according to the type of subject.

```haxe
Date.now().f("D"); // returns the date in long format
12345.f("n", it);  // returns a number formatted using the provided culture
```</haxe_doc>
		</f>
	</class>
	<class path="thx.format.NumberFormat" params="" file="/Users/francoponticelli/projects/thx.format/src/thx/format/NumberFormat.hx">
		<binary public="1" set="method" line="18" static="1">
			<f a="f:?significantDigits:?culture" v=":1:">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ significantDigits : 1 }</e></m></meta>
			<haxe_doc>Binary format. The result is prefixed with leading `0` up to `significantDigits`. Default is one.</haxe_doc>
		</binary>
		<currency public="1" set="method" line="31" static="1">
			<f a="f:?precision:?symbol:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a currency value. By default the currency symbol is extracted from the applied culture but it can be optionally
provided using setting the `symbol` argument.</haxe_doc>
		</currency>
		<customFormat public="1" set="method" line="59" static="1">
			<f a="f:pattern:?culture">
				<x path="Float"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Custom format uses a pattern composed of the format options described below.

format    | description
--------- | ------------------------
`0`       | Zero placeholder is replaced with a corresponding digits if present, otherwise a `0` is printed.
`#`       | Digit placeholder is replaced with a corresponding digits if present or nothing.
`.`       | Localized decimal separator.
`,`       | Localized group separator. If added to the end of the pattern it multiplies the number by 1000 for every comma.
`%`       | Includes the percentage symbol and multiplies the number by 100.
`‰`       | Includes the permille symbol and multiplies the number by 1000.
`E0`, `E+0`, `E-0`, `e0`, `e+0`, `e-0` | Exponential notation.
`\`       | Escapes the following character.
`'...'`, `"..."` | Escape an entire sequence of characters.
`;`       | Section separator. There are three possible sections (positive, negative, zero). If two are specified zero numbers use the format from the first section.
`...`     | Anything else is left untouched and put in the output as it is.</haxe_doc>
		</customFormat>
		<decimal public="1" set="method" line="87" static="1">
			<f a="f:?significantDigits:?culture" v=":1:">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ significantDigits : 1 }</e></m></meta>
			<haxe_doc>Formats a decimal (integer) value.</haxe_doc>
		</decimal>
		<exponential public="1" set="method" line="100" static="1">
			<f a="f:?precision:?digits:?symbol:?culture" v=":6:3:&quot;e&quot;:">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ symbol : "e", digits : 3, precision : 6 }</e></m></meta>
			<haxe_doc>Formats a number using the exponential (scientific) format.</haxe_doc>
		</exponential>
		<fixed public="1" set="method" line="116" static="1">
			<f a="f:?precision:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a fixed point float number with an assigned precision.</haxe_doc>
		</fixed>
		<format public="1" set="method" line="153" static="1">
			<f a="f:pattern:?culture">
				<x path="Float"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number using the specified pattern.

A `printf` format is formatted using the rules described for `NumberFormat.printf`.

A multi character format uses the formatting rules described for `NumberFormat.customFormat`.

A single character format adopts the following options:

format     | description
---------- | ---------------------------------------
`C` or `c` | Currency format.
`D` or `d` | Decimal format.
`e`        | Exponential (scientific) format.
`E`        | Like `e` but with capitalized `E` symbol
`F` or `f` | Fixed decimal format (no thousand separators).
`g`        | General format (shortest between `e` and `f`).
`G`        | Like `g` but if format is exponential uses the upper case `E` symbol
`N` or `n` | Number format (uses thousand separators if required).
`P` or `p` | Percent format.
`R` or `r` | Roundtrip format.
`x`        | Hexadecimal format.
`X`        | Same as `x` but prefixed with `0X`.
`%`...     | Delegates to `printf`
...        | Delegates to `customFormat`</haxe_doc>
		</format>
		<general public="1" set="method" line="191" static="1">
			<f a="f:?significantDigits:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number using either the shortest result between `fixed` and `exponential`.</haxe_doc>
		</general>
		<hex public="1" set="method" line="200" static="1">
			<f a="f:?significantDigits:?culture" v=":1:">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ significantDigits : 1 }</e></m></meta>
			<haxe_doc>Formats a number to hexadecimal format.</haxe_doc>
		</hex>
		<integer public="1" set="method" line="212" static="1">
			<f a="f:?culture">
				<x path="Float"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats the integer part of a number.</haxe_doc>
		</integer>
		<number public="1" set="method" line="224" static="1">
			<f a="f:?precision:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number with group separators (eg: thousands separators).</haxe_doc>
		</number>
		<octal public="1" set="method" line="238" static="1">
			<f a="f:?significantDigits:?culture" v=":1:">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ significantDigits : 1 }</e></m></meta>
			<haxe_doc>Formats a number to octals.</haxe_doc>
		</octal>
		<percent public="1" set="method" line="250" static="1">
			<f a="f:?decimals:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number as a percent value. The output result is multiplied by 100. So `0.1` will result in `10%`.</haxe_doc>
		</percent>
		<permille public="1" set="method" line="262" static="1">
			<f a="f:?decimals:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number as a percent value. The output result is multiplied by 1000. So `0.1` will result in `100‰`.</haxe_doc>
		</permille>
		<printf public="1" set="method" line="325" static="1">
			<f a="f:pattern:?culture">
				<x path="Float"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a single number in a `String` using the `printf` conventions.

The `printf` format uses the following pattern:

```
%[flags][width][.precision]specifier
```

specifier   | Output
----------- | ---------------------------------------------------------
`b`         | an unsigned integer, in binary
`B`         | like %b, but using an upper-case "B" with the # flag
`c`         | Character.
`d`         | Signed decimal integer
`e`         | Scientific notation (mantissa/exponent) using e character
`E`         | Like %e, but using an upper-case "E"
`f`         | Decimal floating point
`g`         | Use the shorter of %e or %f.
`G`         | Like %g, but with an upper-case "E" (if applicable)
`i`         | Same as `d`
`o`         | Signed octal
`u`         | Unsigned decimal integer
`x`         | Unsigned hexadecimal integer
`X`         | Like %x, but using upper-case letters
`%`         | `%` Character

http://perldoc.perl.org/functions/sprintf.html

flags         | Description
------------- | ------------------------------------------------------------------------------------------------------
`-`           | Left-justify within the given field width; Right justification is the default (see width sub-specifier).
`+`           | Forces to preceed the result with a plus or minus sign (+ or -) even for positive numbers. By default, only negative numbers are preceded with a - sign..
` ` (space)   | If no sign is going to be written, a blank space is inserted before the value.
`#`           | Used with o, x or X specifiers the value is preceeded with 0, 0x or 0X respectively for values different than zero. If b or B prefixes the output with either.
`0`           | Left-pads the number with zeroes (0) instead of spaces, where padding is specified (see width sub-specifier).

width       | Description
----------- | ------------------------------------------------------------------------------------------------------
(number)    | Minimum number of characters to be printed. If the value to be printed is shorter than this number, the result is padded with blank spaces. The value is not truncated even if the result is larger.

.precision  | Description
----------- | ------------------------------------------------------------------------------------------------------
.number     | For integer specifiers (d, i, o, u, x, X): precision specifies the minimum number of digits to be written. If the value to be written is shorter than this number, the result is padded with leading zeros. The value is not truncated even if the result is longer. A precision of 0 means that no character is written for the value 0. For e, E and f specifiers: this is the number of digits to be printed after de decimal point. For g and G specifiers: This is the maximum number of significant digits to be printed. By default all characters are printed until the ending null character is encountered. For c type: it has no effect. When no precision is specified, the default is 1. If the period is specified without an explicit value for precision, 0 is assumed.

Differences with classic printf:

  * `length` parameter is not supported to set the type of the integer argument (eg. short or unsigned)
  * `*` width is not supported
  * `.*` precision is not supported
  * `%p` pointer address is not supported
  * `%n` is not supported
  * `%s` is not supported since this function is to format numeric values only</haxe_doc>
		</printf>
		<toBase public="1" set="method" line="407" static="1">
			<f a="value:base:?culture">
				<x path="Int"/>
				<x path="Int"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Transform an `Int` value to a `String` using the specified `base`. A negative sign can be provided optionally.</haxe_doc>
		</toBase>
		<unit public="1" set="method" line="432" static="1">
			<f a="f:decimals:unitSymbol:?culture">
				<x path="Float"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="thx.culture.Culture"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a number with a specified `unitSymbol` and a specified number of decimals.</haxe_doc>
		</unit>
		<BASE expr="&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;" line="444" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"0123456789abcdefghijklmnopqrstuvwxyz"</e></m></meta>
		</BASE>
		<countSymbols set="method" line="446" static="1"><f a="pattern:symbols">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
</f></countSymbols>
		<customFormatDecimalFraction set="method" line="465" static="1"><f a="d:pattern:nf">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.NumberFormatInfo"/>
	<c path="String"/>
</f></customFormatDecimalFraction>
		<customFormatF set="method" line="507" static="1"><f a="f:pattern:nf:isCurrency:isPercent">
	<x path="Float"/>
	<c path="String"/>
	<c path="thx.culture.NumberFormatInfo"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
</f></customFormatF>
		<customFormatInteger set="method" line="527" static="1"><f a="v:pattern:nf:isCurrency:isPercent">
	<c path="String"/>
	<c path="String"/>
	<c path="thx.culture.NumberFormatInfo"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
</f></customFormatInteger>
		<customIntegerAndFraction set="method" line="617" static="1"><f a="f:pattern:nf:isCurrency:isPercent">
	<x path="Float"/>
	<c path="String"/>
	<c path="thx.culture.NumberFormatInfo"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
</f></customIntegerAndFraction>
		<exponentialInfo set="method" line="636" static="1"><f a="f">
	<x path="Float"/>
	<a>
		<f><x path="Float"/></f>
		<e><t path="Null"><x path="Int"/></t></e>
	</a>
</f></exponentialInfo>
		<hasSymbols set="method" line="664" static="1"><f a="pattern:symbols">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasSymbols>
		<intPart set="method" line="682" static="1"><f a="s:groupSizes:groupSeparator">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
	<c path="String"/>
</f></intPart>
		<numberFormat set="method" line="705" static="1"><f a="culture">
	<c path="thx.culture.Culture"/>
	<c path="thx.culture.NumberFormatInfo"/>
</f></numberFormat>
		<pad set="method" line="708" static="1"><f a="s:len:round">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="String"/>
</f></pad>
		<paramOrNull set="method" line="721" static="1"><f a="param">
	<c path="String"/>
	<t path="Null"><x path="Int"/></t>
</f></paramOrNull>
		<splitOnDecimalSeparator set="method" line="724" static="1"><f a="f">
	<x path="Float"/>
	<c path="Array"><c path="String"/></c>
</f></splitOnDecimalSeparator>
		<splitPattern set="method" line="749" static="1"><f a="pattern:separator">
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></splitPattern>
		<value set="method" line="776" static="1"><f a="f:precision:groupSizes:groupSeparator:decimalSeparator">
	<x path="Float"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></value>
	</class>
	<enum path="thx.format._NumberFormat.CustomFormat" params="" file="/Users/francoponticelli/projects/thx.format/src/thx/format/NumberFormat.hx" private="1" module="thx.format.NumberFormat">
		<Literal a="s"><c path="String"/></Literal>
		<Hash a="first"><x path="Bool"/></Hash>
		<Zero a="first"><x path="Bool"/></Zero>
	</enum>
	<typedef path="thx.fp.Comparable" params="T" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/Comparable.hx"><a><compareTo set="method"><f a="that">
	<c path="thx.fp.Comparable.T"/>
	<x path="Int"/>
</f></compareTo></a></typedef>
	<typedef path="thx.fp.ComparableOrd" params="T" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/ComparableOrd.hx"><a><compareTo set="method"><f a="that">
	<c path="thx.fp.ComparableOrd.T"/>
	<x path="thx.Ordering"/>
</f></compareTo></a></typedef>
	<abstract path="thx.fp.Map" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/Map.hx">
		<from><icast><e path="thx.fp.MapImpl">
	<c path="thx.fp.Map.K"/>
	<c path="thx.fp.Map.V"/>
</e></icast></from>
		<this><e path="thx.fp.MapImpl">
	<c path="thx.fp.Map.K"/>
	<c path="thx.fp.Map.V"/>
</e></this>
		<to><icast><e path="thx.fp.MapImpl">
	<c path="thx.fp.Map.K"/>
	<c path="thx.fp.Map.V"/>
</e></icast></to>
		<impl><class path="thx.fp._Map.Map_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/Map.hx" private="1" module="thx.fp.Map">
	<empty public="1" params="K:V" get="inline" set="null" line="12" static="1"><f a=""><x path="thx.fp.Map">
	<c path="empty.K"/>
	<c path="empty.V"/>
</x></f></empty>
	<singleton public="1" params="K:V" get="inline" set="null" line="14" static="1"><f a="k:v">
	<c path="singleton.K"/>
	<c path="singleton.V"/>
	<x path="thx.fp.Map">
		<c path="singleton.K"/>
		<c path="singleton.V"/>
	</x>
</f></singleton>
	<bin public="1" params="K:V" get="inline" set="null" line="16" static="1"><f a="k:v:lhs:rhs">
	<c path="bin.K"/>
	<c path="bin.V"/>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
</f></bin>
	<fromNative public="1" params="K:V" set="method" line="19" static="1"><f a="map:comparator">
	<c path="haxe.IMap">
		<c path="fromNative.K"/>
		<c path="fromNative.V"/>
	</c>
	<x path="thx.Ord"><c path="fromNative.K"/></x>
	<x path="thx.fp.Map">
		<c path="fromNative.K"/>
		<c path="fromNative.V"/>
	</x>
</f></fromNative>
	<lookup public="1" set="method" line="26" static="1">
		<f a="this:key:comparator">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="thx.fp.Map.K"/>
			<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
			<e path="haxe.ds.Option"><c path="thx.fp.Map.V"/></e>
		</f>
		<meta><m n=":impl"/></meta>
	</lookup>
	<lookupTuple public="1" set="method" line="43" static="1">
		<f a="this:key:comparator">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="thx.fp.Map.K"/>
			<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
			<e path="haxe.ds.Option"><t path="thx.Tuple">
	<c path="thx.fp.Map.K"/>
	<c path="thx.fp.Map.V"/>
</t></e>
		</f>
		<meta><m n=":impl"/></meta>
	</lookupTuple>
	<delete public="1" set="method" line="58" static="1">
		<f a="this:key:comparator">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="thx.fp.Map.K"/>
			<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
			<x path="thx.fp.Map">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</delete>
	<insert public="1" set="method" line="69" static="1">
		<f a="this:kx:x:comparator">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="thx.fp.Map.K"/>
			<c path="thx.fp.Map.V"/>
			<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
			<x path="thx.fp.Map">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</insert>
	<foldLeft public="1" params="B" set="method" line="80" static="1">
		<f a="this:b:f">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="foldLeft.B"/>
			<f a=":">
				<c path="foldLeft.B"/>
				<c path="thx.fp.Map.V"/>
				<c path="foldLeft.B"/>
			</f>
			<c path="foldLeft.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</foldLeft>
	<map public="1" params="B" set="method" line="88" static="1">
		<f a="this:f">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<f a="">
				<c path="thx.fp.Map.V"/>
				<c path="map.B"/>
			</f>
			<x path="thx.fp.Map">
				<c path="thx.fp.Map.K"/>
				<c path="map.B"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<values public="1" set="method" line="93" static="1">
		<f a="this">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="Array"><c path="thx.fp.Map.V"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</values>
	<foldLeftKeys public="1" params="B" set="method" line="96" static="1">
		<f a="this:b:f">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="foldLeftKeys.B"/>
			<f a=":">
				<c path="foldLeftKeys.B"/>
				<c path="thx.fp.Map.K"/>
				<c path="foldLeftKeys.B"/>
			</f>
			<c path="foldLeftKeys.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</foldLeftKeys>
	<foldLeftAll public="1" params="B" set="method" line="104" static="1">
		<f a="this:b:f">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="foldLeftAll.B"/>
			<f a="::">
				<c path="foldLeftAll.B"/>
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
				<c path="foldLeftAll.B"/>
			</f>
			<c path="foldLeftAll.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</foldLeftAll>
	<foldLeftTuples public="1" params="B" set="method" line="112" static="1">
		<f a="this:b:f">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<c path="foldLeftTuples.B"/>
			<f a=":">
				<c path="foldLeftTuples.B"/>
				<t path="thx.Tuple">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</t>
				<c path="foldLeftTuples.B"/>
			</f>
			<c path="foldLeftTuples.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</foldLeftTuples>
	<size public="1" set="method" line="120" static="1">
		<f a="this">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</size>
	<delta get="inline" set="null" expr="5" line="127" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>5</e></m></meta>
	</delta>
	<ratio get="inline" set="null" expr="2" line="128" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</ratio>
	<balance params="K:V" set="method" line="129" static="1"><f a="k:x:lhs:rhs">
	<c path="balance.K"/>
	<c path="balance.V"/>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
</f></balance>
	<glue set="method" line="143" static="1">
		<f a="this:that">
			<e path="thx.fp.MapImpl">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</e>
			<x path="thx.fp.Map">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</x>
			<x path="thx.fp.Map">
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</glue>
	<deleteFindMin params="K:V" set="method" line="154" static="1"><f a="map">
	<x path="thx.fp.Map">
		<c path="deleteFindMin.K"/>
		<c path="deleteFindMin.V"/>
	</x>
	<a>
		<x set="null"><c path="deleteFindMin.V"/></x>
		<t set="null"><x path="thx.fp.Map">
	<c path="deleteFindMin.K"/>
	<c path="deleteFindMin.V"/>
</x></t>
		<k set="null"><c path="deleteFindMin.K"/></k>
	</a>
</f></deleteFindMin>
	<deleteFindMax params="K:V" set="method" line="164" static="1"><f a="map">
	<x path="thx.fp.Map">
		<c path="deleteFindMax.K"/>
		<c path="deleteFindMax.V"/>
	</x>
	<a>
		<x set="null"><c path="deleteFindMax.V"/></x>
		<t set="null"><x path="thx.fp.Map">
	<c path="deleteFindMax.K"/>
	<c path="deleteFindMax.V"/>
</x></t>
		<k set="null"><c path="deleteFindMax.K"/></k>
	</a>
</f></deleteFindMax>
	<rotateLeft params="K:V" set="method" line="174" static="1"><f a="k:x:lhs:rhs">
	<c path="rotateLeft.K"/>
	<c path="rotateLeft.V"/>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
</f></rotateLeft>
	<rotateRight params="K:V" set="method" line="182" static="1"><f a="k:x:lhs:rhs">
	<c path="rotateRight.K"/>
	<c path="rotateRight.V"/>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
</f></rotateRight>
	<singleLeft params="K:V" set="method" line="190" static="1"><f a="k1:x1:t1:rhs">
	<c path="singleLeft.K"/>
	<c path="singleLeft.V"/>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
</f></singleLeft>
	<singleRight params="K:V" set="method" line="196" static="1"><f a="k1:x1:lhs:t3">
	<c path="singleRight.K"/>
	<c path="singleRight.V"/>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
</f></singleRight>
	<doubleLeft params="K:V" set="method" line="202" static="1"><f a="k1:x1:t1:rhs">
	<c path="doubleLeft.K"/>
	<c path="doubleLeft.V"/>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
</f></doubleLeft>
	<doubleRight params="K:V" set="method" line="209" static="1"><f a="k1:x1:lhs:t4">
	<c path="doubleRight.K"/>
	<c path="doubleRight.V"/>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
</f></doubleRight>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="thx.fp._Map.Map_Impl_" params="" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/Map.hx" private="1" module="thx.fp.Map">
		<empty public="1" params="K:V" get="inline" set="null" line="12" static="1"><f a=""><x path="thx.fp.Map">
	<c path="empty.K"/>
	<c path="empty.V"/>
</x></f></empty>
		<singleton public="1" params="K:V" get="inline" set="null" line="14" static="1"><f a="k:v">
	<c path="singleton.K"/>
	<c path="singleton.V"/>
	<x path="thx.fp.Map">
		<c path="singleton.K"/>
		<c path="singleton.V"/>
	</x>
</f></singleton>
		<bin public="1" params="K:V" get="inline" set="null" line="16" static="1"><f a="k:v:lhs:rhs">
	<c path="bin.K"/>
	<c path="bin.V"/>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="bin.K"/>
		<c path="bin.V"/>
	</x>
</f></bin>
		<fromNative public="1" params="K:V" set="method" line="19" static="1"><f a="map:comparator">
	<c path="haxe.IMap">
		<c path="fromNative.K"/>
		<c path="fromNative.V"/>
	</c>
	<x path="thx.Ord"><c path="fromNative.K"/></x>
	<x path="thx.fp.Map">
		<c path="fromNative.K"/>
		<c path="fromNative.V"/>
	</x>
</f></fromNative>
		<lookup public="1" set="method" line="26" static="1">
			<f a="this:key:comparator">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="thx.fp.Map.K"/>
				<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
				<e path="haxe.ds.Option"><c path="thx.fp.Map.V"/></e>
			</f>
			<meta><m n=":impl"/></meta>
		</lookup>
		<lookupTuple public="1" set="method" line="43" static="1">
			<f a="this:key:comparator">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="thx.fp.Map.K"/>
				<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
				<e path="haxe.ds.Option"><t path="thx.Tuple">
	<c path="thx.fp.Map.K"/>
	<c path="thx.fp.Map.V"/>
</t></e>
			</f>
			<meta><m n=":impl"/></meta>
		</lookupTuple>
		<delete public="1" set="method" line="58" static="1">
			<f a="this:key:comparator">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="thx.fp.Map.K"/>
				<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
				<x path="thx.fp.Map">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</delete>
		<insert public="1" set="method" line="69" static="1">
			<f a="this:kx:x:comparator">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="thx.fp.Map.K"/>
				<c path="thx.fp.Map.V"/>
				<x path="thx.Ord"><c path="thx.fp.Map.K"/></x>
				<x path="thx.fp.Map">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</insert>
		<foldLeft public="1" params="B" set="method" line="80" static="1">
			<f a="this:b:f">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="foldLeft.B"/>
				<f a=":">
					<c path="foldLeft.B"/>
					<c path="thx.fp.Map.V"/>
					<c path="foldLeft.B"/>
				</f>
				<c path="foldLeft.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</foldLeft>
		<map public="1" params="B" set="method" line="88" static="1">
			<f a="this:f">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<f a="">
					<c path="thx.fp.Map.V"/>
					<c path="map.B"/>
				</f>
				<x path="thx.fp.Map">
					<c path="thx.fp.Map.K"/>
					<c path="map.B"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<values public="1" set="method" line="93" static="1">
			<f a="this">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="Array"><c path="thx.fp.Map.V"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</values>
		<foldLeftKeys public="1" params="B" set="method" line="96" static="1">
			<f a="this:b:f">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="foldLeftKeys.B"/>
				<f a=":">
					<c path="foldLeftKeys.B"/>
					<c path="thx.fp.Map.K"/>
					<c path="foldLeftKeys.B"/>
				</f>
				<c path="foldLeftKeys.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</foldLeftKeys>
		<foldLeftAll public="1" params="B" set="method" line="104" static="1">
			<f a="this:b:f">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="foldLeftAll.B"/>
				<f a="::">
					<c path="foldLeftAll.B"/>
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
					<c path="foldLeftAll.B"/>
				</f>
				<c path="foldLeftAll.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</foldLeftAll>
		<foldLeftTuples public="1" params="B" set="method" line="112" static="1">
			<f a="this:b:f">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<c path="foldLeftTuples.B"/>
				<f a=":">
					<c path="foldLeftTuples.B"/>
					<t path="thx.Tuple">
						<c path="thx.fp.Map.K"/>
						<c path="thx.fp.Map.V"/>
					</t>
					<c path="foldLeftTuples.B"/>
				</f>
				<c path="foldLeftTuples.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</foldLeftTuples>
		<size public="1" set="method" line="120" static="1">
			<f a="this">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</size>
		<delta get="inline" set="null" expr="5" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</delta>
		<ratio get="inline" set="null" expr="2" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</ratio>
		<balance params="K:V" set="method" line="129" static="1"><f a="k:x:lhs:rhs">
	<c path="balance.K"/>
	<c path="balance.V"/>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="balance.K"/>
		<c path="balance.V"/>
	</x>
</f></balance>
		<glue set="method" line="143" static="1">
			<f a="this:that">
				<e path="thx.fp.MapImpl">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</e>
				<x path="thx.fp.Map">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</x>
				<x path="thx.fp.Map">
					<c path="thx.fp.Map.K"/>
					<c path="thx.fp.Map.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</glue>
		<deleteFindMin params="K:V" set="method" line="154" static="1"><f a="map">
	<x path="thx.fp.Map">
		<c path="deleteFindMin.K"/>
		<c path="deleteFindMin.V"/>
	</x>
	<a>
		<x set="null"><c path="deleteFindMin.V"/></x>
		<t set="null"><x path="thx.fp.Map">
	<c path="deleteFindMin.K"/>
	<c path="deleteFindMin.V"/>
</x></t>
		<k set="null"><c path="deleteFindMin.K"/></k>
	</a>
</f></deleteFindMin>
		<deleteFindMax params="K:V" set="method" line="164" static="1"><f a="map">
	<x path="thx.fp.Map">
		<c path="deleteFindMax.K"/>
		<c path="deleteFindMax.V"/>
	</x>
	<a>
		<x set="null"><c path="deleteFindMax.V"/></x>
		<t set="null"><x path="thx.fp.Map">
	<c path="deleteFindMax.K"/>
	<c path="deleteFindMax.V"/>
</x></t>
		<k set="null"><c path="deleteFindMax.K"/></k>
	</a>
</f></deleteFindMax>
		<rotateLeft params="K:V" set="method" line="174" static="1"><f a="k:x:lhs:rhs">
	<c path="rotateLeft.K"/>
	<c path="rotateLeft.V"/>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</x>
</f></rotateLeft>
		<rotateRight params="K:V" set="method" line="182" static="1"><f a="k:x:lhs:rhs">
	<c path="rotateRight.K"/>
	<c path="rotateRight.V"/>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</x>
</f></rotateRight>
		<singleLeft params="K:V" set="method" line="190" static="1"><f a="k1:x1:t1:rhs">
	<c path="singleLeft.K"/>
	<c path="singleLeft.V"/>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleLeft.K"/>
		<c path="singleLeft.V"/>
	</x>
</f></singleLeft>
		<singleRight params="K:V" set="method" line="196" static="1"><f a="k1:x1:lhs:t3">
	<c path="singleRight.K"/>
	<c path="singleRight.V"/>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="singleRight.K"/>
		<c path="singleRight.V"/>
	</x>
</f></singleRight>
		<doubleLeft params="K:V" set="method" line="202" static="1"><f a="k1:x1:t1:rhs">
	<c path="doubleLeft.K"/>
	<c path="doubleLeft.V"/>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleLeft.K"/>
		<c path="doubleLeft.V"/>
	</x>
</f></doubleLeft>
		<doubleRight params="K:V" set="method" line="209" static="1"><f a="k1:x1:lhs:t4">
	<c path="doubleRight.K"/>
	<c path="doubleRight.V"/>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
	<x path="thx.fp.Map">
		<c path="doubleRight.K"/>
		<c path="doubleRight.V"/>
	</x>
</f></doubleRight>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="thx.fp.MapImpl" params="K:V" file="/Users/francoponticelli/projects/thx.core/src/thx/fp/Map.hx" module="thx.fp.Map">
		<Tip/>
		<Bin a="size:key:value:lhs:rhs">
			<x path="Int"/>
			<c path="thx.fp.MapImpl.K"/>
			<c path="thx.fp.MapImpl.V"/>
			<x path="thx.fp.Map">
				<c path="thx.fp.MapImpl.K"/>
				<c path="thx.fp.MapImpl.V"/>
			</x>
			<x path="thx.fp.Map">
				<c path="thx.fp.MapImpl.K"/>
				<c path="thx.fp.MapImpl.V"/>
			</x>
		</Bin>
	</enum>
</haxe>